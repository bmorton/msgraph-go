/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// WorkbooksWorkbookApiService WorkbooksWorkbookApi service
type WorkbooksWorkbookApiService service

type ApiWorkbooksDeleteWorkbookRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksDeleteWorkbookRequest) IfMatch(ifMatch string) ApiWorkbooksDeleteWorkbookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksDeleteWorkbookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksDeleteWorkbookExecute(r)
}

/*
WorkbooksDeleteWorkbook Delete navigation property workbook for workbooks

For files that are Excel spreadsheets, accesses the workbook API to work with the spreadsheet's contents. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDeleteWorkbookRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksDeleteWorkbook(ctx _context.Context, driveItemId string) ApiWorkbooksDeleteWorkbookRequest {
	return ApiWorkbooksDeleteWorkbookRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksDeleteWorkbookExecute(r ApiWorkbooksDeleteWorkbookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksDeleteWorkbook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksGetWorkbookRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	expand *[]string
}

// Expand related entities
func (r ApiWorkbooksGetWorkbookRequest) Expand(expand []string) ApiWorkbooksGetWorkbookRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksGetWorkbookRequest) Execute() (MicrosoftGraphWorkbook, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksGetWorkbookExecute(r)
}

/*
WorkbooksGetWorkbook Get workbook from workbooks

For files that are Excel spreadsheets, accesses the workbook API to work with the spreadsheet's contents. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksGetWorkbookRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksGetWorkbook(ctx _context.Context, driveItemId string) ApiWorkbooksGetWorkbookRequest {
	return ApiWorkbooksGetWorkbookRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbook
func (a *WorkbooksWorkbookApiService) WorkbooksGetWorkbookExecute(r ApiWorkbooksGetWorkbookRequest) (MicrosoftGraphWorkbook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksGetWorkbook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksUpdateWorkbookRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	microsoftGraphWorkbook *MicrosoftGraphWorkbook
}

// New navigation property values
func (r ApiWorkbooksUpdateWorkbookRequest) MicrosoftGraphWorkbook(microsoftGraphWorkbook MicrosoftGraphWorkbook) ApiWorkbooksUpdateWorkbookRequest {
	r.microsoftGraphWorkbook = &microsoftGraphWorkbook
	return r
}

func (r ApiWorkbooksUpdateWorkbookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksUpdateWorkbookExecute(r)
}

/*
WorkbooksUpdateWorkbook Update the navigation property workbook in workbooks

For files that are Excel spreadsheets, accesses the workbook API to work with the spreadsheet's contents. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksUpdateWorkbookRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksUpdateWorkbook(ctx _context.Context, driveItemId string) ApiWorkbooksUpdateWorkbookRequest {
	return ApiWorkbooksUpdateWorkbookRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksUpdateWorkbookExecute(r ApiWorkbooksUpdateWorkbookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksUpdateWorkbook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbook == nil {
		return nil, reportError("microsoftGraphWorkbook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookCommentsCreateRepliesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookCommentId string
	microsoftGraphWorkbookCommentReply *MicrosoftGraphWorkbookCommentReply
}

// New navigation property
func (r ApiWorkbooksWorkbookCommentsCreateRepliesRequest) MicrosoftGraphWorkbookCommentReply(microsoftGraphWorkbookCommentReply MicrosoftGraphWorkbookCommentReply) ApiWorkbooksWorkbookCommentsCreateRepliesRequest {
	r.microsoftGraphWorkbookCommentReply = &microsoftGraphWorkbookCommentReply
	return r
}

func (r ApiWorkbooksWorkbookCommentsCreateRepliesRequest) Execute() (MicrosoftGraphWorkbookCommentReply, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookCommentsCreateRepliesExecute(r)
}

/*
WorkbooksWorkbookCommentsCreateReplies Create new navigation property to replies for workbooks

Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookCommentId key: id of workbookComment
 @return ApiWorkbooksWorkbookCommentsCreateRepliesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCommentsCreateReplies(ctx _context.Context, driveItemId string, workbookCommentId string) ApiWorkbooksWorkbookCommentsCreateRepliesRequest {
	return ApiWorkbooksWorkbookCommentsCreateRepliesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookCommentId: workbookCommentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookCommentReply
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCommentsCreateRepliesExecute(r ApiWorkbooksWorkbookCommentsCreateRepliesRequest) (MicrosoftGraphWorkbookCommentReply, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookCommentReply
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookCommentsCreateReplies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/comments/{workbookComment-id}/replies"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookComment-id"+"}", _neturl.PathEscape(parameterToString(r.workbookCommentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookCommentReply == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookCommentReply is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookCommentReply
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookCommentsDeleteRepliesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookCommentId string
	workbookCommentReplyId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookCommentsDeleteRepliesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookCommentsDeleteRepliesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookCommentsDeleteRepliesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookCommentsDeleteRepliesExecute(r)
}

/*
WorkbooksWorkbookCommentsDeleteReplies Delete navigation property replies for workbooks

Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookCommentId key: id of workbookComment
 @param workbookCommentReplyId key: id of workbookCommentReply
 @return ApiWorkbooksWorkbookCommentsDeleteRepliesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCommentsDeleteReplies(ctx _context.Context, driveItemId string, workbookCommentId string, workbookCommentReplyId string) ApiWorkbooksWorkbookCommentsDeleteRepliesRequest {
	return ApiWorkbooksWorkbookCommentsDeleteRepliesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookCommentId: workbookCommentId,
		workbookCommentReplyId: workbookCommentReplyId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCommentsDeleteRepliesExecute(r ApiWorkbooksWorkbookCommentsDeleteRepliesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookCommentsDeleteReplies")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/comments/{workbookComment-id}/replies/{workbookCommentReply-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookComment-id"+"}", _neturl.PathEscape(parameterToString(r.workbookCommentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookCommentReply-id"+"}", _neturl.PathEscape(parameterToString(r.workbookCommentReplyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookCommentsGetRepliesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookCommentId string
	workbookCommentReplyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookCommentsGetRepliesRequest) Select_(select_ []string) ApiWorkbooksWorkbookCommentsGetRepliesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookCommentsGetRepliesRequest) Expand(expand []string) ApiWorkbooksWorkbookCommentsGetRepliesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookCommentsGetRepliesRequest) Execute() (MicrosoftGraphWorkbookCommentReply, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookCommentsGetRepliesExecute(r)
}

/*
WorkbooksWorkbookCommentsGetReplies Get replies from workbooks

Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookCommentId key: id of workbookComment
 @param workbookCommentReplyId key: id of workbookCommentReply
 @return ApiWorkbooksWorkbookCommentsGetRepliesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCommentsGetReplies(ctx _context.Context, driveItemId string, workbookCommentId string, workbookCommentReplyId string) ApiWorkbooksWorkbookCommentsGetRepliesRequest {
	return ApiWorkbooksWorkbookCommentsGetRepliesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookCommentId: workbookCommentId,
		workbookCommentReplyId: workbookCommentReplyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookCommentReply
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCommentsGetRepliesExecute(r ApiWorkbooksWorkbookCommentsGetRepliesRequest) (MicrosoftGraphWorkbookCommentReply, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookCommentReply
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookCommentsGetReplies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/comments/{workbookComment-id}/replies/{workbookCommentReply-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookComment-id"+"}", _neturl.PathEscape(parameterToString(r.workbookCommentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookCommentReply-id"+"}", _neturl.PathEscape(parameterToString(r.workbookCommentReplyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookCommentsListRepliesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookCommentId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookCommentsListRepliesRequest) Top(top int32) ApiWorkbooksWorkbookCommentsListRepliesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookCommentsListRepliesRequest) Skip(skip int32) ApiWorkbooksWorkbookCommentsListRepliesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookCommentsListRepliesRequest) Search(search string) ApiWorkbooksWorkbookCommentsListRepliesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookCommentsListRepliesRequest) Filter(filter string) ApiWorkbooksWorkbookCommentsListRepliesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookCommentsListRepliesRequest) Count(count bool) ApiWorkbooksWorkbookCommentsListRepliesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookCommentsListRepliesRequest) Orderby(orderby []string) ApiWorkbooksWorkbookCommentsListRepliesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookCommentsListRepliesRequest) Select_(select_ []string) ApiWorkbooksWorkbookCommentsListRepliesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookCommentsListRepliesRequest) Expand(expand []string) ApiWorkbooksWorkbookCommentsListRepliesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookCommentsListRepliesRequest) Execute() (CollectionOfWorkbookCommentReply, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookCommentsListRepliesExecute(r)
}

/*
WorkbooksWorkbookCommentsListReplies Get replies from workbooks

Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookCommentId key: id of workbookComment
 @return ApiWorkbooksWorkbookCommentsListRepliesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCommentsListReplies(ctx _context.Context, driveItemId string, workbookCommentId string) ApiWorkbooksWorkbookCommentsListRepliesRequest {
	return ApiWorkbooksWorkbookCommentsListRepliesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookCommentId: workbookCommentId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookCommentReply
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCommentsListRepliesExecute(r ApiWorkbooksWorkbookCommentsListRepliesRequest) (CollectionOfWorkbookCommentReply, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookCommentReply
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookCommentsListReplies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/comments/{workbookComment-id}/replies"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookComment-id"+"}", _neturl.PathEscape(parameterToString(r.workbookCommentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookCommentsUpdateRepliesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookCommentId string
	workbookCommentReplyId string
	microsoftGraphWorkbookCommentReply *MicrosoftGraphWorkbookCommentReply
}

// New navigation property values
func (r ApiWorkbooksWorkbookCommentsUpdateRepliesRequest) MicrosoftGraphWorkbookCommentReply(microsoftGraphWorkbookCommentReply MicrosoftGraphWorkbookCommentReply) ApiWorkbooksWorkbookCommentsUpdateRepliesRequest {
	r.microsoftGraphWorkbookCommentReply = &microsoftGraphWorkbookCommentReply
	return r
}

func (r ApiWorkbooksWorkbookCommentsUpdateRepliesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookCommentsUpdateRepliesExecute(r)
}

/*
WorkbooksWorkbookCommentsUpdateReplies Update the navigation property replies in workbooks

Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookCommentId key: id of workbookComment
 @param workbookCommentReplyId key: id of workbookCommentReply
 @return ApiWorkbooksWorkbookCommentsUpdateRepliesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCommentsUpdateReplies(ctx _context.Context, driveItemId string, workbookCommentId string, workbookCommentReplyId string) ApiWorkbooksWorkbookCommentsUpdateRepliesRequest {
	return ApiWorkbooksWorkbookCommentsUpdateRepliesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookCommentId: workbookCommentId,
		workbookCommentReplyId: workbookCommentReplyId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCommentsUpdateRepliesExecute(r ApiWorkbooksWorkbookCommentsUpdateRepliesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookCommentsUpdateReplies")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/comments/{workbookComment-id}/replies/{workbookCommentReply-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookComment-id"+"}", _neturl.PathEscape(parameterToString(r.workbookCommentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookCommentReply-id"+"}", _neturl.PathEscape(parameterToString(r.workbookCommentReplyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookCommentReply == nil {
		return nil, reportError("microsoftGraphWorkbookCommentReply is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookCommentReply
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookCreateCommentsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	microsoftGraphWorkbookComment *MicrosoftGraphWorkbookComment
}

// New navigation property
func (r ApiWorkbooksWorkbookCreateCommentsRequest) MicrosoftGraphWorkbookComment(microsoftGraphWorkbookComment MicrosoftGraphWorkbookComment) ApiWorkbooksWorkbookCreateCommentsRequest {
	r.microsoftGraphWorkbookComment = &microsoftGraphWorkbookComment
	return r
}

func (r ApiWorkbooksWorkbookCreateCommentsRequest) Execute() (MicrosoftGraphWorkbookComment, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookCreateCommentsExecute(r)
}

/*
WorkbooksWorkbookCreateComments Create new navigation property to comments for workbooks

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookCreateCommentsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCreateComments(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookCreateCommentsRequest {
	return ApiWorkbooksWorkbookCreateCommentsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookComment
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCreateCommentsExecute(r ApiWorkbooksWorkbookCreateCommentsRequest) (MicrosoftGraphWorkbookComment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookComment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookCreateComments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/comments"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookComment == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookComment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookComment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookCreateNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	microsoftGraphWorkbookNamedItem *MicrosoftGraphWorkbookNamedItem
}

// New navigation property
func (r ApiWorkbooksWorkbookCreateNamesRequest) MicrosoftGraphWorkbookNamedItem(microsoftGraphWorkbookNamedItem MicrosoftGraphWorkbookNamedItem) ApiWorkbooksWorkbookCreateNamesRequest {
	r.microsoftGraphWorkbookNamedItem = &microsoftGraphWorkbookNamedItem
	return r
}

func (r ApiWorkbooksWorkbookCreateNamesRequest) Execute() (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookCreateNamesExecute(r)
}

/*
WorkbooksWorkbookCreateNames Create new navigation property to names for workbooks

Represents a collection of workbooks scoped named items (named ranges and constants). Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookCreateNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCreateNames(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookCreateNamesRequest {
	return ApiWorkbooksWorkbookCreateNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookNamedItem
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCreateNamesExecute(r ApiWorkbooksWorkbookCreateNamesRequest) (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookCreateNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookNamedItem == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookNamedItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookNamedItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookCreateOperationsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	microsoftGraphWorkbookOperation *MicrosoftGraphWorkbookOperation
}

// New navigation property
func (r ApiWorkbooksWorkbookCreateOperationsRequest) MicrosoftGraphWorkbookOperation(microsoftGraphWorkbookOperation MicrosoftGraphWorkbookOperation) ApiWorkbooksWorkbookCreateOperationsRequest {
	r.microsoftGraphWorkbookOperation = &microsoftGraphWorkbookOperation
	return r
}

func (r ApiWorkbooksWorkbookCreateOperationsRequest) Execute() (MicrosoftGraphWorkbookOperation, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookCreateOperationsExecute(r)
}

/*
WorkbooksWorkbookCreateOperations Create new navigation property to operations for workbooks

The status of workbook operations. Getting an operation collection is not supported, but you can get the status of a long-running operation if the Location header is returned in the response. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookCreateOperationsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCreateOperations(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookCreateOperationsRequest {
	return ApiWorkbooksWorkbookCreateOperationsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookOperation
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCreateOperationsExecute(r ApiWorkbooksWorkbookCreateOperationsRequest) (MicrosoftGraphWorkbookOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookCreateOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/operations"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookOperation == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookCreateTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	microsoftGraphWorkbookTable *MicrosoftGraphWorkbookTable
}

// New navigation property
func (r ApiWorkbooksWorkbookCreateTablesRequest) MicrosoftGraphWorkbookTable(microsoftGraphWorkbookTable MicrosoftGraphWorkbookTable) ApiWorkbooksWorkbookCreateTablesRequest {
	r.microsoftGraphWorkbookTable = &microsoftGraphWorkbookTable
	return r
}

func (r ApiWorkbooksWorkbookCreateTablesRequest) Execute() (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookCreateTablesExecute(r)
}

/*
WorkbooksWorkbookCreateTables Create new navigation property to tables for workbooks

Represents a collection of tables associated with the workbook. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookCreateTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCreateTables(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookCreateTablesRequest {
	return ApiWorkbooksWorkbookCreateTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCreateTablesExecute(r ApiWorkbooksWorkbookCreateTablesRequest) (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookCreateTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTable == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookTable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookCreateWorksheetsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	microsoftGraphWorkbookWorksheet *MicrosoftGraphWorkbookWorksheet
}

// New navigation property
func (r ApiWorkbooksWorkbookCreateWorksheetsRequest) MicrosoftGraphWorkbookWorksheet(microsoftGraphWorkbookWorksheet MicrosoftGraphWorkbookWorksheet) ApiWorkbooksWorkbookCreateWorksheetsRequest {
	r.microsoftGraphWorkbookWorksheet = &microsoftGraphWorkbookWorksheet
	return r
}

func (r ApiWorkbooksWorkbookCreateWorksheetsRequest) Execute() (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookCreateWorksheetsExecute(r)
}

/*
WorkbooksWorkbookCreateWorksheets Create new navigation property to worksheets for workbooks

Represents a collection of worksheets associated with the workbook. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookCreateWorksheetsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCreateWorksheets(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookCreateWorksheetsRequest {
	return ApiWorkbooksWorkbookCreateWorksheetsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheet
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookCreateWorksheetsExecute(r ApiWorkbooksWorkbookCreateWorksheetsRequest) (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookCreateWorksheets")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheet == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookWorksheet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookDeleteApplicationRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookDeleteApplicationRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookDeleteApplicationRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookDeleteApplicationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookDeleteApplicationExecute(r)
}

/*
WorkbooksWorkbookDeleteApplication Delete navigation property application for workbooks

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookDeleteApplicationRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookDeleteApplication(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookDeleteApplicationRequest {
	return ApiWorkbooksWorkbookDeleteApplicationRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookDeleteApplicationExecute(r ApiWorkbooksWorkbookDeleteApplicationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookDeleteApplication")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/application"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookDeleteCommentsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookCommentId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookDeleteCommentsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookDeleteCommentsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookDeleteCommentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookDeleteCommentsExecute(r)
}

/*
WorkbooksWorkbookDeleteComments Delete navigation property comments for workbooks

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookCommentId key: id of workbookComment
 @return ApiWorkbooksWorkbookDeleteCommentsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookDeleteComments(ctx _context.Context, driveItemId string, workbookCommentId string) ApiWorkbooksWorkbookDeleteCommentsRequest {
	return ApiWorkbooksWorkbookDeleteCommentsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookCommentId: workbookCommentId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookDeleteCommentsExecute(r ApiWorkbooksWorkbookDeleteCommentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookDeleteComments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/comments/{workbookComment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookComment-id"+"}", _neturl.PathEscape(parameterToString(r.workbookCommentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookDeleteFunctionsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookDeleteFunctionsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookDeleteFunctionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookDeleteFunctionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookDeleteFunctionsExecute(r)
}

/*
WorkbooksWorkbookDeleteFunctions Delete navigation property functions for workbooks

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookDeleteFunctionsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookDeleteFunctions(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookDeleteFunctionsRequest {
	return ApiWorkbooksWorkbookDeleteFunctionsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookDeleteFunctionsExecute(r ApiWorkbooksWorkbookDeleteFunctionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookDeleteFunctions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookDeleteNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookDeleteNamesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookDeleteNamesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookDeleteNamesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookDeleteNamesExecute(r)
}

/*
WorkbooksWorkbookDeleteNames Delete navigation property names for workbooks

Represents a collection of workbooks scoped named items (named ranges and constants). Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookDeleteNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookDeleteNames(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookDeleteNamesRequest {
	return ApiWorkbooksWorkbookDeleteNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookDeleteNamesExecute(r ApiWorkbooksWorkbookDeleteNamesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookDeleteNames")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookDeleteOperationsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookOperationId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookDeleteOperationsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookDeleteOperationsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookDeleteOperationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookDeleteOperationsExecute(r)
}

/*
WorkbooksWorkbookDeleteOperations Delete navigation property operations for workbooks

The status of workbook operations. Getting an operation collection is not supported, but you can get the status of a long-running operation if the Location header is returned in the response. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookOperationId key: id of workbookOperation
 @return ApiWorkbooksWorkbookDeleteOperationsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookDeleteOperations(ctx _context.Context, driveItemId string, workbookOperationId string) ApiWorkbooksWorkbookDeleteOperationsRequest {
	return ApiWorkbooksWorkbookDeleteOperationsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookOperationId: workbookOperationId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookDeleteOperationsExecute(r ApiWorkbooksWorkbookDeleteOperationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookDeleteOperations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/operations/{workbookOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookOperation-id"+"}", _neturl.PathEscape(parameterToString(r.workbookOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookDeleteTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookDeleteTablesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookDeleteTablesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookDeleteTablesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookDeleteTablesExecute(r)
}

/*
WorkbooksWorkbookDeleteTables Delete navigation property tables for workbooks

Represents a collection of tables associated with the workbook. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookDeleteTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookDeleteTables(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookDeleteTablesRequest {
	return ApiWorkbooksWorkbookDeleteTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookDeleteTablesExecute(r ApiWorkbooksWorkbookDeleteTablesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookDeleteTables")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookDeleteWorksheetsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookDeleteWorksheetsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookDeleteWorksheetsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookDeleteWorksheetsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookDeleteWorksheetsExecute(r)
}

/*
WorkbooksWorkbookDeleteWorksheets Delete navigation property worksheets for workbooks

Represents a collection of worksheets associated with the workbook. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksWorkbookDeleteWorksheetsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookDeleteWorksheets(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksWorkbookDeleteWorksheetsRequest {
	return ApiWorkbooksWorkbookDeleteWorksheetsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookDeleteWorksheetsExecute(r ApiWorkbooksWorkbookDeleteWorksheetsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookDeleteWorksheets")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookGetApplicationRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookGetApplicationRequest) Select_(select_ []string) ApiWorkbooksWorkbookGetApplicationRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookGetApplicationRequest) Expand(expand []string) ApiWorkbooksWorkbookGetApplicationRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookGetApplicationRequest) Execute() (MicrosoftGraphWorkbookApplication, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookGetApplicationExecute(r)
}

/*
WorkbooksWorkbookGetApplication Get application from workbooks

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookGetApplicationRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookGetApplication(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookGetApplicationRequest {
	return ApiWorkbooksWorkbookGetApplicationRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookApplication
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookGetApplicationExecute(r ApiWorkbooksWorkbookGetApplicationRequest) (MicrosoftGraphWorkbookApplication, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookApplication
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookGetApplication")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/application"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookGetCommentsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookCommentId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookGetCommentsRequest) Select_(select_ []string) ApiWorkbooksWorkbookGetCommentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookGetCommentsRequest) Expand(expand []string) ApiWorkbooksWorkbookGetCommentsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookGetCommentsRequest) Execute() (MicrosoftGraphWorkbookComment, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookGetCommentsExecute(r)
}

/*
WorkbooksWorkbookGetComments Get comments from workbooks

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookCommentId key: id of workbookComment
 @return ApiWorkbooksWorkbookGetCommentsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookGetComments(ctx _context.Context, driveItemId string, workbookCommentId string) ApiWorkbooksWorkbookGetCommentsRequest {
	return ApiWorkbooksWorkbookGetCommentsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookCommentId: workbookCommentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookComment
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookGetCommentsExecute(r ApiWorkbooksWorkbookGetCommentsRequest) (MicrosoftGraphWorkbookComment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookComment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookGetComments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/comments/{workbookComment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookComment-id"+"}", _neturl.PathEscape(parameterToString(r.workbookCommentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookGetFunctionsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookGetFunctionsRequest) Select_(select_ []string) ApiWorkbooksWorkbookGetFunctionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookGetFunctionsRequest) Expand(expand []string) ApiWorkbooksWorkbookGetFunctionsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookGetFunctionsRequest) Execute() (MicrosoftGraphWorkbookFunctions, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookGetFunctionsExecute(r)
}

/*
WorkbooksWorkbookGetFunctions Get functions from workbooks

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookGetFunctionsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookGetFunctions(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookGetFunctionsRequest {
	return ApiWorkbooksWorkbookGetFunctionsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookFunctions
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookGetFunctionsExecute(r ApiWorkbooksWorkbookGetFunctionsRequest) (MicrosoftGraphWorkbookFunctions, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookFunctions
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookGetFunctions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookGetNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookGetNamesRequest) Select_(select_ []string) ApiWorkbooksWorkbookGetNamesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookGetNamesRequest) Expand(expand []string) ApiWorkbooksWorkbookGetNamesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookGetNamesRequest) Execute() (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookGetNamesExecute(r)
}

/*
WorkbooksWorkbookGetNames Get names from workbooks

Represents a collection of workbooks scoped named items (named ranges and constants). Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookGetNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookGetNames(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookGetNamesRequest {
	return ApiWorkbooksWorkbookGetNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookNamedItem
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookGetNamesExecute(r ApiWorkbooksWorkbookGetNamesRequest) (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookGetNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookGetOperationsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookOperationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookGetOperationsRequest) Select_(select_ []string) ApiWorkbooksWorkbookGetOperationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookGetOperationsRequest) Expand(expand []string) ApiWorkbooksWorkbookGetOperationsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookGetOperationsRequest) Execute() (MicrosoftGraphWorkbookOperation, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookGetOperationsExecute(r)
}

/*
WorkbooksWorkbookGetOperations Get operations from workbooks

The status of workbook operations. Getting an operation collection is not supported, but you can get the status of a long-running operation if the Location header is returned in the response. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookOperationId key: id of workbookOperation
 @return ApiWorkbooksWorkbookGetOperationsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookGetOperations(ctx _context.Context, driveItemId string, workbookOperationId string) ApiWorkbooksWorkbookGetOperationsRequest {
	return ApiWorkbooksWorkbookGetOperationsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookOperationId: workbookOperationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookOperation
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookGetOperationsExecute(r ApiWorkbooksWorkbookGetOperationsRequest) (MicrosoftGraphWorkbookOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookGetOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/operations/{workbookOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookOperation-id"+"}", _neturl.PathEscape(parameterToString(r.workbookOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookGetTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookGetTablesRequest) Select_(select_ []string) ApiWorkbooksWorkbookGetTablesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookGetTablesRequest) Expand(expand []string) ApiWorkbooksWorkbookGetTablesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookGetTablesRequest) Execute() (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookGetTablesExecute(r)
}

/*
WorkbooksWorkbookGetTables Get tables from workbooks

Represents a collection of tables associated with the workbook. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookGetTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookGetTables(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookGetTablesRequest {
	return ApiWorkbooksWorkbookGetTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookGetTablesExecute(r ApiWorkbooksWorkbookGetTablesRequest) (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookGetTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookGetWorksheetsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookGetWorksheetsRequest) Select_(select_ []string) ApiWorkbooksWorkbookGetWorksheetsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookGetWorksheetsRequest) Expand(expand []string) ApiWorkbooksWorkbookGetWorksheetsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookGetWorksheetsRequest) Execute() (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookGetWorksheetsExecute(r)
}

/*
WorkbooksWorkbookGetWorksheets Get worksheets from workbooks

Represents a collection of worksheets associated with the workbook. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksWorkbookGetWorksheetsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookGetWorksheets(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksWorkbookGetWorksheetsRequest {
	return ApiWorkbooksWorkbookGetWorksheetsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheet
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookGetWorksheetsExecute(r ApiWorkbooksWorkbookGetWorksheetsRequest) (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookGetWorksheets")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookListCommentsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookListCommentsRequest) Top(top int32) ApiWorkbooksWorkbookListCommentsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookListCommentsRequest) Skip(skip int32) ApiWorkbooksWorkbookListCommentsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookListCommentsRequest) Search(search string) ApiWorkbooksWorkbookListCommentsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookListCommentsRequest) Filter(filter string) ApiWorkbooksWorkbookListCommentsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookListCommentsRequest) Count(count bool) ApiWorkbooksWorkbookListCommentsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookListCommentsRequest) Orderby(orderby []string) ApiWorkbooksWorkbookListCommentsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookListCommentsRequest) Select_(select_ []string) ApiWorkbooksWorkbookListCommentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookListCommentsRequest) Expand(expand []string) ApiWorkbooksWorkbookListCommentsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookListCommentsRequest) Execute() (CollectionOfWorkbookComment, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookListCommentsExecute(r)
}

/*
WorkbooksWorkbookListComments Get comments from workbooks

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookListCommentsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookListComments(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookListCommentsRequest {
	return ApiWorkbooksWorkbookListCommentsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookComment
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookListCommentsExecute(r ApiWorkbooksWorkbookListCommentsRequest) (CollectionOfWorkbookComment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookComment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookListComments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/comments"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookListNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookListNamesRequest) Top(top int32) ApiWorkbooksWorkbookListNamesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookListNamesRequest) Skip(skip int32) ApiWorkbooksWorkbookListNamesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookListNamesRequest) Search(search string) ApiWorkbooksWorkbookListNamesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookListNamesRequest) Filter(filter string) ApiWorkbooksWorkbookListNamesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookListNamesRequest) Count(count bool) ApiWorkbooksWorkbookListNamesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookListNamesRequest) Orderby(orderby []string) ApiWorkbooksWorkbookListNamesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookListNamesRequest) Select_(select_ []string) ApiWorkbooksWorkbookListNamesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookListNamesRequest) Expand(expand []string) ApiWorkbooksWorkbookListNamesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookListNamesRequest) Execute() (CollectionOfWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookListNamesExecute(r)
}

/*
WorkbooksWorkbookListNames Get names from workbooks

Represents a collection of workbooks scoped named items (named ranges and constants). Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookListNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookListNames(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookListNamesRequest {
	return ApiWorkbooksWorkbookListNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookNamedItem
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookListNamesExecute(r ApiWorkbooksWorkbookListNamesRequest) (CollectionOfWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookListNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookListOperationsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	search *string
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Search items by search phrases
func (r ApiWorkbooksWorkbookListOperationsRequest) Search(search string) ApiWorkbooksWorkbookListOperationsRequest {
	r.search = &search
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookListOperationsRequest) Orderby(orderby []string) ApiWorkbooksWorkbookListOperationsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookListOperationsRequest) Select_(select_ []string) ApiWorkbooksWorkbookListOperationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookListOperationsRequest) Expand(expand []string) ApiWorkbooksWorkbookListOperationsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookListOperationsRequest) Execute() (CollectionOfWorkbookOperation, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookListOperationsExecute(r)
}

/*
WorkbooksWorkbookListOperations Get operations from workbooks

The status of workbook operations. Getting an operation collection is not supported, but you can get the status of a long-running operation if the Location header is returned in the response. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookListOperationsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookListOperations(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookListOperationsRequest {
	return ApiWorkbooksWorkbookListOperationsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookOperation
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookListOperationsExecute(r ApiWorkbooksWorkbookListOperationsRequest) (CollectionOfWorkbookOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookListOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/operations"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookListTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookListTablesRequest) Top(top int32) ApiWorkbooksWorkbookListTablesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookListTablesRequest) Skip(skip int32) ApiWorkbooksWorkbookListTablesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookListTablesRequest) Search(search string) ApiWorkbooksWorkbookListTablesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookListTablesRequest) Filter(filter string) ApiWorkbooksWorkbookListTablesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookListTablesRequest) Count(count bool) ApiWorkbooksWorkbookListTablesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookListTablesRequest) Orderby(orderby []string) ApiWorkbooksWorkbookListTablesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookListTablesRequest) Select_(select_ []string) ApiWorkbooksWorkbookListTablesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookListTablesRequest) Expand(expand []string) ApiWorkbooksWorkbookListTablesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookListTablesRequest) Execute() (CollectionOfWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookListTablesExecute(r)
}

/*
WorkbooksWorkbookListTables Get tables from workbooks

Represents a collection of tables associated with the workbook. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookListTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookListTables(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookListTablesRequest {
	return ApiWorkbooksWorkbookListTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookListTablesExecute(r ApiWorkbooksWorkbookListTablesRequest) (CollectionOfWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookListTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookListWorksheetsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookListWorksheetsRequest) Top(top int32) ApiWorkbooksWorkbookListWorksheetsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookListWorksheetsRequest) Skip(skip int32) ApiWorkbooksWorkbookListWorksheetsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookListWorksheetsRequest) Search(search string) ApiWorkbooksWorkbookListWorksheetsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookListWorksheetsRequest) Filter(filter string) ApiWorkbooksWorkbookListWorksheetsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookListWorksheetsRequest) Count(count bool) ApiWorkbooksWorkbookListWorksheetsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookListWorksheetsRequest) Orderby(orderby []string) ApiWorkbooksWorkbookListWorksheetsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookListWorksheetsRequest) Select_(select_ []string) ApiWorkbooksWorkbookListWorksheetsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookListWorksheetsRequest) Expand(expand []string) ApiWorkbooksWorkbookListWorksheetsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookListWorksheetsRequest) Execute() (CollectionOfWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookListWorksheetsExecute(r)
}

/*
WorkbooksWorkbookListWorksheets Get worksheets from workbooks

Represents a collection of worksheets associated with the workbook. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookListWorksheetsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookListWorksheets(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookListWorksheetsRequest {
	return ApiWorkbooksWorkbookListWorksheetsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookWorksheet
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookListWorksheetsExecute(r ApiWorkbooksWorkbookListWorksheetsRequest) (CollectionOfWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookListWorksheets")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesDeleteWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesDeleteWorksheetRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesDeleteWorksheetRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesDeleteWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesDeleteWorksheetExecute(r)
}

/*
WorkbooksWorkbookNamesDeleteWorksheet Delete navigation property worksheet for workbooks

Returns the worksheet on which the named item is scoped to. Available only if the item is scoped to the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesDeleteWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesDeleteWorksheet(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookNamesDeleteWorksheetRequest {
	return ApiWorkbooksWorkbookNamesDeleteWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesDeleteWorksheetExecute(r ApiWorkbooksWorkbookNamesDeleteWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesDeleteWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesGetWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesGetWorksheetRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesGetWorksheetRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesGetWorksheetRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesGetWorksheetRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesGetWorksheetRequest) Execute() (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesGetWorksheetExecute(r)
}

/*
WorkbooksWorkbookNamesGetWorksheet Get worksheet from workbooks

Returns the worksheet on which the named item is scoped to. Available only if the item is scoped to the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesGetWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesGetWorksheet(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookNamesGetWorksheetRequest {
	return ApiWorkbooksWorkbookNamesGetWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheet
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesGetWorksheetExecute(r ApiWorkbooksWorkbookNamesGetWorksheetRequest) (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesGetWorksheet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesUpdateWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	microsoftGraphWorkbookWorksheet *MicrosoftGraphWorkbookWorksheet
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesUpdateWorksheetRequest) MicrosoftGraphWorkbookWorksheet(microsoftGraphWorkbookWorksheet MicrosoftGraphWorkbookWorksheet) ApiWorkbooksWorkbookNamesUpdateWorksheetRequest {
	r.microsoftGraphWorkbookWorksheet = &microsoftGraphWorkbookWorksheet
	return r
}

func (r ApiWorkbooksWorkbookNamesUpdateWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesUpdateWorksheetExecute(r)
}

/*
WorkbooksWorkbookNamesUpdateWorksheet Update the navigation property worksheet in workbooks

Returns the worksheet on which the named item is scoped to. Available only if the item is scoped to the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesUpdateWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesUpdateWorksheet(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookNamesUpdateWorksheetRequest {
	return ApiWorkbooksWorkbookNamesUpdateWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesUpdateWorksheetExecute(r ApiWorkbooksWorkbookNamesUpdateWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesUpdateWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheet == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMajorGridlines Delete navigation property majorGridlines for workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMajorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMinorGridlines Delete navigation property minorGridlines for workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMinorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteTitleRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteTitleRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteTitleExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteTitle Delete navigation property title for workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteTitle(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteTitleRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteTitleExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisDeleteTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetFormat Get format from workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetFormatRequest) (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMajorGridlines Get majorGridlines from workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMajorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMajorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMajorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMinorGridlines Get minorGridlines from workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMinorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMinorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetMinorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetTitleRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetTitleRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetTitleRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetTitleRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetTitleRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetTitleExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetTitle Get title from workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetTitle(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetTitleRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitle
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetTitleExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetTitleRequest) (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisGetTitle")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatGetFont Get font from workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatGetFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatGetFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleGetFormat Get format from workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitleFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest) (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitleFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitleFormat *MicrosoftGraphWorkbookChartAxisTitleFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisTitleFormat(microsoftGraphWorkbookChartAxisTitleFormat MicrosoftGraphWorkbookChartAxisTitleFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisTitleFormat = &microsoftGraphWorkbookChartAxisTitleFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisTitleUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitleFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitleFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitleFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisFormat *MicrosoftGraphWorkbookChartAxisFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisFormat(microsoftGraphWorkbookChartAxisFormat MicrosoftGraphWorkbookChartAxisFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisFormat = &microsoftGraphWorkbookChartAxisFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMajorGridlines Update the navigation property majorGridlines in workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMajorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMinorGridlines Update the navigation property minorGridlines in workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMinorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitle *MicrosoftGraphWorkbookChartAxisTitle
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateTitleRequest) MicrosoftGraphWorkbookChartAxisTitle(microsoftGraphWorkbookChartAxisTitle MicrosoftGraphWorkbookChartAxisTitle) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateTitleRequest {
	r.microsoftGraphWorkbookChartAxisTitle = &microsoftGraphWorkbookChartAxisTitle
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateTitleExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateTitle Update the navigation property title in workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateTitle(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateTitleRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateTitleExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesCategoryAxisUpdateTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitle == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteCategoryAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteCategoryAxisRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteCategoryAxisRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteCategoryAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesDeleteCategoryAxisExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesDeleteCategoryAxis Delete navigation property categoryAxis for workbooks

Represents the category axis in a chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteCategoryAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesDeleteCategoryAxis(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteCategoryAxisRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteCategoryAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesDeleteCategoryAxisExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteCategoryAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesDeleteCategoryAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteSeriesAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteSeriesAxisRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteSeriesAxisRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteSeriesAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesDeleteSeriesAxisExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesDeleteSeriesAxis Delete navigation property seriesAxis for workbooks

Represents the series axis of a 3-dimensional chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteSeriesAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesDeleteSeriesAxis(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteSeriesAxisRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteSeriesAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesDeleteSeriesAxisExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteSeriesAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesDeleteSeriesAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteValueAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteValueAxisRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteValueAxisRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteValueAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesDeleteValueAxisExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesDeleteValueAxis Delete navigation property valueAxis for workbooks

Represents the value axis in an axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteValueAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesDeleteValueAxis(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteValueAxisRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteValueAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesDeleteValueAxisExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesDeleteValueAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesDeleteValueAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetCategoryAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetCategoryAxisRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetCategoryAxisRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetCategoryAxisRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetCategoryAxisRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetCategoryAxisRequest) Execute() (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesGetCategoryAxisExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesGetCategoryAxis Get categoryAxis from workbooks

Represents the category axis in a chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetCategoryAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesGetCategoryAxis(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetCategoryAxisRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetCategoryAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxis
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesGetCategoryAxisExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetCategoryAxisRequest) (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesGetCategoryAxis")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetSeriesAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetSeriesAxisRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetSeriesAxisRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetSeriesAxisRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetSeriesAxisRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetSeriesAxisRequest) Execute() (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesGetSeriesAxisExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesGetSeriesAxis Get seriesAxis from workbooks

Represents the series axis of a 3-dimensional chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetSeriesAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesGetSeriesAxis(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetSeriesAxisRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetSeriesAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxis
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesGetSeriesAxisExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetSeriesAxisRequest) (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesGetSeriesAxis")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetValueAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetValueAxisRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetValueAxisRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetValueAxisRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetValueAxisRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetValueAxisRequest) Execute() (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesGetValueAxisExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesGetValueAxis Get valueAxis from workbooks

Represents the value axis in an axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetValueAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesGetValueAxis(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetValueAxisRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetValueAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxis
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesGetValueAxisExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesGetValueAxisRequest) (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesGetValueAxis")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMajorGridlines Delete navigation property majorGridlines for workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMajorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMinorGridlines Delete navigation property minorGridlines for workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMinorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteTitleRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteTitleRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteTitleExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteTitle Delete navigation property title for workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteTitle(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteTitleRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteTitleExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisDeleteTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetFormat Get format from workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetFormatRequest) (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMajorGridlines Get majorGridlines from workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMajorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMajorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMajorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMinorGridlines Get minorGridlines from workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMinorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMinorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetMinorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetTitleRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetTitleRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetTitleRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetTitleRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetTitleRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetTitleExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetTitle Get title from workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetTitle(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetTitleRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitle
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetTitleExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetTitleRequest) (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisGetTitle")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatGetFont Get font from workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatGetFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatGetFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleGetFormat Get format from workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitleFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest) (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitleFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitleFormat *MicrosoftGraphWorkbookChartAxisTitleFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisTitleFormat(microsoftGraphWorkbookChartAxisTitleFormat MicrosoftGraphWorkbookChartAxisTitleFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisTitleFormat = &microsoftGraphWorkbookChartAxisTitleFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisTitleUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitleFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitleFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitleFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisFormat *MicrosoftGraphWorkbookChartAxisFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisFormat(microsoftGraphWorkbookChartAxisFormat MicrosoftGraphWorkbookChartAxisFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisFormat = &microsoftGraphWorkbookChartAxisFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMajorGridlines Update the navigation property majorGridlines in workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMajorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMinorGridlines Update the navigation property minorGridlines in workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMinorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitle *MicrosoftGraphWorkbookChartAxisTitle
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateTitleRequest) MicrosoftGraphWorkbookChartAxisTitle(microsoftGraphWorkbookChartAxisTitle MicrosoftGraphWorkbookChartAxisTitle) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateTitleRequest {
	r.microsoftGraphWorkbookChartAxisTitle = &microsoftGraphWorkbookChartAxisTitle
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateTitleExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateTitle Update the navigation property title in workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateTitle(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateTitleRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateTitleExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesSeriesAxisUpdateTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitle == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateCategoryAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartAxis *MicrosoftGraphWorkbookChartAxis
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateCategoryAxisRequest) MicrosoftGraphWorkbookChartAxis(microsoftGraphWorkbookChartAxis MicrosoftGraphWorkbookChartAxis) ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateCategoryAxisRequest {
	r.microsoftGraphWorkbookChartAxis = &microsoftGraphWorkbookChartAxis
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateCategoryAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesUpdateCategoryAxisExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesUpdateCategoryAxis Update the navigation property categoryAxis in workbooks

Represents the category axis in a chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateCategoryAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesUpdateCategoryAxis(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateCategoryAxisRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateCategoryAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesUpdateCategoryAxisExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateCategoryAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesUpdateCategoryAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxis == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxis is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxis
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateSeriesAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartAxis *MicrosoftGraphWorkbookChartAxis
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateSeriesAxisRequest) MicrosoftGraphWorkbookChartAxis(microsoftGraphWorkbookChartAxis MicrosoftGraphWorkbookChartAxis) ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateSeriesAxisRequest {
	r.microsoftGraphWorkbookChartAxis = &microsoftGraphWorkbookChartAxis
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateSeriesAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesUpdateSeriesAxisExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesUpdateSeriesAxis Update the navigation property seriesAxis in workbooks

Represents the series axis of a 3-dimensional chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateSeriesAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesUpdateSeriesAxis(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateSeriesAxisRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateSeriesAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesUpdateSeriesAxisExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateSeriesAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesUpdateSeriesAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxis == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxis is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxis
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateValueAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartAxis *MicrosoftGraphWorkbookChartAxis
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateValueAxisRequest) MicrosoftGraphWorkbookChartAxis(microsoftGraphWorkbookChartAxis MicrosoftGraphWorkbookChartAxis) ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateValueAxisRequest {
	r.microsoftGraphWorkbookChartAxis = &microsoftGraphWorkbookChartAxis
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateValueAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesUpdateValueAxisExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesUpdateValueAxis Update the navigation property valueAxis in workbooks

Represents the value axis in an axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateValueAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesUpdateValueAxis(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateValueAxisRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateValueAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesUpdateValueAxisExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesUpdateValueAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesUpdateValueAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxis == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxis is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxis
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMajorGridlines Delete navigation property majorGridlines for workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMajorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMajorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMinorGridlines Delete navigation property minorGridlines for workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMinorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMinorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteTitleRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteTitleRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteTitleExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteTitle Delete navigation property title for workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteTitle(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteTitleRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteTitleExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisDeleteTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetFormat Get format from workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetFormatRequest) (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMajorGridlines Get majorGridlines from workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMajorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMajorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMajorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMinorGridlines Get minorGridlines from workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMinorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMinorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetMinorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetTitleRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetTitleRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetTitleRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetTitleRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetTitleRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetTitleExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetTitle Get title from workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetTitle(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetTitleRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitle
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetTitleExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetTitleRequest) (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisGetTitle")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatDeleteFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatDeleteFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatGetFont Get font from workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatGetFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatGetFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatUpdateFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatUpdateFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleGetFormat Get format from workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitleFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleGetFormatRequest) (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitleFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitleFormat *MicrosoftGraphWorkbookChartAxisTitleFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisTitleFormat(microsoftGraphWorkbookChartAxisTitleFormat MicrosoftGraphWorkbookChartAxisTitleFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisTitleFormat = &microsoftGraphWorkbookChartAxisTitleFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisTitleUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitleFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitleFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitleFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisFormat *MicrosoftGraphWorkbookChartAxisFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisFormat(microsoftGraphWorkbookChartAxisFormat MicrosoftGraphWorkbookChartAxisFormat) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisFormat = &microsoftGraphWorkbookChartAxisFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMajorGridlines Update the navigation property majorGridlines in workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMajorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMajorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMinorGridlines Update the navigation property minorGridlines in workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMinorGridlines(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMinorGridlinesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitle *MicrosoftGraphWorkbookChartAxisTitle
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateTitleRequest) MicrosoftGraphWorkbookChartAxisTitle(microsoftGraphWorkbookChartAxisTitle MicrosoftGraphWorkbookChartAxisTitle) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateTitleRequest {
	r.microsoftGraphWorkbookChartAxisTitle = &microsoftGraphWorkbookChartAxisTitle
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateTitleExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateTitle Update the navigation property title in workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateTitle(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateTitleRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateTitleExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsAxesValueAxisUpdateTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitle == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsCreateSeriesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartSeries *MicrosoftGraphWorkbookChartSeries
}

// New navigation property
func (r ApiWorkbooksWorkbookNamesWorksheetChartsCreateSeriesRequest) MicrosoftGraphWorkbookChartSeries(microsoftGraphWorkbookChartSeries MicrosoftGraphWorkbookChartSeries) ApiWorkbooksWorkbookNamesWorksheetChartsCreateSeriesRequest {
	r.microsoftGraphWorkbookChartSeries = &microsoftGraphWorkbookChartSeries
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsCreateSeriesRequest) Execute() (MicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsCreateSeriesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsCreateSeries Create new navigation property to series for workbooks

Represents either a single series or collection of series in the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsCreateSeriesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsCreateSeries(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsCreateSeriesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsCreateSeriesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartSeries
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsCreateSeriesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsCreateSeriesRequest) (MicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsCreateSeries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartSeries == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookChartSeries is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartSeries
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDataLabelsDeleteFormat Delete navigation property format for workbooks

Represents the format of chart data labels, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/dataLabels/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of the current chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFill Get fill from workbooks

Represents the fill format of the current chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of the current chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartDataLabelFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDataLabelsGetFormat Get format from workbooks

Represents the format of chart data labels, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartDataLabelFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsGetFormatRequest) (MicrosoftGraphWorkbookChartDataLabelFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartDataLabelFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/dataLabels/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartDataLabelFormat *MicrosoftGraphWorkbookChartDataLabelFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsUpdateFormatRequest) MicrosoftGraphWorkbookChartDataLabelFormat(microsoftGraphWorkbookChartDataLabelFormat MicrosoftGraphWorkbookChartDataLabelFormat) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsUpdateFormatRequest {
	r.microsoftGraphWorkbookChartDataLabelFormat = &microsoftGraphWorkbookChartDataLabelFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDataLabelsUpdateFormat Update the navigation property format in workbooks

Represents the format of chart data labels, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDataLabelsUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDataLabelsUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDataLabelsUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/dataLabels/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartDataLabelFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartDataLabelFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartDataLabelFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDeleteAxesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteAxesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsDeleteAxesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteAxesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDeleteAxesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDeleteAxes Delete navigation property axes for workbooks

Represents chart axes. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDeleteAxesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDeleteAxes(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsDeleteAxesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDeleteAxesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDeleteAxesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteAxesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDeleteAxes")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDeleteDataLabelsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteDataLabelsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsDeleteDataLabelsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteDataLabelsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDeleteDataLabelsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDeleteDataLabels Delete navigation property dataLabels for workbooks

Represents the datalabels on the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDeleteDataLabelsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDeleteDataLabels(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsDeleteDataLabelsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDeleteDataLabelsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDeleteDataLabelsExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteDataLabelsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDeleteDataLabels")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/dataLabels"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDeleteFormat Delete navigation property format for workbooks

Encapsulates the format properties for the chart area. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDeleteLegendRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteLegendRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsDeleteLegendRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteLegendRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDeleteLegendExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDeleteLegend Delete navigation property legend for workbooks

Represents the legend for the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDeleteLegendRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDeleteLegend(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsDeleteLegendRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDeleteLegendRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDeleteLegendExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteLegendRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDeleteLegend")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/legend"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDeleteSeriesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteSeriesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsDeleteSeriesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteSeriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDeleteSeriesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDeleteSeries Delete navigation property series for workbooks

Represents either a single series or collection of series in the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDeleteSeriesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDeleteSeries(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookNamesWorksheetChartsDeleteSeriesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDeleteSeriesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDeleteSeriesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteSeriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDeleteSeries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDeleteTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteTitleRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsDeleteTitleRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDeleteTitleExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDeleteTitle Delete navigation property title for workbooks

Represents the title of the specified chart, including the text, visibility, position and formating of the title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDeleteTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDeleteTitle(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsDeleteTitleRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDeleteTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDeleteTitleExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDeleteTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsDeleteWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteWorksheetRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsDeleteWorksheetRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsDeleteWorksheetExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsDeleteWorksheet Delete navigation property worksheet for workbooks

The worksheet containing the current chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsDeleteWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDeleteWorksheet(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsDeleteWorksheetRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsDeleteWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsDeleteWorksheetExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsDeleteWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsDeleteWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsFormatDeleteFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsFormatDeleteFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsFormatDeleteFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsFormatDeleteFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsFormatGetFill Get fill from workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsFormatGetFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsFormatGetFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsFormatGetFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsFormatGetFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsFormatUpdateFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsFormatUpdateFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsFormatUpdateFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsFormatUpdateFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsGetAxesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetAxesRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsGetAxesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetAxesRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsGetAxesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetAxesRequest) Execute() (MicrosoftGraphWorkbookChartAxes, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsGetAxesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsGetAxes Get axes from workbooks

Represents chart axes. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsGetAxesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsGetAxes(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsGetAxesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsGetAxesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxes
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsGetAxesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsGetAxesRequest) (MicrosoftGraphWorkbookChartAxes, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsGetAxes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsGetDataLabelsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetDataLabelsRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsGetDataLabelsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetDataLabelsRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsGetDataLabelsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetDataLabelsRequest) Execute() (MicrosoftGraphWorkbookChartDataLabels, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsGetDataLabelsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsGetDataLabels Get dataLabels from workbooks

Represents the datalabels on the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsGetDataLabelsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsGetDataLabels(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsGetDataLabelsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsGetDataLabelsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartDataLabels
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsGetDataLabelsExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsGetDataLabelsRequest) (MicrosoftGraphWorkbookChartDataLabels, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartDataLabels
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsGetDataLabels")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/dataLabels"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAreaFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsGetFormat Get format from workbooks

Encapsulates the format properties for the chart area. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAreaFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsGetFormatRequest) (MicrosoftGraphWorkbookChartAreaFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAreaFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsGetLegendRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetLegendRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsGetLegendRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetLegendRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsGetLegendRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetLegendRequest) Execute() (MicrosoftGraphWorkbookChartLegend, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsGetLegendExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsGetLegend Get legend from workbooks

Represents the legend for the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsGetLegendRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsGetLegend(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsGetLegendRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsGetLegendRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLegend
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsGetLegendExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsGetLegendRequest) (MicrosoftGraphWorkbookChartLegend, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLegend
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsGetLegend")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/legend"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsGetSeriesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetSeriesRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsGetSeriesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetSeriesRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsGetSeriesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetSeriesRequest) Execute() (MicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsGetSeriesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsGetSeries Get series from workbooks

Represents either a single series or collection of series in the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookNamesWorksheetChartsGetSeriesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsGetSeries(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookNamesWorksheetChartsGetSeriesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsGetSeriesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartSeries
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsGetSeriesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsGetSeriesRequest) (MicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsGetSeries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsGetTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetTitleRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsGetTitleRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetTitleRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsGetTitleRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetTitleRequest) Execute() (MicrosoftGraphWorkbookChartTitle, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsGetTitleExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsGetTitle Get title from workbooks

Represents the title of the specified chart, including the text, visibility, position and formating of the title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsGetTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsGetTitle(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsGetTitleRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsGetTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartTitle
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsGetTitleExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsGetTitleRequest) (MicrosoftGraphWorkbookChartTitle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartTitle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsGetTitle")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsGetWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetWorksheetRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsGetWorksheetRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetWorksheetRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsGetWorksheetRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsGetWorksheetRequest) Execute() (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsGetWorksheetExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsGetWorksheet Get worksheet from workbooks

The worksheet containing the current chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsGetWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsGetWorksheet(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsGetWorksheetRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsGetWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheet
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsGetWorksheetExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsGetWorksheetRequest) (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsGetWorksheet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsLegendDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsLegendDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsLegendDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsLegendDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsLegendDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsLegendDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsLegendDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/legend/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of an object, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/legend/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsLegendFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/legend/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFill Get fill from workbooks

Represents the fill format of an object, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/legend/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFont Get font from workbooks

Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsLegendFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/legend/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of an object, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/legend/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsLegendFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/legend/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsLegendGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartLegendFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsLegendGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsLegendGetFormat Get format from workbooks

Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsLegendGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsLegendGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLegendFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsLegendGetFormatRequest) (MicrosoftGraphWorkbookChartLegendFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLegendFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsLegendGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/legend/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsLegendUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartLegendFormat *MicrosoftGraphWorkbookChartLegendFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendUpdateFormatRequest) MicrosoftGraphWorkbookChartLegendFormat(microsoftGraphWorkbookChartLegendFormat MicrosoftGraphWorkbookChartLegendFormat) ApiWorkbooksWorkbookNamesWorksheetChartsLegendUpdateFormatRequest {
	r.microsoftGraphWorkbookChartLegendFormat = &microsoftGraphWorkbookChartLegendFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsLegendUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsLegendUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsLegendUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsLegendUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsLegendUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsLegendUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsLegendUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsLegendUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsLegendUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/legend/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLegendFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLegendFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLegendFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest) Top(top int32) ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest) Skip(skip int32) ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest) Search(search string) ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest) Filter(filter string) ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest) Count(count bool) ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest) Orderby(orderby []string) ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest) Execute() (CollectionOfWorkbookChartSeries, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsListSeriesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsListSeries Get series from workbooks

Represents either a single series or collection of series in the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsListSeries(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookChartSeries
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsListSeriesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsListSeriesRequest) (CollectionOfWorkbookChartSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookChartSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsListSeries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesCreatePointsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	microsoftGraphWorkbookChartPoint *MicrosoftGraphWorkbookChartPoint
}

// New navigation property
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesCreatePointsRequest) MicrosoftGraphWorkbookChartPoint(microsoftGraphWorkbookChartPoint MicrosoftGraphWorkbookChartPoint) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesCreatePointsRequest {
	r.microsoftGraphWorkbookChartPoint = &microsoftGraphWorkbookChartPoint
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesCreatePointsRequest) Execute() (MicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesCreatePointsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesCreatePoints Create new navigation property to points for workbooks

Represents a collection of all points in the series. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesCreatePointsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesCreatePoints(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesCreatePointsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesCreatePointsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartPoint
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesCreatePointsExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesCreatePointsRequest) (MicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartPoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesCreatePoints")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartPoint == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookChartPoint is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartPoint
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart series, which includes fill and line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeletePointsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeletePointsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeletePointsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeletePointsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesDeletePointsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesDeletePoints Delete navigation property points for workbooks

Represents a collection of all points in the series. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeletePointsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesDeletePoints(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeletePointsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeletePointsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesDeletePointsExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesDeletePointsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesDeletePoints")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of a chart series, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteLine Delete navigation property line for workbooks

Represents line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetFill Get fill from workbooks

Represents the fill format of a chart series, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetLine Get line from workbooks

Represents line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of a chart series, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateLine Update the navigation property line in workbooks

Represents line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateLineExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartSeriesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesGetFormat Get format from workbooks

Represents the formatting of a chart series, which includes fill and line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartSeriesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetFormatRequest) (MicrosoftGraphWorkbookChartSeriesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartSeriesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetPointsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetPointsRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetPointsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetPointsRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetPointsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetPointsRequest) Execute() (MicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesGetPointsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesGetPoints Get points from workbooks

Represents a collection of all points in the series. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetPointsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesGetPoints(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetPointsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetPointsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartPoint
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesGetPointsExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesGetPointsRequest) (MicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartPoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesGetPoints")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest) Top(top int32) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest) Skip(skip int32) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest) Search(search string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest) Filter(filter string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest) Count(count bool) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest) Orderby(orderby []string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest) Execute() (CollectionOfWorkbookChartPoint, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesListPointsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesListPoints Get points from workbooks

Represents a collection of all points in the series. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesListPoints(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookChartPoint
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesListPointsExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesListPointsRequest) (CollectionOfWorkbookChartPoint, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookChartPoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesListPoints")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesPointsDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesPointsDeleteFormat Delete navigation property format for workbooks

Encapsulates the format properties chart point. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesPointsDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesPointsDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesPointsDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of a chart, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatDeleteFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatDeleteFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatGetFill Get fill from workbooks

Represents the fill format of a chart, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatGetFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatGetFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatGetFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of a chart, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatUpdateFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatUpdateFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesPointsFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartPointFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesPointsGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesPointsGetFormat Get format from workbooks

Encapsulates the format properties chart point. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesPointsGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartPointFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesPointsGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsGetFormatRequest) (MicrosoftGraphWorkbookChartPointFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartPointFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesPointsGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	microsoftGraphWorkbookChartPointFormat *MicrosoftGraphWorkbookChartPointFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsUpdateFormatRequest) MicrosoftGraphWorkbookChartPointFormat(microsoftGraphWorkbookChartPointFormat MicrosoftGraphWorkbookChartPointFormat) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsUpdateFormatRequest {
	r.microsoftGraphWorkbookChartPointFormat = &microsoftGraphWorkbookChartPointFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesPointsUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesPointsUpdateFormat Update the navigation property format in workbooks

Encapsulates the format properties chart point. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesPointsUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesPointsUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesPointsUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesPointsUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartPointFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartPointFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartPointFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	microsoftGraphWorkbookChartSeriesFormat *MicrosoftGraphWorkbookChartSeriesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdateFormatRequest) MicrosoftGraphWorkbookChartSeriesFormat(microsoftGraphWorkbookChartSeriesFormat MicrosoftGraphWorkbookChartSeriesFormat) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartSeriesFormat = &microsoftGraphWorkbookChartSeriesFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart series, which includes fill and line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartSeriesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartSeriesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartSeriesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdatePointsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	microsoftGraphWorkbookChartPoint *MicrosoftGraphWorkbookChartPoint
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdatePointsRequest) MicrosoftGraphWorkbookChartPoint(microsoftGraphWorkbookChartPoint MicrosoftGraphWorkbookChartPoint) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdatePointsRequest {
	r.microsoftGraphWorkbookChartPoint = &microsoftGraphWorkbookChartPoint
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdatePointsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesUpdatePointsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsSeriesUpdatePoints Update the navigation property points in workbooks

Represents a collection of all points in the series. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdatePointsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesUpdatePoints(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdatePointsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdatePointsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsSeriesUpdatePointsExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsSeriesUpdatePointsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsSeriesUpdatePoints")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartPoint == nil {
		return nil, reportError("microsoftGraphWorkbookChartPoint is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartPoint
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsTitleDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsTitleDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsTitleDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart title, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsTitleDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleDeleteFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleDeleteFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsTitleDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleDeleteFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsTitleDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsTitleDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/title/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsTitleFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFill Get fill from workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/title/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsTitleFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFill(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFillExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/title/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFont(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFontExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsTitleFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsTitleGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartTitleFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsTitleGetFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsTitleGetFormat Get format from workbooks

Represents the formatting of a chart title, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsTitleGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleGetFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleGetFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsTitleGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartTitleFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleGetFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsTitleGetFormatRequest) (MicrosoftGraphWorkbookChartTitleFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartTitleFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsTitleGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsTitleUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartTitleFormat *MicrosoftGraphWorkbookChartTitleFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleUpdateFormatRequest) MicrosoftGraphWorkbookChartTitleFormat(microsoftGraphWorkbookChartTitleFormat MicrosoftGraphWorkbookChartTitleFormat) ApiWorkbooksWorkbookNamesWorksheetChartsTitleUpdateFormatRequest {
	r.microsoftGraphWorkbookChartTitleFormat = &microsoftGraphWorkbookChartTitleFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsTitleUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsTitleUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsTitleUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart title, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsTitleUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsTitleUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsTitleUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsTitleUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsTitleUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsTitleUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartTitleFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartTitleFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartTitleFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsUpdateAxesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartAxes *MicrosoftGraphWorkbookChartAxes
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateAxesRequest) MicrosoftGraphWorkbookChartAxes(microsoftGraphWorkbookChartAxes MicrosoftGraphWorkbookChartAxes) ApiWorkbooksWorkbookNamesWorksheetChartsUpdateAxesRequest {
	r.microsoftGraphWorkbookChartAxes = &microsoftGraphWorkbookChartAxes
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateAxesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsUpdateAxesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsUpdateAxes Update the navigation property axes in workbooks

Represents chart axes. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsUpdateAxesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsUpdateAxes(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsUpdateAxesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsUpdateAxesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsUpdateAxesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateAxesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsUpdateAxes")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/axes"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxes == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxes is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxes
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsUpdateDataLabelsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartDataLabels *MicrosoftGraphWorkbookChartDataLabels
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateDataLabelsRequest) MicrosoftGraphWorkbookChartDataLabels(microsoftGraphWorkbookChartDataLabels MicrosoftGraphWorkbookChartDataLabels) ApiWorkbooksWorkbookNamesWorksheetChartsUpdateDataLabelsRequest {
	r.microsoftGraphWorkbookChartDataLabels = &microsoftGraphWorkbookChartDataLabels
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateDataLabelsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsUpdateDataLabelsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsUpdateDataLabels Update the navigation property dataLabels in workbooks

Represents the datalabels on the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsUpdateDataLabelsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsUpdateDataLabels(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsUpdateDataLabelsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsUpdateDataLabelsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsUpdateDataLabelsExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateDataLabelsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsUpdateDataLabels")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/dataLabels"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartDataLabels == nil {
		return nil, reportError("microsoftGraphWorkbookChartDataLabels is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartDataLabels
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartAreaFormat *MicrosoftGraphWorkbookChartAreaFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateFormatRequest) MicrosoftGraphWorkbookChartAreaFormat(microsoftGraphWorkbookChartAreaFormat MicrosoftGraphWorkbookChartAreaFormat) ApiWorkbooksWorkbookNamesWorksheetChartsUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAreaFormat = &microsoftGraphWorkbookChartAreaFormat
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsUpdateFormat Update the navigation property format in workbooks

Encapsulates the format properties for the chart area. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsUpdateFormat(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsUpdateFormatRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsUpdateFormatExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAreaFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAreaFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAreaFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsUpdateLegendRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartLegend *MicrosoftGraphWorkbookChartLegend
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateLegendRequest) MicrosoftGraphWorkbookChartLegend(microsoftGraphWorkbookChartLegend MicrosoftGraphWorkbookChartLegend) ApiWorkbooksWorkbookNamesWorksheetChartsUpdateLegendRequest {
	r.microsoftGraphWorkbookChartLegend = &microsoftGraphWorkbookChartLegend
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateLegendRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsUpdateLegendExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsUpdateLegend Update the navigation property legend in workbooks

Represents the legend for the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsUpdateLegendRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsUpdateLegend(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsUpdateLegendRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsUpdateLegendRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsUpdateLegendExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateLegendRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsUpdateLegend")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/legend"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLegend == nil {
		return nil, reportError("microsoftGraphWorkbookChartLegend is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLegend
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsUpdateSeriesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	microsoftGraphWorkbookChartSeries *MicrosoftGraphWorkbookChartSeries
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateSeriesRequest) MicrosoftGraphWorkbookChartSeries(microsoftGraphWorkbookChartSeries MicrosoftGraphWorkbookChartSeries) ApiWorkbooksWorkbookNamesWorksheetChartsUpdateSeriesRequest {
	r.microsoftGraphWorkbookChartSeries = &microsoftGraphWorkbookChartSeries
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateSeriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsUpdateSeriesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsUpdateSeries Update the navigation property series in workbooks

Represents either a single series or collection of series in the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookNamesWorksheetChartsUpdateSeriesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsUpdateSeries(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookNamesWorksheetChartsUpdateSeriesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsUpdateSeriesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsUpdateSeriesExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateSeriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsUpdateSeries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartSeries == nil {
		return nil, reportError("microsoftGraphWorkbookChartSeries is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartSeries
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsUpdateTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChartTitle *MicrosoftGraphWorkbookChartTitle
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateTitleRequest) MicrosoftGraphWorkbookChartTitle(microsoftGraphWorkbookChartTitle MicrosoftGraphWorkbookChartTitle) ApiWorkbooksWorkbookNamesWorksheetChartsUpdateTitleRequest {
	r.microsoftGraphWorkbookChartTitle = &microsoftGraphWorkbookChartTitle
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsUpdateTitleExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsUpdateTitle Update the navigation property title in workbooks

Represents the title of the specified chart, including the text, visibility, position and formating of the title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsUpdateTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsUpdateTitle(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsUpdateTitleRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsUpdateTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsUpdateTitleExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsUpdateTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartTitle == nil {
		return nil, reportError("microsoftGraphWorkbookChartTitle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartTitle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetChartsUpdateWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookWorksheet *MicrosoftGraphWorkbookWorksheet
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateWorksheetRequest) MicrosoftGraphWorkbookWorksheet(microsoftGraphWorkbookWorksheet MicrosoftGraphWorkbookWorksheet) ApiWorkbooksWorkbookNamesWorksheetChartsUpdateWorksheetRequest {
	r.microsoftGraphWorkbookWorksheet = &microsoftGraphWorkbookWorksheet
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetChartsUpdateWorksheetExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetChartsUpdateWorksheet Update the navigation property worksheet in workbooks

The worksheet containing the current chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetChartsUpdateWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsUpdateWorksheet(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetChartsUpdateWorksheetRequest {
	return ApiWorkbooksWorkbookNamesWorksheetChartsUpdateWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetChartsUpdateWorksheetExecute(r ApiWorkbooksWorkbookNamesWorksheetChartsUpdateWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetChartsUpdateWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheet == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetCreateChartsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	microsoftGraphWorkbookChart *MicrosoftGraphWorkbookChart
}

// New navigation property
func (r ApiWorkbooksWorkbookNamesWorksheetCreateChartsRequest) MicrosoftGraphWorkbookChart(microsoftGraphWorkbookChart MicrosoftGraphWorkbookChart) ApiWorkbooksWorkbookNamesWorksheetCreateChartsRequest {
	r.microsoftGraphWorkbookChart = &microsoftGraphWorkbookChart
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetCreateChartsRequest) Execute() (MicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetCreateChartsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetCreateCharts Create new navigation property to charts for workbooks

Returns collection of charts that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesWorksheetCreateChartsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetCreateCharts(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookNamesWorksheetCreateChartsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetCreateChartsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChart
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetCreateChartsExecute(r ApiWorkbooksWorkbookNamesWorksheetCreateChartsRequest) (MicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetCreateCharts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChart == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookChart is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChart
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetCreateNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	microsoftGraphWorkbookNamedItem *MicrosoftGraphWorkbookNamedItem
}

// New navigation property
func (r ApiWorkbooksWorkbookNamesWorksheetCreateNamesRequest) MicrosoftGraphWorkbookNamedItem(microsoftGraphWorkbookNamedItem MicrosoftGraphWorkbookNamedItem) ApiWorkbooksWorkbookNamesWorksheetCreateNamesRequest {
	r.microsoftGraphWorkbookNamedItem = &microsoftGraphWorkbookNamedItem
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetCreateNamesRequest) Execute() (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetCreateNamesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetCreateNames Create new navigation property to names for workbooks

Returns collection of names that are associated with the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesWorksheetCreateNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetCreateNames(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookNamesWorksheetCreateNamesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetCreateNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookNamedItem
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetCreateNamesExecute(r ApiWorkbooksWorkbookNamesWorksheetCreateNamesRequest) (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetCreateNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/names"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookNamedItem == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookNamedItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookNamedItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetCreatePivotTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	microsoftGraphWorkbookPivotTable *MicrosoftGraphWorkbookPivotTable
}

// New navigation property
func (r ApiWorkbooksWorkbookNamesWorksheetCreatePivotTablesRequest) MicrosoftGraphWorkbookPivotTable(microsoftGraphWorkbookPivotTable MicrosoftGraphWorkbookPivotTable) ApiWorkbooksWorkbookNamesWorksheetCreatePivotTablesRequest {
	r.microsoftGraphWorkbookPivotTable = &microsoftGraphWorkbookPivotTable
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetCreatePivotTablesRequest) Execute() (MicrosoftGraphWorkbookPivotTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetCreatePivotTablesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetCreatePivotTables Create new navigation property to pivotTables for workbooks

Collection of PivotTables that are part of the worksheet.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesWorksheetCreatePivotTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetCreatePivotTables(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookNamesWorksheetCreatePivotTablesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetCreatePivotTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookPivotTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetCreatePivotTablesExecute(r ApiWorkbooksWorkbookNamesWorksheetCreatePivotTablesRequest) (MicrosoftGraphWorkbookPivotTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookPivotTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetCreatePivotTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/pivotTables"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookPivotTable == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookPivotTable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookPivotTable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetCreateTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	microsoftGraphWorkbookTable *MicrosoftGraphWorkbookTable
}

// New navigation property
func (r ApiWorkbooksWorkbookNamesWorksheetCreateTablesRequest) MicrosoftGraphWorkbookTable(microsoftGraphWorkbookTable MicrosoftGraphWorkbookTable) ApiWorkbooksWorkbookNamesWorksheetCreateTablesRequest {
	r.microsoftGraphWorkbookTable = &microsoftGraphWorkbookTable
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetCreateTablesRequest) Execute() (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetCreateTablesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetCreateTables Create new navigation property to tables for workbooks

Collection of tables that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesWorksheetCreateTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetCreateTables(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookNamesWorksheetCreateTablesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetCreateTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetCreateTablesExecute(r ApiWorkbooksWorkbookNamesWorksheetCreateTablesRequest) (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetCreateTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTable == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookTable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetDeleteChartsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetDeleteChartsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetDeleteChartsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetDeleteChartsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetDeleteChartsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetDeleteCharts Delete navigation property charts for workbooks

Returns collection of charts that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetDeleteChartsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetDeleteCharts(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetDeleteChartsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetDeleteChartsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetDeleteChartsExecute(r ApiWorkbooksWorkbookNamesWorksheetDeleteChartsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetDeleteCharts")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetDeleteNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookNamedItemId1 string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetDeleteNamesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetDeleteNamesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetDeleteNamesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetDeleteNamesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetDeleteNames Delete navigation property names for workbooks

Returns collection of names that are associated with the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookNamedItemId1 key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesWorksheetDeleteNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetDeleteNames(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookNamedItemId1 string) ApiWorkbooksWorkbookNamesWorksheetDeleteNamesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetDeleteNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookNamedItemId1: workbookNamedItemId1,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetDeleteNamesExecute(r ApiWorkbooksWorkbookNamesWorksheetDeleteNamesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetDeleteNames")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/names/{workbookNamedItem-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id1"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetDeletePivotTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookPivotTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetDeletePivotTablesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetDeletePivotTablesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetDeletePivotTablesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetDeletePivotTablesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetDeletePivotTables Delete navigation property pivotTables for workbooks

Collection of PivotTables that are part of the worksheet.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookNamesWorksheetDeletePivotTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetDeletePivotTables(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookPivotTableId string) ApiWorkbooksWorkbookNamesWorksheetDeletePivotTablesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetDeletePivotTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetDeletePivotTablesExecute(r ApiWorkbooksWorkbookNamesWorksheetDeletePivotTablesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetDeletePivotTables")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/pivotTables/{workbookPivotTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetDeleteProtectionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetDeleteProtectionRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetDeleteProtectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetDeleteProtectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetDeleteProtectionExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetDeleteProtection Delete navigation property protection for workbooks

Returns sheet protection object for a worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesWorksheetDeleteProtectionRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetDeleteProtection(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookNamesWorksheetDeleteProtectionRequest {
	return ApiWorkbooksWorkbookNamesWorksheetDeleteProtectionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetDeleteProtectionExecute(r ApiWorkbooksWorkbookNamesWorksheetDeleteProtectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetDeleteProtection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/protection"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetDeleteTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetDeleteTablesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetDeleteTablesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetDeleteTablesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetDeleteTablesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetDeleteTables Delete navigation property tables for workbooks

Collection of tables that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookNamesWorksheetDeleteTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetDeleteTables(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksWorkbookNamesWorksheetDeleteTablesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetDeleteTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetDeleteTablesExecute(r ApiWorkbooksWorkbookNamesWorksheetDeleteTablesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetDeleteTables")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetGetChartsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetGetChartsRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetGetChartsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetGetChartsRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetGetChartsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetGetChartsRequest) Execute() (MicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetGetChartsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetGetCharts Get charts from workbooks

Returns collection of charts that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetGetChartsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetGetCharts(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetGetChartsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetGetChartsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChart
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetGetChartsExecute(r ApiWorkbooksWorkbookNamesWorksheetGetChartsRequest) (MicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetGetCharts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetGetNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookNamedItemId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetGetNamesRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetGetNamesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetGetNamesRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetGetNamesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetGetNamesRequest) Execute() (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetGetNamesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetGetNames Get names from workbooks

Returns collection of names that are associated with the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookNamedItemId1 key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesWorksheetGetNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetGetNames(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookNamedItemId1 string) ApiWorkbooksWorkbookNamesWorksheetGetNamesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetGetNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookNamedItemId1: workbookNamedItemId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookNamedItem
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetGetNamesExecute(r ApiWorkbooksWorkbookNamesWorksheetGetNamesRequest) (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetGetNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/names/{workbookNamedItem-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id1"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetGetPivotTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookPivotTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetGetPivotTablesRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetGetPivotTablesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetGetPivotTablesRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetGetPivotTablesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetGetPivotTablesRequest) Execute() (MicrosoftGraphWorkbookPivotTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetGetPivotTablesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetGetPivotTables Get pivotTables from workbooks

Collection of PivotTables that are part of the worksheet.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookNamesWorksheetGetPivotTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetGetPivotTables(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookPivotTableId string) ApiWorkbooksWorkbookNamesWorksheetGetPivotTablesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetGetPivotTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookPivotTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetGetPivotTablesExecute(r ApiWorkbooksWorkbookNamesWorksheetGetPivotTablesRequest) (MicrosoftGraphWorkbookPivotTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookPivotTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetGetPivotTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/pivotTables/{workbookPivotTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetGetProtectionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetGetProtectionRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetGetProtectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetGetProtectionRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetGetProtectionRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetGetProtectionRequest) Execute() (MicrosoftGraphWorkbookWorksheetProtection, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetGetProtectionExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetGetProtection Get protection from workbooks

Returns sheet protection object for a worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesWorksheetGetProtectionRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetGetProtection(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookNamesWorksheetGetProtectionRequest {
	return ApiWorkbooksWorkbookNamesWorksheetGetProtectionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheetProtection
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetGetProtectionExecute(r ApiWorkbooksWorkbookNamesWorksheetGetProtectionRequest) (MicrosoftGraphWorkbookWorksheetProtection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheetProtection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetGetProtection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/protection"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetGetTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetGetTablesRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetGetTablesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetGetTablesRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetGetTablesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetGetTablesRequest) Execute() (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetGetTablesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetGetTables Get tables from workbooks

Collection of tables that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookNamesWorksheetGetTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetGetTables(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksWorkbookNamesWorksheetGetTablesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetGetTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetGetTablesExecute(r ApiWorkbooksWorkbookNamesWorksheetGetTablesRequest) (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetGetTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetListChartsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetListChartsRequest) Top(top int32) ApiWorkbooksWorkbookNamesWorksheetListChartsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetListChartsRequest) Skip(skip int32) ApiWorkbooksWorkbookNamesWorksheetListChartsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookNamesWorksheetListChartsRequest) Search(search string) ApiWorkbooksWorkbookNamesWorksheetListChartsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetListChartsRequest) Filter(filter string) ApiWorkbooksWorkbookNamesWorksheetListChartsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookNamesWorksheetListChartsRequest) Count(count bool) ApiWorkbooksWorkbookNamesWorksheetListChartsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetListChartsRequest) Orderby(orderby []string) ApiWorkbooksWorkbookNamesWorksheetListChartsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetListChartsRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetListChartsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetListChartsRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetListChartsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetListChartsRequest) Execute() (CollectionOfWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetListChartsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetListCharts Get charts from workbooks

Returns collection of charts that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesWorksheetListChartsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetListCharts(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookNamesWorksheetListChartsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetListChartsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookChart
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetListChartsExecute(r ApiWorkbooksWorkbookNamesWorksheetListChartsRequest) (CollectionOfWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetListCharts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetListNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetListNamesRequest) Top(top int32) ApiWorkbooksWorkbookNamesWorksheetListNamesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetListNamesRequest) Skip(skip int32) ApiWorkbooksWorkbookNamesWorksheetListNamesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookNamesWorksheetListNamesRequest) Search(search string) ApiWorkbooksWorkbookNamesWorksheetListNamesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetListNamesRequest) Filter(filter string) ApiWorkbooksWorkbookNamesWorksheetListNamesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookNamesWorksheetListNamesRequest) Count(count bool) ApiWorkbooksWorkbookNamesWorksheetListNamesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetListNamesRequest) Orderby(orderby []string) ApiWorkbooksWorkbookNamesWorksheetListNamesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetListNamesRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetListNamesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetListNamesRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetListNamesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetListNamesRequest) Execute() (CollectionOfWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetListNamesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetListNames Get names from workbooks

Returns collection of names that are associated with the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesWorksheetListNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetListNames(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookNamesWorksheetListNamesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetListNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookNamedItem
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetListNamesExecute(r ApiWorkbooksWorkbookNamesWorksheetListNamesRequest) (CollectionOfWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetListNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/names"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest) Top(top int32) ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest) Skip(skip int32) ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest) Search(search string) ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest) Filter(filter string) ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest) Count(count bool) ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest) Orderby(orderby []string) ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest) Execute() (CollectionOfWorkbookPivotTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetListPivotTablesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetListPivotTables Get pivotTables from workbooks

Collection of PivotTables that are part of the worksheet.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetListPivotTables(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookPivotTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetListPivotTablesExecute(r ApiWorkbooksWorkbookNamesWorksheetListPivotTablesRequest) (CollectionOfWorkbookPivotTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookPivotTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetListPivotTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/pivotTables"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetListTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetListTablesRequest) Top(top int32) ApiWorkbooksWorkbookNamesWorksheetListTablesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetListTablesRequest) Skip(skip int32) ApiWorkbooksWorkbookNamesWorksheetListTablesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookNamesWorksheetListTablesRequest) Search(search string) ApiWorkbooksWorkbookNamesWorksheetListTablesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetListTablesRequest) Filter(filter string) ApiWorkbooksWorkbookNamesWorksheetListTablesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookNamesWorksheetListTablesRequest) Count(count bool) ApiWorkbooksWorkbookNamesWorksheetListTablesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetListTablesRequest) Orderby(orderby []string) ApiWorkbooksWorkbookNamesWorksheetListTablesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetListTablesRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetListTablesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetListTablesRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetListTablesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetListTablesRequest) Execute() (CollectionOfWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetListTablesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetListTables Get tables from workbooks

Collection of tables that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesWorksheetListTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetListTables(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookNamesWorksheetListTablesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetListTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetListTablesExecute(r ApiWorkbooksWorkbookNamesWorksheetListTablesRequest) (CollectionOfWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetListTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetPivotTablesDeleteWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookPivotTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetPivotTablesDeleteWorksheetRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetPivotTablesDeleteWorksheetRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetPivotTablesDeleteWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetPivotTablesDeleteWorksheetExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetPivotTablesDeleteWorksheet Delete navigation property worksheet for workbooks

The worksheet containing the current PivotTable. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookNamesWorksheetPivotTablesDeleteWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetPivotTablesDeleteWorksheet(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookPivotTableId string) ApiWorkbooksWorkbookNamesWorksheetPivotTablesDeleteWorksheetRequest {
	return ApiWorkbooksWorkbookNamesWorksheetPivotTablesDeleteWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetPivotTablesDeleteWorksheetExecute(r ApiWorkbooksWorkbookNamesWorksheetPivotTablesDeleteWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetPivotTablesDeleteWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetPivotTablesGetWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookPivotTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetPivotTablesGetWorksheetRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetPivotTablesGetWorksheetRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetPivotTablesGetWorksheetRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetPivotTablesGetWorksheetRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetPivotTablesGetWorksheetRequest) Execute() (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetPivotTablesGetWorksheetExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetPivotTablesGetWorksheet Get worksheet from workbooks

The worksheet containing the current PivotTable. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookNamesWorksheetPivotTablesGetWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetPivotTablesGetWorksheet(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookPivotTableId string) ApiWorkbooksWorkbookNamesWorksheetPivotTablesGetWorksheetRequest {
	return ApiWorkbooksWorkbookNamesWorksheetPivotTablesGetWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheet
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetPivotTablesGetWorksheetExecute(r ApiWorkbooksWorkbookNamesWorksheetPivotTablesGetWorksheetRequest) (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetPivotTablesGetWorksheet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetPivotTablesUpdateWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookPivotTableId string
	microsoftGraphWorkbookWorksheet *MicrosoftGraphWorkbookWorksheet
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetPivotTablesUpdateWorksheetRequest) MicrosoftGraphWorkbookWorksheet(microsoftGraphWorkbookWorksheet MicrosoftGraphWorkbookWorksheet) ApiWorkbooksWorkbookNamesWorksheetPivotTablesUpdateWorksheetRequest {
	r.microsoftGraphWorkbookWorksheet = &microsoftGraphWorkbookWorksheet
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetPivotTablesUpdateWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetPivotTablesUpdateWorksheetExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetPivotTablesUpdateWorksheet Update the navigation property worksheet in workbooks

The worksheet containing the current PivotTable. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookNamesWorksheetPivotTablesUpdateWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetPivotTablesUpdateWorksheet(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookPivotTableId string) ApiWorkbooksWorkbookNamesWorksheetPivotTablesUpdateWorksheetRequest {
	return ApiWorkbooksWorkbookNamesWorksheetPivotTablesUpdateWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetPivotTablesUpdateWorksheetExecute(r ApiWorkbooksWorkbookNamesWorksheetPivotTablesUpdateWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetPivotTablesUpdateWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheet == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesColumnsDeleteFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetTablesColumnsDeleteFilterRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetTablesColumnsDeleteFilterRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesColumnsDeleteFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesColumnsDeleteFilterExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesColumnsDeleteFilter Delete navigation property filter for workbooks

Retrieve the filter applied to the column. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookNamesWorksheetTablesColumnsDeleteFilterRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesColumnsDeleteFilter(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookNamesWorksheetTablesColumnsDeleteFilterRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesColumnsDeleteFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesColumnsDeleteFilterExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesColumnsDeleteFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesColumnsDeleteFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesColumnsGetFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetTablesColumnsGetFilterRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetTablesColumnsGetFilterRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetTablesColumnsGetFilterRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetTablesColumnsGetFilterRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesColumnsGetFilterRequest) Execute() (MicrosoftGraphWorkbookFilter, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesColumnsGetFilterExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesColumnsGetFilter Get filter from workbooks

Retrieve the filter applied to the column. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookNamesWorksheetTablesColumnsGetFilterRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesColumnsGetFilter(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookNamesWorksheetTablesColumnsGetFilterRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesColumnsGetFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookFilter
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesColumnsGetFilterExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesColumnsGetFilterRequest) (MicrosoftGraphWorkbookFilter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookFilter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesColumnsGetFilter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesColumnsUpdateFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	microsoftGraphWorkbookFilter *MicrosoftGraphWorkbookFilter
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetTablesColumnsUpdateFilterRequest) MicrosoftGraphWorkbookFilter(microsoftGraphWorkbookFilter MicrosoftGraphWorkbookFilter) ApiWorkbooksWorkbookNamesWorksheetTablesColumnsUpdateFilterRequest {
	r.microsoftGraphWorkbookFilter = &microsoftGraphWorkbookFilter
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesColumnsUpdateFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesColumnsUpdateFilterExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesColumnsUpdateFilter Update the navigation property filter in workbooks

Retrieve the filter applied to the column. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookNamesWorksheetTablesColumnsUpdateFilterRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesColumnsUpdateFilter(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookNamesWorksheetTablesColumnsUpdateFilterRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesColumnsUpdateFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesColumnsUpdateFilterExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesColumnsUpdateFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesColumnsUpdateFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookFilter == nil {
		return nil, reportError("microsoftGraphWorkbookFilter is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookFilter
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesCreateColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	microsoftGraphWorkbookTableColumn *MicrosoftGraphWorkbookTableColumn
}

// New navigation property
func (r ApiWorkbooksWorkbookNamesWorksheetTablesCreateColumnsRequest) MicrosoftGraphWorkbookTableColumn(microsoftGraphWorkbookTableColumn MicrosoftGraphWorkbookTableColumn) ApiWorkbooksWorkbookNamesWorksheetTablesCreateColumnsRequest {
	r.microsoftGraphWorkbookTableColumn = &microsoftGraphWorkbookTableColumn
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesCreateColumnsRequest) Execute() (MicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesCreateColumnsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesCreateColumns Create new navigation property to columns for workbooks

Represents a collection of all the columns in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookNamesWorksheetTablesCreateColumnsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesCreateColumns(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksWorkbookNamesWorksheetTablesCreateColumnsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesCreateColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTableColumn
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesCreateColumnsExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesCreateColumnsRequest) (MicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTableColumn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesCreateColumns")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTableColumn == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookTableColumn is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTableColumn
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesCreateRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	microsoftGraphWorkbookTableRow *MicrosoftGraphWorkbookTableRow
}

// New navigation property
func (r ApiWorkbooksWorkbookNamesWorksheetTablesCreateRowsRequest) MicrosoftGraphWorkbookTableRow(microsoftGraphWorkbookTableRow MicrosoftGraphWorkbookTableRow) ApiWorkbooksWorkbookNamesWorksheetTablesCreateRowsRequest {
	r.microsoftGraphWorkbookTableRow = &microsoftGraphWorkbookTableRow
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesCreateRowsRequest) Execute() (MicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesCreateRowsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesCreateRows Create new navigation property to rows for workbooks

Represents a collection of all the rows in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookNamesWorksheetTablesCreateRowsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesCreateRows(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksWorkbookNamesWorksheetTablesCreateRowsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesCreateRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTableRow
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesCreateRowsExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesCreateRowsRequest) (MicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesCreateRows")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/rows"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTableRow == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookTableRow is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTableRow
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesDeleteColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetTablesDeleteColumnsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetTablesDeleteColumnsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesDeleteColumnsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesDeleteColumnsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesDeleteColumns Delete navigation property columns for workbooks

Represents a collection of all the columns in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookNamesWorksheetTablesDeleteColumnsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesDeleteColumns(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookNamesWorksheetTablesDeleteColumnsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesDeleteColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesDeleteColumnsExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesDeleteColumnsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesDeleteColumns")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesDeleteRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableRowId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetTablesDeleteRowsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetTablesDeleteRowsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesDeleteRowsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesDeleteRowsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesDeleteRows Delete navigation property rows for workbooks

Represents a collection of all the rows in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableRowId key: id of workbookTableRow
 @return ApiWorkbooksWorkbookNamesWorksheetTablesDeleteRowsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesDeleteRows(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableRowId string) ApiWorkbooksWorkbookNamesWorksheetTablesDeleteRowsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesDeleteRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableRowId: workbookTableRowId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesDeleteRowsExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesDeleteRowsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesDeleteRows")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/rows/{workbookTableRow-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableRow-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableRowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesDeleteSortRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetTablesDeleteSortRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetTablesDeleteSortRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesDeleteSortRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesDeleteSortExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesDeleteSort Delete navigation property sort for workbooks

Represents the sorting for the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookNamesWorksheetTablesDeleteSortRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesDeleteSort(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksWorkbookNamesWorksheetTablesDeleteSortRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesDeleteSortRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesDeleteSortExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesDeleteSortRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesDeleteSort")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/sort"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesDeleteWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookNamesWorksheetTablesDeleteWorksheetRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookNamesWorksheetTablesDeleteWorksheetRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesDeleteWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesDeleteWorksheetExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesDeleteWorksheet Delete navigation property worksheet for workbooks

The worksheet containing the current table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookNamesWorksheetTablesDeleteWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesDeleteWorksheet(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksWorkbookNamesWorksheetTablesDeleteWorksheetRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesDeleteWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesDeleteWorksheetExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesDeleteWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesDeleteWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesGetColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetTablesGetColumnsRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetTablesGetColumnsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetTablesGetColumnsRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetTablesGetColumnsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesGetColumnsRequest) Execute() (MicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesGetColumnsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesGetColumns Get columns from workbooks

Represents a collection of all the columns in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookNamesWorksheetTablesGetColumnsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesGetColumns(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookNamesWorksheetTablesGetColumnsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesGetColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTableColumn
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesGetColumnsExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesGetColumnsRequest) (MicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTableColumn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesGetColumns")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesGetRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableRowId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetTablesGetRowsRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetTablesGetRowsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetTablesGetRowsRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetTablesGetRowsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesGetRowsRequest) Execute() (MicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesGetRowsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesGetRows Get rows from workbooks

Represents a collection of all the rows in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableRowId key: id of workbookTableRow
 @return ApiWorkbooksWorkbookNamesWorksheetTablesGetRowsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesGetRows(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableRowId string) ApiWorkbooksWorkbookNamesWorksheetTablesGetRowsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesGetRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableRowId: workbookTableRowId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTableRow
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesGetRowsExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesGetRowsRequest) (MicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesGetRows")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/rows/{workbookTableRow-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableRow-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableRowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesGetSortRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetTablesGetSortRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetTablesGetSortRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetTablesGetSortRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetTablesGetSortRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesGetSortRequest) Execute() (MicrosoftGraphWorkbookTableSort, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesGetSortExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesGetSort Get sort from workbooks

Represents the sorting for the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookNamesWorksheetTablesGetSortRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesGetSort(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksWorkbookNamesWorksheetTablesGetSortRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesGetSortRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTableSort
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesGetSortExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesGetSortRequest) (MicrosoftGraphWorkbookTableSort, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTableSort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesGetSort")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/sort"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesGetWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetTablesGetWorksheetRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetTablesGetWorksheetRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetTablesGetWorksheetRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetTablesGetWorksheetRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesGetWorksheetRequest) Execute() (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesGetWorksheetExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesGetWorksheet Get worksheet from workbooks

The worksheet containing the current table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookNamesWorksheetTablesGetWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesGetWorksheet(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksWorkbookNamesWorksheetTablesGetWorksheetRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesGetWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheet
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesGetWorksheetExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesGetWorksheetRequest) (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesGetWorksheet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest) Top(top int32) ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest) Skip(skip int32) ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest) Search(search string) ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest) Filter(filter string) ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest) Count(count bool) ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest) Orderby(orderby []string) ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest) Execute() (CollectionOfWorkbookTableColumn, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesListColumnsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesListColumns Get columns from workbooks

Represents a collection of all the columns in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesListColumns(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookTableColumn
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesListColumnsExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesListColumnsRequest) (CollectionOfWorkbookTableColumn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookTableColumn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesListColumns")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest) Top(top int32) ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest) Skip(skip int32) ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest) Search(search string) ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest) Filter(filter string) ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest) Count(count bool) ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest) Orderby(orderby []string) ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest) Select_(select_ []string) ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest) Expand(expand []string) ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest) Execute() (CollectionOfWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesListRowsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesListRows Get rows from workbooks

Represents a collection of all the rows in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesListRows(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookTableRow
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesListRowsExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesListRowsRequest) (CollectionOfWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesListRows")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/rows"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesUpdateColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
	microsoftGraphWorkbookTableColumn *MicrosoftGraphWorkbookTableColumn
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetTablesUpdateColumnsRequest) MicrosoftGraphWorkbookTableColumn(microsoftGraphWorkbookTableColumn MicrosoftGraphWorkbookTableColumn) ApiWorkbooksWorkbookNamesWorksheetTablesUpdateColumnsRequest {
	r.microsoftGraphWorkbookTableColumn = &microsoftGraphWorkbookTableColumn
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesUpdateColumnsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesUpdateColumnsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesUpdateColumns Update the navigation property columns in workbooks

Represents a collection of all the columns in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookNamesWorksheetTablesUpdateColumnsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesUpdateColumns(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookNamesWorksheetTablesUpdateColumnsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesUpdateColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesUpdateColumnsExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesUpdateColumnsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesUpdateColumns")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTableColumn == nil {
		return nil, reportError("microsoftGraphWorkbookTableColumn is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTableColumn
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesUpdateRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableRowId string
	microsoftGraphWorkbookTableRow *MicrosoftGraphWorkbookTableRow
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetTablesUpdateRowsRequest) MicrosoftGraphWorkbookTableRow(microsoftGraphWorkbookTableRow MicrosoftGraphWorkbookTableRow) ApiWorkbooksWorkbookNamesWorksheetTablesUpdateRowsRequest {
	r.microsoftGraphWorkbookTableRow = &microsoftGraphWorkbookTableRow
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesUpdateRowsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesUpdateRowsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesUpdateRows Update the navigation property rows in workbooks

Represents a collection of all the rows in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableRowId key: id of workbookTableRow
 @return ApiWorkbooksWorkbookNamesWorksheetTablesUpdateRowsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesUpdateRows(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableRowId string) ApiWorkbooksWorkbookNamesWorksheetTablesUpdateRowsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesUpdateRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableRowId: workbookTableRowId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesUpdateRowsExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesUpdateRowsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesUpdateRows")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/rows/{workbookTableRow-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableRow-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableRowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTableRow == nil {
		return nil, reportError("microsoftGraphWorkbookTableRow is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTableRow
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesUpdateSortRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	microsoftGraphWorkbookTableSort *MicrosoftGraphWorkbookTableSort
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetTablesUpdateSortRequest) MicrosoftGraphWorkbookTableSort(microsoftGraphWorkbookTableSort MicrosoftGraphWorkbookTableSort) ApiWorkbooksWorkbookNamesWorksheetTablesUpdateSortRequest {
	r.microsoftGraphWorkbookTableSort = &microsoftGraphWorkbookTableSort
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesUpdateSortRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesUpdateSortExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesUpdateSort Update the navigation property sort in workbooks

Represents the sorting for the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookNamesWorksheetTablesUpdateSortRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesUpdateSort(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksWorkbookNamesWorksheetTablesUpdateSortRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesUpdateSortRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesUpdateSortExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesUpdateSortRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesUpdateSort")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/sort"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTableSort == nil {
		return nil, reportError("microsoftGraphWorkbookTableSort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTableSort
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetTablesUpdateWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	microsoftGraphWorkbookWorksheet *MicrosoftGraphWorkbookWorksheet
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetTablesUpdateWorksheetRequest) MicrosoftGraphWorkbookWorksheet(microsoftGraphWorkbookWorksheet MicrosoftGraphWorkbookWorksheet) ApiWorkbooksWorkbookNamesWorksheetTablesUpdateWorksheetRequest {
	r.microsoftGraphWorkbookWorksheet = &microsoftGraphWorkbookWorksheet
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetTablesUpdateWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetTablesUpdateWorksheetExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetTablesUpdateWorksheet Update the navigation property worksheet in workbooks

The worksheet containing the current table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookNamesWorksheetTablesUpdateWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesUpdateWorksheet(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksWorkbookNamesWorksheetTablesUpdateWorksheetRequest {
	return ApiWorkbooksWorkbookNamesWorksheetTablesUpdateWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetTablesUpdateWorksheetExecute(r ApiWorkbooksWorkbookNamesWorksheetTablesUpdateWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetTablesUpdateWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheet == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetUpdateChartsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	microsoftGraphWorkbookChart *MicrosoftGraphWorkbookChart
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetUpdateChartsRequest) MicrosoftGraphWorkbookChart(microsoftGraphWorkbookChart MicrosoftGraphWorkbookChart) ApiWorkbooksWorkbookNamesWorksheetUpdateChartsRequest {
	r.microsoftGraphWorkbookChart = &microsoftGraphWorkbookChart
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetUpdateChartsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetUpdateChartsExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetUpdateCharts Update the navigation property charts in workbooks

Returns collection of charts that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookNamesWorksheetUpdateChartsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetUpdateCharts(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksWorkbookNamesWorksheetUpdateChartsRequest {
	return ApiWorkbooksWorkbookNamesWorksheetUpdateChartsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetUpdateChartsExecute(r ApiWorkbooksWorkbookNamesWorksheetUpdateChartsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetUpdateCharts")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChart == nil {
		return nil, reportError("microsoftGraphWorkbookChart is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChart
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetUpdateNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookNamedItemId1 string
	microsoftGraphWorkbookNamedItem *MicrosoftGraphWorkbookNamedItem
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetUpdateNamesRequest) MicrosoftGraphWorkbookNamedItem(microsoftGraphWorkbookNamedItem MicrosoftGraphWorkbookNamedItem) ApiWorkbooksWorkbookNamesWorksheetUpdateNamesRequest {
	r.microsoftGraphWorkbookNamedItem = &microsoftGraphWorkbookNamedItem
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetUpdateNamesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetUpdateNamesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetUpdateNames Update the navigation property names in workbooks

Returns collection of names that are associated with the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookNamedItemId1 key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesWorksheetUpdateNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetUpdateNames(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookNamedItemId1 string) ApiWorkbooksWorkbookNamesWorksheetUpdateNamesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetUpdateNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookNamedItemId1: workbookNamedItemId1,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetUpdateNamesExecute(r ApiWorkbooksWorkbookNamesWorksheetUpdateNamesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetUpdateNames")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/names/{workbookNamedItem-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id1"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookNamedItem == nil {
		return nil, reportError("microsoftGraphWorkbookNamedItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookNamedItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetUpdatePivotTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookPivotTableId string
	microsoftGraphWorkbookPivotTable *MicrosoftGraphWorkbookPivotTable
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetUpdatePivotTablesRequest) MicrosoftGraphWorkbookPivotTable(microsoftGraphWorkbookPivotTable MicrosoftGraphWorkbookPivotTable) ApiWorkbooksWorkbookNamesWorksheetUpdatePivotTablesRequest {
	r.microsoftGraphWorkbookPivotTable = &microsoftGraphWorkbookPivotTable
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetUpdatePivotTablesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetUpdatePivotTablesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetUpdatePivotTables Update the navigation property pivotTables in workbooks

Collection of PivotTables that are part of the worksheet.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookNamesWorksheetUpdatePivotTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetUpdatePivotTables(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookPivotTableId string) ApiWorkbooksWorkbookNamesWorksheetUpdatePivotTablesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetUpdatePivotTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetUpdatePivotTablesExecute(r ApiWorkbooksWorkbookNamesWorksheetUpdatePivotTablesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetUpdatePivotTables")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/pivotTables/{workbookPivotTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookPivotTable == nil {
		return nil, reportError("microsoftGraphWorkbookPivotTable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookPivotTable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetUpdateProtectionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	microsoftGraphWorkbookWorksheetProtection *MicrosoftGraphWorkbookWorksheetProtection
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetUpdateProtectionRequest) MicrosoftGraphWorkbookWorksheetProtection(microsoftGraphWorkbookWorksheetProtection MicrosoftGraphWorkbookWorksheetProtection) ApiWorkbooksWorkbookNamesWorksheetUpdateProtectionRequest {
	r.microsoftGraphWorkbookWorksheetProtection = &microsoftGraphWorkbookWorksheetProtection
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetUpdateProtectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetUpdateProtectionExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetUpdateProtection Update the navigation property protection in workbooks

Returns sheet protection object for a worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookNamesWorksheetUpdateProtectionRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetUpdateProtection(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookNamesWorksheetUpdateProtectionRequest {
	return ApiWorkbooksWorkbookNamesWorksheetUpdateProtectionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetUpdateProtectionExecute(r ApiWorkbooksWorkbookNamesWorksheetUpdateProtectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetUpdateProtection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/protection"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheetProtection == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheetProtection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheetProtection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookNamesWorksheetUpdateTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	microsoftGraphWorkbookTable *MicrosoftGraphWorkbookTable
}

// New navigation property values
func (r ApiWorkbooksWorkbookNamesWorksheetUpdateTablesRequest) MicrosoftGraphWorkbookTable(microsoftGraphWorkbookTable MicrosoftGraphWorkbookTable) ApiWorkbooksWorkbookNamesWorksheetUpdateTablesRequest {
	r.microsoftGraphWorkbookTable = &microsoftGraphWorkbookTable
	return r
}

func (r ApiWorkbooksWorkbookNamesWorksheetUpdateTablesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookNamesWorksheetUpdateTablesExecute(r)
}

/*
WorkbooksWorkbookNamesWorksheetUpdateTables Update the navigation property tables in workbooks

Collection of tables that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookNamesWorksheetUpdateTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetUpdateTables(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksWorkbookNamesWorksheetUpdateTablesRequest {
	return ApiWorkbooksWorkbookNamesWorksheetUpdateTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookNamesWorksheetUpdateTablesExecute(r ApiWorkbooksWorkbookNamesWorksheetUpdateTablesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookNamesWorksheetUpdateTables")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTable == nil {
		return nil, reportError("microsoftGraphWorkbookTable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesColumnsDeleteFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesColumnsDeleteFilterRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesColumnsDeleteFilterRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesColumnsDeleteFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesColumnsDeleteFilterExecute(r)
}

/*
WorkbooksWorkbookTablesColumnsDeleteFilter Delete navigation property filter for workbooks

Retrieve the filter applied to the column. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookTablesColumnsDeleteFilterRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesColumnsDeleteFilter(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookTablesColumnsDeleteFilterRequest {
	return ApiWorkbooksWorkbookTablesColumnsDeleteFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesColumnsDeleteFilterExecute(r ApiWorkbooksWorkbookTablesColumnsDeleteFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesColumnsDeleteFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesColumnsGetFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesColumnsGetFilterRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesColumnsGetFilterRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesColumnsGetFilterRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesColumnsGetFilterRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesColumnsGetFilterRequest) Execute() (MicrosoftGraphWorkbookFilter, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesColumnsGetFilterExecute(r)
}

/*
WorkbooksWorkbookTablesColumnsGetFilter Get filter from workbooks

Retrieve the filter applied to the column. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookTablesColumnsGetFilterRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesColumnsGetFilter(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookTablesColumnsGetFilterRequest {
	return ApiWorkbooksWorkbookTablesColumnsGetFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookFilter
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesColumnsGetFilterExecute(r ApiWorkbooksWorkbookTablesColumnsGetFilterRequest) (MicrosoftGraphWorkbookFilter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookFilter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesColumnsGetFilter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesColumnsUpdateFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	microsoftGraphWorkbookFilter *MicrosoftGraphWorkbookFilter
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesColumnsUpdateFilterRequest) MicrosoftGraphWorkbookFilter(microsoftGraphWorkbookFilter MicrosoftGraphWorkbookFilter) ApiWorkbooksWorkbookTablesColumnsUpdateFilterRequest {
	r.microsoftGraphWorkbookFilter = &microsoftGraphWorkbookFilter
	return r
}

func (r ApiWorkbooksWorkbookTablesColumnsUpdateFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesColumnsUpdateFilterExecute(r)
}

/*
WorkbooksWorkbookTablesColumnsUpdateFilter Update the navigation property filter in workbooks

Retrieve the filter applied to the column. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookTablesColumnsUpdateFilterRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesColumnsUpdateFilter(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookTablesColumnsUpdateFilterRequest {
	return ApiWorkbooksWorkbookTablesColumnsUpdateFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesColumnsUpdateFilterExecute(r ApiWorkbooksWorkbookTablesColumnsUpdateFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesColumnsUpdateFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookFilter == nil {
		return nil, reportError("microsoftGraphWorkbookFilter is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookFilter
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesCreateColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	microsoftGraphWorkbookTableColumn *MicrosoftGraphWorkbookTableColumn
}

// New navigation property
func (r ApiWorkbooksWorkbookTablesCreateColumnsRequest) MicrosoftGraphWorkbookTableColumn(microsoftGraphWorkbookTableColumn MicrosoftGraphWorkbookTableColumn) ApiWorkbooksWorkbookTablesCreateColumnsRequest {
	r.microsoftGraphWorkbookTableColumn = &microsoftGraphWorkbookTableColumn
	return r
}

func (r ApiWorkbooksWorkbookTablesCreateColumnsRequest) Execute() (MicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesCreateColumnsExecute(r)
}

/*
WorkbooksWorkbookTablesCreateColumns Create new navigation property to columns for workbooks

Represents a collection of all the columns in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesCreateColumnsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesCreateColumns(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesCreateColumnsRequest {
	return ApiWorkbooksWorkbookTablesCreateColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTableColumn
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesCreateColumnsExecute(r ApiWorkbooksWorkbookTablesCreateColumnsRequest) (MicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTableColumn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesCreateColumns")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTableColumn == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookTableColumn is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTableColumn
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesCreateRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	microsoftGraphWorkbookTableRow *MicrosoftGraphWorkbookTableRow
}

// New navigation property
func (r ApiWorkbooksWorkbookTablesCreateRowsRequest) MicrosoftGraphWorkbookTableRow(microsoftGraphWorkbookTableRow MicrosoftGraphWorkbookTableRow) ApiWorkbooksWorkbookTablesCreateRowsRequest {
	r.microsoftGraphWorkbookTableRow = &microsoftGraphWorkbookTableRow
	return r
}

func (r ApiWorkbooksWorkbookTablesCreateRowsRequest) Execute() (MicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesCreateRowsExecute(r)
}

/*
WorkbooksWorkbookTablesCreateRows Create new navigation property to rows for workbooks

Represents a collection of all the rows in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesCreateRowsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesCreateRows(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesCreateRowsRequest {
	return ApiWorkbooksWorkbookTablesCreateRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTableRow
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesCreateRowsExecute(r ApiWorkbooksWorkbookTablesCreateRowsRequest) (MicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesCreateRows")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/rows"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTableRow == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookTableRow is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTableRow
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesDeleteColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesDeleteColumnsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesDeleteColumnsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesDeleteColumnsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesDeleteColumnsExecute(r)
}

/*
WorkbooksWorkbookTablesDeleteColumns Delete navigation property columns for workbooks

Represents a collection of all the columns in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookTablesDeleteColumnsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesDeleteColumns(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookTablesDeleteColumnsRequest {
	return ApiWorkbooksWorkbookTablesDeleteColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesDeleteColumnsExecute(r ApiWorkbooksWorkbookTablesDeleteColumnsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesDeleteColumns")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesDeleteRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookTableRowId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesDeleteRowsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesDeleteRowsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesDeleteRowsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesDeleteRowsExecute(r)
}

/*
WorkbooksWorkbookTablesDeleteRows Delete navigation property rows for workbooks

Represents a collection of all the rows in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableRowId key: id of workbookTableRow
 @return ApiWorkbooksWorkbookTablesDeleteRowsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesDeleteRows(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableRowId string) ApiWorkbooksWorkbookTablesDeleteRowsRequest {
	return ApiWorkbooksWorkbookTablesDeleteRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableRowId: workbookTableRowId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesDeleteRowsExecute(r ApiWorkbooksWorkbookTablesDeleteRowsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesDeleteRows")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/rows/{workbookTableRow-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableRow-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableRowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesDeleteSortRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesDeleteSortRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesDeleteSortRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesDeleteSortRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesDeleteSortExecute(r)
}

/*
WorkbooksWorkbookTablesDeleteSort Delete navigation property sort for workbooks

Represents the sorting for the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesDeleteSortRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesDeleteSort(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesDeleteSortRequest {
	return ApiWorkbooksWorkbookTablesDeleteSortRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesDeleteSortExecute(r ApiWorkbooksWorkbookTablesDeleteSortRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesDeleteSort")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/sort"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesDeleteWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesDeleteWorksheetRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesDeleteWorksheetRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesDeleteWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesDeleteWorksheetExecute(r)
}

/*
WorkbooksWorkbookTablesDeleteWorksheet Delete navigation property worksheet for workbooks

The worksheet containing the current table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesDeleteWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesDeleteWorksheet(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesDeleteWorksheetRequest {
	return ApiWorkbooksWorkbookTablesDeleteWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesDeleteWorksheetExecute(r ApiWorkbooksWorkbookTablesDeleteWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesDeleteWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesGetColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesGetColumnsRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesGetColumnsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesGetColumnsRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesGetColumnsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesGetColumnsRequest) Execute() (MicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesGetColumnsExecute(r)
}

/*
WorkbooksWorkbookTablesGetColumns Get columns from workbooks

Represents a collection of all the columns in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookTablesGetColumnsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesGetColumns(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookTablesGetColumnsRequest {
	return ApiWorkbooksWorkbookTablesGetColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTableColumn
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesGetColumnsExecute(r ApiWorkbooksWorkbookTablesGetColumnsRequest) (MicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTableColumn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesGetColumns")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesGetRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookTableRowId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesGetRowsRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesGetRowsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesGetRowsRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesGetRowsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesGetRowsRequest) Execute() (MicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesGetRowsExecute(r)
}

/*
WorkbooksWorkbookTablesGetRows Get rows from workbooks

Represents a collection of all the rows in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableRowId key: id of workbookTableRow
 @return ApiWorkbooksWorkbookTablesGetRowsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesGetRows(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableRowId string) ApiWorkbooksWorkbookTablesGetRowsRequest {
	return ApiWorkbooksWorkbookTablesGetRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableRowId: workbookTableRowId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTableRow
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesGetRowsExecute(r ApiWorkbooksWorkbookTablesGetRowsRequest) (MicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesGetRows")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/rows/{workbookTableRow-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableRow-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableRowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesGetSortRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesGetSortRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesGetSortRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesGetSortRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesGetSortRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesGetSortRequest) Execute() (MicrosoftGraphWorkbookTableSort, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesGetSortExecute(r)
}

/*
WorkbooksWorkbookTablesGetSort Get sort from workbooks

Represents the sorting for the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesGetSortRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesGetSort(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesGetSortRequest {
	return ApiWorkbooksWorkbookTablesGetSortRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTableSort
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesGetSortExecute(r ApiWorkbooksWorkbookTablesGetSortRequest) (MicrosoftGraphWorkbookTableSort, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTableSort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesGetSort")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/sort"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesGetWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesGetWorksheetRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesGetWorksheetRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesGetWorksheetRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesGetWorksheetRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesGetWorksheetRequest) Execute() (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesGetWorksheetExecute(r)
}

/*
WorkbooksWorkbookTablesGetWorksheet Get worksheet from workbooks

The worksheet containing the current table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesGetWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesGetWorksheet(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesGetWorksheetRequest {
	return ApiWorkbooksWorkbookTablesGetWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheet
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesGetWorksheetExecute(r ApiWorkbooksWorkbookTablesGetWorksheetRequest) (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesGetWorksheet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesListColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookTablesListColumnsRequest) Top(top int32) ApiWorkbooksWorkbookTablesListColumnsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookTablesListColumnsRequest) Skip(skip int32) ApiWorkbooksWorkbookTablesListColumnsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookTablesListColumnsRequest) Search(search string) ApiWorkbooksWorkbookTablesListColumnsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookTablesListColumnsRequest) Filter(filter string) ApiWorkbooksWorkbookTablesListColumnsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookTablesListColumnsRequest) Count(count bool) ApiWorkbooksWorkbookTablesListColumnsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookTablesListColumnsRequest) Orderby(orderby []string) ApiWorkbooksWorkbookTablesListColumnsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesListColumnsRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesListColumnsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesListColumnsRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesListColumnsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesListColumnsRequest) Execute() (CollectionOfWorkbookTableColumn, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesListColumnsExecute(r)
}

/*
WorkbooksWorkbookTablesListColumns Get columns from workbooks

Represents a collection of all the columns in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesListColumnsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesListColumns(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesListColumnsRequest {
	return ApiWorkbooksWorkbookTablesListColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookTableColumn
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesListColumnsExecute(r ApiWorkbooksWorkbookTablesListColumnsRequest) (CollectionOfWorkbookTableColumn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookTableColumn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesListColumns")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesListRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookTablesListRowsRequest) Top(top int32) ApiWorkbooksWorkbookTablesListRowsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookTablesListRowsRequest) Skip(skip int32) ApiWorkbooksWorkbookTablesListRowsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookTablesListRowsRequest) Search(search string) ApiWorkbooksWorkbookTablesListRowsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookTablesListRowsRequest) Filter(filter string) ApiWorkbooksWorkbookTablesListRowsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookTablesListRowsRequest) Count(count bool) ApiWorkbooksWorkbookTablesListRowsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookTablesListRowsRequest) Orderby(orderby []string) ApiWorkbooksWorkbookTablesListRowsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesListRowsRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesListRowsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesListRowsRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesListRowsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesListRowsRequest) Execute() (CollectionOfWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesListRowsExecute(r)
}

/*
WorkbooksWorkbookTablesListRows Get rows from workbooks

Represents a collection of all the rows in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesListRowsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesListRows(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesListRowsRequest {
	return ApiWorkbooksWorkbookTablesListRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookTableRow
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesListRowsExecute(r ApiWorkbooksWorkbookTablesListRowsRequest) (CollectionOfWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesListRows")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/rows"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesUpdateColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
	microsoftGraphWorkbookTableColumn *MicrosoftGraphWorkbookTableColumn
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesUpdateColumnsRequest) MicrosoftGraphWorkbookTableColumn(microsoftGraphWorkbookTableColumn MicrosoftGraphWorkbookTableColumn) ApiWorkbooksWorkbookTablesUpdateColumnsRequest {
	r.microsoftGraphWorkbookTableColumn = &microsoftGraphWorkbookTableColumn
	return r
}

func (r ApiWorkbooksWorkbookTablesUpdateColumnsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesUpdateColumnsExecute(r)
}

/*
WorkbooksWorkbookTablesUpdateColumns Update the navigation property columns in workbooks

Represents a collection of all the columns in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookTablesUpdateColumnsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesUpdateColumns(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookTablesUpdateColumnsRequest {
	return ApiWorkbooksWorkbookTablesUpdateColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesUpdateColumnsExecute(r ApiWorkbooksWorkbookTablesUpdateColumnsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesUpdateColumns")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTableColumn == nil {
		return nil, reportError("microsoftGraphWorkbookTableColumn is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTableColumn
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesUpdateRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookTableRowId string
	microsoftGraphWorkbookTableRow *MicrosoftGraphWorkbookTableRow
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesUpdateRowsRequest) MicrosoftGraphWorkbookTableRow(microsoftGraphWorkbookTableRow MicrosoftGraphWorkbookTableRow) ApiWorkbooksWorkbookTablesUpdateRowsRequest {
	r.microsoftGraphWorkbookTableRow = &microsoftGraphWorkbookTableRow
	return r
}

func (r ApiWorkbooksWorkbookTablesUpdateRowsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesUpdateRowsExecute(r)
}

/*
WorkbooksWorkbookTablesUpdateRows Update the navigation property rows in workbooks

Represents a collection of all the rows in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableRowId key: id of workbookTableRow
 @return ApiWorkbooksWorkbookTablesUpdateRowsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesUpdateRows(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableRowId string) ApiWorkbooksWorkbookTablesUpdateRowsRequest {
	return ApiWorkbooksWorkbookTablesUpdateRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableRowId: workbookTableRowId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesUpdateRowsExecute(r ApiWorkbooksWorkbookTablesUpdateRowsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesUpdateRows")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/rows/{workbookTableRow-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableRow-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableRowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTableRow == nil {
		return nil, reportError("microsoftGraphWorkbookTableRow is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTableRow
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesUpdateSortRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	microsoftGraphWorkbookTableSort *MicrosoftGraphWorkbookTableSort
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesUpdateSortRequest) MicrosoftGraphWorkbookTableSort(microsoftGraphWorkbookTableSort MicrosoftGraphWorkbookTableSort) ApiWorkbooksWorkbookTablesUpdateSortRequest {
	r.microsoftGraphWorkbookTableSort = &microsoftGraphWorkbookTableSort
	return r
}

func (r ApiWorkbooksWorkbookTablesUpdateSortRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesUpdateSortExecute(r)
}

/*
WorkbooksWorkbookTablesUpdateSort Update the navigation property sort in workbooks

Represents the sorting for the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesUpdateSortRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesUpdateSort(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesUpdateSortRequest {
	return ApiWorkbooksWorkbookTablesUpdateSortRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesUpdateSortExecute(r ApiWorkbooksWorkbookTablesUpdateSortRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesUpdateSort")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/sort"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTableSort == nil {
		return nil, reportError("microsoftGraphWorkbookTableSort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTableSort
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesUpdateWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	microsoftGraphWorkbookWorksheet *MicrosoftGraphWorkbookWorksheet
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesUpdateWorksheetRequest) MicrosoftGraphWorkbookWorksheet(microsoftGraphWorkbookWorksheet MicrosoftGraphWorkbookWorksheet) ApiWorkbooksWorkbookTablesUpdateWorksheetRequest {
	r.microsoftGraphWorkbookWorksheet = &microsoftGraphWorkbookWorksheet
	return r
}

func (r ApiWorkbooksWorkbookTablesUpdateWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesUpdateWorksheetExecute(r)
}

/*
WorkbooksWorkbookTablesUpdateWorksheet Update the navigation property worksheet in workbooks

The worksheet containing the current table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesUpdateWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesUpdateWorksheet(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesUpdateWorksheetRequest {
	return ApiWorkbooksWorkbookTablesUpdateWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesUpdateWorksheetExecute(r ApiWorkbooksWorkbookTablesUpdateWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesUpdateWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheet == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMajorGridlines Delete navigation property majorGridlines for workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMajorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMinorGridlines Delete navigation property minorGridlines for workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMinorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteTitleRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteTitleRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteTitleExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteTitle Delete navigation property title for workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteTitle(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteTitleRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteTitleExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisDeleteTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetFormat Get format from workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetFormatRequest) (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMajorGridlines Get majorGridlines from workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMajorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMajorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMajorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMajorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMinorGridlines Get minorGridlines from workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMinorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMinorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMinorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetMinorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetTitleRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetTitleRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetTitleRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetTitleRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetTitleRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetTitleExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetTitle Get title from workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetTitle(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetTitleRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitle
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetTitleExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetTitleRequest) (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisGetTitle")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMajorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisMinorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatGetFont Get font from workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatGetFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatGetFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleGetFormat Get format from workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitleFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleGetFormatRequest) (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitleFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitleFormat *MicrosoftGraphWorkbookChartAxisTitleFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisTitleFormat(microsoftGraphWorkbookChartAxisTitleFormat MicrosoftGraphWorkbookChartAxisTitleFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisTitleFormat = &microsoftGraphWorkbookChartAxisTitleFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisTitleUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitleFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitleFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitleFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisFormat *MicrosoftGraphWorkbookChartAxisFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisFormat(microsoftGraphWorkbookChartAxisFormat MicrosoftGraphWorkbookChartAxisFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisFormat = &microsoftGraphWorkbookChartAxisFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMajorGridlines Update the navigation property majorGridlines in workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMajorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMinorGridlines Update the navigation property minorGridlines in workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMinorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitle *MicrosoftGraphWorkbookChartAxisTitle
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateTitleRequest) MicrosoftGraphWorkbookChartAxisTitle(microsoftGraphWorkbookChartAxisTitle MicrosoftGraphWorkbookChartAxisTitle) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateTitleRequest {
	r.microsoftGraphWorkbookChartAxisTitle = &microsoftGraphWorkbookChartAxisTitle
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateTitleExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateTitle Update the navigation property title in workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateTitle(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateTitleRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateTitleExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesCategoryAxisUpdateTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitle == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteCategoryAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteCategoryAxisRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteCategoryAxisRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteCategoryAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesDeleteCategoryAxisExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesDeleteCategoryAxis Delete navigation property categoryAxis for workbooks

Represents the category axis in a chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteCategoryAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesDeleteCategoryAxis(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteCategoryAxisRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteCategoryAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesDeleteCategoryAxisExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteCategoryAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesDeleteCategoryAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteSeriesAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteSeriesAxisRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteSeriesAxisRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteSeriesAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesDeleteSeriesAxisExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesDeleteSeriesAxis Delete navigation property seriesAxis for workbooks

Represents the series axis of a 3-dimensional chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteSeriesAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesDeleteSeriesAxis(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteSeriesAxisRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteSeriesAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesDeleteSeriesAxisExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteSeriesAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesDeleteSeriesAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteValueAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteValueAxisRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteValueAxisRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteValueAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesDeleteValueAxisExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesDeleteValueAxis Delete navigation property valueAxis for workbooks

Represents the value axis in an axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteValueAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesDeleteValueAxis(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteValueAxisRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteValueAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesDeleteValueAxisExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesDeleteValueAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesDeleteValueAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetCategoryAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetCategoryAxisRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetCategoryAxisRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetCategoryAxisRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetCategoryAxisRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetCategoryAxisRequest) Execute() (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesGetCategoryAxisExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesGetCategoryAxis Get categoryAxis from workbooks

Represents the category axis in a chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetCategoryAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesGetCategoryAxis(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetCategoryAxisRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetCategoryAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxis
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesGetCategoryAxisExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetCategoryAxisRequest) (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesGetCategoryAxis")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetSeriesAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetSeriesAxisRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetSeriesAxisRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetSeriesAxisRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetSeriesAxisRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetSeriesAxisRequest) Execute() (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesGetSeriesAxisExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesGetSeriesAxis Get seriesAxis from workbooks

Represents the series axis of a 3-dimensional chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetSeriesAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesGetSeriesAxis(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetSeriesAxisRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetSeriesAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxis
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesGetSeriesAxisExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetSeriesAxisRequest) (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesGetSeriesAxis")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetValueAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetValueAxisRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetValueAxisRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetValueAxisRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetValueAxisRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetValueAxisRequest) Execute() (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesGetValueAxisExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesGetValueAxis Get valueAxis from workbooks

Represents the value axis in an axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetValueAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesGetValueAxis(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetValueAxisRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetValueAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxis
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesGetValueAxisExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesGetValueAxisRequest) (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesGetValueAxis")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMajorGridlines Delete navigation property majorGridlines for workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMajorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMinorGridlines Delete navigation property minorGridlines for workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMinorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteTitleRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteTitleRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteTitleExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteTitle Delete navigation property title for workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteTitle(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteTitleRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteTitleExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisDeleteTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetFormat Get format from workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetFormatRequest) (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMajorGridlines Get majorGridlines from workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMajorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMajorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMajorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMajorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMinorGridlines Get minorGridlines from workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMinorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMinorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMinorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetMinorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetTitleRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetTitleRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetTitleRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetTitleRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetTitleRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetTitleExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetTitle Get title from workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetTitle(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetTitleRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitle
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetTitleExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetTitleRequest) (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisGetTitle")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMajorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisMinorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatGetFont Get font from workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatGetFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatGetFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleGetFormat Get format from workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitleFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleGetFormatRequest) (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitleFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitleFormat *MicrosoftGraphWorkbookChartAxisTitleFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisTitleFormat(microsoftGraphWorkbookChartAxisTitleFormat MicrosoftGraphWorkbookChartAxisTitleFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisTitleFormat = &microsoftGraphWorkbookChartAxisTitleFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisTitleUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitleFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitleFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitleFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisFormat *MicrosoftGraphWorkbookChartAxisFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisFormat(microsoftGraphWorkbookChartAxisFormat MicrosoftGraphWorkbookChartAxisFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisFormat = &microsoftGraphWorkbookChartAxisFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMajorGridlines Update the navigation property majorGridlines in workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMajorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMinorGridlines Update the navigation property minorGridlines in workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMinorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitle *MicrosoftGraphWorkbookChartAxisTitle
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateTitleRequest) MicrosoftGraphWorkbookChartAxisTitle(microsoftGraphWorkbookChartAxisTitle MicrosoftGraphWorkbookChartAxisTitle) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateTitleRequest {
	r.microsoftGraphWorkbookChartAxisTitle = &microsoftGraphWorkbookChartAxisTitle
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateTitleExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateTitle Update the navigation property title in workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateTitle(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateTitleRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateTitleExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesSeriesAxisUpdateTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitle == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateCategoryAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartAxis *MicrosoftGraphWorkbookChartAxis
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateCategoryAxisRequest) MicrosoftGraphWorkbookChartAxis(microsoftGraphWorkbookChartAxis MicrosoftGraphWorkbookChartAxis) ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateCategoryAxisRequest {
	r.microsoftGraphWorkbookChartAxis = &microsoftGraphWorkbookChartAxis
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateCategoryAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesUpdateCategoryAxisExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesUpdateCategoryAxis Update the navigation property categoryAxis in workbooks

Represents the category axis in a chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateCategoryAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesUpdateCategoryAxis(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateCategoryAxisRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateCategoryAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesUpdateCategoryAxisExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateCategoryAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesUpdateCategoryAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/categoryAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxis == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxis is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxis
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateSeriesAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartAxis *MicrosoftGraphWorkbookChartAxis
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateSeriesAxisRequest) MicrosoftGraphWorkbookChartAxis(microsoftGraphWorkbookChartAxis MicrosoftGraphWorkbookChartAxis) ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateSeriesAxisRequest {
	r.microsoftGraphWorkbookChartAxis = &microsoftGraphWorkbookChartAxis
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateSeriesAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesUpdateSeriesAxisExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesUpdateSeriesAxis Update the navigation property seriesAxis in workbooks

Represents the series axis of a 3-dimensional chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateSeriesAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesUpdateSeriesAxis(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateSeriesAxisRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateSeriesAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesUpdateSeriesAxisExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateSeriesAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesUpdateSeriesAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/seriesAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxis == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxis is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxis
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateValueAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartAxis *MicrosoftGraphWorkbookChartAxis
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateValueAxisRequest) MicrosoftGraphWorkbookChartAxis(microsoftGraphWorkbookChartAxis MicrosoftGraphWorkbookChartAxis) ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateValueAxisRequest {
	r.microsoftGraphWorkbookChartAxis = &microsoftGraphWorkbookChartAxis
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateValueAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesUpdateValueAxisExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesUpdateValueAxis Update the navigation property valueAxis in workbooks

Represents the value axis in an axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateValueAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesUpdateValueAxis(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateValueAxisRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateValueAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesUpdateValueAxisExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesUpdateValueAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesUpdateValueAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxis == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxis is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxis
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMajorGridlines Delete navigation property majorGridlines for workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMajorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMajorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMinorGridlines Delete navigation property minorGridlines for workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMinorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMinorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteTitleRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteTitleRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteTitleExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteTitle Delete navigation property title for workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteTitle(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteTitleRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteTitleExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisDeleteTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetFormat Get format from workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetFormatRequest) (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMajorGridlines Get majorGridlines from workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMajorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMajorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMajorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMajorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMinorGridlines Get minorGridlines from workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMinorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMinorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMinorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetMinorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetTitleRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetTitleRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetTitleRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetTitleRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetTitleRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetTitleExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetTitle Get title from workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetTitle(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetTitleRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitle
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetTitleExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetTitleRequest) (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisGetTitle")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMajorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisMinorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatDeleteFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatDeleteFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatGetFont Get font from workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatGetFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatGetFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatUpdateFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatUpdateFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleGetFormat Get format from workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitleFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleGetFormatRequest) (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitleFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitleFormat *MicrosoftGraphWorkbookChartAxisTitleFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisTitleFormat(microsoftGraphWorkbookChartAxisTitleFormat MicrosoftGraphWorkbookChartAxisTitleFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisTitleFormat = &microsoftGraphWorkbookChartAxisTitleFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisTitleUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitleFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitleFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitleFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisFormat *MicrosoftGraphWorkbookChartAxisFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisFormat(microsoftGraphWorkbookChartAxisFormat MicrosoftGraphWorkbookChartAxisFormat) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisFormat = &microsoftGraphWorkbookChartAxisFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMajorGridlines Update the navigation property majorGridlines in workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMajorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMajorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMinorGridlines Update the navigation property minorGridlines in workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMinorGridlines(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMinorGridlinesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitle *MicrosoftGraphWorkbookChartAxisTitle
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateTitleRequest) MicrosoftGraphWorkbookChartAxisTitle(microsoftGraphWorkbookChartAxisTitle MicrosoftGraphWorkbookChartAxisTitle) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateTitleRequest {
	r.microsoftGraphWorkbookChartAxisTitle = &microsoftGraphWorkbookChartAxisTitle
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateTitleExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateTitle Update the navigation property title in workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateTitle(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateTitleRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateTitleExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsAxesValueAxisUpdateTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes/valueAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitle == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsCreateSeriesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartSeries *MicrosoftGraphWorkbookChartSeries
}

// New navigation property
func (r ApiWorkbooksWorkbookTablesWorksheetChartsCreateSeriesRequest) MicrosoftGraphWorkbookChartSeries(microsoftGraphWorkbookChartSeries MicrosoftGraphWorkbookChartSeries) ApiWorkbooksWorkbookTablesWorksheetChartsCreateSeriesRequest {
	r.microsoftGraphWorkbookChartSeries = &microsoftGraphWorkbookChartSeries
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsCreateSeriesRequest) Execute() (MicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsCreateSeriesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsCreateSeries Create new navigation property to series for workbooks

Represents either a single series or collection of series in the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsCreateSeriesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsCreateSeries(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsCreateSeriesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsCreateSeriesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartSeries
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsCreateSeriesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsCreateSeriesRequest) (MicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsCreateSeries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartSeries == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookChartSeries is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartSeries
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDataLabelsDeleteFormat Delete navigation property format for workbooks

Represents the format of chart data labels, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/dataLabels/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of the current chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFill Get fill from workbooks

Represents the fill format of the current chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of the current chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/dataLabels/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartDataLabelFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDataLabelsGetFormat Get format from workbooks

Represents the format of chart data labels, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartDataLabelFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsGetFormatRequest) (MicrosoftGraphWorkbookChartDataLabelFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartDataLabelFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/dataLabels/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartDataLabelFormat *MicrosoftGraphWorkbookChartDataLabelFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsUpdateFormatRequest) MicrosoftGraphWorkbookChartDataLabelFormat(microsoftGraphWorkbookChartDataLabelFormat MicrosoftGraphWorkbookChartDataLabelFormat) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsUpdateFormatRequest {
	r.microsoftGraphWorkbookChartDataLabelFormat = &microsoftGraphWorkbookChartDataLabelFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDataLabelsUpdateFormat Update the navigation property format in workbooks

Represents the format of chart data labels, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDataLabelsUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDataLabelsUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDataLabelsUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/dataLabels/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartDataLabelFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartDataLabelFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartDataLabelFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDeleteAxesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteAxesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsDeleteAxesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteAxesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDeleteAxesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDeleteAxes Delete navigation property axes for workbooks

Represents chart axes. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDeleteAxesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDeleteAxes(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsDeleteAxesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDeleteAxesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDeleteAxesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteAxesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDeleteAxes")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDeleteDataLabelsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteDataLabelsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsDeleteDataLabelsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteDataLabelsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDeleteDataLabelsExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDeleteDataLabels Delete navigation property dataLabels for workbooks

Represents the datalabels on the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDeleteDataLabelsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDeleteDataLabels(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsDeleteDataLabelsRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDeleteDataLabelsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDeleteDataLabelsExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteDataLabelsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDeleteDataLabels")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/dataLabels"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDeleteFormat Delete navigation property format for workbooks

Encapsulates the format properties for the chart area. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDeleteLegendRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteLegendRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsDeleteLegendRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteLegendRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDeleteLegendExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDeleteLegend Delete navigation property legend for workbooks

Represents the legend for the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDeleteLegendRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDeleteLegend(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsDeleteLegendRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDeleteLegendRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDeleteLegendExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteLegendRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDeleteLegend")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/legend"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDeleteSeriesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteSeriesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsDeleteSeriesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteSeriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDeleteSeriesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDeleteSeries Delete navigation property series for workbooks

Represents either a single series or collection of series in the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDeleteSeriesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDeleteSeries(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookTablesWorksheetChartsDeleteSeriesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDeleteSeriesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDeleteSeriesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteSeriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDeleteSeries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDeleteTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteTitleRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsDeleteTitleRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDeleteTitleExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDeleteTitle Delete navigation property title for workbooks

Represents the title of the specified chart, including the text, visibility, position and formating of the title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDeleteTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDeleteTitle(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsDeleteTitleRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDeleteTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDeleteTitleExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDeleteTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsDeleteWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteWorksheetRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsDeleteWorksheetRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsDeleteWorksheetExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsDeleteWorksheet Delete navigation property worksheet for workbooks

The worksheet containing the current chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsDeleteWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDeleteWorksheet(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsDeleteWorksheetRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsDeleteWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsDeleteWorksheetExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsDeleteWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsDeleteWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsFormatDeleteFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsFormatDeleteFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsFormatDeleteFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsFormatDeleteFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsFormatGetFill Get fill from workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsFormatGetFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsFormatGetFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsFormatGetFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsFormatGetFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsFormatUpdateFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsFormatUpdateFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsFormatUpdateFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsFormatUpdateFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsGetAxesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetAxesRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsGetAxesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetAxesRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsGetAxesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetAxesRequest) Execute() (MicrosoftGraphWorkbookChartAxes, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsGetAxesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsGetAxes Get axes from workbooks

Represents chart axes. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsGetAxesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsGetAxes(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsGetAxesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsGetAxesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxes
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsGetAxesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsGetAxesRequest) (MicrosoftGraphWorkbookChartAxes, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsGetAxes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsGetDataLabelsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetDataLabelsRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsGetDataLabelsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetDataLabelsRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsGetDataLabelsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetDataLabelsRequest) Execute() (MicrosoftGraphWorkbookChartDataLabels, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsGetDataLabelsExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsGetDataLabels Get dataLabels from workbooks

Represents the datalabels on the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsGetDataLabelsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsGetDataLabels(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsGetDataLabelsRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsGetDataLabelsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartDataLabels
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsGetDataLabelsExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsGetDataLabelsRequest) (MicrosoftGraphWorkbookChartDataLabels, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartDataLabels
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsGetDataLabels")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/dataLabels"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAreaFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsGetFormat Get format from workbooks

Encapsulates the format properties for the chart area. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAreaFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsGetFormatRequest) (MicrosoftGraphWorkbookChartAreaFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAreaFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsGetLegendRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetLegendRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsGetLegendRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetLegendRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsGetLegendRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetLegendRequest) Execute() (MicrosoftGraphWorkbookChartLegend, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsGetLegendExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsGetLegend Get legend from workbooks

Represents the legend for the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsGetLegendRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsGetLegend(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsGetLegendRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsGetLegendRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLegend
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsGetLegendExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsGetLegendRequest) (MicrosoftGraphWorkbookChartLegend, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLegend
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsGetLegend")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/legend"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsGetSeriesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetSeriesRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsGetSeriesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetSeriesRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsGetSeriesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetSeriesRequest) Execute() (MicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsGetSeriesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsGetSeries Get series from workbooks

Represents either a single series or collection of series in the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookTablesWorksheetChartsGetSeriesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsGetSeries(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookTablesWorksheetChartsGetSeriesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsGetSeriesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartSeries
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsGetSeriesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsGetSeriesRequest) (MicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsGetSeries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsGetTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetTitleRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsGetTitleRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetTitleRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsGetTitleRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetTitleRequest) Execute() (MicrosoftGraphWorkbookChartTitle, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsGetTitleExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsGetTitle Get title from workbooks

Represents the title of the specified chart, including the text, visibility, position and formating of the title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsGetTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsGetTitle(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsGetTitleRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsGetTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartTitle
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsGetTitleExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsGetTitleRequest) (MicrosoftGraphWorkbookChartTitle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartTitle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsGetTitle")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsGetWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetWorksheetRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsGetWorksheetRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetWorksheetRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsGetWorksheetRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsGetWorksheetRequest) Execute() (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsGetWorksheetExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsGetWorksheet Get worksheet from workbooks

The worksheet containing the current chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsGetWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsGetWorksheet(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsGetWorksheetRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsGetWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheet
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsGetWorksheetExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsGetWorksheetRequest) (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsGetWorksheet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsLegendDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsLegendDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsLegendDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsLegendDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsLegendDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsLegendDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsLegendDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/legend/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of an object, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/legend/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsLegendFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/legend/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFill Get fill from workbooks

Represents the fill format of an object, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/legend/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFont Get font from workbooks

Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsLegendFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/legend/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of an object, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/legend/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsLegendFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/legend/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsLegendGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartLegendFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsLegendGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsLegendGetFormat Get format from workbooks

Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsLegendGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsLegendGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLegendFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsLegendGetFormatRequest) (MicrosoftGraphWorkbookChartLegendFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLegendFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsLegendGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/legend/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsLegendUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartLegendFormat *MicrosoftGraphWorkbookChartLegendFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendUpdateFormatRequest) MicrosoftGraphWorkbookChartLegendFormat(microsoftGraphWorkbookChartLegendFormat MicrosoftGraphWorkbookChartLegendFormat) ApiWorkbooksWorkbookTablesWorksheetChartsLegendUpdateFormatRequest {
	r.microsoftGraphWorkbookChartLegendFormat = &microsoftGraphWorkbookChartLegendFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsLegendUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsLegendUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsLegendUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsLegendUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsLegendUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsLegendUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsLegendUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsLegendUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsLegendUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/legend/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLegendFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLegendFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLegendFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest) Top(top int32) ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest) Skip(skip int32) ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest) Search(search string) ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest) Filter(filter string) ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest) Count(count bool) ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest) Orderby(orderby []string) ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest) Execute() (CollectionOfWorkbookChartSeries, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsListSeriesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsListSeries Get series from workbooks

Represents either a single series or collection of series in the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsListSeries(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookChartSeries
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsListSeriesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsListSeriesRequest) (CollectionOfWorkbookChartSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookChartSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsListSeries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesCreatePointsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	microsoftGraphWorkbookChartPoint *MicrosoftGraphWorkbookChartPoint
}

// New navigation property
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesCreatePointsRequest) MicrosoftGraphWorkbookChartPoint(microsoftGraphWorkbookChartPoint MicrosoftGraphWorkbookChartPoint) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesCreatePointsRequest {
	r.microsoftGraphWorkbookChartPoint = &microsoftGraphWorkbookChartPoint
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesCreatePointsRequest) Execute() (MicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesCreatePointsExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesCreatePoints Create new navigation property to points for workbooks

Represents a collection of all points in the series. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesCreatePointsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesCreatePoints(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesCreatePointsRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesCreatePointsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartPoint
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesCreatePointsExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesCreatePointsRequest) (MicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartPoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesCreatePoints")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartPoint == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookChartPoint is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartPoint
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart series, which includes fill and line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeletePointsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeletePointsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeletePointsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeletePointsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesDeletePointsExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesDeletePoints Delete navigation property points for workbooks

Represents a collection of all points in the series. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeletePointsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesDeletePoints(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeletePointsRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeletePointsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesDeletePointsExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesDeletePointsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesDeletePoints")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of a chart series, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteLine Delete navigation property line for workbooks

Represents line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetFill Get fill from workbooks

Represents the fill format of a chart series, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetLine Get line from workbooks

Represents line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of a chart series, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateLine Update the navigation property line in workbooks

Represents line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateLineExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartSeriesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesGetFormat Get format from workbooks

Represents the formatting of a chart series, which includes fill and line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartSeriesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetFormatRequest) (MicrosoftGraphWorkbookChartSeriesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartSeriesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetPointsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetPointsRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetPointsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetPointsRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetPointsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetPointsRequest) Execute() (MicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesGetPointsExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesGetPoints Get points from workbooks

Represents a collection of all points in the series. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetPointsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesGetPoints(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetPointsRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetPointsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartPoint
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesGetPointsExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesGetPointsRequest) (MicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartPoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesGetPoints")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest) Top(top int32) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest) Skip(skip int32) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest) Search(search string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest) Filter(filter string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest) Count(count bool) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest) Orderby(orderby []string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest) Execute() (CollectionOfWorkbookChartPoint, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesListPointsExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesListPoints Get points from workbooks

Represents a collection of all points in the series. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesListPoints(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookChartPoint
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesListPointsExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesListPointsRequest) (CollectionOfWorkbookChartPoint, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookChartPoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesListPoints")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesPointsDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesPointsDeleteFormat Delete navigation property format for workbooks

Encapsulates the format properties chart point. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesPointsDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesPointsDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesPointsDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of a chart, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatDeleteFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatDeleteFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatGetFill Get fill from workbooks

Represents the fill format of a chart, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatGetFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatGetFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatGetFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of a chart, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatUpdateFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatUpdateFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesPointsFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartPointFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesPointsGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesPointsGetFormat Get format from workbooks

Encapsulates the format properties chart point. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesPointsGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartPointFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesPointsGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsGetFormatRequest) (MicrosoftGraphWorkbookChartPointFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartPointFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesPointsGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	microsoftGraphWorkbookChartPointFormat *MicrosoftGraphWorkbookChartPointFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsUpdateFormatRequest) MicrosoftGraphWorkbookChartPointFormat(microsoftGraphWorkbookChartPointFormat MicrosoftGraphWorkbookChartPointFormat) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsUpdateFormatRequest {
	r.microsoftGraphWorkbookChartPointFormat = &microsoftGraphWorkbookChartPointFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesPointsUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesPointsUpdateFormat Update the navigation property format in workbooks

Encapsulates the format properties chart point. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesPointsUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesPointsUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesPointsUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesPointsUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartPointFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartPointFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartPointFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	microsoftGraphWorkbookChartSeriesFormat *MicrosoftGraphWorkbookChartSeriesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdateFormatRequest) MicrosoftGraphWorkbookChartSeriesFormat(microsoftGraphWorkbookChartSeriesFormat MicrosoftGraphWorkbookChartSeriesFormat) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartSeriesFormat = &microsoftGraphWorkbookChartSeriesFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart series, which includes fill and line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartSeriesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartSeriesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartSeriesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdatePointsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	microsoftGraphWorkbookChartPoint *MicrosoftGraphWorkbookChartPoint
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdatePointsRequest) MicrosoftGraphWorkbookChartPoint(microsoftGraphWorkbookChartPoint MicrosoftGraphWorkbookChartPoint) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdatePointsRequest {
	r.microsoftGraphWorkbookChartPoint = &microsoftGraphWorkbookChartPoint
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdatePointsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesUpdatePointsExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsSeriesUpdatePoints Update the navigation property points in workbooks

Represents a collection of all points in the series. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdatePointsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesUpdatePoints(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdatePointsRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdatePointsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsSeriesUpdatePointsExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsSeriesUpdatePointsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsSeriesUpdatePoints")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartPoint == nil {
		return nil, reportError("microsoftGraphWorkbookChartPoint is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartPoint
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsTitleDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsTitleDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsTitleDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart title, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsTitleDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleDeleteFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleDeleteFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsTitleDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleDeleteFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsTitleDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsTitleDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/title/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsTitleFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFill Get fill from workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/title/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsTitleFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFill(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFillExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/title/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFont(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFontExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsTitleFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsTitleGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartTitleFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsTitleGetFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsTitleGetFormat Get format from workbooks

Represents the formatting of a chart title, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsTitleGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleGetFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleGetFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsTitleGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartTitleFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleGetFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsTitleGetFormatRequest) (MicrosoftGraphWorkbookChartTitleFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartTitleFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsTitleGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsTitleUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartTitleFormat *MicrosoftGraphWorkbookChartTitleFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleUpdateFormatRequest) MicrosoftGraphWorkbookChartTitleFormat(microsoftGraphWorkbookChartTitleFormat MicrosoftGraphWorkbookChartTitleFormat) ApiWorkbooksWorkbookTablesWorksheetChartsTitleUpdateFormatRequest {
	r.microsoftGraphWorkbookChartTitleFormat = &microsoftGraphWorkbookChartTitleFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsTitleUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsTitleUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsTitleUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart title, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsTitleUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsTitleUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsTitleUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsTitleUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsTitleUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsTitleUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartTitleFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartTitleFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartTitleFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsUpdateAxesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartAxes *MicrosoftGraphWorkbookChartAxes
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateAxesRequest) MicrosoftGraphWorkbookChartAxes(microsoftGraphWorkbookChartAxes MicrosoftGraphWorkbookChartAxes) ApiWorkbooksWorkbookTablesWorksheetChartsUpdateAxesRequest {
	r.microsoftGraphWorkbookChartAxes = &microsoftGraphWorkbookChartAxes
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateAxesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsUpdateAxesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsUpdateAxes Update the navigation property axes in workbooks

Represents chart axes. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsUpdateAxesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsUpdateAxes(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsUpdateAxesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsUpdateAxesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsUpdateAxesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateAxesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsUpdateAxes")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/axes"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxes == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxes is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxes
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsUpdateDataLabelsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartDataLabels *MicrosoftGraphWorkbookChartDataLabels
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateDataLabelsRequest) MicrosoftGraphWorkbookChartDataLabels(microsoftGraphWorkbookChartDataLabels MicrosoftGraphWorkbookChartDataLabels) ApiWorkbooksWorkbookTablesWorksheetChartsUpdateDataLabelsRequest {
	r.microsoftGraphWorkbookChartDataLabels = &microsoftGraphWorkbookChartDataLabels
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateDataLabelsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsUpdateDataLabelsExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsUpdateDataLabels Update the navigation property dataLabels in workbooks

Represents the datalabels on the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsUpdateDataLabelsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsUpdateDataLabels(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsUpdateDataLabelsRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsUpdateDataLabelsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsUpdateDataLabelsExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateDataLabelsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsUpdateDataLabels")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/dataLabels"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartDataLabels == nil {
		return nil, reportError("microsoftGraphWorkbookChartDataLabels is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartDataLabels
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartAreaFormat *MicrosoftGraphWorkbookChartAreaFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateFormatRequest) MicrosoftGraphWorkbookChartAreaFormat(microsoftGraphWorkbookChartAreaFormat MicrosoftGraphWorkbookChartAreaFormat) ApiWorkbooksWorkbookTablesWorksheetChartsUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAreaFormat = &microsoftGraphWorkbookChartAreaFormat
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsUpdateFormat Update the navigation property format in workbooks

Encapsulates the format properties for the chart area. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsUpdateFormat(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsUpdateFormatRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsUpdateFormatExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAreaFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAreaFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAreaFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsUpdateLegendRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartLegend *MicrosoftGraphWorkbookChartLegend
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateLegendRequest) MicrosoftGraphWorkbookChartLegend(microsoftGraphWorkbookChartLegend MicrosoftGraphWorkbookChartLegend) ApiWorkbooksWorkbookTablesWorksheetChartsUpdateLegendRequest {
	r.microsoftGraphWorkbookChartLegend = &microsoftGraphWorkbookChartLegend
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateLegendRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsUpdateLegendExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsUpdateLegend Update the navigation property legend in workbooks

Represents the legend for the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsUpdateLegendRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsUpdateLegend(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsUpdateLegendRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsUpdateLegendRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsUpdateLegendExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateLegendRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsUpdateLegend")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/legend"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLegend == nil {
		return nil, reportError("microsoftGraphWorkbookChartLegend is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLegend
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsUpdateSeriesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	microsoftGraphWorkbookChartSeries *MicrosoftGraphWorkbookChartSeries
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateSeriesRequest) MicrosoftGraphWorkbookChartSeries(microsoftGraphWorkbookChartSeries MicrosoftGraphWorkbookChartSeries) ApiWorkbooksWorkbookTablesWorksheetChartsUpdateSeriesRequest {
	r.microsoftGraphWorkbookChartSeries = &microsoftGraphWorkbookChartSeries
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateSeriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsUpdateSeriesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsUpdateSeries Update the navigation property series in workbooks

Represents either a single series or collection of series in the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookTablesWorksheetChartsUpdateSeriesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsUpdateSeries(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookTablesWorksheetChartsUpdateSeriesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsUpdateSeriesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsUpdateSeriesExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateSeriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsUpdateSeries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartSeries == nil {
		return nil, reportError("microsoftGraphWorkbookChartSeries is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartSeries
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsUpdateTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChartTitle *MicrosoftGraphWorkbookChartTitle
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateTitleRequest) MicrosoftGraphWorkbookChartTitle(microsoftGraphWorkbookChartTitle MicrosoftGraphWorkbookChartTitle) ApiWorkbooksWorkbookTablesWorksheetChartsUpdateTitleRequest {
	r.microsoftGraphWorkbookChartTitle = &microsoftGraphWorkbookChartTitle
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsUpdateTitleExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsUpdateTitle Update the navigation property title in workbooks

Represents the title of the specified chart, including the text, visibility, position and formating of the title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsUpdateTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsUpdateTitle(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsUpdateTitleRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsUpdateTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsUpdateTitleExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsUpdateTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartTitle == nil {
		return nil, reportError("microsoftGraphWorkbookChartTitle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartTitle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetChartsUpdateWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookWorksheet *MicrosoftGraphWorkbookWorksheet
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateWorksheetRequest) MicrosoftGraphWorkbookWorksheet(microsoftGraphWorkbookWorksheet MicrosoftGraphWorkbookWorksheet) ApiWorkbooksWorkbookTablesWorksheetChartsUpdateWorksheetRequest {
	r.microsoftGraphWorkbookWorksheet = &microsoftGraphWorkbookWorksheet
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetChartsUpdateWorksheetExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetChartsUpdateWorksheet Update the navigation property worksheet in workbooks

The worksheet containing the current chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetChartsUpdateWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsUpdateWorksheet(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetChartsUpdateWorksheetRequest {
	return ApiWorkbooksWorkbookTablesWorksheetChartsUpdateWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetChartsUpdateWorksheetExecute(r ApiWorkbooksWorkbookTablesWorksheetChartsUpdateWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetChartsUpdateWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheet == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetCreateChartsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	microsoftGraphWorkbookChart *MicrosoftGraphWorkbookChart
}

// New navigation property
func (r ApiWorkbooksWorkbookTablesWorksheetCreateChartsRequest) MicrosoftGraphWorkbookChart(microsoftGraphWorkbookChart MicrosoftGraphWorkbookChart) ApiWorkbooksWorkbookTablesWorksheetCreateChartsRequest {
	r.microsoftGraphWorkbookChart = &microsoftGraphWorkbookChart
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetCreateChartsRequest) Execute() (MicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetCreateChartsExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetCreateCharts Create new navigation property to charts for workbooks

Returns collection of charts that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesWorksheetCreateChartsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetCreateCharts(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesWorksheetCreateChartsRequest {
	return ApiWorkbooksWorkbookTablesWorksheetCreateChartsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChart
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetCreateChartsExecute(r ApiWorkbooksWorkbookTablesWorksheetCreateChartsRequest) (MicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetCreateCharts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChart == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookChart is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChart
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetCreateNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	microsoftGraphWorkbookNamedItem *MicrosoftGraphWorkbookNamedItem
}

// New navigation property
func (r ApiWorkbooksWorkbookTablesWorksheetCreateNamesRequest) MicrosoftGraphWorkbookNamedItem(microsoftGraphWorkbookNamedItem MicrosoftGraphWorkbookNamedItem) ApiWorkbooksWorkbookTablesWorksheetCreateNamesRequest {
	r.microsoftGraphWorkbookNamedItem = &microsoftGraphWorkbookNamedItem
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetCreateNamesRequest) Execute() (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetCreateNamesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetCreateNames Create new navigation property to names for workbooks

Returns collection of names that are associated with the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesWorksheetCreateNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetCreateNames(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesWorksheetCreateNamesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetCreateNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookNamedItem
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetCreateNamesExecute(r ApiWorkbooksWorkbookTablesWorksheetCreateNamesRequest) (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetCreateNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookNamedItem == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookNamedItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookNamedItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetCreatePivotTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	microsoftGraphWorkbookPivotTable *MicrosoftGraphWorkbookPivotTable
}

// New navigation property
func (r ApiWorkbooksWorkbookTablesWorksheetCreatePivotTablesRequest) MicrosoftGraphWorkbookPivotTable(microsoftGraphWorkbookPivotTable MicrosoftGraphWorkbookPivotTable) ApiWorkbooksWorkbookTablesWorksheetCreatePivotTablesRequest {
	r.microsoftGraphWorkbookPivotTable = &microsoftGraphWorkbookPivotTable
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetCreatePivotTablesRequest) Execute() (MicrosoftGraphWorkbookPivotTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetCreatePivotTablesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetCreatePivotTables Create new navigation property to pivotTables for workbooks

Collection of PivotTables that are part of the worksheet.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesWorksheetCreatePivotTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetCreatePivotTables(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesWorksheetCreatePivotTablesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetCreatePivotTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookPivotTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetCreatePivotTablesExecute(r ApiWorkbooksWorkbookTablesWorksheetCreatePivotTablesRequest) (MicrosoftGraphWorkbookPivotTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookPivotTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetCreatePivotTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/pivotTables"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookPivotTable == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookPivotTable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookPivotTable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetCreateTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	microsoftGraphWorkbookTable *MicrosoftGraphWorkbookTable
}

// New navigation property
func (r ApiWorkbooksWorkbookTablesWorksheetCreateTablesRequest) MicrosoftGraphWorkbookTable(microsoftGraphWorkbookTable MicrosoftGraphWorkbookTable) ApiWorkbooksWorkbookTablesWorksheetCreateTablesRequest {
	r.microsoftGraphWorkbookTable = &microsoftGraphWorkbookTable
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetCreateTablesRequest) Execute() (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetCreateTablesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetCreateTables Create new navigation property to tables for workbooks

Collection of tables that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesWorksheetCreateTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetCreateTables(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesWorksheetCreateTablesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetCreateTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetCreateTablesExecute(r ApiWorkbooksWorkbookTablesWorksheetCreateTablesRequest) (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetCreateTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/tables"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTable == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookTable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetDeleteChartsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetDeleteChartsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetDeleteChartsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetDeleteChartsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetDeleteChartsExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetDeleteCharts Delete navigation property charts for workbooks

Returns collection of charts that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetDeleteChartsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetDeleteCharts(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetDeleteChartsRequest {
	return ApiWorkbooksWorkbookTablesWorksheetDeleteChartsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetDeleteChartsExecute(r ApiWorkbooksWorkbookTablesWorksheetDeleteChartsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetDeleteCharts")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetDeleteNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookNamedItemId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetDeleteNamesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetDeleteNamesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetDeleteNamesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetDeleteNamesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetDeleteNames Delete navigation property names for workbooks

Returns collection of names that are associated with the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookTablesWorksheetDeleteNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetDeleteNames(ctx _context.Context, driveItemId string, workbookTableId string, workbookNamedItemId string) ApiWorkbooksWorkbookTablesWorksheetDeleteNamesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetDeleteNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetDeleteNamesExecute(r ApiWorkbooksWorkbookTablesWorksheetDeleteNamesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetDeleteNames")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names/{workbookNamedItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetDeletePivotTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookPivotTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetDeletePivotTablesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetDeletePivotTablesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetDeletePivotTablesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetDeletePivotTablesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetDeletePivotTables Delete navigation property pivotTables for workbooks

Collection of PivotTables that are part of the worksheet.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookTablesWorksheetDeletePivotTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetDeletePivotTables(ctx _context.Context, driveItemId string, workbookTableId string, workbookPivotTableId string) ApiWorkbooksWorkbookTablesWorksheetDeletePivotTablesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetDeletePivotTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetDeletePivotTablesExecute(r ApiWorkbooksWorkbookTablesWorksheetDeletePivotTablesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetDeletePivotTables")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/pivotTables/{workbookPivotTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetDeleteProtectionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetDeleteProtectionRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetDeleteProtectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetDeleteProtectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetDeleteProtectionExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetDeleteProtection Delete navigation property protection for workbooks

Returns sheet protection object for a worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesWorksheetDeleteProtectionRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetDeleteProtection(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesWorksheetDeleteProtectionRequest {
	return ApiWorkbooksWorkbookTablesWorksheetDeleteProtectionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetDeleteProtectionExecute(r ApiWorkbooksWorkbookTablesWorksheetDeleteProtectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetDeleteProtection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/protection"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetDeleteTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookTableId1 string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetDeleteTablesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetDeleteTablesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetDeleteTablesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetDeleteTablesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetDeleteTables Delete navigation property tables for workbooks

Collection of tables that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableId1 key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesWorksheetDeleteTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetDeleteTables(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableId1 string) ApiWorkbooksWorkbookTablesWorksheetDeleteTablesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetDeleteTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableId1: workbookTableId1,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetDeleteTablesExecute(r ApiWorkbooksWorkbookTablesWorksheetDeleteTablesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetDeleteTables")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/tables/{workbookTable-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id1"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetGetChartsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetGetChartsRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetGetChartsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetGetChartsRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetGetChartsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetGetChartsRequest) Execute() (MicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetGetChartsExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetGetCharts Get charts from workbooks

Returns collection of charts that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetGetChartsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetGetCharts(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetGetChartsRequest {
	return ApiWorkbooksWorkbookTablesWorksheetGetChartsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChart
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetGetChartsExecute(r ApiWorkbooksWorkbookTablesWorksheetGetChartsRequest) (MicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetGetCharts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetGetNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookNamedItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetGetNamesRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetGetNamesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetGetNamesRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetGetNamesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetGetNamesRequest) Execute() (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetGetNamesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetGetNames Get names from workbooks

Returns collection of names that are associated with the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookTablesWorksheetGetNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetGetNames(ctx _context.Context, driveItemId string, workbookTableId string, workbookNamedItemId string) ApiWorkbooksWorkbookTablesWorksheetGetNamesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetGetNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookNamedItem
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetGetNamesExecute(r ApiWorkbooksWorkbookTablesWorksheetGetNamesRequest) (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetGetNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names/{workbookNamedItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetGetPivotTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookPivotTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetGetPivotTablesRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetGetPivotTablesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetGetPivotTablesRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetGetPivotTablesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetGetPivotTablesRequest) Execute() (MicrosoftGraphWorkbookPivotTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetGetPivotTablesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetGetPivotTables Get pivotTables from workbooks

Collection of PivotTables that are part of the worksheet.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookTablesWorksheetGetPivotTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetGetPivotTables(ctx _context.Context, driveItemId string, workbookTableId string, workbookPivotTableId string) ApiWorkbooksWorkbookTablesWorksheetGetPivotTablesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetGetPivotTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookPivotTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetGetPivotTablesExecute(r ApiWorkbooksWorkbookTablesWorksheetGetPivotTablesRequest) (MicrosoftGraphWorkbookPivotTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookPivotTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetGetPivotTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/pivotTables/{workbookPivotTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetGetProtectionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetGetProtectionRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetGetProtectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetGetProtectionRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetGetProtectionRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetGetProtectionRequest) Execute() (MicrosoftGraphWorkbookWorksheetProtection, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetGetProtectionExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetGetProtection Get protection from workbooks

Returns sheet protection object for a worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesWorksheetGetProtectionRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetGetProtection(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesWorksheetGetProtectionRequest {
	return ApiWorkbooksWorkbookTablesWorksheetGetProtectionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheetProtection
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetGetProtectionExecute(r ApiWorkbooksWorkbookTablesWorksheetGetProtectionRequest) (MicrosoftGraphWorkbookWorksheetProtection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheetProtection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetGetProtection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/protection"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetGetTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookTableId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetGetTablesRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetGetTablesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetGetTablesRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetGetTablesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetGetTablesRequest) Execute() (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetGetTablesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetGetTables Get tables from workbooks

Collection of tables that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableId1 key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesWorksheetGetTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetGetTables(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableId1 string) ApiWorkbooksWorkbookTablesWorksheetGetTablesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetGetTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableId1: workbookTableId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetGetTablesExecute(r ApiWorkbooksWorkbookTablesWorksheetGetTablesRequest) (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetGetTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/tables/{workbookTable-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id1"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetListChartsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookTablesWorksheetListChartsRequest) Top(top int32) ApiWorkbooksWorkbookTablesWorksheetListChartsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookTablesWorksheetListChartsRequest) Skip(skip int32) ApiWorkbooksWorkbookTablesWorksheetListChartsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookTablesWorksheetListChartsRequest) Search(search string) ApiWorkbooksWorkbookTablesWorksheetListChartsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookTablesWorksheetListChartsRequest) Filter(filter string) ApiWorkbooksWorkbookTablesWorksheetListChartsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookTablesWorksheetListChartsRequest) Count(count bool) ApiWorkbooksWorkbookTablesWorksheetListChartsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookTablesWorksheetListChartsRequest) Orderby(orderby []string) ApiWorkbooksWorkbookTablesWorksheetListChartsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetListChartsRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetListChartsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetListChartsRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetListChartsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetListChartsRequest) Execute() (CollectionOfWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetListChartsExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetListCharts Get charts from workbooks

Returns collection of charts that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesWorksheetListChartsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetListCharts(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesWorksheetListChartsRequest {
	return ApiWorkbooksWorkbookTablesWorksheetListChartsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookChart
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetListChartsExecute(r ApiWorkbooksWorkbookTablesWorksheetListChartsRequest) (CollectionOfWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetListCharts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetListNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookTablesWorksheetListNamesRequest) Top(top int32) ApiWorkbooksWorkbookTablesWorksheetListNamesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookTablesWorksheetListNamesRequest) Skip(skip int32) ApiWorkbooksWorkbookTablesWorksheetListNamesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookTablesWorksheetListNamesRequest) Search(search string) ApiWorkbooksWorkbookTablesWorksheetListNamesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookTablesWorksheetListNamesRequest) Filter(filter string) ApiWorkbooksWorkbookTablesWorksheetListNamesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookTablesWorksheetListNamesRequest) Count(count bool) ApiWorkbooksWorkbookTablesWorksheetListNamesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookTablesWorksheetListNamesRequest) Orderby(orderby []string) ApiWorkbooksWorkbookTablesWorksheetListNamesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetListNamesRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetListNamesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetListNamesRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetListNamesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetListNamesRequest) Execute() (CollectionOfWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetListNamesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetListNames Get names from workbooks

Returns collection of names that are associated with the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesWorksheetListNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetListNames(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesWorksheetListNamesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetListNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookNamedItem
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetListNamesExecute(r ApiWorkbooksWorkbookTablesWorksheetListNamesRequest) (CollectionOfWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetListNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest) Top(top int32) ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest) Skip(skip int32) ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest) Search(search string) ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest) Filter(filter string) ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest) Count(count bool) ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest) Orderby(orderby []string) ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest) Execute() (CollectionOfWorkbookPivotTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetListPivotTablesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetListPivotTables Get pivotTables from workbooks

Collection of PivotTables that are part of the worksheet.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetListPivotTables(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookPivotTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetListPivotTablesExecute(r ApiWorkbooksWorkbookTablesWorksheetListPivotTablesRequest) (CollectionOfWorkbookPivotTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookPivotTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetListPivotTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/pivotTables"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetListTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookTablesWorksheetListTablesRequest) Top(top int32) ApiWorkbooksWorkbookTablesWorksheetListTablesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookTablesWorksheetListTablesRequest) Skip(skip int32) ApiWorkbooksWorkbookTablesWorksheetListTablesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookTablesWorksheetListTablesRequest) Search(search string) ApiWorkbooksWorkbookTablesWorksheetListTablesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookTablesWorksheetListTablesRequest) Filter(filter string) ApiWorkbooksWorkbookTablesWorksheetListTablesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookTablesWorksheetListTablesRequest) Count(count bool) ApiWorkbooksWorkbookTablesWorksheetListTablesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookTablesWorksheetListTablesRequest) Orderby(orderby []string) ApiWorkbooksWorkbookTablesWorksheetListTablesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetListTablesRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetListTablesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetListTablesRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetListTablesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetListTablesRequest) Execute() (CollectionOfWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetListTablesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetListTables Get tables from workbooks

Collection of tables that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesWorksheetListTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetListTables(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesWorksheetListTablesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetListTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetListTablesExecute(r ApiWorkbooksWorkbookTablesWorksheetListTablesRequest) (CollectionOfWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetListTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/tables"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetNamesDeleteWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookNamedItemId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetNamesDeleteWorksheetRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetNamesDeleteWorksheetRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetNamesDeleteWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetNamesDeleteWorksheetExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetNamesDeleteWorksheet Delete navigation property worksheet for workbooks

Returns the worksheet on which the named item is scoped to. Available only if the item is scoped to the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookTablesWorksheetNamesDeleteWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetNamesDeleteWorksheet(ctx _context.Context, driveItemId string, workbookTableId string, workbookNamedItemId string) ApiWorkbooksWorkbookTablesWorksheetNamesDeleteWorksheetRequest {
	return ApiWorkbooksWorkbookTablesWorksheetNamesDeleteWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetNamesDeleteWorksheetExecute(r ApiWorkbooksWorkbookTablesWorksheetNamesDeleteWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetNamesDeleteWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names/{workbookNamedItem-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetNamesGetWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookNamedItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetNamesGetWorksheetRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetNamesGetWorksheetRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetNamesGetWorksheetRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetNamesGetWorksheetRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetNamesGetWorksheetRequest) Execute() (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetNamesGetWorksheetExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetNamesGetWorksheet Get worksheet from workbooks

Returns the worksheet on which the named item is scoped to. Available only if the item is scoped to the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookTablesWorksheetNamesGetWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetNamesGetWorksheet(ctx _context.Context, driveItemId string, workbookTableId string, workbookNamedItemId string) ApiWorkbooksWorkbookTablesWorksheetNamesGetWorksheetRequest {
	return ApiWorkbooksWorkbookTablesWorksheetNamesGetWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheet
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetNamesGetWorksheetExecute(r ApiWorkbooksWorkbookTablesWorksheetNamesGetWorksheetRequest) (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetNamesGetWorksheet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names/{workbookNamedItem-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetNamesUpdateWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookNamedItemId string
	microsoftGraphWorkbookWorksheet *MicrosoftGraphWorkbookWorksheet
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetNamesUpdateWorksheetRequest) MicrosoftGraphWorkbookWorksheet(microsoftGraphWorkbookWorksheet MicrosoftGraphWorkbookWorksheet) ApiWorkbooksWorkbookTablesWorksheetNamesUpdateWorksheetRequest {
	r.microsoftGraphWorkbookWorksheet = &microsoftGraphWorkbookWorksheet
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetNamesUpdateWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetNamesUpdateWorksheetExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetNamesUpdateWorksheet Update the navigation property worksheet in workbooks

Returns the worksheet on which the named item is scoped to. Available only if the item is scoped to the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookTablesWorksheetNamesUpdateWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetNamesUpdateWorksheet(ctx _context.Context, driveItemId string, workbookTableId string, workbookNamedItemId string) ApiWorkbooksWorkbookTablesWorksheetNamesUpdateWorksheetRequest {
	return ApiWorkbooksWorkbookTablesWorksheetNamesUpdateWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetNamesUpdateWorksheetExecute(r ApiWorkbooksWorkbookTablesWorksheetNamesUpdateWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetNamesUpdateWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names/{workbookNamedItem-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheet == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetPivotTablesDeleteWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookPivotTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookTablesWorksheetPivotTablesDeleteWorksheetRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookTablesWorksheetPivotTablesDeleteWorksheetRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetPivotTablesDeleteWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetPivotTablesDeleteWorksheetExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetPivotTablesDeleteWorksheet Delete navigation property worksheet for workbooks

The worksheet containing the current PivotTable. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookTablesWorksheetPivotTablesDeleteWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetPivotTablesDeleteWorksheet(ctx _context.Context, driveItemId string, workbookTableId string, workbookPivotTableId string) ApiWorkbooksWorkbookTablesWorksheetPivotTablesDeleteWorksheetRequest {
	return ApiWorkbooksWorkbookTablesWorksheetPivotTablesDeleteWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetPivotTablesDeleteWorksheetExecute(r ApiWorkbooksWorkbookTablesWorksheetPivotTablesDeleteWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetPivotTablesDeleteWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetPivotTablesGetWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookPivotTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookTablesWorksheetPivotTablesGetWorksheetRequest) Select_(select_ []string) ApiWorkbooksWorkbookTablesWorksheetPivotTablesGetWorksheetRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookTablesWorksheetPivotTablesGetWorksheetRequest) Expand(expand []string) ApiWorkbooksWorkbookTablesWorksheetPivotTablesGetWorksheetRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetPivotTablesGetWorksheetRequest) Execute() (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetPivotTablesGetWorksheetExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetPivotTablesGetWorksheet Get worksheet from workbooks

The worksheet containing the current PivotTable. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookTablesWorksheetPivotTablesGetWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetPivotTablesGetWorksheet(ctx _context.Context, driveItemId string, workbookTableId string, workbookPivotTableId string) ApiWorkbooksWorkbookTablesWorksheetPivotTablesGetWorksheetRequest {
	return ApiWorkbooksWorkbookTablesWorksheetPivotTablesGetWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheet
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetPivotTablesGetWorksheetExecute(r ApiWorkbooksWorkbookTablesWorksheetPivotTablesGetWorksheetRequest) (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetPivotTablesGetWorksheet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetPivotTablesUpdateWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookPivotTableId string
	microsoftGraphWorkbookWorksheet *MicrosoftGraphWorkbookWorksheet
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetPivotTablesUpdateWorksheetRequest) MicrosoftGraphWorkbookWorksheet(microsoftGraphWorkbookWorksheet MicrosoftGraphWorkbookWorksheet) ApiWorkbooksWorkbookTablesWorksheetPivotTablesUpdateWorksheetRequest {
	r.microsoftGraphWorkbookWorksheet = &microsoftGraphWorkbookWorksheet
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetPivotTablesUpdateWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetPivotTablesUpdateWorksheetExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetPivotTablesUpdateWorksheet Update the navigation property worksheet in workbooks

The worksheet containing the current PivotTable. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookTablesWorksheetPivotTablesUpdateWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetPivotTablesUpdateWorksheet(ctx _context.Context, driveItemId string, workbookTableId string, workbookPivotTableId string) ApiWorkbooksWorkbookTablesWorksheetPivotTablesUpdateWorksheetRequest {
	return ApiWorkbooksWorkbookTablesWorksheetPivotTablesUpdateWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetPivotTablesUpdateWorksheetExecute(r ApiWorkbooksWorkbookTablesWorksheetPivotTablesUpdateWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetPivotTablesUpdateWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheet == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetUpdateChartsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	microsoftGraphWorkbookChart *MicrosoftGraphWorkbookChart
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetUpdateChartsRequest) MicrosoftGraphWorkbookChart(microsoftGraphWorkbookChart MicrosoftGraphWorkbookChart) ApiWorkbooksWorkbookTablesWorksheetUpdateChartsRequest {
	r.microsoftGraphWorkbookChart = &microsoftGraphWorkbookChart
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetUpdateChartsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetUpdateChartsExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetUpdateCharts Update the navigation property charts in workbooks

Returns collection of charts that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookTablesWorksheetUpdateChartsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetUpdateCharts(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksWorkbookTablesWorksheetUpdateChartsRequest {
	return ApiWorkbooksWorkbookTablesWorksheetUpdateChartsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetUpdateChartsExecute(r ApiWorkbooksWorkbookTablesWorksheetUpdateChartsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetUpdateCharts")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChart == nil {
		return nil, reportError("microsoftGraphWorkbookChart is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChart
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetUpdateNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookNamedItemId string
	microsoftGraphWorkbookNamedItem *MicrosoftGraphWorkbookNamedItem
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetUpdateNamesRequest) MicrosoftGraphWorkbookNamedItem(microsoftGraphWorkbookNamedItem MicrosoftGraphWorkbookNamedItem) ApiWorkbooksWorkbookTablesWorksheetUpdateNamesRequest {
	r.microsoftGraphWorkbookNamedItem = &microsoftGraphWorkbookNamedItem
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetUpdateNamesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetUpdateNamesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetUpdateNames Update the navigation property names in workbooks

Returns collection of names that are associated with the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookTablesWorksheetUpdateNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetUpdateNames(ctx _context.Context, driveItemId string, workbookTableId string, workbookNamedItemId string) ApiWorkbooksWorkbookTablesWorksheetUpdateNamesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetUpdateNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetUpdateNamesExecute(r ApiWorkbooksWorkbookTablesWorksheetUpdateNamesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetUpdateNames")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names/{workbookNamedItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookNamedItem == nil {
		return nil, reportError("microsoftGraphWorkbookNamedItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookNamedItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetUpdatePivotTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookPivotTableId string
	microsoftGraphWorkbookPivotTable *MicrosoftGraphWorkbookPivotTable
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetUpdatePivotTablesRequest) MicrosoftGraphWorkbookPivotTable(microsoftGraphWorkbookPivotTable MicrosoftGraphWorkbookPivotTable) ApiWorkbooksWorkbookTablesWorksheetUpdatePivotTablesRequest {
	r.microsoftGraphWorkbookPivotTable = &microsoftGraphWorkbookPivotTable
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetUpdatePivotTablesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetUpdatePivotTablesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetUpdatePivotTables Update the navigation property pivotTables in workbooks

Collection of PivotTables that are part of the worksheet.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookTablesWorksheetUpdatePivotTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetUpdatePivotTables(ctx _context.Context, driveItemId string, workbookTableId string, workbookPivotTableId string) ApiWorkbooksWorkbookTablesWorksheetUpdatePivotTablesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetUpdatePivotTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetUpdatePivotTablesExecute(r ApiWorkbooksWorkbookTablesWorksheetUpdatePivotTablesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetUpdatePivotTables")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/pivotTables/{workbookPivotTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookPivotTable == nil {
		return nil, reportError("microsoftGraphWorkbookPivotTable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookPivotTable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetUpdateProtectionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	microsoftGraphWorkbookWorksheetProtection *MicrosoftGraphWorkbookWorksheetProtection
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetUpdateProtectionRequest) MicrosoftGraphWorkbookWorksheetProtection(microsoftGraphWorkbookWorksheetProtection MicrosoftGraphWorkbookWorksheetProtection) ApiWorkbooksWorkbookTablesWorksheetUpdateProtectionRequest {
	r.microsoftGraphWorkbookWorksheetProtection = &microsoftGraphWorkbookWorksheetProtection
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetUpdateProtectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetUpdateProtectionExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetUpdateProtection Update the navigation property protection in workbooks

Returns sheet protection object for a worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesWorksheetUpdateProtectionRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetUpdateProtection(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookTablesWorksheetUpdateProtectionRequest {
	return ApiWorkbooksWorkbookTablesWorksheetUpdateProtectionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetUpdateProtectionExecute(r ApiWorkbooksWorkbookTablesWorksheetUpdateProtectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetUpdateProtection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/protection"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheetProtection == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheetProtection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheetProtection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookTablesWorksheetUpdateTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	workbookTableId1 string
	microsoftGraphWorkbookTable *MicrosoftGraphWorkbookTable
}

// New navigation property values
func (r ApiWorkbooksWorkbookTablesWorksheetUpdateTablesRequest) MicrosoftGraphWorkbookTable(microsoftGraphWorkbookTable MicrosoftGraphWorkbookTable) ApiWorkbooksWorkbookTablesWorksheetUpdateTablesRequest {
	r.microsoftGraphWorkbookTable = &microsoftGraphWorkbookTable
	return r
}

func (r ApiWorkbooksWorkbookTablesWorksheetUpdateTablesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookTablesWorksheetUpdateTablesExecute(r)
}

/*
WorkbooksWorkbookTablesWorksheetUpdateTables Update the navigation property tables in workbooks

Collection of tables that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableId1 key: id of workbookTable
 @return ApiWorkbooksWorkbookTablesWorksheetUpdateTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetUpdateTables(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableId1 string) ApiWorkbooksWorkbookTablesWorksheetUpdateTablesRequest {
	return ApiWorkbooksWorkbookTablesWorksheetUpdateTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableId1: workbookTableId1,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookTablesWorksheetUpdateTablesExecute(r ApiWorkbooksWorkbookTablesWorksheetUpdateTablesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookTablesWorksheetUpdateTables")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/tables/{workbookTable-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id1"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTable == nil {
		return nil, reportError("microsoftGraphWorkbookTable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookUpdateApplicationRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	microsoftGraphWorkbookApplication *MicrosoftGraphWorkbookApplication
}

// New navigation property values
func (r ApiWorkbooksWorkbookUpdateApplicationRequest) MicrosoftGraphWorkbookApplication(microsoftGraphWorkbookApplication MicrosoftGraphWorkbookApplication) ApiWorkbooksWorkbookUpdateApplicationRequest {
	r.microsoftGraphWorkbookApplication = &microsoftGraphWorkbookApplication
	return r
}

func (r ApiWorkbooksWorkbookUpdateApplicationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookUpdateApplicationExecute(r)
}

/*
WorkbooksWorkbookUpdateApplication Update the navigation property application in workbooks

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookUpdateApplicationRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookUpdateApplication(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookUpdateApplicationRequest {
	return ApiWorkbooksWorkbookUpdateApplicationRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookUpdateApplicationExecute(r ApiWorkbooksWorkbookUpdateApplicationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookUpdateApplication")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/application"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookApplication == nil {
		return nil, reportError("microsoftGraphWorkbookApplication is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookApplication
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookUpdateCommentsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookCommentId string
	microsoftGraphWorkbookComment *MicrosoftGraphWorkbookComment
}

// New navigation property values
func (r ApiWorkbooksWorkbookUpdateCommentsRequest) MicrosoftGraphWorkbookComment(microsoftGraphWorkbookComment MicrosoftGraphWorkbookComment) ApiWorkbooksWorkbookUpdateCommentsRequest {
	r.microsoftGraphWorkbookComment = &microsoftGraphWorkbookComment
	return r
}

func (r ApiWorkbooksWorkbookUpdateCommentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookUpdateCommentsExecute(r)
}

/*
WorkbooksWorkbookUpdateComments Update the navigation property comments in workbooks

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookCommentId key: id of workbookComment
 @return ApiWorkbooksWorkbookUpdateCommentsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookUpdateComments(ctx _context.Context, driveItemId string, workbookCommentId string) ApiWorkbooksWorkbookUpdateCommentsRequest {
	return ApiWorkbooksWorkbookUpdateCommentsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookCommentId: workbookCommentId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookUpdateCommentsExecute(r ApiWorkbooksWorkbookUpdateCommentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookUpdateComments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/comments/{workbookComment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookComment-id"+"}", _neturl.PathEscape(parameterToString(r.workbookCommentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookComment == nil {
		return nil, reportError("microsoftGraphWorkbookComment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookComment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookUpdateFunctionsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	microsoftGraphWorkbookFunctions *MicrosoftGraphWorkbookFunctions
}

// New navigation property values
func (r ApiWorkbooksWorkbookUpdateFunctionsRequest) MicrosoftGraphWorkbookFunctions(microsoftGraphWorkbookFunctions MicrosoftGraphWorkbookFunctions) ApiWorkbooksWorkbookUpdateFunctionsRequest {
	r.microsoftGraphWorkbookFunctions = &microsoftGraphWorkbookFunctions
	return r
}

func (r ApiWorkbooksWorkbookUpdateFunctionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookUpdateFunctionsExecute(r)
}

/*
WorkbooksWorkbookUpdateFunctions Update the navigation property functions in workbooks

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksWorkbookUpdateFunctionsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookUpdateFunctions(ctx _context.Context, driveItemId string) ApiWorkbooksWorkbookUpdateFunctionsRequest {
	return ApiWorkbooksWorkbookUpdateFunctionsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookUpdateFunctionsExecute(r ApiWorkbooksWorkbookUpdateFunctionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookUpdateFunctions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/functions"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookFunctions == nil {
		return nil, reportError("microsoftGraphWorkbookFunctions is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookFunctions
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookUpdateNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookNamedItemId string
	microsoftGraphWorkbookNamedItem *MicrosoftGraphWorkbookNamedItem
}

// New navigation property values
func (r ApiWorkbooksWorkbookUpdateNamesRequest) MicrosoftGraphWorkbookNamedItem(microsoftGraphWorkbookNamedItem MicrosoftGraphWorkbookNamedItem) ApiWorkbooksWorkbookUpdateNamesRequest {
	r.microsoftGraphWorkbookNamedItem = &microsoftGraphWorkbookNamedItem
	return r
}

func (r ApiWorkbooksWorkbookUpdateNamesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookUpdateNamesExecute(r)
}

/*
WorkbooksWorkbookUpdateNames Update the navigation property names in workbooks

Represents a collection of workbooks scoped named items (named ranges and constants). Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookUpdateNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookUpdateNames(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksWorkbookUpdateNamesRequest {
	return ApiWorkbooksWorkbookUpdateNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookUpdateNamesExecute(r ApiWorkbooksWorkbookUpdateNamesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookUpdateNames")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookNamedItem == nil {
		return nil, reportError("microsoftGraphWorkbookNamedItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookNamedItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookUpdateOperationsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookOperationId string
	microsoftGraphWorkbookOperation *MicrosoftGraphWorkbookOperation
}

// New navigation property values
func (r ApiWorkbooksWorkbookUpdateOperationsRequest) MicrosoftGraphWorkbookOperation(microsoftGraphWorkbookOperation MicrosoftGraphWorkbookOperation) ApiWorkbooksWorkbookUpdateOperationsRequest {
	r.microsoftGraphWorkbookOperation = &microsoftGraphWorkbookOperation
	return r
}

func (r ApiWorkbooksWorkbookUpdateOperationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookUpdateOperationsExecute(r)
}

/*
WorkbooksWorkbookUpdateOperations Update the navigation property operations in workbooks

The status of workbook operations. Getting an operation collection is not supported, but you can get the status of a long-running operation if the Location header is returned in the response. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookOperationId key: id of workbookOperation
 @return ApiWorkbooksWorkbookUpdateOperationsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookUpdateOperations(ctx _context.Context, driveItemId string, workbookOperationId string) ApiWorkbooksWorkbookUpdateOperationsRequest {
	return ApiWorkbooksWorkbookUpdateOperationsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookOperationId: workbookOperationId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookUpdateOperationsExecute(r ApiWorkbooksWorkbookUpdateOperationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookUpdateOperations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/operations/{workbookOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookOperation-id"+"}", _neturl.PathEscape(parameterToString(r.workbookOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookOperation == nil {
		return nil, reportError("microsoftGraphWorkbookOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookUpdateTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookTableId string
	microsoftGraphWorkbookTable *MicrosoftGraphWorkbookTable
}

// New navigation property values
func (r ApiWorkbooksWorkbookUpdateTablesRequest) MicrosoftGraphWorkbookTable(microsoftGraphWorkbookTable MicrosoftGraphWorkbookTable) ApiWorkbooksWorkbookUpdateTablesRequest {
	r.microsoftGraphWorkbookTable = &microsoftGraphWorkbookTable
	return r
}

func (r ApiWorkbooksWorkbookUpdateTablesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookUpdateTablesExecute(r)
}

/*
WorkbooksWorkbookUpdateTables Update the navigation property tables in workbooks

Represents a collection of tables associated with the workbook. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookUpdateTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookUpdateTables(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksWorkbookUpdateTablesRequest {
	return ApiWorkbooksWorkbookUpdateTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookUpdateTablesExecute(r ApiWorkbooksWorkbookUpdateTablesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookUpdateTables")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTable == nil {
		return nil, reportError("microsoftGraphWorkbookTable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookUpdateWorksheetsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	microsoftGraphWorkbookWorksheet *MicrosoftGraphWorkbookWorksheet
}

// New navigation property values
func (r ApiWorkbooksWorkbookUpdateWorksheetsRequest) MicrosoftGraphWorkbookWorksheet(microsoftGraphWorkbookWorksheet MicrosoftGraphWorkbookWorksheet) ApiWorkbooksWorkbookUpdateWorksheetsRequest {
	r.microsoftGraphWorkbookWorksheet = &microsoftGraphWorkbookWorksheet
	return r
}

func (r ApiWorkbooksWorkbookUpdateWorksheetsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookUpdateWorksheetsExecute(r)
}

/*
WorkbooksWorkbookUpdateWorksheets Update the navigation property worksheets in workbooks

Represents a collection of worksheets associated with the workbook. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksWorkbookUpdateWorksheetsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookUpdateWorksheets(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksWorkbookUpdateWorksheetsRequest {
	return ApiWorkbooksWorkbookUpdateWorksheetsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookUpdateWorksheetsExecute(r ApiWorkbooksWorkbookUpdateWorksheetsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookUpdateWorksheets")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheet == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMajorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMajorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMajorGridlines Delete navigation property majorGridlines for workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMajorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMajorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMajorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMinorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMinorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMinorGridlines Delete navigation property minorGridlines for workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMinorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMinorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMinorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteTitleRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteTitleRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteTitleExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteTitle Delete navigation property title for workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteTitle(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteTitleRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteTitleExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisDeleteTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetFormat Get format from workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetFormatRequest) (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMajorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMajorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMajorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMajorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMajorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMajorGridlines Get majorGridlines from workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMajorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMajorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMajorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMajorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMajorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMinorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMinorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMinorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMinorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMinorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMinorGridlines Get minorGridlines from workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMinorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMinorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMinorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMinorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetMinorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetTitleRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetTitleRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetTitleRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetTitleRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetTitleRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetTitleExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetTitle Get title from workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetTitle(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetTitleRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitle
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetTitleExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetTitleRequest) (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisGetTitle")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMajorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisMinorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatDeleteFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatDeleteFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatGetFont Get font from workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatGetFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatGetFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatGetFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatUpdateFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatUpdateFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleGetFormat Get format from workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitleFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleGetFormatRequest) (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitleFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitleFormat *MicrosoftGraphWorkbookChartAxisTitleFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisTitleFormat(microsoftGraphWorkbookChartAxisTitleFormat MicrosoftGraphWorkbookChartAxisTitleFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisTitleFormat = &microsoftGraphWorkbookChartAxisTitleFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisTitleUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitleFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitleFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitleFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisFormat *MicrosoftGraphWorkbookChartAxisFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisFormat(microsoftGraphWorkbookChartAxisFormat MicrosoftGraphWorkbookChartAxisFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisFormat = &microsoftGraphWorkbookChartAxisFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMajorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMajorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMajorGridlines Update the navigation property majorGridlines in workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMajorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMajorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMajorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMinorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMinorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMinorGridlines Update the navigation property minorGridlines in workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMinorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMinorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMinorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitle *MicrosoftGraphWorkbookChartAxisTitle
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateTitleRequest) MicrosoftGraphWorkbookChartAxisTitle(microsoftGraphWorkbookChartAxisTitle MicrosoftGraphWorkbookChartAxisTitle) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateTitleRequest {
	r.microsoftGraphWorkbookChartAxisTitle = &microsoftGraphWorkbookChartAxisTitle
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateTitleExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateTitle Update the navigation property title in workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateTitle(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateTitleRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateTitleExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesCategoryAxisUpdateTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitle == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteCategoryAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteCategoryAxisRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteCategoryAxisRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteCategoryAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesDeleteCategoryAxisExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesDeleteCategoryAxis Delete navigation property categoryAxis for workbooks

Represents the category axis in a chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteCategoryAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesDeleteCategoryAxis(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteCategoryAxisRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteCategoryAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesDeleteCategoryAxisExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteCategoryAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesDeleteCategoryAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteSeriesAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteSeriesAxisRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteSeriesAxisRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteSeriesAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesDeleteSeriesAxisExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesDeleteSeriesAxis Delete navigation property seriesAxis for workbooks

Represents the series axis of a 3-dimensional chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteSeriesAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesDeleteSeriesAxis(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteSeriesAxisRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteSeriesAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesDeleteSeriesAxisExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteSeriesAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesDeleteSeriesAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteValueAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteValueAxisRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteValueAxisRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteValueAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesDeleteValueAxisExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesDeleteValueAxis Delete navigation property valueAxis for workbooks

Represents the value axis in an axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteValueAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesDeleteValueAxis(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteValueAxisRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteValueAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesDeleteValueAxisExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesDeleteValueAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesDeleteValueAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesGetCategoryAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesGetCategoryAxisRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesGetCategoryAxisRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesGetCategoryAxisRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesGetCategoryAxisRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesGetCategoryAxisRequest) Execute() (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesGetCategoryAxisExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesGetCategoryAxis Get categoryAxis from workbooks

Represents the category axis in a chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesGetCategoryAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesGetCategoryAxis(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesGetCategoryAxisRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesGetCategoryAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxis
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesGetCategoryAxisExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesGetCategoryAxisRequest) (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesGetCategoryAxis")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesGetSeriesAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesGetSeriesAxisRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesGetSeriesAxisRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesGetSeriesAxisRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesGetSeriesAxisRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesGetSeriesAxisRequest) Execute() (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesGetSeriesAxisExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesGetSeriesAxis Get seriesAxis from workbooks

Represents the series axis of a 3-dimensional chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesGetSeriesAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesGetSeriesAxis(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesGetSeriesAxisRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesGetSeriesAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxis
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesGetSeriesAxisExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesGetSeriesAxisRequest) (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesGetSeriesAxis")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesGetValueAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesGetValueAxisRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesGetValueAxisRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesGetValueAxisRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesGetValueAxisRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesGetValueAxisRequest) Execute() (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesGetValueAxisExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesGetValueAxis Get valueAxis from workbooks

Represents the value axis in an axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesGetValueAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesGetValueAxis(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesGetValueAxisRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesGetValueAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxis
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesGetValueAxisExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesGetValueAxisRequest) (MicrosoftGraphWorkbookChartAxis, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxis
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesGetValueAxis")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMajorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMajorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMajorGridlines Delete navigation property majorGridlines for workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMajorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMajorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMajorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMinorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMinorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMinorGridlines Delete navigation property minorGridlines for workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMinorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMinorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMinorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteTitleRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteTitleRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteTitleExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteTitle Delete navigation property title for workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteTitle(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteTitleRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteTitleExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisDeleteTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetFormat Get format from workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetFormatRequest) (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMajorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMajorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMajorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMajorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMajorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMajorGridlines Get majorGridlines from workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMajorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMajorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMajorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMajorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMajorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMinorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMinorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMinorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMinorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMinorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMinorGridlines Get minorGridlines from workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMinorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMinorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMinorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMinorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetMinorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetTitleRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetTitleRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetTitleRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetTitleRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetTitleRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetTitleExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetTitle Get title from workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetTitle(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetTitleRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitle
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetTitleExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetTitleRequest) (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisGetTitle")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMajorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisMinorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatDeleteFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatDeleteFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatGetFont Get font from workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatGetFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatGetFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatGetFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatUpdateFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatUpdateFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleGetFormat Get format from workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitleFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleGetFormatRequest) (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitleFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitleFormat *MicrosoftGraphWorkbookChartAxisTitleFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisTitleFormat(microsoftGraphWorkbookChartAxisTitleFormat MicrosoftGraphWorkbookChartAxisTitleFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisTitleFormat = &microsoftGraphWorkbookChartAxisTitleFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisTitleUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitleFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitleFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitleFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisFormat *MicrosoftGraphWorkbookChartAxisFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisFormat(microsoftGraphWorkbookChartAxisFormat MicrosoftGraphWorkbookChartAxisFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisFormat = &microsoftGraphWorkbookChartAxisFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMajorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMajorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMajorGridlines Update the navigation property majorGridlines in workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMajorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMajorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMajorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMinorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMinorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMinorGridlines Update the navigation property minorGridlines in workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMinorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMinorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMinorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitle *MicrosoftGraphWorkbookChartAxisTitle
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateTitleRequest) MicrosoftGraphWorkbookChartAxisTitle(microsoftGraphWorkbookChartAxisTitle MicrosoftGraphWorkbookChartAxisTitle) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateTitleRequest {
	r.microsoftGraphWorkbookChartAxisTitle = &microsoftGraphWorkbookChartAxisTitle
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateTitleExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateTitle Update the navigation property title in workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateTitle(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateTitleRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateTitleExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesSeriesAxisUpdateTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitle == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateCategoryAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartAxis *MicrosoftGraphWorkbookChartAxis
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateCategoryAxisRequest) MicrosoftGraphWorkbookChartAxis(microsoftGraphWorkbookChartAxis MicrosoftGraphWorkbookChartAxis) ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateCategoryAxisRequest {
	r.microsoftGraphWorkbookChartAxis = &microsoftGraphWorkbookChartAxis
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateCategoryAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesUpdateCategoryAxisExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesUpdateCategoryAxis Update the navigation property categoryAxis in workbooks

Represents the category axis in a chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateCategoryAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesUpdateCategoryAxis(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateCategoryAxisRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateCategoryAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesUpdateCategoryAxisExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateCategoryAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesUpdateCategoryAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/categoryAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxis == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxis is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxis
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateSeriesAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartAxis *MicrosoftGraphWorkbookChartAxis
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateSeriesAxisRequest) MicrosoftGraphWorkbookChartAxis(microsoftGraphWorkbookChartAxis MicrosoftGraphWorkbookChartAxis) ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateSeriesAxisRequest {
	r.microsoftGraphWorkbookChartAxis = &microsoftGraphWorkbookChartAxis
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateSeriesAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesUpdateSeriesAxisExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesUpdateSeriesAxis Update the navigation property seriesAxis in workbooks

Represents the series axis of a 3-dimensional chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateSeriesAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesUpdateSeriesAxis(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateSeriesAxisRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateSeriesAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesUpdateSeriesAxisExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateSeriesAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesUpdateSeriesAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/seriesAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxis == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxis is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxis
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateValueAxisRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartAxis *MicrosoftGraphWorkbookChartAxis
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateValueAxisRequest) MicrosoftGraphWorkbookChartAxis(microsoftGraphWorkbookChartAxis MicrosoftGraphWorkbookChartAxis) ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateValueAxisRequest {
	r.microsoftGraphWorkbookChartAxis = &microsoftGraphWorkbookChartAxis
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateValueAxisRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesUpdateValueAxisExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesUpdateValueAxis Update the navigation property valueAxis in workbooks

Represents the value axis in an axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateValueAxisRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesUpdateValueAxis(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateValueAxisRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateValueAxisRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesUpdateValueAxisExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesUpdateValueAxisRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesUpdateValueAxis")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxis == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxis is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxis
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMajorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMajorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMajorGridlines Delete navigation property majorGridlines for workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMajorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMajorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMajorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMinorGridlinesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMinorGridlinesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMinorGridlines Delete navigation property minorGridlines for workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMinorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMinorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMinorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteTitleRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteTitleRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteTitleExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteTitle Delete navigation property title for workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteTitle(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteTitleRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteTitleExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisDeleteTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart axis element. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetFormat Get format from workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetFormatRequest) (MicrosoftGraphWorkbookChartAxisFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMajorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMajorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMajorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMajorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMajorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMajorGridlines Get majorGridlines from workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMajorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMajorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMajorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMajorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMajorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMinorGridlinesRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMinorGridlinesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMinorGridlinesRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMinorGridlinesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMinorGridlinesRequest) Execute() (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMinorGridlines Get minorGridlines from workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMinorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMinorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlines
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMinorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMinorGridlinesRequest) (MicrosoftGraphWorkbookChartGridlines, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlines
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetMinorGridlines")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetTitleRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetTitleRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetTitleRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetTitleRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetTitleRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetTitleExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetTitle Get title from workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetTitle(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetTitleRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitle
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetTitleExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisGetTitleRequest) (MicrosoftGraphWorkbookChartAxisTitle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisGetTitle")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMajorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/majorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatDeleteLine Delete navigation property line for workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatDeleteLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatGetLine Get line from workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatGetLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatGetLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatGetLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatUpdateLine Update the navigation property line in workbooks

Represents chart line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatUpdateLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesGetFormat Get format from workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartGridlinesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesGetFormatRequest) (MicrosoftGraphWorkbookChartGridlinesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartGridlinesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlinesFormat *MicrosoftGraphWorkbookChartGridlinesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesUpdateFormatRequest) MicrosoftGraphWorkbookChartGridlinesFormat(microsoftGraphWorkbookChartGridlinesFormat MicrosoftGraphWorkbookChartGridlinesFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartGridlinesFormat = &microsoftGraphWorkbookChartGridlinesFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart gridlines. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisMinorGridlinesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/minorGridlines/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlinesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlinesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlinesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleDeleteFormat Delete navigation property format for workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatDeleteFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatDeleteFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatGetFont Get font from workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatGetFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatGetFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatGetFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes, such as font name, font size, color, etc. of chart axis title object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatUpdateFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatUpdateFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleGetFormat Get format from workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxisTitleFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleGetFormatRequest) (MicrosoftGraphWorkbookChartAxisTitleFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxisTitleFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitleFormat *MicrosoftGraphWorkbookChartAxisTitleFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisTitleFormat(microsoftGraphWorkbookChartAxisTitleFormat MicrosoftGraphWorkbookChartAxisTitleFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisTitleFormat = &microsoftGraphWorkbookChartAxisTitleFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleUpdateFormat Update the navigation property format in workbooks

Represents the formatting of chart axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisTitleUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitleFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitleFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitleFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisFormat *MicrosoftGraphWorkbookChartAxisFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateFormatRequest) MicrosoftGraphWorkbookChartAxisFormat(microsoftGraphWorkbookChartAxisFormat MicrosoftGraphWorkbookChartAxisFormat) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAxisFormat = &microsoftGraphWorkbookChartAxisFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart object, which includes line and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMajorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMajorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMajorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMajorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMajorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMajorGridlines Update the navigation property majorGridlines in workbooks

Returns a gridlines object that represents the major gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMajorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMajorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMajorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMajorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMajorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMajorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMajorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/majorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMinorGridlinesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartGridlines *MicrosoftGraphWorkbookChartGridlines
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMinorGridlinesRequest) MicrosoftGraphWorkbookChartGridlines(microsoftGraphWorkbookChartGridlines MicrosoftGraphWorkbookChartGridlines) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMinorGridlinesRequest {
	r.microsoftGraphWorkbookChartGridlines = &microsoftGraphWorkbookChartGridlines
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMinorGridlinesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMinorGridlinesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMinorGridlines Update the navigation property minorGridlines in workbooks

Returns a Gridlines object that represents the minor gridlines for the specified axis. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMinorGridlinesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMinorGridlines(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMinorGridlinesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMinorGridlinesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMinorGridlinesExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMinorGridlinesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateMinorGridlines")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/minorGridlines"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartGridlines == nil {
		return nil, reportError("microsoftGraphWorkbookChartGridlines is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartGridlines
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartAxisTitle *MicrosoftGraphWorkbookChartAxisTitle
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateTitleRequest) MicrosoftGraphWorkbookChartAxisTitle(microsoftGraphWorkbookChartAxisTitle MicrosoftGraphWorkbookChartAxisTitle) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateTitleRequest {
	r.microsoftGraphWorkbookChartAxisTitle = &microsoftGraphWorkbookChartAxisTitle
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateTitleExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateTitle Update the navigation property title in workbooks

Represents the axis title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateTitle(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateTitleRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateTitleExecute(r ApiWorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsAxesValueAxisUpdateTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes/valueAxis/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxisTitle == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxisTitle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxisTitle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsCreateSeriesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartSeries *MicrosoftGraphWorkbookChartSeries
}

// New navigation property
func (r ApiWorkbooksWorkbookWorksheetsChartsCreateSeriesRequest) MicrosoftGraphWorkbookChartSeries(microsoftGraphWorkbookChartSeries MicrosoftGraphWorkbookChartSeries) ApiWorkbooksWorkbookWorksheetsChartsCreateSeriesRequest {
	r.microsoftGraphWorkbookChartSeries = &microsoftGraphWorkbookChartSeries
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsCreateSeriesRequest) Execute() (MicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsCreateSeriesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsCreateSeries Create new navigation property to series for workbooks

Represents either a single series or collection of series in the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsCreateSeriesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsCreateSeries(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsCreateSeriesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsCreateSeriesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartSeries
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsCreateSeriesExecute(r ApiWorkbooksWorkbookWorksheetsChartsCreateSeriesRequest) (MicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsCreateSeries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartSeries == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookChartSeries is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartSeries
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDataLabelsDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDataLabelsDeleteFormat Delete navigation property format for workbooks

Represents the format of chart data labels, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/dataLabels/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of the current chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/dataLabels/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/dataLabels/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFill Get fill from workbooks

Represents the fill format of the current chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/dataLabels/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/dataLabels/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of the current chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/dataLabels/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for a chart data label. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/dataLabels/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDataLabelsGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartDataLabelFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDataLabelsGetFormat Get format from workbooks

Represents the format of chart data labels, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartDataLabelFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsGetFormatRequest) (MicrosoftGraphWorkbookChartDataLabelFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartDataLabelFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/dataLabels/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDataLabelsUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartDataLabelFormat *MicrosoftGraphWorkbookChartDataLabelFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsUpdateFormatRequest) MicrosoftGraphWorkbookChartDataLabelFormat(microsoftGraphWorkbookChartDataLabelFormat MicrosoftGraphWorkbookChartDataLabelFormat) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsUpdateFormatRequest {
	r.microsoftGraphWorkbookChartDataLabelFormat = &microsoftGraphWorkbookChartDataLabelFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDataLabelsUpdateFormat Update the navigation property format in workbooks

Represents the format of chart data labels, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsDataLabelsUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDataLabelsUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDataLabelsUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsDataLabelsUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDataLabelsUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/dataLabels/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartDataLabelFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartDataLabelFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartDataLabelFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDeleteAxesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsDeleteAxesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsDeleteAxesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDeleteAxesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDeleteAxesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDeleteAxes Delete navigation property axes for workbooks

Represents chart axes. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsDeleteAxesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDeleteAxes(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsDeleteAxesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDeleteAxesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDeleteAxesExecute(r ApiWorkbooksWorkbookWorksheetsChartsDeleteAxesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDeleteAxes")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDeleteDataLabelsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsDeleteDataLabelsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsDeleteDataLabelsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDeleteDataLabelsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDeleteDataLabelsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDeleteDataLabels Delete navigation property dataLabels for workbooks

Represents the datalabels on the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsDeleteDataLabelsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDeleteDataLabels(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsDeleteDataLabelsRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDeleteDataLabelsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDeleteDataLabelsExecute(r ApiWorkbooksWorkbookWorksheetsChartsDeleteDataLabelsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDeleteDataLabels")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/dataLabels"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDeleteFormat Delete navigation property format for workbooks

Encapsulates the format properties for the chart area. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDeleteLegendRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsDeleteLegendRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsDeleteLegendRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDeleteLegendRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDeleteLegendExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDeleteLegend Delete navigation property legend for workbooks

Represents the legend for the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsDeleteLegendRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDeleteLegend(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsDeleteLegendRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDeleteLegendRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDeleteLegendExecute(r ApiWorkbooksWorkbookWorksheetsChartsDeleteLegendRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDeleteLegend")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/legend"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDeleteSeriesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsDeleteSeriesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsDeleteSeriesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDeleteSeriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDeleteSeriesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDeleteSeries Delete navigation property series for workbooks

Represents either a single series or collection of series in the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookWorksheetsChartsDeleteSeriesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDeleteSeries(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookWorksheetsChartsDeleteSeriesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDeleteSeriesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDeleteSeriesExecute(r ApiWorkbooksWorkbookWorksheetsChartsDeleteSeriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDeleteSeries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDeleteTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsDeleteTitleRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsDeleteTitleRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDeleteTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDeleteTitleExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDeleteTitle Delete navigation property title for workbooks

Represents the title of the specified chart, including the text, visibility, position and formating of the title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsDeleteTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDeleteTitle(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsDeleteTitleRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDeleteTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDeleteTitleExecute(r ApiWorkbooksWorkbookWorksheetsChartsDeleteTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDeleteTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsDeleteWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsDeleteWorksheetRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsDeleteWorksheetRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsDeleteWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsDeleteWorksheetExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsDeleteWorksheet Delete navigation property worksheet for workbooks

The worksheet containing the current chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsDeleteWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDeleteWorksheet(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsDeleteWorksheetRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsDeleteWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsDeleteWorksheetExecute(r ApiWorkbooksWorkbookWorksheetsChartsDeleteWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsDeleteWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsFormatDeleteFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsFormatDeleteFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsFormatDeleteFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsFormatDeleteFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsFormatGetFill Get fill from workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsFormatGetFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsFormatGetFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsFormatGetFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsFormatGetFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsFormatGetFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsFormatGetFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsFormatUpdateFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsFormatUpdateFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsFormatUpdateFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsFormatUpdateFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsGetAxesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsGetAxesRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsGetAxesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsGetAxesRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsGetAxesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsGetAxesRequest) Execute() (MicrosoftGraphWorkbookChartAxes, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsGetAxesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsGetAxes Get axes from workbooks

Represents chart axes. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsGetAxesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsGetAxes(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsGetAxesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsGetAxesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAxes
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsGetAxesExecute(r ApiWorkbooksWorkbookWorksheetsChartsGetAxesRequest) (MicrosoftGraphWorkbookChartAxes, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAxes
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsGetAxes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsGetDataLabelsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsGetDataLabelsRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsGetDataLabelsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsGetDataLabelsRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsGetDataLabelsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsGetDataLabelsRequest) Execute() (MicrosoftGraphWorkbookChartDataLabels, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsGetDataLabelsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsGetDataLabels Get dataLabels from workbooks

Represents the datalabels on the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsGetDataLabelsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsGetDataLabels(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsGetDataLabelsRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsGetDataLabelsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartDataLabels
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsGetDataLabelsExecute(r ApiWorkbooksWorkbookWorksheetsChartsGetDataLabelsRequest) (MicrosoftGraphWorkbookChartDataLabels, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartDataLabels
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsGetDataLabels")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/dataLabels"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartAreaFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsGetFormat Get format from workbooks

Encapsulates the format properties for the chart area. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartAreaFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsGetFormatRequest) (MicrosoftGraphWorkbookChartAreaFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartAreaFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsGetLegendRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsGetLegendRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsGetLegendRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsGetLegendRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsGetLegendRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsGetLegendRequest) Execute() (MicrosoftGraphWorkbookChartLegend, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsGetLegendExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsGetLegend Get legend from workbooks

Represents the legend for the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsGetLegendRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsGetLegend(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsGetLegendRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsGetLegendRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLegend
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsGetLegendExecute(r ApiWorkbooksWorkbookWorksheetsChartsGetLegendRequest) (MicrosoftGraphWorkbookChartLegend, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLegend
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsGetLegend")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/legend"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsGetSeriesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsGetSeriesRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsGetSeriesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsGetSeriesRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsGetSeriesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsGetSeriesRequest) Execute() (MicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsGetSeriesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsGetSeries Get series from workbooks

Represents either a single series or collection of series in the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookWorksheetsChartsGetSeriesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsGetSeries(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookWorksheetsChartsGetSeriesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsGetSeriesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartSeries
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsGetSeriesExecute(r ApiWorkbooksWorkbookWorksheetsChartsGetSeriesRequest) (MicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsGetSeries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsGetTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsGetTitleRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsGetTitleRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsGetTitleRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsGetTitleRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsGetTitleRequest) Execute() (MicrosoftGraphWorkbookChartTitle, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsGetTitleExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsGetTitle Get title from workbooks

Represents the title of the specified chart, including the text, visibility, position and formating of the title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsGetTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsGetTitle(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsGetTitleRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsGetTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartTitle
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsGetTitleExecute(r ApiWorkbooksWorkbookWorksheetsChartsGetTitleRequest) (MicrosoftGraphWorkbookChartTitle, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartTitle
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsGetTitle")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsGetWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsGetWorksheetRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsGetWorksheetRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsGetWorksheetRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsGetWorksheetRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsGetWorksheetRequest) Execute() (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsGetWorksheetExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsGetWorksheet Get worksheet from workbooks

The worksheet containing the current chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsGetWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsGetWorksheet(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsGetWorksheetRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsGetWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheet
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsGetWorksheetExecute(r ApiWorkbooksWorkbookWorksheetsChartsGetWorksheetRequest) (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsGetWorksheet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsLegendDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsLegendDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsLegendDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsLegendDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsLegendDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsLegendDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsLegendDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsLegendDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsLegendDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsLegendDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsLegendDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/legend/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of an object, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/legend/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsLegendFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/legend/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsLegendFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsLegendFormatGetFill Get fill from workbooks

Represents the fill format of an object, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendFormatGetFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendFormatGetFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsLegendFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/legend/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsLegendFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsLegendFormatGetFont Get font from workbooks

Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendFormatGetFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendFormatGetFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsLegendFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/legend/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of an object, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/legend/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes such as font name, font size, color, etc. of a chart legend. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsLegendFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/legend/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsLegendGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsLegendGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsLegendGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsLegendGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsLegendGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsLegendGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartLegendFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsLegendGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsLegendGetFormat Get format from workbooks

Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsLegendGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsLegendGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsLegendGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLegendFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsLegendGetFormatRequest) (MicrosoftGraphWorkbookChartLegendFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLegendFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsLegendGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/legend/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsLegendUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartLegendFormat *MicrosoftGraphWorkbookChartLegendFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsLegendUpdateFormatRequest) MicrosoftGraphWorkbookChartLegendFormat(microsoftGraphWorkbookChartLegendFormat MicrosoftGraphWorkbookChartLegendFormat) ApiWorkbooksWorkbookWorksheetsChartsLegendUpdateFormatRequest {
	r.microsoftGraphWorkbookChartLegendFormat = &microsoftGraphWorkbookChartLegendFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsLegendUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsLegendUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsLegendUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart legend, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsLegendUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsLegendUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsLegendUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsLegendUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsLegendUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsLegendUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/legend/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLegendFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLegendFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLegendFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest) Top(top int32) ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest) Skip(skip int32) ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest) Search(search string) ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest) Filter(filter string) ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest) Count(count bool) ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest) Orderby(orderby []string) ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest) Execute() (CollectionOfWorkbookChartSeries, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsListSeriesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsListSeries Get series from workbooks

Represents either a single series or collection of series in the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsListSeries(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookChartSeries
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsListSeriesExecute(r ApiWorkbooksWorkbookWorksheetsChartsListSeriesRequest) (CollectionOfWorkbookChartSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookChartSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsListSeries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesCreatePointsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	microsoftGraphWorkbookChartPoint *MicrosoftGraphWorkbookChartPoint
}

// New navigation property
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesCreatePointsRequest) MicrosoftGraphWorkbookChartPoint(microsoftGraphWorkbookChartPoint MicrosoftGraphWorkbookChartPoint) ApiWorkbooksWorkbookWorksheetsChartsSeriesCreatePointsRequest {
	r.microsoftGraphWorkbookChartPoint = &microsoftGraphWorkbookChartPoint
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesCreatePointsRequest) Execute() (MicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesCreatePointsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesCreatePoints Create new navigation property to points for workbooks

Represents a collection of all points in the series. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesCreatePointsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesCreatePoints(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesCreatePointsRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesCreatePointsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartPoint
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesCreatePointsExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesCreatePointsRequest) (MicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartPoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesCreatePoints")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartPoint == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookChartPoint is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartPoint
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsSeriesDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart series, which includes fill and line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesDeletePointsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesDeletePointsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsSeriesDeletePointsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesDeletePointsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesDeletePointsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesDeletePoints Delete navigation property points for workbooks

Represents a collection of all points in the series. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesDeletePointsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesDeletePoints(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesDeletePointsRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesDeletePointsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesDeletePointsExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesDeletePointsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesDeletePoints")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of a chart series, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteLineRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteLineRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteLine Delete navigation property line for workbooks

Represents line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesFormatDeleteLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesFormatGetFill Get fill from workbooks

Represents the fill format of a chart series, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesFormatGetFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesFormatGetFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetLineRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetLineRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetLineRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetLineRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetLineRequest) Execute() (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesFormatGetLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesFormatGetLine Get line from workbooks

Represents line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesFormatGetLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartLineFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesFormatGetLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatGetLineRequest) (MicrosoftGraphWorkbookChartLineFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartLineFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesFormatGetLine")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of a chart series, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateLineRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	microsoftGraphWorkbookChartLineFormat *MicrosoftGraphWorkbookChartLineFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateLineRequest) MicrosoftGraphWorkbookChartLineFormat(microsoftGraphWorkbookChartLineFormat MicrosoftGraphWorkbookChartLineFormat) ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateLineRequest {
	r.microsoftGraphWorkbookChartLineFormat = &microsoftGraphWorkbookChartLineFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateLineRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateLineExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateLine Update the navigation property line in workbooks

Represents line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateLineRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateLine(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateLineRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateLineRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateLineExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateLineRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesFormatUpdateLine")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format/line"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLineFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartLineFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLineFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsSeriesGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsSeriesGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartSeriesFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesGetFormat Get format from workbooks

Represents the formatting of a chart series, which includes fill and line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartSeriesFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesGetFormatRequest) (MicrosoftGraphWorkbookChartSeriesFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartSeriesFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesGetPointsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesGetPointsRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsSeriesGetPointsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesGetPointsRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsSeriesGetPointsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesGetPointsRequest) Execute() (MicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesGetPointsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesGetPoints Get points from workbooks

Represents a collection of all points in the series. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesGetPointsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesGetPoints(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesGetPointsRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesGetPointsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartPoint
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesGetPointsExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesGetPointsRequest) (MicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartPoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesGetPoints")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest) Top(top int32) ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest) Skip(skip int32) ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest) Search(search string) ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest) Filter(filter string) ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest) Count(count bool) ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest) Orderby(orderby []string) ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest) Execute() (CollectionOfWorkbookChartPoint, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesListPointsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesListPoints Get points from workbooks

Represents a collection of all points in the series. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesListPoints(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookChartPoint
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesListPointsExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesListPointsRequest) (CollectionOfWorkbookChartPoint, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookChartPoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesListPoints")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesPointsDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesPointsDeleteFormat Delete navigation property format for workbooks

Encapsulates the format properties chart point. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesPointsDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesPointsDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesPointsDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesPointsFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesPointsFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of a chart, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesPointsFormatDeleteFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesPointsFormatDeleteFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesPointsFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesPointsFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesPointsFormatGetFill Get fill from workbooks

Represents the fill format of a chart, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesPointsFormatGetFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatGetFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesPointsFormatGetFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesPointsFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesPointsFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesPointsFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of a chart, which includes background formating information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesPointsFormatUpdateFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesPointsFormatUpdateFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesPointsFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartPointFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesPointsGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesPointsGetFormat Get format from workbooks

Encapsulates the format properties chart point. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesPointsGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartPointFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesPointsGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsGetFormatRequest) (MicrosoftGraphWorkbookChartPointFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartPointFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesPointsGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	microsoftGraphWorkbookChartPointFormat *MicrosoftGraphWorkbookChartPointFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsUpdateFormatRequest) MicrosoftGraphWorkbookChartPointFormat(microsoftGraphWorkbookChartPointFormat MicrosoftGraphWorkbookChartPointFormat) ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsUpdateFormatRequest {
	r.microsoftGraphWorkbookChartPointFormat = &microsoftGraphWorkbookChartPointFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesPointsUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesPointsUpdateFormat Update the navigation property format in workbooks

Encapsulates the format properties chart point. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesPointsUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesPointsUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesPointsUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesPointsUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartPointFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartPointFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartPointFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	microsoftGraphWorkbookChartSeriesFormat *MicrosoftGraphWorkbookChartSeriesFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdateFormatRequest) MicrosoftGraphWorkbookChartSeriesFormat(microsoftGraphWorkbookChartSeriesFormat MicrosoftGraphWorkbookChartSeriesFormat) ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdateFormatRequest {
	r.microsoftGraphWorkbookChartSeriesFormat = &microsoftGraphWorkbookChartSeriesFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart series, which includes fill and line formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartSeriesFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartSeriesFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartSeriesFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdatePointsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	workbookChartPointId string
	microsoftGraphWorkbookChartPoint *MicrosoftGraphWorkbookChartPoint
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdatePointsRequest) MicrosoftGraphWorkbookChartPoint(microsoftGraphWorkbookChartPoint MicrosoftGraphWorkbookChartPoint) ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdatePointsRequest {
	r.microsoftGraphWorkbookChartPoint = &microsoftGraphWorkbookChartPoint
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdatePointsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsSeriesUpdatePointsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsSeriesUpdatePoints Update the navigation property points in workbooks

Represents a collection of all points in the series. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param workbookChartPointId key: id of workbookChartPoint
 @return ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdatePointsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesUpdatePoints(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string, workbookChartPointId string) ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdatePointsRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdatePointsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		workbookChartPointId: workbookChartPointId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsSeriesUpdatePointsExecute(r ApiWorkbooksWorkbookWorksheetsChartsSeriesUpdatePointsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsSeriesUpdatePoints")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/{workbookChartPoint-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartPoint-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartPointId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartPoint == nil {
		return nil, reportError("microsoftGraphWorkbookChartPoint is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartPoint
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsTitleDeleteFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsTitleDeleteFormatRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsTitleDeleteFormatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsTitleDeleteFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsTitleDeleteFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsTitleDeleteFormat Delete navigation property format for workbooks

Represents the formatting of a chart title, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsTitleDeleteFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleDeleteFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsTitleDeleteFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsTitleDeleteFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleDeleteFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsTitleDeleteFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsTitleDeleteFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFillRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFillRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFill Delete navigation property fill for workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/title/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFontRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFontRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFont Delete navigation property font for workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsTitleFormatDeleteFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFillRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFillRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFillRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFillRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFillRequest) Execute() (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsTitleFormatGetFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsTitleFormatGetFill Get fill from workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleFormatGetFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFill
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleFormatGetFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFillRequest) (MicrosoftGraphWorkbookChartFill, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFill
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsTitleFormatGetFill")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/title/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFontRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFontRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFontRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFontRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFontRequest) Execute() (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsTitleFormatGetFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsTitleFormatGetFont Get font from workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleFormatGetFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartFont
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleFormatGetFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatGetFontRequest) (MicrosoftGraphWorkbookChartFont, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartFont
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsTitleFormatGetFont")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFillRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartFill *MicrosoftGraphWorkbookChartFill
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFillRequest) MicrosoftGraphWorkbookChartFill(microsoftGraphWorkbookChartFill MicrosoftGraphWorkbookChartFill) ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFillRequest {
	r.microsoftGraphWorkbookChartFill = &microsoftGraphWorkbookChartFill
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFillRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFillExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFill Update the navigation property fill in workbooks

Represents the fill format of an object, which includes background formatting information. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFillRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFill(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFillRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFillRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFillExecute(r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFillRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFill")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/title/format/fill"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFill == nil {
		return nil, reportError("microsoftGraphWorkbookChartFill is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFill
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFontRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartFont *MicrosoftGraphWorkbookChartFont
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFontRequest) MicrosoftGraphWorkbookChartFont(microsoftGraphWorkbookChartFont MicrosoftGraphWorkbookChartFont) ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFontRequest {
	r.microsoftGraphWorkbookChartFont = &microsoftGraphWorkbookChartFont
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFontRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFontExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFont Update the navigation property font in workbooks

Represents the font attributes (font name, font size, color, etc.) for the current object. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFontRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFont(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFontRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFontRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFontExecute(r ApiWorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFontRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsTitleFormatUpdateFont")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/title/format/font"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartFont == nil {
		return nil, reportError("microsoftGraphWorkbookChartFont is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartFont
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsTitleGetFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsChartsTitleGetFormatRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsChartsTitleGetFormatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsChartsTitleGetFormatRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsChartsTitleGetFormatRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsTitleGetFormatRequest) Execute() (MicrosoftGraphWorkbookChartTitleFormat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsTitleGetFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsTitleGetFormat Get format from workbooks

Represents the formatting of a chart title, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsTitleGetFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleGetFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsTitleGetFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsTitleGetFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChartTitleFormat
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleGetFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsTitleGetFormatRequest) (MicrosoftGraphWorkbookChartTitleFormat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChartTitleFormat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsTitleGetFormat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsTitleUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartTitleFormat *MicrosoftGraphWorkbookChartTitleFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsTitleUpdateFormatRequest) MicrosoftGraphWorkbookChartTitleFormat(microsoftGraphWorkbookChartTitleFormat MicrosoftGraphWorkbookChartTitleFormat) ApiWorkbooksWorkbookWorksheetsChartsTitleUpdateFormatRequest {
	r.microsoftGraphWorkbookChartTitleFormat = &microsoftGraphWorkbookChartTitleFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsTitleUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsTitleUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsTitleUpdateFormat Update the navigation property format in workbooks

Represents the formatting of a chart title, which includes fill and font formatting. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsTitleUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsTitleUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsTitleUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsTitleUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsTitleUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsTitleUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/title/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartTitleFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartTitleFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartTitleFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsUpdateAxesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartAxes *MicrosoftGraphWorkbookChartAxes
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsUpdateAxesRequest) MicrosoftGraphWorkbookChartAxes(microsoftGraphWorkbookChartAxes MicrosoftGraphWorkbookChartAxes) ApiWorkbooksWorkbookWorksheetsChartsUpdateAxesRequest {
	r.microsoftGraphWorkbookChartAxes = &microsoftGraphWorkbookChartAxes
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsUpdateAxesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsUpdateAxesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsUpdateAxes Update the navigation property axes in workbooks

Represents chart axes. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsUpdateAxesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsUpdateAxes(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsUpdateAxesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsUpdateAxesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsUpdateAxesExecute(r ApiWorkbooksWorkbookWorksheetsChartsUpdateAxesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsUpdateAxes")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/axes"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAxes == nil {
		return nil, reportError("microsoftGraphWorkbookChartAxes is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAxes
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsUpdateDataLabelsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartDataLabels *MicrosoftGraphWorkbookChartDataLabels
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsUpdateDataLabelsRequest) MicrosoftGraphWorkbookChartDataLabels(microsoftGraphWorkbookChartDataLabels MicrosoftGraphWorkbookChartDataLabels) ApiWorkbooksWorkbookWorksheetsChartsUpdateDataLabelsRequest {
	r.microsoftGraphWorkbookChartDataLabels = &microsoftGraphWorkbookChartDataLabels
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsUpdateDataLabelsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsUpdateDataLabelsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsUpdateDataLabels Update the navigation property dataLabels in workbooks

Represents the datalabels on the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsUpdateDataLabelsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsUpdateDataLabels(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsUpdateDataLabelsRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsUpdateDataLabelsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsUpdateDataLabelsExecute(r ApiWorkbooksWorkbookWorksheetsChartsUpdateDataLabelsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsUpdateDataLabels")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/dataLabels"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartDataLabels == nil {
		return nil, reportError("microsoftGraphWorkbookChartDataLabels is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartDataLabels
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsUpdateFormatRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartAreaFormat *MicrosoftGraphWorkbookChartAreaFormat
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsUpdateFormatRequest) MicrosoftGraphWorkbookChartAreaFormat(microsoftGraphWorkbookChartAreaFormat MicrosoftGraphWorkbookChartAreaFormat) ApiWorkbooksWorkbookWorksheetsChartsUpdateFormatRequest {
	r.microsoftGraphWorkbookChartAreaFormat = &microsoftGraphWorkbookChartAreaFormat
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsUpdateFormatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsUpdateFormatExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsUpdateFormat Update the navigation property format in workbooks

Encapsulates the format properties for the chart area. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsUpdateFormatRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsUpdateFormat(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsUpdateFormatRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsUpdateFormatRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsUpdateFormatExecute(r ApiWorkbooksWorkbookWorksheetsChartsUpdateFormatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsUpdateFormat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/format"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartAreaFormat == nil {
		return nil, reportError("microsoftGraphWorkbookChartAreaFormat is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartAreaFormat
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsUpdateLegendRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartLegend *MicrosoftGraphWorkbookChartLegend
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsUpdateLegendRequest) MicrosoftGraphWorkbookChartLegend(microsoftGraphWorkbookChartLegend MicrosoftGraphWorkbookChartLegend) ApiWorkbooksWorkbookWorksheetsChartsUpdateLegendRequest {
	r.microsoftGraphWorkbookChartLegend = &microsoftGraphWorkbookChartLegend
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsUpdateLegendRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsUpdateLegendExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsUpdateLegend Update the navigation property legend in workbooks

Represents the legend for the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsUpdateLegendRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsUpdateLegend(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsUpdateLegendRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsUpdateLegendRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsUpdateLegendExecute(r ApiWorkbooksWorkbookWorksheetsChartsUpdateLegendRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsUpdateLegend")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/legend"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartLegend == nil {
		return nil, reportError("microsoftGraphWorkbookChartLegend is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartLegend
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsUpdateSeriesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	microsoftGraphWorkbookChartSeries *MicrosoftGraphWorkbookChartSeries
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsUpdateSeriesRequest) MicrosoftGraphWorkbookChartSeries(microsoftGraphWorkbookChartSeries MicrosoftGraphWorkbookChartSeries) ApiWorkbooksWorkbookWorksheetsChartsUpdateSeriesRequest {
	r.microsoftGraphWorkbookChartSeries = &microsoftGraphWorkbookChartSeries
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsUpdateSeriesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsUpdateSeriesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsUpdateSeries Update the navigation property series in workbooks

Represents either a single series or collection of series in the chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksWorkbookWorksheetsChartsUpdateSeriesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsUpdateSeries(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksWorkbookWorksheetsChartsUpdateSeriesRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsUpdateSeriesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsUpdateSeriesExecute(r ApiWorkbooksWorkbookWorksheetsChartsUpdateSeriesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsUpdateSeries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartSeries == nil {
		return nil, reportError("microsoftGraphWorkbookChartSeries is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartSeries
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsUpdateTitleRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChartTitle *MicrosoftGraphWorkbookChartTitle
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsUpdateTitleRequest) MicrosoftGraphWorkbookChartTitle(microsoftGraphWorkbookChartTitle MicrosoftGraphWorkbookChartTitle) ApiWorkbooksWorkbookWorksheetsChartsUpdateTitleRequest {
	r.microsoftGraphWorkbookChartTitle = &microsoftGraphWorkbookChartTitle
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsUpdateTitleRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsUpdateTitleExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsUpdateTitle Update the navigation property title in workbooks

Represents the title of the specified chart, including the text, visibility, position and formating of the title. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsUpdateTitleRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsUpdateTitle(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsUpdateTitleRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsUpdateTitleRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsUpdateTitleExecute(r ApiWorkbooksWorkbookWorksheetsChartsUpdateTitleRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsUpdateTitle")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/title"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChartTitle == nil {
		return nil, reportError("microsoftGraphWorkbookChartTitle is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChartTitle
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsChartsUpdateWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookWorksheet *MicrosoftGraphWorkbookWorksheet
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsChartsUpdateWorksheetRequest) MicrosoftGraphWorkbookWorksheet(microsoftGraphWorkbookWorksheet MicrosoftGraphWorkbookWorksheet) ApiWorkbooksWorkbookWorksheetsChartsUpdateWorksheetRequest {
	r.microsoftGraphWorkbookWorksheet = &microsoftGraphWorkbookWorksheet
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsChartsUpdateWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsChartsUpdateWorksheetExecute(r)
}

/*
WorkbooksWorkbookWorksheetsChartsUpdateWorksheet Update the navigation property worksheet in workbooks

The worksheet containing the current chart. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsChartsUpdateWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsUpdateWorksheet(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsChartsUpdateWorksheetRequest {
	return ApiWorkbooksWorkbookWorksheetsChartsUpdateWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsChartsUpdateWorksheetExecute(r ApiWorkbooksWorkbookWorksheetsChartsUpdateWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsChartsUpdateWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheet == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsCreateChartsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	microsoftGraphWorkbookChart *MicrosoftGraphWorkbookChart
}

// New navigation property
func (r ApiWorkbooksWorkbookWorksheetsCreateChartsRequest) MicrosoftGraphWorkbookChart(microsoftGraphWorkbookChart MicrosoftGraphWorkbookChart) ApiWorkbooksWorkbookWorksheetsCreateChartsRequest {
	r.microsoftGraphWorkbookChart = &microsoftGraphWorkbookChart
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsCreateChartsRequest) Execute() (MicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsCreateChartsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsCreateCharts Create new navigation property to charts for workbooks

Returns collection of charts that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksWorkbookWorksheetsCreateChartsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsCreateCharts(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksWorkbookWorksheetsCreateChartsRequest {
	return ApiWorkbooksWorkbookWorksheetsCreateChartsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChart
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsCreateChartsExecute(r ApiWorkbooksWorkbookWorksheetsCreateChartsRequest) (MicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsCreateCharts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChart == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookChart is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChart
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsCreateNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	microsoftGraphWorkbookNamedItem *MicrosoftGraphWorkbookNamedItem
}

// New navigation property
func (r ApiWorkbooksWorkbookWorksheetsCreateNamesRequest) MicrosoftGraphWorkbookNamedItem(microsoftGraphWorkbookNamedItem MicrosoftGraphWorkbookNamedItem) ApiWorkbooksWorkbookWorksheetsCreateNamesRequest {
	r.microsoftGraphWorkbookNamedItem = &microsoftGraphWorkbookNamedItem
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsCreateNamesRequest) Execute() (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsCreateNamesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsCreateNames Create new navigation property to names for workbooks

Returns collection of names that are associated with the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksWorkbookWorksheetsCreateNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsCreateNames(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksWorkbookWorksheetsCreateNamesRequest {
	return ApiWorkbooksWorkbookWorksheetsCreateNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookNamedItem
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsCreateNamesExecute(r ApiWorkbooksWorkbookWorksheetsCreateNamesRequest) (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsCreateNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookNamedItem == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookNamedItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookNamedItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsCreatePivotTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	microsoftGraphWorkbookPivotTable *MicrosoftGraphWorkbookPivotTable
}

// New navigation property
func (r ApiWorkbooksWorkbookWorksheetsCreatePivotTablesRequest) MicrosoftGraphWorkbookPivotTable(microsoftGraphWorkbookPivotTable MicrosoftGraphWorkbookPivotTable) ApiWorkbooksWorkbookWorksheetsCreatePivotTablesRequest {
	r.microsoftGraphWorkbookPivotTable = &microsoftGraphWorkbookPivotTable
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsCreatePivotTablesRequest) Execute() (MicrosoftGraphWorkbookPivotTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsCreatePivotTablesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsCreatePivotTables Create new navigation property to pivotTables for workbooks

Collection of PivotTables that are part of the worksheet.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksWorkbookWorksheetsCreatePivotTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsCreatePivotTables(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksWorkbookWorksheetsCreatePivotTablesRequest {
	return ApiWorkbooksWorkbookWorksheetsCreatePivotTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookPivotTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsCreatePivotTablesExecute(r ApiWorkbooksWorkbookWorksheetsCreatePivotTablesRequest) (MicrosoftGraphWorkbookPivotTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookPivotTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsCreatePivotTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/pivotTables"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookPivotTable == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookPivotTable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookPivotTable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsCreateTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	microsoftGraphWorkbookTable *MicrosoftGraphWorkbookTable
}

// New navigation property
func (r ApiWorkbooksWorkbookWorksheetsCreateTablesRequest) MicrosoftGraphWorkbookTable(microsoftGraphWorkbookTable MicrosoftGraphWorkbookTable) ApiWorkbooksWorkbookWorksheetsCreateTablesRequest {
	r.microsoftGraphWorkbookTable = &microsoftGraphWorkbookTable
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsCreateTablesRequest) Execute() (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsCreateTablesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsCreateTables Create new navigation property to tables for workbooks

Collection of tables that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksWorkbookWorksheetsCreateTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsCreateTables(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksWorkbookWorksheetsCreateTablesRequest {
	return ApiWorkbooksWorkbookWorksheetsCreateTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsCreateTablesExecute(r ApiWorkbooksWorkbookWorksheetsCreateTablesRequest) (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsCreateTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTable == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookTable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsDeleteChartsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsDeleteChartsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsDeleteChartsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsDeleteChartsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsDeleteChartsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsDeleteCharts Delete navigation property charts for workbooks

Returns collection of charts that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsDeleteChartsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsDeleteCharts(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsDeleteChartsRequest {
	return ApiWorkbooksWorkbookWorksheetsDeleteChartsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsDeleteChartsExecute(r ApiWorkbooksWorkbookWorksheetsDeleteChartsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsDeleteCharts")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsDeleteNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookNamedItemId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsDeleteNamesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsDeleteNamesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsDeleteNamesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsDeleteNamesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsDeleteNames Delete navigation property names for workbooks

Returns collection of names that are associated with the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookWorksheetsDeleteNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsDeleteNames(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookNamedItemId string) ApiWorkbooksWorkbookWorksheetsDeleteNamesRequest {
	return ApiWorkbooksWorkbookWorksheetsDeleteNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsDeleteNamesExecute(r ApiWorkbooksWorkbookWorksheetsDeleteNamesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsDeleteNames")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names/{workbookNamedItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsDeletePivotTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookPivotTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsDeletePivotTablesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsDeletePivotTablesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsDeletePivotTablesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsDeletePivotTablesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsDeletePivotTables Delete navigation property pivotTables for workbooks

Collection of PivotTables that are part of the worksheet.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookWorksheetsDeletePivotTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsDeletePivotTables(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookPivotTableId string) ApiWorkbooksWorkbookWorksheetsDeletePivotTablesRequest {
	return ApiWorkbooksWorkbookWorksheetsDeletePivotTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsDeletePivotTablesExecute(r ApiWorkbooksWorkbookWorksheetsDeletePivotTablesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsDeletePivotTables")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/pivotTables/{workbookPivotTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsDeleteProtectionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsDeleteProtectionRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsDeleteProtectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsDeleteProtectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsDeleteProtectionExecute(r)
}

/*
WorkbooksWorkbookWorksheetsDeleteProtection Delete navigation property protection for workbooks

Returns sheet protection object for a worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksWorkbookWorksheetsDeleteProtectionRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsDeleteProtection(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksWorkbookWorksheetsDeleteProtectionRequest {
	return ApiWorkbooksWorkbookWorksheetsDeleteProtectionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsDeleteProtectionExecute(r ApiWorkbooksWorkbookWorksheetsDeleteProtectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsDeleteProtection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/protection"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsDeleteTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsDeleteTablesRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsDeleteTablesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsDeleteTablesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsDeleteTablesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsDeleteTables Delete navigation property tables for workbooks

Collection of tables that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookWorksheetsDeleteTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsDeleteTables(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksWorkbookWorksheetsDeleteTablesRequest {
	return ApiWorkbooksWorkbookWorksheetsDeleteTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsDeleteTablesExecute(r ApiWorkbooksWorkbookWorksheetsDeleteTablesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsDeleteTables")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsGetChartsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsGetChartsRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsGetChartsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsGetChartsRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsGetChartsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsGetChartsRequest) Execute() (MicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsGetChartsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsGetCharts Get charts from workbooks

Returns collection of charts that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsGetChartsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsGetCharts(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsGetChartsRequest {
	return ApiWorkbooksWorkbookWorksheetsGetChartsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookChart
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsGetChartsExecute(r ApiWorkbooksWorkbookWorksheetsGetChartsRequest) (MicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsGetCharts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsGetNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookNamedItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsGetNamesRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsGetNamesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsGetNamesRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsGetNamesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsGetNamesRequest) Execute() (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsGetNamesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsGetNames Get names from workbooks

Returns collection of names that are associated with the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookWorksheetsGetNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsGetNames(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookNamedItemId string) ApiWorkbooksWorkbookWorksheetsGetNamesRequest {
	return ApiWorkbooksWorkbookWorksheetsGetNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookNamedItem
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsGetNamesExecute(r ApiWorkbooksWorkbookWorksheetsGetNamesRequest) (MicrosoftGraphWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsGetNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names/{workbookNamedItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsGetPivotTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookPivotTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsGetPivotTablesRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsGetPivotTablesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsGetPivotTablesRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsGetPivotTablesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsGetPivotTablesRequest) Execute() (MicrosoftGraphWorkbookPivotTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsGetPivotTablesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsGetPivotTables Get pivotTables from workbooks

Collection of PivotTables that are part of the worksheet.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookWorksheetsGetPivotTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsGetPivotTables(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookPivotTableId string) ApiWorkbooksWorkbookWorksheetsGetPivotTablesRequest {
	return ApiWorkbooksWorkbookWorksheetsGetPivotTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookPivotTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsGetPivotTablesExecute(r ApiWorkbooksWorkbookWorksheetsGetPivotTablesRequest) (MicrosoftGraphWorkbookPivotTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookPivotTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsGetPivotTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/pivotTables/{workbookPivotTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsGetProtectionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsGetProtectionRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsGetProtectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsGetProtectionRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsGetProtectionRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsGetProtectionRequest) Execute() (MicrosoftGraphWorkbookWorksheetProtection, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsGetProtectionExecute(r)
}

/*
WorkbooksWorkbookWorksheetsGetProtection Get protection from workbooks

Returns sheet protection object for a worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksWorkbookWorksheetsGetProtectionRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsGetProtection(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksWorkbookWorksheetsGetProtectionRequest {
	return ApiWorkbooksWorkbookWorksheetsGetProtectionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheetProtection
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsGetProtectionExecute(r ApiWorkbooksWorkbookWorksheetsGetProtectionRequest) (MicrosoftGraphWorkbookWorksheetProtection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheetProtection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsGetProtection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/protection"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsGetTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsGetTablesRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsGetTablesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsGetTablesRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsGetTablesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsGetTablesRequest) Execute() (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsGetTablesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsGetTables Get tables from workbooks

Collection of tables that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookWorksheetsGetTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsGetTables(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksWorkbookWorksheetsGetTablesRequest {
	return ApiWorkbooksWorkbookWorksheetsGetTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsGetTablesExecute(r ApiWorkbooksWorkbookWorksheetsGetTablesRequest) (MicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsGetTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsListChartsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookWorksheetsListChartsRequest) Top(top int32) ApiWorkbooksWorkbookWorksheetsListChartsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookWorksheetsListChartsRequest) Skip(skip int32) ApiWorkbooksWorkbookWorksheetsListChartsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookWorksheetsListChartsRequest) Search(search string) ApiWorkbooksWorkbookWorksheetsListChartsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookWorksheetsListChartsRequest) Filter(filter string) ApiWorkbooksWorkbookWorksheetsListChartsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookWorksheetsListChartsRequest) Count(count bool) ApiWorkbooksWorkbookWorksheetsListChartsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookWorksheetsListChartsRequest) Orderby(orderby []string) ApiWorkbooksWorkbookWorksheetsListChartsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsListChartsRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsListChartsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsListChartsRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsListChartsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsListChartsRequest) Execute() (CollectionOfWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsListChartsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsListCharts Get charts from workbooks

Returns collection of charts that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksWorkbookWorksheetsListChartsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsListCharts(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksWorkbookWorksheetsListChartsRequest {
	return ApiWorkbooksWorkbookWorksheetsListChartsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookChart
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsListChartsExecute(r ApiWorkbooksWorkbookWorksheetsListChartsRequest) (CollectionOfWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsListCharts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsListNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookWorksheetsListNamesRequest) Top(top int32) ApiWorkbooksWorkbookWorksheetsListNamesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookWorksheetsListNamesRequest) Skip(skip int32) ApiWorkbooksWorkbookWorksheetsListNamesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookWorksheetsListNamesRequest) Search(search string) ApiWorkbooksWorkbookWorksheetsListNamesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookWorksheetsListNamesRequest) Filter(filter string) ApiWorkbooksWorkbookWorksheetsListNamesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookWorksheetsListNamesRequest) Count(count bool) ApiWorkbooksWorkbookWorksheetsListNamesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookWorksheetsListNamesRequest) Orderby(orderby []string) ApiWorkbooksWorkbookWorksheetsListNamesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsListNamesRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsListNamesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsListNamesRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsListNamesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsListNamesRequest) Execute() (CollectionOfWorkbookNamedItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsListNamesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsListNames Get names from workbooks

Returns collection of names that are associated with the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksWorkbookWorksheetsListNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsListNames(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksWorkbookWorksheetsListNamesRequest {
	return ApiWorkbooksWorkbookWorksheetsListNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookNamedItem
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsListNamesExecute(r ApiWorkbooksWorkbookWorksheetsListNamesRequest) (CollectionOfWorkbookNamedItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookNamedItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsListNames")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest) Top(top int32) ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest) Skip(skip int32) ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest) Search(search string) ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest) Filter(filter string) ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest) Count(count bool) ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest) Orderby(orderby []string) ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest) Execute() (CollectionOfWorkbookPivotTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsListPivotTablesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsListPivotTables Get pivotTables from workbooks

Collection of PivotTables that are part of the worksheet.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsListPivotTables(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest {
	return ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookPivotTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsListPivotTablesExecute(r ApiWorkbooksWorkbookWorksheetsListPivotTablesRequest) (CollectionOfWorkbookPivotTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookPivotTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsListPivotTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/pivotTables"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsListTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookWorksheetsListTablesRequest) Top(top int32) ApiWorkbooksWorkbookWorksheetsListTablesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookWorksheetsListTablesRequest) Skip(skip int32) ApiWorkbooksWorkbookWorksheetsListTablesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookWorksheetsListTablesRequest) Search(search string) ApiWorkbooksWorkbookWorksheetsListTablesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookWorksheetsListTablesRequest) Filter(filter string) ApiWorkbooksWorkbookWorksheetsListTablesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookWorksheetsListTablesRequest) Count(count bool) ApiWorkbooksWorkbookWorksheetsListTablesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookWorksheetsListTablesRequest) Orderby(orderby []string) ApiWorkbooksWorkbookWorksheetsListTablesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsListTablesRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsListTablesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsListTablesRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsListTablesRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsListTablesRequest) Execute() (CollectionOfWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsListTablesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsListTables Get tables from workbooks

Collection of tables that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksWorkbookWorksheetsListTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsListTables(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksWorkbookWorksheetsListTablesRequest {
	return ApiWorkbooksWorkbookWorksheetsListTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookTable
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsListTablesExecute(r ApiWorkbooksWorkbookWorksheetsListTablesRequest) (CollectionOfWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsListTables")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsNamesDeleteWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookNamedItemId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsNamesDeleteWorksheetRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsNamesDeleteWorksheetRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsNamesDeleteWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsNamesDeleteWorksheetExecute(r)
}

/*
WorkbooksWorkbookWorksheetsNamesDeleteWorksheet Delete navigation property worksheet for workbooks

Returns the worksheet on which the named item is scoped to. Available only if the item is scoped to the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookWorksheetsNamesDeleteWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsNamesDeleteWorksheet(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookNamedItemId string) ApiWorkbooksWorkbookWorksheetsNamesDeleteWorksheetRequest {
	return ApiWorkbooksWorkbookWorksheetsNamesDeleteWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsNamesDeleteWorksheetExecute(r ApiWorkbooksWorkbookWorksheetsNamesDeleteWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsNamesDeleteWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names/{workbookNamedItem-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsNamesGetWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookNamedItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsNamesGetWorksheetRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsNamesGetWorksheetRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsNamesGetWorksheetRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsNamesGetWorksheetRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsNamesGetWorksheetRequest) Execute() (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsNamesGetWorksheetExecute(r)
}

/*
WorkbooksWorkbookWorksheetsNamesGetWorksheet Get worksheet from workbooks

Returns the worksheet on which the named item is scoped to. Available only if the item is scoped to the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookWorksheetsNamesGetWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsNamesGetWorksheet(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookNamedItemId string) ApiWorkbooksWorkbookWorksheetsNamesGetWorksheetRequest {
	return ApiWorkbooksWorkbookWorksheetsNamesGetWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheet
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsNamesGetWorksheetExecute(r ApiWorkbooksWorkbookWorksheetsNamesGetWorksheetRequest) (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsNamesGetWorksheet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names/{workbookNamedItem-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsNamesUpdateWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookNamedItemId string
	microsoftGraphWorkbookWorksheet *MicrosoftGraphWorkbookWorksheet
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsNamesUpdateWorksheetRequest) MicrosoftGraphWorkbookWorksheet(microsoftGraphWorkbookWorksheet MicrosoftGraphWorkbookWorksheet) ApiWorkbooksWorkbookWorksheetsNamesUpdateWorksheetRequest {
	r.microsoftGraphWorkbookWorksheet = &microsoftGraphWorkbookWorksheet
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsNamesUpdateWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsNamesUpdateWorksheetExecute(r)
}

/*
WorkbooksWorkbookWorksheetsNamesUpdateWorksheet Update the navigation property worksheet in workbooks

Returns the worksheet on which the named item is scoped to. Available only if the item is scoped to the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookWorksheetsNamesUpdateWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsNamesUpdateWorksheet(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookNamedItemId string) ApiWorkbooksWorkbookWorksheetsNamesUpdateWorksheetRequest {
	return ApiWorkbooksWorkbookWorksheetsNamesUpdateWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsNamesUpdateWorksheetExecute(r ApiWorkbooksWorkbookWorksheetsNamesUpdateWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsNamesUpdateWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names/{workbookNamedItem-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheet == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsPivotTablesDeleteWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookPivotTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsPivotTablesDeleteWorksheetRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsPivotTablesDeleteWorksheetRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsPivotTablesDeleteWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsPivotTablesDeleteWorksheetExecute(r)
}

/*
WorkbooksWorkbookWorksheetsPivotTablesDeleteWorksheet Delete navigation property worksheet for workbooks

The worksheet containing the current PivotTable. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookWorksheetsPivotTablesDeleteWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsPivotTablesDeleteWorksheet(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookPivotTableId string) ApiWorkbooksWorkbookWorksheetsPivotTablesDeleteWorksheetRequest {
	return ApiWorkbooksWorkbookWorksheetsPivotTablesDeleteWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsPivotTablesDeleteWorksheetExecute(r ApiWorkbooksWorkbookWorksheetsPivotTablesDeleteWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsPivotTablesDeleteWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/pivotTables/{workbookPivotTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsPivotTablesGetWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookPivotTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsPivotTablesGetWorksheetRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsPivotTablesGetWorksheetRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsPivotTablesGetWorksheetRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsPivotTablesGetWorksheetRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsPivotTablesGetWorksheetRequest) Execute() (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsPivotTablesGetWorksheetExecute(r)
}

/*
WorkbooksWorkbookWorksheetsPivotTablesGetWorksheet Get worksheet from workbooks

The worksheet containing the current PivotTable. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookWorksheetsPivotTablesGetWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsPivotTablesGetWorksheet(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookPivotTableId string) ApiWorkbooksWorkbookWorksheetsPivotTablesGetWorksheetRequest {
	return ApiWorkbooksWorkbookWorksheetsPivotTablesGetWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheet
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsPivotTablesGetWorksheetExecute(r ApiWorkbooksWorkbookWorksheetsPivotTablesGetWorksheetRequest) (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsPivotTablesGetWorksheet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/pivotTables/{workbookPivotTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsPivotTablesUpdateWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookPivotTableId string
	microsoftGraphWorkbookWorksheet *MicrosoftGraphWorkbookWorksheet
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsPivotTablesUpdateWorksheetRequest) MicrosoftGraphWorkbookWorksheet(microsoftGraphWorkbookWorksheet MicrosoftGraphWorkbookWorksheet) ApiWorkbooksWorkbookWorksheetsPivotTablesUpdateWorksheetRequest {
	r.microsoftGraphWorkbookWorksheet = &microsoftGraphWorkbookWorksheet
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsPivotTablesUpdateWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsPivotTablesUpdateWorksheetExecute(r)
}

/*
WorkbooksWorkbookWorksheetsPivotTablesUpdateWorksheet Update the navigation property worksheet in workbooks

The worksheet containing the current PivotTable. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookWorksheetsPivotTablesUpdateWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsPivotTablesUpdateWorksheet(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookPivotTableId string) ApiWorkbooksWorkbookWorksheetsPivotTablesUpdateWorksheetRequest {
	return ApiWorkbooksWorkbookWorksheetsPivotTablesUpdateWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsPivotTablesUpdateWorksheetExecute(r ApiWorkbooksWorkbookWorksheetsPivotTablesUpdateWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsPivotTablesUpdateWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/pivotTables/{workbookPivotTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheet == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesColumnsDeleteFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsTablesColumnsDeleteFilterRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsTablesColumnsDeleteFilterRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesColumnsDeleteFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesColumnsDeleteFilterExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesColumnsDeleteFilter Delete navigation property filter for workbooks

Retrieve the filter applied to the column. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookWorksheetsTablesColumnsDeleteFilterRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesColumnsDeleteFilter(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookWorksheetsTablesColumnsDeleteFilterRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesColumnsDeleteFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesColumnsDeleteFilterExecute(r ApiWorkbooksWorkbookWorksheetsTablesColumnsDeleteFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesColumnsDeleteFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesColumnsGetFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsTablesColumnsGetFilterRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsTablesColumnsGetFilterRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsTablesColumnsGetFilterRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsTablesColumnsGetFilterRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesColumnsGetFilterRequest) Execute() (MicrosoftGraphWorkbookFilter, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesColumnsGetFilterExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesColumnsGetFilter Get filter from workbooks

Retrieve the filter applied to the column. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookWorksheetsTablesColumnsGetFilterRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesColumnsGetFilter(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookWorksheetsTablesColumnsGetFilterRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesColumnsGetFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookFilter
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesColumnsGetFilterExecute(r ApiWorkbooksWorkbookWorksheetsTablesColumnsGetFilterRequest) (MicrosoftGraphWorkbookFilter, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookFilter
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesColumnsGetFilter")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesColumnsUpdateFilterRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	microsoftGraphWorkbookFilter *MicrosoftGraphWorkbookFilter
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsTablesColumnsUpdateFilterRequest) MicrosoftGraphWorkbookFilter(microsoftGraphWorkbookFilter MicrosoftGraphWorkbookFilter) ApiWorkbooksWorkbookWorksheetsTablesColumnsUpdateFilterRequest {
	r.microsoftGraphWorkbookFilter = &microsoftGraphWorkbookFilter
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesColumnsUpdateFilterRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesColumnsUpdateFilterExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesColumnsUpdateFilter Update the navigation property filter in workbooks

Retrieve the filter applied to the column. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookWorksheetsTablesColumnsUpdateFilterRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesColumnsUpdateFilter(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookWorksheetsTablesColumnsUpdateFilterRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesColumnsUpdateFilterRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesColumnsUpdateFilterExecute(r ApiWorkbooksWorkbookWorksheetsTablesColumnsUpdateFilterRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesColumnsUpdateFilter")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/filter"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookFilter == nil {
		return nil, reportError("microsoftGraphWorkbookFilter is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookFilter
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesCreateColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	microsoftGraphWorkbookTableColumn *MicrosoftGraphWorkbookTableColumn
}

// New navigation property
func (r ApiWorkbooksWorkbookWorksheetsTablesCreateColumnsRequest) MicrosoftGraphWorkbookTableColumn(microsoftGraphWorkbookTableColumn MicrosoftGraphWorkbookTableColumn) ApiWorkbooksWorkbookWorksheetsTablesCreateColumnsRequest {
	r.microsoftGraphWorkbookTableColumn = &microsoftGraphWorkbookTableColumn
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesCreateColumnsRequest) Execute() (MicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesCreateColumnsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesCreateColumns Create new navigation property to columns for workbooks

Represents a collection of all the columns in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookWorksheetsTablesCreateColumnsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesCreateColumns(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksWorkbookWorksheetsTablesCreateColumnsRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesCreateColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTableColumn
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesCreateColumnsExecute(r ApiWorkbooksWorkbookWorksheetsTablesCreateColumnsRequest) (MicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTableColumn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesCreateColumns")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTableColumn == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookTableColumn is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTableColumn
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesCreateRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	microsoftGraphWorkbookTableRow *MicrosoftGraphWorkbookTableRow
}

// New navigation property
func (r ApiWorkbooksWorkbookWorksheetsTablesCreateRowsRequest) MicrosoftGraphWorkbookTableRow(microsoftGraphWorkbookTableRow MicrosoftGraphWorkbookTableRow) ApiWorkbooksWorkbookWorksheetsTablesCreateRowsRequest {
	r.microsoftGraphWorkbookTableRow = &microsoftGraphWorkbookTableRow
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesCreateRowsRequest) Execute() (MicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesCreateRowsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesCreateRows Create new navigation property to rows for workbooks

Represents a collection of all the rows in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookWorksheetsTablesCreateRowsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesCreateRows(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksWorkbookWorksheetsTablesCreateRowsRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesCreateRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTableRow
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesCreateRowsExecute(r ApiWorkbooksWorkbookWorksheetsTablesCreateRowsRequest) (MicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesCreateRows")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/rows"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTableRow == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWorkbookTableRow is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTableRow
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesDeleteColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsTablesDeleteColumnsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsTablesDeleteColumnsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesDeleteColumnsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesDeleteColumnsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesDeleteColumns Delete navigation property columns for workbooks

Represents a collection of all the columns in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookWorksheetsTablesDeleteColumnsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesDeleteColumns(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookWorksheetsTablesDeleteColumnsRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesDeleteColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesDeleteColumnsExecute(r ApiWorkbooksWorkbookWorksheetsTablesDeleteColumnsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesDeleteColumns")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesDeleteRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableRowId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsTablesDeleteRowsRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsTablesDeleteRowsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesDeleteRowsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesDeleteRowsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesDeleteRows Delete navigation property rows for workbooks

Represents a collection of all the rows in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableRowId key: id of workbookTableRow
 @return ApiWorkbooksWorkbookWorksheetsTablesDeleteRowsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesDeleteRows(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableRowId string) ApiWorkbooksWorkbookWorksheetsTablesDeleteRowsRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesDeleteRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableRowId: workbookTableRowId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesDeleteRowsExecute(r ApiWorkbooksWorkbookWorksheetsTablesDeleteRowsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesDeleteRows")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/rows/{workbookTableRow-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableRow-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableRowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesDeleteSortRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsTablesDeleteSortRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsTablesDeleteSortRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesDeleteSortRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesDeleteSortExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesDeleteSort Delete navigation property sort for workbooks

Represents the sorting for the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookWorksheetsTablesDeleteSortRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesDeleteSort(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksWorkbookWorksheetsTablesDeleteSortRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesDeleteSortRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesDeleteSortExecute(r ApiWorkbooksWorkbookWorksheetsTablesDeleteSortRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesDeleteSort")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/sort"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesDeleteWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	ifMatch *string
}

// ETag
func (r ApiWorkbooksWorkbookWorksheetsTablesDeleteWorksheetRequest) IfMatch(ifMatch string) ApiWorkbooksWorkbookWorksheetsTablesDeleteWorksheetRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesDeleteWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesDeleteWorksheetExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesDeleteWorksheet Delete navigation property worksheet for workbooks

The worksheet containing the current table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookWorksheetsTablesDeleteWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesDeleteWorksheet(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksWorkbookWorksheetsTablesDeleteWorksheetRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesDeleteWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesDeleteWorksheetExecute(r ApiWorkbooksWorkbookWorksheetsTablesDeleteWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesDeleteWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesGetColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsTablesGetColumnsRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsTablesGetColumnsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsTablesGetColumnsRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsTablesGetColumnsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesGetColumnsRequest) Execute() (MicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesGetColumnsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesGetColumns Get columns from workbooks

Represents a collection of all the columns in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookWorksheetsTablesGetColumnsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesGetColumns(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookWorksheetsTablesGetColumnsRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesGetColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTableColumn
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesGetColumnsExecute(r ApiWorkbooksWorkbookWorksheetsTablesGetColumnsRequest) (MicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTableColumn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesGetColumns")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesGetRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableRowId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsTablesGetRowsRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsTablesGetRowsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsTablesGetRowsRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsTablesGetRowsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesGetRowsRequest) Execute() (MicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesGetRowsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesGetRows Get rows from workbooks

Represents a collection of all the rows in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableRowId key: id of workbookTableRow
 @return ApiWorkbooksWorkbookWorksheetsTablesGetRowsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesGetRows(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableRowId string) ApiWorkbooksWorkbookWorksheetsTablesGetRowsRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesGetRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableRowId: workbookTableRowId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTableRow
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesGetRowsExecute(r ApiWorkbooksWorkbookWorksheetsTablesGetRowsRequest) (MicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesGetRows")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/rows/{workbookTableRow-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableRow-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableRowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesGetSortRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsTablesGetSortRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsTablesGetSortRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsTablesGetSortRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsTablesGetSortRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesGetSortRequest) Execute() (MicrosoftGraphWorkbookTableSort, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesGetSortExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesGetSort Get sort from workbooks

Represents the sorting for the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookWorksheetsTablesGetSortRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesGetSort(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksWorkbookWorksheetsTablesGetSortRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesGetSortRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookTableSort
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesGetSortExecute(r ApiWorkbooksWorkbookWorksheetsTablesGetSortRequest) (MicrosoftGraphWorkbookTableSort, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookTableSort
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesGetSort")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/sort"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesGetWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsTablesGetWorksheetRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsTablesGetWorksheetRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsTablesGetWorksheetRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsTablesGetWorksheetRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesGetWorksheetRequest) Execute() (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesGetWorksheetExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesGetWorksheet Get worksheet from workbooks

The worksheet containing the current table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookWorksheetsTablesGetWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesGetWorksheet(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksWorkbookWorksheetsTablesGetWorksheetRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesGetWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWorkbookWorksheet
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesGetWorksheetExecute(r ApiWorkbooksWorkbookWorksheetsTablesGetWorksheetRequest) (MicrosoftGraphWorkbookWorksheet, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWorkbookWorksheet
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesGetWorksheet")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest) Top(top int32) ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest) Skip(skip int32) ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest) Search(search string) ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest) Filter(filter string) ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest) Count(count bool) ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest) Orderby(orderby []string) ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest) Execute() (CollectionOfWorkbookTableColumn, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesListColumnsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesListColumns Get columns from workbooks

Represents a collection of all the columns in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesListColumns(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookTableColumn
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesListColumnsExecute(r ApiWorkbooksWorkbookWorksheetsTablesListColumnsRequest) (CollectionOfWorkbookTableColumn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookTableColumn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesListColumns")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest) Top(top int32) ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest) Skip(skip int32) ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest) Search(search string) ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest) Filter(filter string) ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest) Count(count bool) ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest) Orderby(orderby []string) ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest) Select_(select_ []string) ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest) Expand(expand []string) ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest {
	r.expand = &expand
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest) Execute() (CollectionOfWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesListRowsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesListRows Get rows from workbooks

Represents a collection of all the rows in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesListRows(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return CollectionOfWorkbookTableRow
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesListRowsExecute(r ApiWorkbooksWorkbookWorksheetsTablesListRowsRequest) (CollectionOfWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesListRows")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/rows"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesUpdateColumnsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
	microsoftGraphWorkbookTableColumn *MicrosoftGraphWorkbookTableColumn
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsTablesUpdateColumnsRequest) MicrosoftGraphWorkbookTableColumn(microsoftGraphWorkbookTableColumn MicrosoftGraphWorkbookTableColumn) ApiWorkbooksWorkbookWorksheetsTablesUpdateColumnsRequest {
	r.microsoftGraphWorkbookTableColumn = &microsoftGraphWorkbookTableColumn
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesUpdateColumnsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesUpdateColumnsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesUpdateColumns Update the navigation property columns in workbooks

Represents a collection of all the columns in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksWorkbookWorksheetsTablesUpdateColumnsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesUpdateColumns(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksWorkbookWorksheetsTablesUpdateColumnsRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesUpdateColumnsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesUpdateColumnsExecute(r ApiWorkbooksWorkbookWorksheetsTablesUpdateColumnsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesUpdateColumns")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTableColumn == nil {
		return nil, reportError("microsoftGraphWorkbookTableColumn is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTableColumn
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesUpdateRowsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableRowId string
	microsoftGraphWorkbookTableRow *MicrosoftGraphWorkbookTableRow
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsTablesUpdateRowsRequest) MicrosoftGraphWorkbookTableRow(microsoftGraphWorkbookTableRow MicrosoftGraphWorkbookTableRow) ApiWorkbooksWorkbookWorksheetsTablesUpdateRowsRequest {
	r.microsoftGraphWorkbookTableRow = &microsoftGraphWorkbookTableRow
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesUpdateRowsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesUpdateRowsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesUpdateRows Update the navigation property rows in workbooks

Represents a collection of all the rows in the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableRowId key: id of workbookTableRow
 @return ApiWorkbooksWorkbookWorksheetsTablesUpdateRowsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesUpdateRows(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableRowId string) ApiWorkbooksWorkbookWorksheetsTablesUpdateRowsRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesUpdateRowsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableRowId: workbookTableRowId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesUpdateRowsExecute(r ApiWorkbooksWorkbookWorksheetsTablesUpdateRowsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesUpdateRows")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/rows/{workbookTableRow-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableRow-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableRowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTableRow == nil {
		return nil, reportError("microsoftGraphWorkbookTableRow is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTableRow
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesUpdateSortRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	microsoftGraphWorkbookTableSort *MicrosoftGraphWorkbookTableSort
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsTablesUpdateSortRequest) MicrosoftGraphWorkbookTableSort(microsoftGraphWorkbookTableSort MicrosoftGraphWorkbookTableSort) ApiWorkbooksWorkbookWorksheetsTablesUpdateSortRequest {
	r.microsoftGraphWorkbookTableSort = &microsoftGraphWorkbookTableSort
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesUpdateSortRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesUpdateSortExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesUpdateSort Update the navigation property sort in workbooks

Represents the sorting for the table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookWorksheetsTablesUpdateSortRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesUpdateSort(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksWorkbookWorksheetsTablesUpdateSortRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesUpdateSortRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesUpdateSortExecute(r ApiWorkbooksWorkbookWorksheetsTablesUpdateSortRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesUpdateSort")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/sort"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTableSort == nil {
		return nil, reportError("microsoftGraphWorkbookTableSort is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTableSort
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsTablesUpdateWorksheetRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	microsoftGraphWorkbookWorksheet *MicrosoftGraphWorkbookWorksheet
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsTablesUpdateWorksheetRequest) MicrosoftGraphWorkbookWorksheet(microsoftGraphWorkbookWorksheet MicrosoftGraphWorkbookWorksheet) ApiWorkbooksWorkbookWorksheetsTablesUpdateWorksheetRequest {
	r.microsoftGraphWorkbookWorksheet = &microsoftGraphWorkbookWorksheet
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsTablesUpdateWorksheetRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsTablesUpdateWorksheetExecute(r)
}

/*
WorkbooksWorkbookWorksheetsTablesUpdateWorksheet Update the navigation property worksheet in workbooks

The worksheet containing the current table. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookWorksheetsTablesUpdateWorksheetRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesUpdateWorksheet(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksWorkbookWorksheetsTablesUpdateWorksheetRequest {
	return ApiWorkbooksWorkbookWorksheetsTablesUpdateWorksheetRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsTablesUpdateWorksheetExecute(r ApiWorkbooksWorkbookWorksheetsTablesUpdateWorksheetRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsTablesUpdateWorksheet")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/worksheet"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheet == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheet is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheet
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsUpdateChartsRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	microsoftGraphWorkbookChart *MicrosoftGraphWorkbookChart
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsUpdateChartsRequest) MicrosoftGraphWorkbookChart(microsoftGraphWorkbookChart MicrosoftGraphWorkbookChart) ApiWorkbooksWorkbookWorksheetsUpdateChartsRequest {
	r.microsoftGraphWorkbookChart = &microsoftGraphWorkbookChart
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsUpdateChartsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsUpdateChartsExecute(r)
}

/*
WorkbooksWorkbookWorksheetsUpdateCharts Update the navigation property charts in workbooks

Returns collection of charts that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksWorkbookWorksheetsUpdateChartsRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsUpdateCharts(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksWorkbookWorksheetsUpdateChartsRequest {
	return ApiWorkbooksWorkbookWorksheetsUpdateChartsRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsUpdateChartsExecute(r ApiWorkbooksWorkbookWorksheetsUpdateChartsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsUpdateCharts")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookChart == nil {
		return nil, reportError("microsoftGraphWorkbookChart is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookChart
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsUpdateNamesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookNamedItemId string
	microsoftGraphWorkbookNamedItem *MicrosoftGraphWorkbookNamedItem
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsUpdateNamesRequest) MicrosoftGraphWorkbookNamedItem(microsoftGraphWorkbookNamedItem MicrosoftGraphWorkbookNamedItem) ApiWorkbooksWorkbookWorksheetsUpdateNamesRequest {
	r.microsoftGraphWorkbookNamedItem = &microsoftGraphWorkbookNamedItem
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsUpdateNamesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsUpdateNamesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsUpdateNames Update the navigation property names in workbooks

Returns collection of names that are associated with the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksWorkbookWorksheetsUpdateNamesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsUpdateNames(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookNamedItemId string) ApiWorkbooksWorkbookWorksheetsUpdateNamesRequest {
	return ApiWorkbooksWorkbookWorksheetsUpdateNamesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsUpdateNamesExecute(r ApiWorkbooksWorkbookWorksheetsUpdateNamesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsUpdateNames")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names/{workbookNamedItem-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookNamedItem == nil {
		return nil, reportError("microsoftGraphWorkbookNamedItem is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookNamedItem
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsUpdatePivotTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookPivotTableId string
	microsoftGraphWorkbookPivotTable *MicrosoftGraphWorkbookPivotTable
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsUpdatePivotTablesRequest) MicrosoftGraphWorkbookPivotTable(microsoftGraphWorkbookPivotTable MicrosoftGraphWorkbookPivotTable) ApiWorkbooksWorkbookWorksheetsUpdatePivotTablesRequest {
	r.microsoftGraphWorkbookPivotTable = &microsoftGraphWorkbookPivotTable
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsUpdatePivotTablesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsUpdatePivotTablesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsUpdatePivotTables Update the navigation property pivotTables in workbooks

Collection of PivotTables that are part of the worksheet.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksWorkbookWorksheetsUpdatePivotTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsUpdatePivotTables(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookPivotTableId string) ApiWorkbooksWorkbookWorksheetsUpdatePivotTablesRequest {
	return ApiWorkbooksWorkbookWorksheetsUpdatePivotTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsUpdatePivotTablesExecute(r ApiWorkbooksWorkbookWorksheetsUpdatePivotTablesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsUpdatePivotTables")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/pivotTables/{workbookPivotTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookPivotTable == nil {
		return nil, reportError("microsoftGraphWorkbookPivotTable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookPivotTable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsUpdateProtectionRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	microsoftGraphWorkbookWorksheetProtection *MicrosoftGraphWorkbookWorksheetProtection
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsUpdateProtectionRequest) MicrosoftGraphWorkbookWorksheetProtection(microsoftGraphWorkbookWorksheetProtection MicrosoftGraphWorkbookWorksheetProtection) ApiWorkbooksWorkbookWorksheetsUpdateProtectionRequest {
	r.microsoftGraphWorkbookWorksheetProtection = &microsoftGraphWorkbookWorksheetProtection
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsUpdateProtectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsUpdateProtectionExecute(r)
}

/*
WorkbooksWorkbookWorksheetsUpdateProtection Update the navigation property protection in workbooks

Returns sheet protection object for a worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksWorkbookWorksheetsUpdateProtectionRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsUpdateProtection(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksWorkbookWorksheetsUpdateProtectionRequest {
	return ApiWorkbooksWorkbookWorksheetsUpdateProtectionRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsUpdateProtectionExecute(r ApiWorkbooksWorkbookWorksheetsUpdateProtectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsUpdateProtection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/protection"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookWorksheetProtection == nil {
		return nil, reportError("microsoftGraphWorkbookWorksheetProtection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookWorksheetProtection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkbooksWorkbookWorksheetsUpdateTablesRequest struct {
	ctx _context.Context
	ApiService *WorkbooksWorkbookApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	microsoftGraphWorkbookTable *MicrosoftGraphWorkbookTable
}

// New navigation property values
func (r ApiWorkbooksWorkbookWorksheetsUpdateTablesRequest) MicrosoftGraphWorkbookTable(microsoftGraphWorkbookTable MicrosoftGraphWorkbookTable) ApiWorkbooksWorkbookWorksheetsUpdateTablesRequest {
	r.microsoftGraphWorkbookTable = &microsoftGraphWorkbookTable
	return r
}

func (r ApiWorkbooksWorkbookWorksheetsUpdateTablesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkbooksWorkbookWorksheetsUpdateTablesExecute(r)
}

/*
WorkbooksWorkbookWorksheetsUpdateTables Update the navigation property tables in workbooks

Collection of tables that are part of the worksheet. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksWorkbookWorksheetsUpdateTablesRequest
*/
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsUpdateTables(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksWorkbookWorksheetsUpdateTablesRequest {
	return ApiWorkbooksWorkbookWorksheetsUpdateTablesRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
func (a *WorkbooksWorkbookApiService) WorkbooksWorkbookWorksheetsUpdateTablesExecute(r ApiWorkbooksWorkbookWorksheetsUpdateTablesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksWorkbookApiService.WorkbooksWorkbookWorksheetsUpdateTables")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWorkbookTable == nil {
		return nil, reportError("microsoftGraphWorkbookTable is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWorkbookTable
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
