/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphTeamworkConversationIdentityType the model 'MicrosoftGraphTeamworkConversationIdentityType'
type MicrosoftGraphTeamworkConversationIdentityType string

// List of microsoft.graph.teamworkConversationIdentityType
const (
	TEAM MicrosoftGraphTeamworkConversationIdentityType = "team"
	CHANNEL MicrosoftGraphTeamworkConversationIdentityType = "channel"
	CHAT MicrosoftGraphTeamworkConversationIdentityType = "chat"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphTeamworkConversationIdentityType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphTeamworkConversationIdentityType enum
var AllowedMicrosoftGraphTeamworkConversationIdentityTypeEnumValues = []MicrosoftGraphTeamworkConversationIdentityType{
	"team",
	"channel",
	"chat",
	"unknownFutureValue",
}

func (v *MicrosoftGraphTeamworkConversationIdentityType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphTeamworkConversationIdentityType(value)
	for _, existing := range AllowedMicrosoftGraphTeamworkConversationIdentityTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphTeamworkConversationIdentityType", value)
}

// NewMicrosoftGraphTeamworkConversationIdentityTypeFromValue returns a pointer to a valid MicrosoftGraphTeamworkConversationIdentityType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphTeamworkConversationIdentityTypeFromValue(v string) (*MicrosoftGraphTeamworkConversationIdentityType, error) {
	ev := MicrosoftGraphTeamworkConversationIdentityType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphTeamworkConversationIdentityType: valid values are %v", v, AllowedMicrosoftGraphTeamworkConversationIdentityTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphTeamworkConversationIdentityType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphTeamworkConversationIdentityTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.teamworkConversationIdentityType value
func (v MicrosoftGraphTeamworkConversationIdentityType) Ptr() *MicrosoftGraphTeamworkConversationIdentityType {
	return &v
}

type NullableMicrosoftGraphTeamworkConversationIdentityType struct {
	value *MicrosoftGraphTeamworkConversationIdentityType
	isSet bool
}

func (v NullableMicrosoftGraphTeamworkConversationIdentityType) Get() *MicrosoftGraphTeamworkConversationIdentityType {
	return v.value
}

func (v *NullableMicrosoftGraphTeamworkConversationIdentityType) Set(val *MicrosoftGraphTeamworkConversationIdentityType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphTeamworkConversationIdentityType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphTeamworkConversationIdentityType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphTeamworkConversationIdentityType(val *MicrosoftGraphTeamworkConversationIdentityType) *NullableMicrosoftGraphTeamworkConversationIdentityType {
	return &NullableMicrosoftGraphTeamworkConversationIdentityType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphTeamworkConversationIdentityType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphTeamworkConversationIdentityType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

