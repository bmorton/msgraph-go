/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// InformationProtectionBitlockerApiService InformationProtectionBitlockerApi service
type InformationProtectionBitlockerApiService service

type ApiInformationProtectionBitlockerCreateRecoveryKeysRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionBitlockerApiService
	microsoftGraphBitlockerRecoveryKey *MicrosoftGraphBitlockerRecoveryKey
}

// New navigation property
func (r ApiInformationProtectionBitlockerCreateRecoveryKeysRequest) MicrosoftGraphBitlockerRecoveryKey(microsoftGraphBitlockerRecoveryKey MicrosoftGraphBitlockerRecoveryKey) ApiInformationProtectionBitlockerCreateRecoveryKeysRequest {
	r.microsoftGraphBitlockerRecoveryKey = &microsoftGraphBitlockerRecoveryKey
	return r
}

func (r ApiInformationProtectionBitlockerCreateRecoveryKeysRequest) Execute() (MicrosoftGraphBitlockerRecoveryKey, *_nethttp.Response, error) {
	return r.ApiService.InformationProtectionBitlockerCreateRecoveryKeysExecute(r)
}

/*
InformationProtectionBitlockerCreateRecoveryKeys Create new navigation property to recoveryKeys for informationProtection

The recovery keys associated with the bitlocker entity.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInformationProtectionBitlockerCreateRecoveryKeysRequest
*/
func (a *InformationProtectionBitlockerApiService) InformationProtectionBitlockerCreateRecoveryKeys(ctx _context.Context) ApiInformationProtectionBitlockerCreateRecoveryKeysRequest {
	return ApiInformationProtectionBitlockerCreateRecoveryKeysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphBitlockerRecoveryKey
func (a *InformationProtectionBitlockerApiService) InformationProtectionBitlockerCreateRecoveryKeysExecute(r ApiInformationProtectionBitlockerCreateRecoveryKeysRequest) (MicrosoftGraphBitlockerRecoveryKey, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphBitlockerRecoveryKey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionBitlockerApiService.InformationProtectionBitlockerCreateRecoveryKeys")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/bitlocker/recoveryKeys"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphBitlockerRecoveryKey == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphBitlockerRecoveryKey is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphBitlockerRecoveryKey
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInformationProtectionBitlockerDeleteRecoveryKeysRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionBitlockerApiService
	bitlockerRecoveryKeyId string
	ifMatch *string
}

// ETag
func (r ApiInformationProtectionBitlockerDeleteRecoveryKeysRequest) IfMatch(ifMatch string) ApiInformationProtectionBitlockerDeleteRecoveryKeysRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiInformationProtectionBitlockerDeleteRecoveryKeysRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InformationProtectionBitlockerDeleteRecoveryKeysExecute(r)
}

/*
InformationProtectionBitlockerDeleteRecoveryKeys Delete navigation property recoveryKeys for informationProtection

The recovery keys associated with the bitlocker entity.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bitlockerRecoveryKeyId key: id of bitlockerRecoveryKey
 @return ApiInformationProtectionBitlockerDeleteRecoveryKeysRequest
*/
func (a *InformationProtectionBitlockerApiService) InformationProtectionBitlockerDeleteRecoveryKeys(ctx _context.Context, bitlockerRecoveryKeyId string) ApiInformationProtectionBitlockerDeleteRecoveryKeysRequest {
	return ApiInformationProtectionBitlockerDeleteRecoveryKeysRequest{
		ApiService: a,
		ctx: ctx,
		bitlockerRecoveryKeyId: bitlockerRecoveryKeyId,
	}
}

// Execute executes the request
func (a *InformationProtectionBitlockerApiService) InformationProtectionBitlockerDeleteRecoveryKeysExecute(r ApiInformationProtectionBitlockerDeleteRecoveryKeysRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionBitlockerApiService.InformationProtectionBitlockerDeleteRecoveryKeys")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/bitlocker/recoveryKeys/{bitlockerRecoveryKey-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"bitlockerRecoveryKey-id"+"}", _neturl.PathEscape(parameterToString(r.bitlockerRecoveryKeyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInformationProtectionBitlockerGetRecoveryKeysRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionBitlockerApiService
	bitlockerRecoveryKeyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiInformationProtectionBitlockerGetRecoveryKeysRequest) Select_(select_ []string) ApiInformationProtectionBitlockerGetRecoveryKeysRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiInformationProtectionBitlockerGetRecoveryKeysRequest) Expand(expand []string) ApiInformationProtectionBitlockerGetRecoveryKeysRequest {
	r.expand = &expand
	return r
}

func (r ApiInformationProtectionBitlockerGetRecoveryKeysRequest) Execute() (MicrosoftGraphBitlockerRecoveryKey, *_nethttp.Response, error) {
	return r.ApiService.InformationProtectionBitlockerGetRecoveryKeysExecute(r)
}

/*
InformationProtectionBitlockerGetRecoveryKeys Get recoveryKeys from informationProtection

The recovery keys associated with the bitlocker entity.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bitlockerRecoveryKeyId key: id of bitlockerRecoveryKey
 @return ApiInformationProtectionBitlockerGetRecoveryKeysRequest
*/
func (a *InformationProtectionBitlockerApiService) InformationProtectionBitlockerGetRecoveryKeys(ctx _context.Context, bitlockerRecoveryKeyId string) ApiInformationProtectionBitlockerGetRecoveryKeysRequest {
	return ApiInformationProtectionBitlockerGetRecoveryKeysRequest{
		ApiService: a,
		ctx: ctx,
		bitlockerRecoveryKeyId: bitlockerRecoveryKeyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphBitlockerRecoveryKey
func (a *InformationProtectionBitlockerApiService) InformationProtectionBitlockerGetRecoveryKeysExecute(r ApiInformationProtectionBitlockerGetRecoveryKeysRequest) (MicrosoftGraphBitlockerRecoveryKey, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphBitlockerRecoveryKey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionBitlockerApiService.InformationProtectionBitlockerGetRecoveryKeys")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/bitlocker/recoveryKeys/{bitlockerRecoveryKey-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"bitlockerRecoveryKey-id"+"}", _neturl.PathEscape(parameterToString(r.bitlockerRecoveryKeyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInformationProtectionBitlockerListRecoveryKeysRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionBitlockerApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiInformationProtectionBitlockerListRecoveryKeysRequest) Top(top int32) ApiInformationProtectionBitlockerListRecoveryKeysRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiInformationProtectionBitlockerListRecoveryKeysRequest) Skip(skip int32) ApiInformationProtectionBitlockerListRecoveryKeysRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiInformationProtectionBitlockerListRecoveryKeysRequest) Search(search string) ApiInformationProtectionBitlockerListRecoveryKeysRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiInformationProtectionBitlockerListRecoveryKeysRequest) Filter(filter string) ApiInformationProtectionBitlockerListRecoveryKeysRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiInformationProtectionBitlockerListRecoveryKeysRequest) Count(count bool) ApiInformationProtectionBitlockerListRecoveryKeysRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiInformationProtectionBitlockerListRecoveryKeysRequest) Orderby(orderby []string) ApiInformationProtectionBitlockerListRecoveryKeysRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiInformationProtectionBitlockerListRecoveryKeysRequest) Select_(select_ []string) ApiInformationProtectionBitlockerListRecoveryKeysRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiInformationProtectionBitlockerListRecoveryKeysRequest) Expand(expand []string) ApiInformationProtectionBitlockerListRecoveryKeysRequest {
	r.expand = &expand
	return r
}

func (r ApiInformationProtectionBitlockerListRecoveryKeysRequest) Execute() (CollectionOfBitlockerRecoveryKey, *_nethttp.Response, error) {
	return r.ApiService.InformationProtectionBitlockerListRecoveryKeysExecute(r)
}

/*
InformationProtectionBitlockerListRecoveryKeys Get recoveryKeys from informationProtection

The recovery keys associated with the bitlocker entity.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInformationProtectionBitlockerListRecoveryKeysRequest
*/
func (a *InformationProtectionBitlockerApiService) InformationProtectionBitlockerListRecoveryKeys(ctx _context.Context) ApiInformationProtectionBitlockerListRecoveryKeysRequest {
	return ApiInformationProtectionBitlockerListRecoveryKeysRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfBitlockerRecoveryKey
func (a *InformationProtectionBitlockerApiService) InformationProtectionBitlockerListRecoveryKeysExecute(r ApiInformationProtectionBitlockerListRecoveryKeysRequest) (CollectionOfBitlockerRecoveryKey, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfBitlockerRecoveryKey
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionBitlockerApiService.InformationProtectionBitlockerListRecoveryKeys")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/bitlocker/recoveryKeys"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInformationProtectionBitlockerUpdateRecoveryKeysRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionBitlockerApiService
	bitlockerRecoveryKeyId string
	microsoftGraphBitlockerRecoveryKey *MicrosoftGraphBitlockerRecoveryKey
}

// New navigation property values
func (r ApiInformationProtectionBitlockerUpdateRecoveryKeysRequest) MicrosoftGraphBitlockerRecoveryKey(microsoftGraphBitlockerRecoveryKey MicrosoftGraphBitlockerRecoveryKey) ApiInformationProtectionBitlockerUpdateRecoveryKeysRequest {
	r.microsoftGraphBitlockerRecoveryKey = &microsoftGraphBitlockerRecoveryKey
	return r
}

func (r ApiInformationProtectionBitlockerUpdateRecoveryKeysRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InformationProtectionBitlockerUpdateRecoveryKeysExecute(r)
}

/*
InformationProtectionBitlockerUpdateRecoveryKeys Update the navigation property recoveryKeys in informationProtection

The recovery keys associated with the bitlocker entity.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param bitlockerRecoveryKeyId key: id of bitlockerRecoveryKey
 @return ApiInformationProtectionBitlockerUpdateRecoveryKeysRequest
*/
func (a *InformationProtectionBitlockerApiService) InformationProtectionBitlockerUpdateRecoveryKeys(ctx _context.Context, bitlockerRecoveryKeyId string) ApiInformationProtectionBitlockerUpdateRecoveryKeysRequest {
	return ApiInformationProtectionBitlockerUpdateRecoveryKeysRequest{
		ApiService: a,
		ctx: ctx,
		bitlockerRecoveryKeyId: bitlockerRecoveryKeyId,
	}
}

// Execute executes the request
func (a *InformationProtectionBitlockerApiService) InformationProtectionBitlockerUpdateRecoveryKeysExecute(r ApiInformationProtectionBitlockerUpdateRecoveryKeysRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionBitlockerApiService.InformationProtectionBitlockerUpdateRecoveryKeys")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/bitlocker/recoveryKeys/{bitlockerRecoveryKey-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"bitlockerRecoveryKey-id"+"}", _neturl.PathEscape(parameterToString(r.bitlockerRecoveryKeyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphBitlockerRecoveryKey == nil {
		return nil, reportError("microsoftGraphBitlockerRecoveryKey is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphBitlockerRecoveryKey
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInformationProtectionDeleteBitlockerRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionBitlockerApiService
	ifMatch *string
}

// ETag
func (r ApiInformationProtectionDeleteBitlockerRequest) IfMatch(ifMatch string) ApiInformationProtectionDeleteBitlockerRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiInformationProtectionDeleteBitlockerRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InformationProtectionDeleteBitlockerExecute(r)
}

/*
InformationProtectionDeleteBitlocker Delete navigation property bitlocker for informationProtection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInformationProtectionDeleteBitlockerRequest
*/
func (a *InformationProtectionBitlockerApiService) InformationProtectionDeleteBitlocker(ctx _context.Context) ApiInformationProtectionDeleteBitlockerRequest {
	return ApiInformationProtectionDeleteBitlockerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *InformationProtectionBitlockerApiService) InformationProtectionDeleteBitlockerExecute(r ApiInformationProtectionDeleteBitlockerRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionBitlockerApiService.InformationProtectionDeleteBitlocker")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/bitlocker"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInformationProtectionGetBitlockerRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionBitlockerApiService
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiInformationProtectionGetBitlockerRequest) Select_(select_ []string) ApiInformationProtectionGetBitlockerRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiInformationProtectionGetBitlockerRequest) Expand(expand []string) ApiInformationProtectionGetBitlockerRequest {
	r.expand = &expand
	return r
}

func (r ApiInformationProtectionGetBitlockerRequest) Execute() (MicrosoftGraphBitlocker, *_nethttp.Response, error) {
	return r.ApiService.InformationProtectionGetBitlockerExecute(r)
}

/*
InformationProtectionGetBitlocker Get bitlocker from informationProtection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInformationProtectionGetBitlockerRequest
*/
func (a *InformationProtectionBitlockerApiService) InformationProtectionGetBitlocker(ctx _context.Context) ApiInformationProtectionGetBitlockerRequest {
	return ApiInformationProtectionGetBitlockerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphBitlocker
func (a *InformationProtectionBitlockerApiService) InformationProtectionGetBitlockerExecute(r ApiInformationProtectionGetBitlockerRequest) (MicrosoftGraphBitlocker, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphBitlocker
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionBitlockerApiService.InformationProtectionGetBitlocker")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/bitlocker"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInformationProtectionUpdateBitlockerRequest struct {
	ctx _context.Context
	ApiService *InformationProtectionBitlockerApiService
	microsoftGraphBitlocker *MicrosoftGraphBitlocker
}

// New navigation property values
func (r ApiInformationProtectionUpdateBitlockerRequest) MicrosoftGraphBitlocker(microsoftGraphBitlocker MicrosoftGraphBitlocker) ApiInformationProtectionUpdateBitlockerRequest {
	r.microsoftGraphBitlocker = &microsoftGraphBitlocker
	return r
}

func (r ApiInformationProtectionUpdateBitlockerRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InformationProtectionUpdateBitlockerExecute(r)
}

/*
InformationProtectionUpdateBitlocker Update the navigation property bitlocker in informationProtection

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiInformationProtectionUpdateBitlockerRequest
*/
func (a *InformationProtectionBitlockerApiService) InformationProtectionUpdateBitlocker(ctx _context.Context) ApiInformationProtectionUpdateBitlockerRequest {
	return ApiInformationProtectionUpdateBitlockerRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *InformationProtectionBitlockerApiService) InformationProtectionUpdateBitlockerExecute(r ApiInformationProtectionUpdateBitlockerRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InformationProtectionBitlockerApiService.InformationProtectionUpdateBitlocker")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/informationProtection/bitlocker"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphBitlocker == nil {
		return nil, reportError("microsoftGraphBitlocker is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphBitlocker
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
