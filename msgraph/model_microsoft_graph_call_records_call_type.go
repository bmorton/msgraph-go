/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphCallRecordsCallType the model 'MicrosoftGraphCallRecordsCallType'
type MicrosoftGraphCallRecordsCallType string

// List of microsoft.graph.callRecords.callType
const (
	UNKNOWN MicrosoftGraphCallRecordsCallType = "unknown"
	GROUP_CALL MicrosoftGraphCallRecordsCallType = "groupCall"
	PEER_TO_PEER MicrosoftGraphCallRecordsCallType = "peerToPeer"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphCallRecordsCallType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphCallRecordsCallType enum
var AllowedMicrosoftGraphCallRecordsCallTypeEnumValues = []MicrosoftGraphCallRecordsCallType{
	"unknown",
	"groupCall",
	"peerToPeer",
	"unknownFutureValue",
}

func (v *MicrosoftGraphCallRecordsCallType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphCallRecordsCallType(value)
	for _, existing := range AllowedMicrosoftGraphCallRecordsCallTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphCallRecordsCallType", value)
}

// NewMicrosoftGraphCallRecordsCallTypeFromValue returns a pointer to a valid MicrosoftGraphCallRecordsCallType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphCallRecordsCallTypeFromValue(v string) (*MicrosoftGraphCallRecordsCallType, error) {
	ev := MicrosoftGraphCallRecordsCallType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphCallRecordsCallType: valid values are %v", v, AllowedMicrosoftGraphCallRecordsCallTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphCallRecordsCallType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphCallRecordsCallTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.callRecords.callType value
func (v MicrosoftGraphCallRecordsCallType) Ptr() *MicrosoftGraphCallRecordsCallType {
	return &v
}

type NullableMicrosoftGraphCallRecordsCallType struct {
	value *MicrosoftGraphCallRecordsCallType
	isSet bool
}

func (v NullableMicrosoftGraphCallRecordsCallType) Get() *MicrosoftGraphCallRecordsCallType {
	return v.value
}

func (v *NullableMicrosoftGraphCallRecordsCallType) Set(val *MicrosoftGraphCallRecordsCallType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphCallRecordsCallType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphCallRecordsCallType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphCallRecordsCallType(val *MicrosoftGraphCallRecordsCallType) *NullableMicrosoftGraphCallRecordsCallType {
	return &NullableMicrosoftGraphCallRecordsCallType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphCallRecordsCallType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphCallRecordsCallType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

