/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphDeviceManagementExchangeConnectorStatus The current status of the Exchange Connector.
type MicrosoftGraphDeviceManagementExchangeConnectorStatus string

// List of microsoft.graph.deviceManagementExchangeConnectorStatus
const (
	NONE MicrosoftGraphDeviceManagementExchangeConnectorStatus = "none"
	CONNECTION_PENDING MicrosoftGraphDeviceManagementExchangeConnectorStatus = "connectionPending"
	CONNECTED MicrosoftGraphDeviceManagementExchangeConnectorStatus = "connected"
	DISCONNECTED MicrosoftGraphDeviceManagementExchangeConnectorStatus = "disconnected"
)

// All allowed values of MicrosoftGraphDeviceManagementExchangeConnectorStatus enum
var AllowedMicrosoftGraphDeviceManagementExchangeConnectorStatusEnumValues = []MicrosoftGraphDeviceManagementExchangeConnectorStatus{
	"none",
	"connectionPending",
	"connected",
	"disconnected",
}

func (v *MicrosoftGraphDeviceManagementExchangeConnectorStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphDeviceManagementExchangeConnectorStatus(value)
	for _, existing := range AllowedMicrosoftGraphDeviceManagementExchangeConnectorStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphDeviceManagementExchangeConnectorStatus", value)
}

// NewMicrosoftGraphDeviceManagementExchangeConnectorStatusFromValue returns a pointer to a valid MicrosoftGraphDeviceManagementExchangeConnectorStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphDeviceManagementExchangeConnectorStatusFromValue(v string) (*MicrosoftGraphDeviceManagementExchangeConnectorStatus, error) {
	ev := MicrosoftGraphDeviceManagementExchangeConnectorStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphDeviceManagementExchangeConnectorStatus: valid values are %v", v, AllowedMicrosoftGraphDeviceManagementExchangeConnectorStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphDeviceManagementExchangeConnectorStatus) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphDeviceManagementExchangeConnectorStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.deviceManagementExchangeConnectorStatus value
func (v MicrosoftGraphDeviceManagementExchangeConnectorStatus) Ptr() *MicrosoftGraphDeviceManagementExchangeConnectorStatus {
	return &v
}

type NullableMicrosoftGraphDeviceManagementExchangeConnectorStatus struct {
	value *MicrosoftGraphDeviceManagementExchangeConnectorStatus
	isSet bool
}

func (v NullableMicrosoftGraphDeviceManagementExchangeConnectorStatus) Get() *MicrosoftGraphDeviceManagementExchangeConnectorStatus {
	return v.value
}

func (v *NullableMicrosoftGraphDeviceManagementExchangeConnectorStatus) Set(val *MicrosoftGraphDeviceManagementExchangeConnectorStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphDeviceManagementExchangeConnectorStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphDeviceManagementExchangeConnectorStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphDeviceManagementExchangeConnectorStatus(val *MicrosoftGraphDeviceManagementExchangeConnectorStatus) *NullableMicrosoftGraphDeviceManagementExchangeConnectorStatus {
	return &NullableMicrosoftGraphDeviceManagementExchangeConnectorStatus{value: val, isSet: true}
}

func (v NullableMicrosoftGraphDeviceManagementExchangeConnectorStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphDeviceManagementExchangeConnectorStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

