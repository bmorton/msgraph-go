/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// Calendar struct for Calendar
type Calendar struct {
	// Represent the online meeting service providers that can be used to create online meetings in this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.
	AllowedOnlineMeetingProviders *[]*AnyOfmicrosoftGraphOnlineMeetingProviderType `json:"allowedOnlineMeetingProviders,omitempty"`
	// true if the user can write to the calendar, false otherwise. This property is true for the user who created the calendar. This property is also true for a user who has been shared a calendar and granted write access.
	CanEdit NullableBool `json:"canEdit,omitempty"`
	// true if the user has the permission to share the calendar, false otherwise. Only the user who created the calendar can share it.
	CanShare NullableBool `json:"canShare,omitempty"`
	// true if the user can read calendar items that have been marked private, false otherwise.
	CanViewPrivateItems NullableBool `json:"canViewPrivateItems,omitempty"`
	// Identifies the version of the calendar object. Every time the calendar is changed, changeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
	ChangeKey NullableString `json:"changeKey,omitempty"`
	// Specifies the color theme to distinguish the calendar from other calendars in a UI. The property values are: auto, lightBlue, lightGreen, lightOrange, lightGray, lightYellow, lightTeal, lightPink, lightBrown, lightRed, maxColor.
	Color AnyOfmicrosoftGraphCalendarColor `json:"color,omitempty"`
	// The default online meeting provider for meetings sent from this calendar. Possible values are: unknown, skypeForBusiness, skypeForConsumer, teamsForBusiness.
	DefaultOnlineMeetingProvider AnyOfmicrosoftGraphOnlineMeetingProviderType `json:"defaultOnlineMeetingProvider,omitempty"`
	// The calendar color, expressed in a hex color code of three hexadecimal values, each ranging from 00 to FF and representing the red, green, or blue components of the color in the RGB color space. If the user has never explicitly set a color for the calendar, this property is empty. Read-only.
	HexColor NullableString `json:"hexColor,omitempty"`
	// true if this is the default calendar where new events are created by default, false otherwise.
	IsDefaultCalendar NullableBool `json:"isDefaultCalendar,omitempty"`
	// Indicates whether this user calendar can be deleted from the user mailbox.
	IsRemovable NullableBool `json:"isRemovable,omitempty"`
	// Indicates whether this user calendar supports tracking of meeting responses. Only meeting invites sent from users' primary calendars support tracking of meeting responses.
	IsTallyingResponses NullableBool `json:"isTallyingResponses,omitempty"`
	// The calendar name.
	Name NullableString `json:"name,omitempty"`
	// If set, this represents the user who created or added the calendar. For a calendar that the user created or added, the owner property is set to the user. For a calendar shared with the user, the owner property is set to the person who shared that calendar with the user.
	Owner AnyOfmicrosoftGraphEmailAddress `json:"owner,omitempty"`
	// The permissions of the users with whom the calendar is shared.
	CalendarPermissions *[]MicrosoftGraphCalendarPermission `json:"calendarPermissions,omitempty"`
	// The calendar view for the calendar. Navigation property. Read-only.
	CalendarView *[]MicrosoftGraphEvent `json:"calendarView,omitempty"`
	// The events in the calendar. Navigation property. Read-only.
	Events *[]MicrosoftGraphEvent `json:"events,omitempty"`
	// The collection of multi-value extended properties defined for the calendar. Read-only. Nullable.
	MultiValueExtendedProperties *[]MicrosoftGraphMultiValueLegacyExtendedProperty `json:"multiValueExtendedProperties,omitempty"`
	// The collection of single-value extended properties defined for the calendar. Read-only. Nullable.
	SingleValueExtendedProperties *[]MicrosoftGraphSingleValueLegacyExtendedProperty `json:"singleValueExtendedProperties,omitempty"`
}

// NewCalendar instantiates a new Calendar object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCalendar() *Calendar {
	this := Calendar{}
	return &this
}

// NewCalendarWithDefaults instantiates a new Calendar object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCalendarWithDefaults() *Calendar {
	this := Calendar{}
	return &this
}

// GetAllowedOnlineMeetingProviders returns the AllowedOnlineMeetingProviders field value if set, zero value otherwise.
func (o *Calendar) GetAllowedOnlineMeetingProviders() []*AnyOfmicrosoftGraphOnlineMeetingProviderType {
	if o == nil || o.AllowedOnlineMeetingProviders == nil {
		var ret []*AnyOfmicrosoftGraphOnlineMeetingProviderType
		return ret
	}
	return *o.AllowedOnlineMeetingProviders
}

// GetAllowedOnlineMeetingProvidersOk returns a tuple with the AllowedOnlineMeetingProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetAllowedOnlineMeetingProvidersOk() (*[]*AnyOfmicrosoftGraphOnlineMeetingProviderType, bool) {
	if o == nil || o.AllowedOnlineMeetingProviders == nil {
		return nil, false
	}
	return o.AllowedOnlineMeetingProviders, true
}

// HasAllowedOnlineMeetingProviders returns a boolean if a field has been set.
func (o *Calendar) HasAllowedOnlineMeetingProviders() bool {
	if o != nil && o.AllowedOnlineMeetingProviders != nil {
		return true
	}

	return false
}

// SetAllowedOnlineMeetingProviders gets a reference to the given []*AnyOfmicrosoftGraphOnlineMeetingProviderType and assigns it to the AllowedOnlineMeetingProviders field.
func (o *Calendar) SetAllowedOnlineMeetingProviders(v []*AnyOfmicrosoftGraphOnlineMeetingProviderType) {
	o.AllowedOnlineMeetingProviders = &v
}

// GetCanEdit returns the CanEdit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Calendar) GetCanEdit() bool {
	if o == nil || o.CanEdit.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CanEdit.Get()
}

// GetCanEditOk returns a tuple with the CanEdit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Calendar) GetCanEditOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CanEdit.Get(), o.CanEdit.IsSet()
}

// HasCanEdit returns a boolean if a field has been set.
func (o *Calendar) HasCanEdit() bool {
	if o != nil && o.CanEdit.IsSet() {
		return true
	}

	return false
}

// SetCanEdit gets a reference to the given NullableBool and assigns it to the CanEdit field.
func (o *Calendar) SetCanEdit(v bool) {
	o.CanEdit.Set(&v)
}
// SetCanEditNil sets the value for CanEdit to be an explicit nil
func (o *Calendar) SetCanEditNil() {
	o.CanEdit.Set(nil)
}

// UnsetCanEdit ensures that no value is present for CanEdit, not even an explicit nil
func (o *Calendar) UnsetCanEdit() {
	o.CanEdit.Unset()
}

// GetCanShare returns the CanShare field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Calendar) GetCanShare() bool {
	if o == nil || o.CanShare.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CanShare.Get()
}

// GetCanShareOk returns a tuple with the CanShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Calendar) GetCanShareOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CanShare.Get(), o.CanShare.IsSet()
}

// HasCanShare returns a boolean if a field has been set.
func (o *Calendar) HasCanShare() bool {
	if o != nil && o.CanShare.IsSet() {
		return true
	}

	return false
}

// SetCanShare gets a reference to the given NullableBool and assigns it to the CanShare field.
func (o *Calendar) SetCanShare(v bool) {
	o.CanShare.Set(&v)
}
// SetCanShareNil sets the value for CanShare to be an explicit nil
func (o *Calendar) SetCanShareNil() {
	o.CanShare.Set(nil)
}

// UnsetCanShare ensures that no value is present for CanShare, not even an explicit nil
func (o *Calendar) UnsetCanShare() {
	o.CanShare.Unset()
}

// GetCanViewPrivateItems returns the CanViewPrivateItems field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Calendar) GetCanViewPrivateItems() bool {
	if o == nil || o.CanViewPrivateItems.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CanViewPrivateItems.Get()
}

// GetCanViewPrivateItemsOk returns a tuple with the CanViewPrivateItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Calendar) GetCanViewPrivateItemsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CanViewPrivateItems.Get(), o.CanViewPrivateItems.IsSet()
}

// HasCanViewPrivateItems returns a boolean if a field has been set.
func (o *Calendar) HasCanViewPrivateItems() bool {
	if o != nil && o.CanViewPrivateItems.IsSet() {
		return true
	}

	return false
}

// SetCanViewPrivateItems gets a reference to the given NullableBool and assigns it to the CanViewPrivateItems field.
func (o *Calendar) SetCanViewPrivateItems(v bool) {
	o.CanViewPrivateItems.Set(&v)
}
// SetCanViewPrivateItemsNil sets the value for CanViewPrivateItems to be an explicit nil
func (o *Calendar) SetCanViewPrivateItemsNil() {
	o.CanViewPrivateItems.Set(nil)
}

// UnsetCanViewPrivateItems ensures that no value is present for CanViewPrivateItems, not even an explicit nil
func (o *Calendar) UnsetCanViewPrivateItems() {
	o.CanViewPrivateItems.Unset()
}

// GetChangeKey returns the ChangeKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Calendar) GetChangeKey() string {
	if o == nil || o.ChangeKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChangeKey.Get()
}

// GetChangeKeyOk returns a tuple with the ChangeKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Calendar) GetChangeKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ChangeKey.Get(), o.ChangeKey.IsSet()
}

// HasChangeKey returns a boolean if a field has been set.
func (o *Calendar) HasChangeKey() bool {
	if o != nil && o.ChangeKey.IsSet() {
		return true
	}

	return false
}

// SetChangeKey gets a reference to the given NullableString and assigns it to the ChangeKey field.
func (o *Calendar) SetChangeKey(v string) {
	o.ChangeKey.Set(&v)
}
// SetChangeKeyNil sets the value for ChangeKey to be an explicit nil
func (o *Calendar) SetChangeKeyNil() {
	o.ChangeKey.Set(nil)
}

// UnsetChangeKey ensures that no value is present for ChangeKey, not even an explicit nil
func (o *Calendar) UnsetChangeKey() {
	o.ChangeKey.Unset()
}

// GetColor returns the Color field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Calendar) GetColor() AnyOfmicrosoftGraphCalendarColor {
	if o == nil  {
		var ret AnyOfmicrosoftGraphCalendarColor
		return ret
	}
	return o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Calendar) GetColorOk() (*AnyOfmicrosoftGraphCalendarColor, bool) {
	if o == nil || o.Color == nil {
		return nil, false
	}
	return &o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *Calendar) HasColor() bool {
	if o != nil && o.Color != nil {
		return true
	}

	return false
}

// SetColor gets a reference to the given AnyOfmicrosoftGraphCalendarColor and assigns it to the Color field.
func (o *Calendar) SetColor(v AnyOfmicrosoftGraphCalendarColor) {
	o.Color = v
}

// GetDefaultOnlineMeetingProvider returns the DefaultOnlineMeetingProvider field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Calendar) GetDefaultOnlineMeetingProvider() AnyOfmicrosoftGraphOnlineMeetingProviderType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphOnlineMeetingProviderType
		return ret
	}
	return o.DefaultOnlineMeetingProvider
}

// GetDefaultOnlineMeetingProviderOk returns a tuple with the DefaultOnlineMeetingProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Calendar) GetDefaultOnlineMeetingProviderOk() (*AnyOfmicrosoftGraphOnlineMeetingProviderType, bool) {
	if o == nil || o.DefaultOnlineMeetingProvider == nil {
		return nil, false
	}
	return &o.DefaultOnlineMeetingProvider, true
}

// HasDefaultOnlineMeetingProvider returns a boolean if a field has been set.
func (o *Calendar) HasDefaultOnlineMeetingProvider() bool {
	if o != nil && o.DefaultOnlineMeetingProvider != nil {
		return true
	}

	return false
}

// SetDefaultOnlineMeetingProvider gets a reference to the given AnyOfmicrosoftGraphOnlineMeetingProviderType and assigns it to the DefaultOnlineMeetingProvider field.
func (o *Calendar) SetDefaultOnlineMeetingProvider(v AnyOfmicrosoftGraphOnlineMeetingProviderType) {
	o.DefaultOnlineMeetingProvider = v
}

// GetHexColor returns the HexColor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Calendar) GetHexColor() string {
	if o == nil || o.HexColor.Get() == nil {
		var ret string
		return ret
	}
	return *o.HexColor.Get()
}

// GetHexColorOk returns a tuple with the HexColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Calendar) GetHexColorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HexColor.Get(), o.HexColor.IsSet()
}

// HasHexColor returns a boolean if a field has been set.
func (o *Calendar) HasHexColor() bool {
	if o != nil && o.HexColor.IsSet() {
		return true
	}

	return false
}

// SetHexColor gets a reference to the given NullableString and assigns it to the HexColor field.
func (o *Calendar) SetHexColor(v string) {
	o.HexColor.Set(&v)
}
// SetHexColorNil sets the value for HexColor to be an explicit nil
func (o *Calendar) SetHexColorNil() {
	o.HexColor.Set(nil)
}

// UnsetHexColor ensures that no value is present for HexColor, not even an explicit nil
func (o *Calendar) UnsetHexColor() {
	o.HexColor.Unset()
}

// GetIsDefaultCalendar returns the IsDefaultCalendar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Calendar) GetIsDefaultCalendar() bool {
	if o == nil || o.IsDefaultCalendar.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsDefaultCalendar.Get()
}

// GetIsDefaultCalendarOk returns a tuple with the IsDefaultCalendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Calendar) GetIsDefaultCalendarOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsDefaultCalendar.Get(), o.IsDefaultCalendar.IsSet()
}

// HasIsDefaultCalendar returns a boolean if a field has been set.
func (o *Calendar) HasIsDefaultCalendar() bool {
	if o != nil && o.IsDefaultCalendar.IsSet() {
		return true
	}

	return false
}

// SetIsDefaultCalendar gets a reference to the given NullableBool and assigns it to the IsDefaultCalendar field.
func (o *Calendar) SetIsDefaultCalendar(v bool) {
	o.IsDefaultCalendar.Set(&v)
}
// SetIsDefaultCalendarNil sets the value for IsDefaultCalendar to be an explicit nil
func (o *Calendar) SetIsDefaultCalendarNil() {
	o.IsDefaultCalendar.Set(nil)
}

// UnsetIsDefaultCalendar ensures that no value is present for IsDefaultCalendar, not even an explicit nil
func (o *Calendar) UnsetIsDefaultCalendar() {
	o.IsDefaultCalendar.Unset()
}

// GetIsRemovable returns the IsRemovable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Calendar) GetIsRemovable() bool {
	if o == nil || o.IsRemovable.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsRemovable.Get()
}

// GetIsRemovableOk returns a tuple with the IsRemovable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Calendar) GetIsRemovableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsRemovable.Get(), o.IsRemovable.IsSet()
}

// HasIsRemovable returns a boolean if a field has been set.
func (o *Calendar) HasIsRemovable() bool {
	if o != nil && o.IsRemovable.IsSet() {
		return true
	}

	return false
}

// SetIsRemovable gets a reference to the given NullableBool and assigns it to the IsRemovable field.
func (o *Calendar) SetIsRemovable(v bool) {
	o.IsRemovable.Set(&v)
}
// SetIsRemovableNil sets the value for IsRemovable to be an explicit nil
func (o *Calendar) SetIsRemovableNil() {
	o.IsRemovable.Set(nil)
}

// UnsetIsRemovable ensures that no value is present for IsRemovable, not even an explicit nil
func (o *Calendar) UnsetIsRemovable() {
	o.IsRemovable.Unset()
}

// GetIsTallyingResponses returns the IsTallyingResponses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Calendar) GetIsTallyingResponses() bool {
	if o == nil || o.IsTallyingResponses.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsTallyingResponses.Get()
}

// GetIsTallyingResponsesOk returns a tuple with the IsTallyingResponses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Calendar) GetIsTallyingResponsesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsTallyingResponses.Get(), o.IsTallyingResponses.IsSet()
}

// HasIsTallyingResponses returns a boolean if a field has been set.
func (o *Calendar) HasIsTallyingResponses() bool {
	if o != nil && o.IsTallyingResponses.IsSet() {
		return true
	}

	return false
}

// SetIsTallyingResponses gets a reference to the given NullableBool and assigns it to the IsTallyingResponses field.
func (o *Calendar) SetIsTallyingResponses(v bool) {
	o.IsTallyingResponses.Set(&v)
}
// SetIsTallyingResponsesNil sets the value for IsTallyingResponses to be an explicit nil
func (o *Calendar) SetIsTallyingResponsesNil() {
	o.IsTallyingResponses.Set(nil)
}

// UnsetIsTallyingResponses ensures that no value is present for IsTallyingResponses, not even an explicit nil
func (o *Calendar) UnsetIsTallyingResponses() {
	o.IsTallyingResponses.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Calendar) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Calendar) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Calendar) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Calendar) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Calendar) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Calendar) UnsetName() {
	o.Name.Unset()
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Calendar) GetOwner() AnyOfmicrosoftGraphEmailAddress {
	if o == nil  {
		var ret AnyOfmicrosoftGraphEmailAddress
		return ret
	}
	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Calendar) GetOwnerOk() (*AnyOfmicrosoftGraphEmailAddress, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return &o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Calendar) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given AnyOfmicrosoftGraphEmailAddress and assigns it to the Owner field.
func (o *Calendar) SetOwner(v AnyOfmicrosoftGraphEmailAddress) {
	o.Owner = v
}

// GetCalendarPermissions returns the CalendarPermissions field value if set, zero value otherwise.
func (o *Calendar) GetCalendarPermissions() []MicrosoftGraphCalendarPermission {
	if o == nil || o.CalendarPermissions == nil {
		var ret []MicrosoftGraphCalendarPermission
		return ret
	}
	return *o.CalendarPermissions
}

// GetCalendarPermissionsOk returns a tuple with the CalendarPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetCalendarPermissionsOk() (*[]MicrosoftGraphCalendarPermission, bool) {
	if o == nil || o.CalendarPermissions == nil {
		return nil, false
	}
	return o.CalendarPermissions, true
}

// HasCalendarPermissions returns a boolean if a field has been set.
func (o *Calendar) HasCalendarPermissions() bool {
	if o != nil && o.CalendarPermissions != nil {
		return true
	}

	return false
}

// SetCalendarPermissions gets a reference to the given []MicrosoftGraphCalendarPermission and assigns it to the CalendarPermissions field.
func (o *Calendar) SetCalendarPermissions(v []MicrosoftGraphCalendarPermission) {
	o.CalendarPermissions = &v
}

// GetCalendarView returns the CalendarView field value if set, zero value otherwise.
func (o *Calendar) GetCalendarView() []MicrosoftGraphEvent {
	if o == nil || o.CalendarView == nil {
		var ret []MicrosoftGraphEvent
		return ret
	}
	return *o.CalendarView
}

// GetCalendarViewOk returns a tuple with the CalendarView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetCalendarViewOk() (*[]MicrosoftGraphEvent, bool) {
	if o == nil || o.CalendarView == nil {
		return nil, false
	}
	return o.CalendarView, true
}

// HasCalendarView returns a boolean if a field has been set.
func (o *Calendar) HasCalendarView() bool {
	if o != nil && o.CalendarView != nil {
		return true
	}

	return false
}

// SetCalendarView gets a reference to the given []MicrosoftGraphEvent and assigns it to the CalendarView field.
func (o *Calendar) SetCalendarView(v []MicrosoftGraphEvent) {
	o.CalendarView = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *Calendar) GetEvents() []MicrosoftGraphEvent {
	if o == nil || o.Events == nil {
		var ret []MicrosoftGraphEvent
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetEventsOk() (*[]MicrosoftGraphEvent, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *Calendar) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []MicrosoftGraphEvent and assigns it to the Events field.
func (o *Calendar) SetEvents(v []MicrosoftGraphEvent) {
	o.Events = &v
}

// GetMultiValueExtendedProperties returns the MultiValueExtendedProperties field value if set, zero value otherwise.
func (o *Calendar) GetMultiValueExtendedProperties() []MicrosoftGraphMultiValueLegacyExtendedProperty {
	if o == nil || o.MultiValueExtendedProperties == nil {
		var ret []MicrosoftGraphMultiValueLegacyExtendedProperty
		return ret
	}
	return *o.MultiValueExtendedProperties
}

// GetMultiValueExtendedPropertiesOk returns a tuple with the MultiValueExtendedProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetMultiValueExtendedPropertiesOk() (*[]MicrosoftGraphMultiValueLegacyExtendedProperty, bool) {
	if o == nil || o.MultiValueExtendedProperties == nil {
		return nil, false
	}
	return o.MultiValueExtendedProperties, true
}

// HasMultiValueExtendedProperties returns a boolean if a field has been set.
func (o *Calendar) HasMultiValueExtendedProperties() bool {
	if o != nil && o.MultiValueExtendedProperties != nil {
		return true
	}

	return false
}

// SetMultiValueExtendedProperties gets a reference to the given []MicrosoftGraphMultiValueLegacyExtendedProperty and assigns it to the MultiValueExtendedProperties field.
func (o *Calendar) SetMultiValueExtendedProperties(v []MicrosoftGraphMultiValueLegacyExtendedProperty) {
	o.MultiValueExtendedProperties = &v
}

// GetSingleValueExtendedProperties returns the SingleValueExtendedProperties field value if set, zero value otherwise.
func (o *Calendar) GetSingleValueExtendedProperties() []MicrosoftGraphSingleValueLegacyExtendedProperty {
	if o == nil || o.SingleValueExtendedProperties == nil {
		var ret []MicrosoftGraphSingleValueLegacyExtendedProperty
		return ret
	}
	return *o.SingleValueExtendedProperties
}

// GetSingleValueExtendedPropertiesOk returns a tuple with the SingleValueExtendedProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Calendar) GetSingleValueExtendedPropertiesOk() (*[]MicrosoftGraphSingleValueLegacyExtendedProperty, bool) {
	if o == nil || o.SingleValueExtendedProperties == nil {
		return nil, false
	}
	return o.SingleValueExtendedProperties, true
}

// HasSingleValueExtendedProperties returns a boolean if a field has been set.
func (o *Calendar) HasSingleValueExtendedProperties() bool {
	if o != nil && o.SingleValueExtendedProperties != nil {
		return true
	}

	return false
}

// SetSingleValueExtendedProperties gets a reference to the given []MicrosoftGraphSingleValueLegacyExtendedProperty and assigns it to the SingleValueExtendedProperties field.
func (o *Calendar) SetSingleValueExtendedProperties(v []MicrosoftGraphSingleValueLegacyExtendedProperty) {
	o.SingleValueExtendedProperties = &v
}

func (o Calendar) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowedOnlineMeetingProviders != nil {
		toSerialize["allowedOnlineMeetingProviders"] = o.AllowedOnlineMeetingProviders
	}
	if o.CanEdit.IsSet() {
		toSerialize["canEdit"] = o.CanEdit.Get()
	}
	if o.CanShare.IsSet() {
		toSerialize["canShare"] = o.CanShare.Get()
	}
	if o.CanViewPrivateItems.IsSet() {
		toSerialize["canViewPrivateItems"] = o.CanViewPrivateItems.Get()
	}
	if o.ChangeKey.IsSet() {
		toSerialize["changeKey"] = o.ChangeKey.Get()
	}
	if o.Color != nil {
		toSerialize["color"] = o.Color
	}
	if o.DefaultOnlineMeetingProvider != nil {
		toSerialize["defaultOnlineMeetingProvider"] = o.DefaultOnlineMeetingProvider
	}
	if o.HexColor.IsSet() {
		toSerialize["hexColor"] = o.HexColor.Get()
	}
	if o.IsDefaultCalendar.IsSet() {
		toSerialize["isDefaultCalendar"] = o.IsDefaultCalendar.Get()
	}
	if o.IsRemovable.IsSet() {
		toSerialize["isRemovable"] = o.IsRemovable.Get()
	}
	if o.IsTallyingResponses.IsSet() {
		toSerialize["isTallyingResponses"] = o.IsTallyingResponses.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.CalendarPermissions != nil {
		toSerialize["calendarPermissions"] = o.CalendarPermissions
	}
	if o.CalendarView != nil {
		toSerialize["calendarView"] = o.CalendarView
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.MultiValueExtendedProperties != nil {
		toSerialize["multiValueExtendedProperties"] = o.MultiValueExtendedProperties
	}
	if o.SingleValueExtendedProperties != nil {
		toSerialize["singleValueExtendedProperties"] = o.SingleValueExtendedProperties
	}
	return json.Marshal(toSerialize)
}

type NullableCalendar struct {
	value *Calendar
	isSet bool
}

func (v NullableCalendar) Get() *Calendar {
	return v.value
}

func (v *NullableCalendar) Set(val *Calendar) {
	v.value = val
	v.isSet = true
}

func (v NullableCalendar) IsSet() bool {
	return v.isSet
}

func (v *NullableCalendar) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalendar(val *Calendar) *NullableCalendar {
	return &NullableCalendar{value: val, isSet: true}
}

func (v NullableCalendar) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalendar) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


