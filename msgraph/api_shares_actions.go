/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// SharesActionsApiService SharesActionsApi service
type SharesActionsApiService service

type ApiSharesSharedDriveItemListContentTypesAddCopyRequest struct {
	ctx _context.Context
	ApiService *SharesActionsApiService
	sharedDriveItemId string
	inlineObject731 *InlineObject731
}

func (r ApiSharesSharedDriveItemListContentTypesAddCopyRequest) InlineObject731(inlineObject731 InlineObject731) ApiSharesSharedDriveItemListContentTypesAddCopyRequest {
	r.inlineObject731 = &inlineObject731
	return r
}

func (r ApiSharesSharedDriveItemListContentTypesAddCopyRequest) Execute() (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemListContentTypesAddCopyExecute(r)
}

/*
SharesSharedDriveItemListContentTypesAddCopy Invoke action addCopy

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @return ApiSharesSharedDriveItemListContentTypesAddCopyRequest
*/
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesAddCopy(ctx _context.Context, sharedDriveItemId string) ApiSharesSharedDriveItemListContentTypesAddCopyRequest {
	return ApiSharesSharedDriveItemListContentTypesAddCopyRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphContentType
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesAddCopyExecute(r ApiSharesSharedDriveItemListContentTypesAddCopyRequest) (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphContentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesActionsApiService.SharesSharedDriveItemListContentTypesAddCopy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/list/contentTypes/microsoft.graph.addCopy"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject731 == nil {
		return localVarReturnValue, nil, reportError("inlineObject731 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject731
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemListContentTypesContentTypeAssociateWithHubSitesRequest struct {
	ctx _context.Context
	ApiService *SharesActionsApiService
	sharedDriveItemId string
	contentTypeId string
	inlineObject729 *InlineObject729
}

func (r ApiSharesSharedDriveItemListContentTypesContentTypeAssociateWithHubSitesRequest) InlineObject729(inlineObject729 InlineObject729) ApiSharesSharedDriveItemListContentTypesContentTypeAssociateWithHubSitesRequest {
	r.inlineObject729 = &inlineObject729
	return r
}

func (r ApiSharesSharedDriveItemListContentTypesContentTypeAssociateWithHubSitesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemListContentTypesContentTypeAssociateWithHubSitesExecute(r)
}

/*
SharesSharedDriveItemListContentTypesContentTypeAssociateWithHubSites Invoke action associateWithHubSites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @param contentTypeId key: id of contentType
 @return ApiSharesSharedDriveItemListContentTypesContentTypeAssociateWithHubSitesRequest
*/
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeAssociateWithHubSites(ctx _context.Context, sharedDriveItemId string, contentTypeId string) ApiSharesSharedDriveItemListContentTypesContentTypeAssociateWithHubSitesRequest {
	return ApiSharesSharedDriveItemListContentTypesContentTypeAssociateWithHubSitesRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeAssociateWithHubSitesExecute(r ApiSharesSharedDriveItemListContentTypesContentTypeAssociateWithHubSitesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesActionsApiService.SharesSharedDriveItemListContentTypesContentTypeAssociateWithHubSites")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/list/contentTypes/{contentType-id}/microsoft.graph.associateWithHubSites"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject729 == nil {
		return nil, reportError("inlineObject729 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject729
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemListContentTypesContentTypeBaseAssociateWithHubSitesRequest struct {
	ctx _context.Context
	ApiService *SharesActionsApiService
	sharedDriveItemId string
	contentTypeId string
	inlineObject726 *InlineObject726
}

func (r ApiSharesSharedDriveItemListContentTypesContentTypeBaseAssociateWithHubSitesRequest) InlineObject726(inlineObject726 InlineObject726) ApiSharesSharedDriveItemListContentTypesContentTypeBaseAssociateWithHubSitesRequest {
	r.inlineObject726 = &inlineObject726
	return r
}

func (r ApiSharesSharedDriveItemListContentTypesContentTypeBaseAssociateWithHubSitesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemListContentTypesContentTypeBaseAssociateWithHubSitesExecute(r)
}

/*
SharesSharedDriveItemListContentTypesContentTypeBaseAssociateWithHubSites Invoke action associateWithHubSites

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @param contentTypeId key: id of contentType
 @return ApiSharesSharedDriveItemListContentTypesContentTypeBaseAssociateWithHubSitesRequest
*/
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeBaseAssociateWithHubSites(ctx _context.Context, sharedDriveItemId string, contentTypeId string) ApiSharesSharedDriveItemListContentTypesContentTypeBaseAssociateWithHubSitesRequest {
	return ApiSharesSharedDriveItemListContentTypesContentTypeBaseAssociateWithHubSitesRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeBaseAssociateWithHubSitesExecute(r ApiSharesSharedDriveItemListContentTypesContentTypeBaseAssociateWithHubSitesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesActionsApiService.SharesSharedDriveItemListContentTypesContentTypeBaseAssociateWithHubSites")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/list/contentTypes/{contentType-id}/base/microsoft.graph.associateWithHubSites"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject726 == nil {
		return nil, reportError("inlineObject726 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject726
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest struct {
	ctx _context.Context
	ApiService *SharesActionsApiService
	sharedDriveItemId string
	contentTypeId string
	inlineObject727 *InlineObject727
}

func (r ApiSharesSharedDriveItemListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest) InlineObject727(inlineObject727 InlineObject727) ApiSharesSharedDriveItemListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest {
	r.inlineObject727 = &inlineObject727
	return r
}

func (r ApiSharesSharedDriveItemListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemListContentTypesContentTypeBaseCopyToDefaultContentLocationExecute(r)
}

/*
SharesSharedDriveItemListContentTypesContentTypeBaseCopyToDefaultContentLocation Invoke action copyToDefaultContentLocation

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @param contentTypeId key: id of contentType
 @return ApiSharesSharedDriveItemListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest
*/
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeBaseCopyToDefaultContentLocation(ctx _context.Context, sharedDriveItemId string, contentTypeId string) ApiSharesSharedDriveItemListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest {
	return ApiSharesSharedDriveItemListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeBaseCopyToDefaultContentLocationExecute(r ApiSharesSharedDriveItemListContentTypesContentTypeBaseCopyToDefaultContentLocationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesActionsApiService.SharesSharedDriveItemListContentTypesContentTypeBaseCopyToDefaultContentLocation")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/list/contentTypes/{contentType-id}/base/microsoft.graph.copyToDefaultContentLocation"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject727 == nil {
		return nil, reportError("inlineObject727 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject727
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemListContentTypesContentTypeBasePublishRequest struct {
	ctx _context.Context
	ApiService *SharesActionsApiService
	sharedDriveItemId string
	contentTypeId string
}


func (r ApiSharesSharedDriveItemListContentTypesContentTypeBasePublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemListContentTypesContentTypeBasePublishExecute(r)
}

/*
SharesSharedDriveItemListContentTypesContentTypeBasePublish Invoke action publish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @param contentTypeId key: id of contentType
 @return ApiSharesSharedDriveItemListContentTypesContentTypeBasePublishRequest
*/
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeBasePublish(ctx _context.Context, sharedDriveItemId string, contentTypeId string) ApiSharesSharedDriveItemListContentTypesContentTypeBasePublishRequest {
	return ApiSharesSharedDriveItemListContentTypesContentTypeBasePublishRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeBasePublishExecute(r ApiSharesSharedDriveItemListContentTypesContentTypeBasePublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesActionsApiService.SharesSharedDriveItemListContentTypesContentTypeBasePublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/list/contentTypes/{contentType-id}/base/microsoft.graph.publish"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemListContentTypesContentTypeBaseTypesAddCopyRequest struct {
	ctx _context.Context
	ApiService *SharesActionsApiService
	sharedDriveItemId string
	contentTypeId string
	inlineObject728 *InlineObject728
}

func (r ApiSharesSharedDriveItemListContentTypesContentTypeBaseTypesAddCopyRequest) InlineObject728(inlineObject728 InlineObject728) ApiSharesSharedDriveItemListContentTypesContentTypeBaseTypesAddCopyRequest {
	r.inlineObject728 = &inlineObject728
	return r
}

func (r ApiSharesSharedDriveItemListContentTypesContentTypeBaseTypesAddCopyRequest) Execute() (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemListContentTypesContentTypeBaseTypesAddCopyExecute(r)
}

/*
SharesSharedDriveItemListContentTypesContentTypeBaseTypesAddCopy Invoke action addCopy

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @param contentTypeId key: id of contentType
 @return ApiSharesSharedDriveItemListContentTypesContentTypeBaseTypesAddCopyRequest
*/
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeBaseTypesAddCopy(ctx _context.Context, sharedDriveItemId string, contentTypeId string) ApiSharesSharedDriveItemListContentTypesContentTypeBaseTypesAddCopyRequest {
	return ApiSharesSharedDriveItemListContentTypesContentTypeBaseTypesAddCopyRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphContentType
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeBaseTypesAddCopyExecute(r ApiSharesSharedDriveItemListContentTypesContentTypeBaseTypesAddCopyRequest) (AnyOfmicrosoftGraphContentType, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphContentType
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesActionsApiService.SharesSharedDriveItemListContentTypesContentTypeBaseTypesAddCopy")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/list/contentTypes/{contentType-id}/baseTypes/microsoft.graph.addCopy"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject728 == nil {
		return localVarReturnValue, nil, reportError("inlineObject728 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject728
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemListContentTypesContentTypeBaseUnpublishRequest struct {
	ctx _context.Context
	ApiService *SharesActionsApiService
	sharedDriveItemId string
	contentTypeId string
}


func (r ApiSharesSharedDriveItemListContentTypesContentTypeBaseUnpublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemListContentTypesContentTypeBaseUnpublishExecute(r)
}

/*
SharesSharedDriveItemListContentTypesContentTypeBaseUnpublish Invoke action unpublish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @param contentTypeId key: id of contentType
 @return ApiSharesSharedDriveItemListContentTypesContentTypeBaseUnpublishRequest
*/
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeBaseUnpublish(ctx _context.Context, sharedDriveItemId string, contentTypeId string) ApiSharesSharedDriveItemListContentTypesContentTypeBaseUnpublishRequest {
	return ApiSharesSharedDriveItemListContentTypesContentTypeBaseUnpublishRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeBaseUnpublishExecute(r ApiSharesSharedDriveItemListContentTypesContentTypeBaseUnpublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesActionsApiService.SharesSharedDriveItemListContentTypesContentTypeBaseUnpublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/list/contentTypes/{contentType-id}/base/microsoft.graph.unpublish"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemListContentTypesContentTypeCopyToDefaultContentLocationRequest struct {
	ctx _context.Context
	ApiService *SharesActionsApiService
	sharedDriveItemId string
	contentTypeId string
	inlineObject730 *InlineObject730
}

func (r ApiSharesSharedDriveItemListContentTypesContentTypeCopyToDefaultContentLocationRequest) InlineObject730(inlineObject730 InlineObject730) ApiSharesSharedDriveItemListContentTypesContentTypeCopyToDefaultContentLocationRequest {
	r.inlineObject730 = &inlineObject730
	return r
}

func (r ApiSharesSharedDriveItemListContentTypesContentTypeCopyToDefaultContentLocationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemListContentTypesContentTypeCopyToDefaultContentLocationExecute(r)
}

/*
SharesSharedDriveItemListContentTypesContentTypeCopyToDefaultContentLocation Invoke action copyToDefaultContentLocation

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @param contentTypeId key: id of contentType
 @return ApiSharesSharedDriveItemListContentTypesContentTypeCopyToDefaultContentLocationRequest
*/
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeCopyToDefaultContentLocation(ctx _context.Context, sharedDriveItemId string, contentTypeId string) ApiSharesSharedDriveItemListContentTypesContentTypeCopyToDefaultContentLocationRequest {
	return ApiSharesSharedDriveItemListContentTypesContentTypeCopyToDefaultContentLocationRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeCopyToDefaultContentLocationExecute(r ApiSharesSharedDriveItemListContentTypesContentTypeCopyToDefaultContentLocationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesActionsApiService.SharesSharedDriveItemListContentTypesContentTypeCopyToDefaultContentLocation")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/list/contentTypes/{contentType-id}/microsoft.graph.copyToDefaultContentLocation"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject730 == nil {
		return nil, reportError("inlineObject730 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject730
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemListContentTypesContentTypePublishRequest struct {
	ctx _context.Context
	ApiService *SharesActionsApiService
	sharedDriveItemId string
	contentTypeId string
}


func (r ApiSharesSharedDriveItemListContentTypesContentTypePublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemListContentTypesContentTypePublishExecute(r)
}

/*
SharesSharedDriveItemListContentTypesContentTypePublish Invoke action publish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @param contentTypeId key: id of contentType
 @return ApiSharesSharedDriveItemListContentTypesContentTypePublishRequest
*/
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypePublish(ctx _context.Context, sharedDriveItemId string, contentTypeId string) ApiSharesSharedDriveItemListContentTypesContentTypePublishRequest {
	return ApiSharesSharedDriveItemListContentTypesContentTypePublishRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypePublishExecute(r ApiSharesSharedDriveItemListContentTypesContentTypePublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesActionsApiService.SharesSharedDriveItemListContentTypesContentTypePublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/list/contentTypes/{contentType-id}/microsoft.graph.publish"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemListContentTypesContentTypeUnpublishRequest struct {
	ctx _context.Context
	ApiService *SharesActionsApiService
	sharedDriveItemId string
	contentTypeId string
}


func (r ApiSharesSharedDriveItemListContentTypesContentTypeUnpublishRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemListContentTypesContentTypeUnpublishExecute(r)
}

/*
SharesSharedDriveItemListContentTypesContentTypeUnpublish Invoke action unpublish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @param contentTypeId key: id of contentType
 @return ApiSharesSharedDriveItemListContentTypesContentTypeUnpublishRequest
*/
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeUnpublish(ctx _context.Context, sharedDriveItemId string, contentTypeId string) ApiSharesSharedDriveItemListContentTypesContentTypeUnpublishRequest {
	return ApiSharesSharedDriveItemListContentTypesContentTypeUnpublishRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
		contentTypeId: contentTypeId,
	}
}

// Execute executes the request
func (a *SharesActionsApiService) SharesSharedDriveItemListContentTypesContentTypeUnpublishExecute(r ApiSharesSharedDriveItemListContentTypesContentTypeUnpublishRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesActionsApiService.SharesSharedDriveItemListContentTypesContentTypeUnpublish")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/list/contentTypes/{contentType-id}/microsoft.graph.unpublish"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"contentType-id"+"}", _neturl.PathEscape(parameterToString(r.contentTypeId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemListItemVersionsListItemVersionRestoreVersionRequest struct {
	ctx _context.Context
	ApiService *SharesActionsApiService
	sharedDriveItemId string
	listItemVersionId string
}


func (r ApiSharesSharedDriveItemListItemVersionsListItemVersionRestoreVersionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemListItemVersionsListItemVersionRestoreVersionExecute(r)
}

/*
SharesSharedDriveItemListItemVersionsListItemVersionRestoreVersion Invoke action restoreVersion

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @param listItemVersionId key: id of listItemVersion
 @return ApiSharesSharedDriveItemListItemVersionsListItemVersionRestoreVersionRequest
*/
func (a *SharesActionsApiService) SharesSharedDriveItemListItemVersionsListItemVersionRestoreVersion(ctx _context.Context, sharedDriveItemId string, listItemVersionId string) ApiSharesSharedDriveItemListItemVersionsListItemVersionRestoreVersionRequest {
	return ApiSharesSharedDriveItemListItemVersionsListItemVersionRestoreVersionRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
		listItemVersionId: listItemVersionId,
	}
}

// Execute executes the request
func (a *SharesActionsApiService) SharesSharedDriveItemListItemVersionsListItemVersionRestoreVersionExecute(r ApiSharesSharedDriveItemListItemVersionsListItemVersionRestoreVersionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesActionsApiService.SharesSharedDriveItemListItemVersionsListItemVersionRestoreVersion")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/listItem/versions/{listItemVersion-id}/microsoft.graph.restoreVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"listItemVersion-id"+"}", _neturl.PathEscape(parameterToString(r.listItemVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemListItemsListItemVersionsListItemVersionRestoreVersionRequest struct {
	ctx _context.Context
	ApiService *SharesActionsApiService
	sharedDriveItemId string
	listItemId string
	listItemVersionId string
}


func (r ApiSharesSharedDriveItemListItemsListItemVersionsListItemVersionRestoreVersionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemListItemsListItemVersionsListItemVersionRestoreVersionExecute(r)
}

/*
SharesSharedDriveItemListItemsListItemVersionsListItemVersionRestoreVersion Invoke action restoreVersion

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @param listItemId key: id of listItem
 @param listItemVersionId key: id of listItemVersion
 @return ApiSharesSharedDriveItemListItemsListItemVersionsListItemVersionRestoreVersionRequest
*/
func (a *SharesActionsApiService) SharesSharedDriveItemListItemsListItemVersionsListItemVersionRestoreVersion(ctx _context.Context, sharedDriveItemId string, listItemId string, listItemVersionId string) ApiSharesSharedDriveItemListItemsListItemVersionsListItemVersionRestoreVersionRequest {
	return ApiSharesSharedDriveItemListItemsListItemVersionsListItemVersionRestoreVersionRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
		listItemId: listItemId,
		listItemVersionId: listItemVersionId,
	}
}

// Execute executes the request
func (a *SharesActionsApiService) SharesSharedDriveItemListItemsListItemVersionsListItemVersionRestoreVersionExecute(r ApiSharesSharedDriveItemListItemsListItemVersionsListItemVersionRestoreVersionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesActionsApiService.SharesSharedDriveItemListItemsListItemVersionsListItemVersionRestoreVersion")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/list/items/{listItem-id}/versions/{listItemVersion-id}/microsoft.graph.restoreVersion"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"listItem-id"+"}", _neturl.PathEscape(parameterToString(r.listItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"listItemVersion-id"+"}", _neturl.PathEscape(parameterToString(r.listItemVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSharesSharedDriveItemPermissionGrantRequest struct {
	ctx _context.Context
	ApiService *SharesActionsApiService
	sharedDriveItemId string
	inlineObject732 *InlineObject732
}

func (r ApiSharesSharedDriveItemPermissionGrantRequest) InlineObject732(inlineObject732 InlineObject732) ApiSharesSharedDriveItemPermissionGrantRequest {
	r.inlineObject732 = &inlineObject732
	return r
}

func (r ApiSharesSharedDriveItemPermissionGrantRequest) Execute() ([]*AnyOfmicrosoftGraphPermission, *_nethttp.Response, error) {
	return r.ApiService.SharesSharedDriveItemPermissionGrantExecute(r)
}

/*
SharesSharedDriveItemPermissionGrant Invoke action grant

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @return ApiSharesSharedDriveItemPermissionGrantRequest
*/
func (a *SharesActionsApiService) SharesSharedDriveItemPermissionGrant(ctx _context.Context, sharedDriveItemId string) ApiSharesSharedDriveItemPermissionGrantRequest {
	return ApiSharesSharedDriveItemPermissionGrantRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphPermission
func (a *SharesActionsApiService) SharesSharedDriveItemPermissionGrantExecute(r ApiSharesSharedDriveItemPermissionGrantRequest) ([]*AnyOfmicrosoftGraphPermission, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphPermission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesActionsApiService.SharesSharedDriveItemPermissionGrant")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/permission/microsoft.graph.grant"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.inlineObject732 == nil {
		return localVarReturnValue, nil, reportError("inlineObject732 is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.inlineObject732
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
