/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// MeManagedDeviceApiService MeManagedDeviceApi service
type MeManagedDeviceApiService service

type ApiMeCreateManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	microsoftGraphManagedDevice *MicrosoftGraphManagedDevice
}

// New navigation property
func (r ApiMeCreateManagedDevicesRequest) MicrosoftGraphManagedDevice(microsoftGraphManagedDevice MicrosoftGraphManagedDevice) ApiMeCreateManagedDevicesRequest {
	r.microsoftGraphManagedDevice = &microsoftGraphManagedDevice
	return r
}

func (r ApiMeCreateManagedDevicesRequest) Execute() (MicrosoftGraphManagedDevice, *_nethttp.Response, error) {
	return r.ApiService.MeCreateManagedDevicesExecute(r)
}

/*
MeCreateManagedDevices Create new navigation property to managedDevices for me

The managed devices associated with the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeCreateManagedDevicesRequest
*/
func (a *MeManagedDeviceApiService) MeCreateManagedDevices(ctx _context.Context) ApiMeCreateManagedDevicesRequest {
	return ApiMeCreateManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDevice
func (a *MeManagedDeviceApiService) MeCreateManagedDevicesExecute(r ApiMeCreateManagedDevicesRequest) (MicrosoftGraphManagedDevice, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeCreateManagedDevices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDevice == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedDevice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDevice
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeDeleteManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	ifMatch *string
}

// ETag
func (r ApiMeDeleteManagedDevicesRequest) IfMatch(ifMatch string) ApiMeDeleteManagedDevicesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeDeleteManagedDevicesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeDeleteManagedDevicesExecute(r)
}

/*
MeDeleteManagedDevices Delete navigation property managedDevices for me

The managed devices associated with the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiMeDeleteManagedDevicesRequest
*/
func (a *MeManagedDeviceApiService) MeDeleteManagedDevices(ctx _context.Context, managedDeviceId string) ApiMeDeleteManagedDevicesRequest {
	return ApiMeDeleteManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
func (a *MeManagedDeviceApiService) MeDeleteManagedDevicesExecute(r ApiMeDeleteManagedDevicesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeDeleteManagedDevices")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeGetManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeGetManagedDevicesRequest) Select_(select_ []string) ApiMeGetManagedDevicesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeGetManagedDevicesRequest) Expand(expand []string) ApiMeGetManagedDevicesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeGetManagedDevicesRequest) Execute() (MicrosoftGraphManagedDevice, *_nethttp.Response, error) {
	return r.ApiService.MeGetManagedDevicesExecute(r)
}

/*
MeGetManagedDevices Get managedDevices from me

The managed devices associated with the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiMeGetManagedDevicesRequest
*/
func (a *MeManagedDeviceApiService) MeGetManagedDevices(ctx _context.Context, managedDeviceId string) ApiMeGetManagedDevicesRequest {
	return ApiMeGetManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDevice
func (a *MeManagedDeviceApiService) MeGetManagedDevicesExecute(r ApiMeGetManagedDevicesRequest) (MicrosoftGraphManagedDevice, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeGetManagedDevices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeListManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeListManagedDevicesRequest) Top(top int32) ApiMeListManagedDevicesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeListManagedDevicesRequest) Skip(skip int32) ApiMeListManagedDevicesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeListManagedDevicesRequest) Search(search string) ApiMeListManagedDevicesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeListManagedDevicesRequest) Filter(filter string) ApiMeListManagedDevicesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeListManagedDevicesRequest) Count(count bool) ApiMeListManagedDevicesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeListManagedDevicesRequest) Orderby(orderby []string) ApiMeListManagedDevicesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeListManagedDevicesRequest) Select_(select_ []string) ApiMeListManagedDevicesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeListManagedDevicesRequest) Expand(expand []string) ApiMeListManagedDevicesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeListManagedDevicesRequest) Execute() (CollectionOfManagedDevice, *_nethttp.Response, error) {
	return r.ApiService.MeListManagedDevicesExecute(r)
}

/*
MeListManagedDevices Get managedDevices from me

The managed devices associated with the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeListManagedDevicesRequest
*/
func (a *MeManagedDeviceApiService) MeListManagedDevices(ctx _context.Context) ApiMeListManagedDevicesRequest {
	return ApiMeListManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfManagedDevice
func (a *MeManagedDeviceApiService) MeListManagedDevicesExecute(r ApiMeListManagedDevicesRequest) (CollectionOfManagedDevice, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeListManagedDevices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeManagedDevicesCreateDeviceCompliancePolicyStatesRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	microsoftGraphDeviceCompliancePolicyState *MicrosoftGraphDeviceCompliancePolicyState
}

// New navigation property
func (r ApiMeManagedDevicesCreateDeviceCompliancePolicyStatesRequest) MicrosoftGraphDeviceCompliancePolicyState(microsoftGraphDeviceCompliancePolicyState MicrosoftGraphDeviceCompliancePolicyState) ApiMeManagedDevicesCreateDeviceCompliancePolicyStatesRequest {
	r.microsoftGraphDeviceCompliancePolicyState = &microsoftGraphDeviceCompliancePolicyState
	return r
}

func (r ApiMeManagedDevicesCreateDeviceCompliancePolicyStatesRequest) Execute() (MicrosoftGraphDeviceCompliancePolicyState, *_nethttp.Response, error) {
	return r.ApiService.MeManagedDevicesCreateDeviceCompliancePolicyStatesExecute(r)
}

/*
MeManagedDevicesCreateDeviceCompliancePolicyStates Create new navigation property to deviceCompliancePolicyStates for me

Device compliance policy states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiMeManagedDevicesCreateDeviceCompliancePolicyStatesRequest
*/
func (a *MeManagedDeviceApiService) MeManagedDevicesCreateDeviceCompliancePolicyStates(ctx _context.Context, managedDeviceId string) ApiMeManagedDevicesCreateDeviceCompliancePolicyStatesRequest {
	return ApiMeManagedDevicesCreateDeviceCompliancePolicyStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceCompliancePolicyState
func (a *MeManagedDeviceApiService) MeManagedDevicesCreateDeviceCompliancePolicyStatesExecute(r ApiMeManagedDevicesCreateDeviceCompliancePolicyStatesRequest) (MicrosoftGraphDeviceCompliancePolicyState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceCompliancePolicyState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeManagedDevicesCreateDeviceCompliancePolicyStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}/deviceCompliancePolicyStates"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceCompliancePolicyState == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceCompliancePolicyState is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceCompliancePolicyState
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeManagedDevicesCreateDeviceConfigurationStatesRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	microsoftGraphDeviceConfigurationState *MicrosoftGraphDeviceConfigurationState
}

// New navigation property
func (r ApiMeManagedDevicesCreateDeviceConfigurationStatesRequest) MicrosoftGraphDeviceConfigurationState(microsoftGraphDeviceConfigurationState MicrosoftGraphDeviceConfigurationState) ApiMeManagedDevicesCreateDeviceConfigurationStatesRequest {
	r.microsoftGraphDeviceConfigurationState = &microsoftGraphDeviceConfigurationState
	return r
}

func (r ApiMeManagedDevicesCreateDeviceConfigurationStatesRequest) Execute() (MicrosoftGraphDeviceConfigurationState, *_nethttp.Response, error) {
	return r.ApiService.MeManagedDevicesCreateDeviceConfigurationStatesExecute(r)
}

/*
MeManagedDevicesCreateDeviceConfigurationStates Create new navigation property to deviceConfigurationStates for me

Device configuration states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiMeManagedDevicesCreateDeviceConfigurationStatesRequest
*/
func (a *MeManagedDeviceApiService) MeManagedDevicesCreateDeviceConfigurationStates(ctx _context.Context, managedDeviceId string) ApiMeManagedDevicesCreateDeviceConfigurationStatesRequest {
	return ApiMeManagedDevicesCreateDeviceConfigurationStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfigurationState
func (a *MeManagedDeviceApiService) MeManagedDevicesCreateDeviceConfigurationStatesExecute(r ApiMeManagedDevicesCreateDeviceConfigurationStatesRequest) (MicrosoftGraphDeviceConfigurationState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfigurationState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeManagedDevicesCreateDeviceConfigurationStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}/deviceConfigurationStates"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfigurationState == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceConfigurationState is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfigurationState
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeManagedDevicesDeleteDeviceCategoryRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	ifMatch *string
}

// ETag
func (r ApiMeManagedDevicesDeleteDeviceCategoryRequest) IfMatch(ifMatch string) ApiMeManagedDevicesDeleteDeviceCategoryRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeManagedDevicesDeleteDeviceCategoryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeManagedDevicesDeleteDeviceCategoryExecute(r)
}

/*
MeManagedDevicesDeleteDeviceCategory Delete navigation property deviceCategory for me

Device category

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiMeManagedDevicesDeleteDeviceCategoryRequest
*/
func (a *MeManagedDeviceApiService) MeManagedDevicesDeleteDeviceCategory(ctx _context.Context, managedDeviceId string) ApiMeManagedDevicesDeleteDeviceCategoryRequest {
	return ApiMeManagedDevicesDeleteDeviceCategoryRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
func (a *MeManagedDeviceApiService) MeManagedDevicesDeleteDeviceCategoryExecute(r ApiMeManagedDevicesDeleteDeviceCategoryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeManagedDevicesDeleteDeviceCategory")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}/deviceCategory"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeManagedDevicesDeleteDeviceCompliancePolicyStatesRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	deviceCompliancePolicyStateId string
	ifMatch *string
}

// ETag
func (r ApiMeManagedDevicesDeleteDeviceCompliancePolicyStatesRequest) IfMatch(ifMatch string) ApiMeManagedDevicesDeleteDeviceCompliancePolicyStatesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeManagedDevicesDeleteDeviceCompliancePolicyStatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeManagedDevicesDeleteDeviceCompliancePolicyStatesExecute(r)
}

/*
MeManagedDevicesDeleteDeviceCompliancePolicyStates Delete navigation property deviceCompliancePolicyStates for me

Device compliance policy states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @param deviceCompliancePolicyStateId key: id of deviceCompliancePolicyState
 @return ApiMeManagedDevicesDeleteDeviceCompliancePolicyStatesRequest
*/
func (a *MeManagedDeviceApiService) MeManagedDevicesDeleteDeviceCompliancePolicyStates(ctx _context.Context, managedDeviceId string, deviceCompliancePolicyStateId string) ApiMeManagedDevicesDeleteDeviceCompliancePolicyStatesRequest {
	return ApiMeManagedDevicesDeleteDeviceCompliancePolicyStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
		deviceCompliancePolicyStateId: deviceCompliancePolicyStateId,
	}
}

// Execute executes the request
func (a *MeManagedDeviceApiService) MeManagedDevicesDeleteDeviceCompliancePolicyStatesExecute(r ApiMeManagedDevicesDeleteDeviceCompliancePolicyStatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeManagedDevicesDeleteDeviceCompliancePolicyStates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}/deviceCompliancePolicyStates/{deviceCompliancePolicyState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicyState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeManagedDevicesDeleteDeviceConfigurationStatesRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	deviceConfigurationStateId string
	ifMatch *string
}

// ETag
func (r ApiMeManagedDevicesDeleteDeviceConfigurationStatesRequest) IfMatch(ifMatch string) ApiMeManagedDevicesDeleteDeviceConfigurationStatesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeManagedDevicesDeleteDeviceConfigurationStatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeManagedDevicesDeleteDeviceConfigurationStatesExecute(r)
}

/*
MeManagedDevicesDeleteDeviceConfigurationStates Delete navigation property deviceConfigurationStates for me

Device configuration states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @param deviceConfigurationStateId key: id of deviceConfigurationState
 @return ApiMeManagedDevicesDeleteDeviceConfigurationStatesRequest
*/
func (a *MeManagedDeviceApiService) MeManagedDevicesDeleteDeviceConfigurationStates(ctx _context.Context, managedDeviceId string, deviceConfigurationStateId string) ApiMeManagedDevicesDeleteDeviceConfigurationStatesRequest {
	return ApiMeManagedDevicesDeleteDeviceConfigurationStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
		deviceConfigurationStateId: deviceConfigurationStateId,
	}
}

// Execute executes the request
func (a *MeManagedDeviceApiService) MeManagedDevicesDeleteDeviceConfigurationStatesExecute(r ApiMeManagedDevicesDeleteDeviceConfigurationStatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeManagedDevicesDeleteDeviceConfigurationStates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}/deviceConfigurationStates/{deviceConfigurationState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeManagedDevicesGetDeviceCategoryRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeManagedDevicesGetDeviceCategoryRequest) Select_(select_ []string) ApiMeManagedDevicesGetDeviceCategoryRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeManagedDevicesGetDeviceCategoryRequest) Expand(expand []string) ApiMeManagedDevicesGetDeviceCategoryRequest {
	r.expand = &expand
	return r
}

func (r ApiMeManagedDevicesGetDeviceCategoryRequest) Execute() (MicrosoftGraphDeviceCategory, *_nethttp.Response, error) {
	return r.ApiService.MeManagedDevicesGetDeviceCategoryExecute(r)
}

/*
MeManagedDevicesGetDeviceCategory Get deviceCategory from me

Device category

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiMeManagedDevicesGetDeviceCategoryRequest
*/
func (a *MeManagedDeviceApiService) MeManagedDevicesGetDeviceCategory(ctx _context.Context, managedDeviceId string) ApiMeManagedDevicesGetDeviceCategoryRequest {
	return ApiMeManagedDevicesGetDeviceCategoryRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceCategory
func (a *MeManagedDeviceApiService) MeManagedDevicesGetDeviceCategoryExecute(r ApiMeManagedDevicesGetDeviceCategoryRequest) (MicrosoftGraphDeviceCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeManagedDevicesGetDeviceCategory")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}/deviceCategory"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeManagedDevicesGetDeviceCompliancePolicyStatesRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	deviceCompliancePolicyStateId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeManagedDevicesGetDeviceCompliancePolicyStatesRequest) Select_(select_ []string) ApiMeManagedDevicesGetDeviceCompliancePolicyStatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeManagedDevicesGetDeviceCompliancePolicyStatesRequest) Expand(expand []string) ApiMeManagedDevicesGetDeviceCompliancePolicyStatesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeManagedDevicesGetDeviceCompliancePolicyStatesRequest) Execute() (MicrosoftGraphDeviceCompliancePolicyState, *_nethttp.Response, error) {
	return r.ApiService.MeManagedDevicesGetDeviceCompliancePolicyStatesExecute(r)
}

/*
MeManagedDevicesGetDeviceCompliancePolicyStates Get deviceCompliancePolicyStates from me

Device compliance policy states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @param deviceCompliancePolicyStateId key: id of deviceCompliancePolicyState
 @return ApiMeManagedDevicesGetDeviceCompliancePolicyStatesRequest
*/
func (a *MeManagedDeviceApiService) MeManagedDevicesGetDeviceCompliancePolicyStates(ctx _context.Context, managedDeviceId string, deviceCompliancePolicyStateId string) ApiMeManagedDevicesGetDeviceCompliancePolicyStatesRequest {
	return ApiMeManagedDevicesGetDeviceCompliancePolicyStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
		deviceCompliancePolicyStateId: deviceCompliancePolicyStateId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceCompliancePolicyState
func (a *MeManagedDeviceApiService) MeManagedDevicesGetDeviceCompliancePolicyStatesExecute(r ApiMeManagedDevicesGetDeviceCompliancePolicyStatesRequest) (MicrosoftGraphDeviceCompliancePolicyState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceCompliancePolicyState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeManagedDevicesGetDeviceCompliancePolicyStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}/deviceCompliancePolicyStates/{deviceCompliancePolicyState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicyState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeManagedDevicesGetDeviceConfigurationStatesRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	deviceConfigurationStateId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeManagedDevicesGetDeviceConfigurationStatesRequest) Select_(select_ []string) ApiMeManagedDevicesGetDeviceConfigurationStatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeManagedDevicesGetDeviceConfigurationStatesRequest) Expand(expand []string) ApiMeManagedDevicesGetDeviceConfigurationStatesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeManagedDevicesGetDeviceConfigurationStatesRequest) Execute() (MicrosoftGraphDeviceConfigurationState, *_nethttp.Response, error) {
	return r.ApiService.MeManagedDevicesGetDeviceConfigurationStatesExecute(r)
}

/*
MeManagedDevicesGetDeviceConfigurationStates Get deviceConfigurationStates from me

Device configuration states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @param deviceConfigurationStateId key: id of deviceConfigurationState
 @return ApiMeManagedDevicesGetDeviceConfigurationStatesRequest
*/
func (a *MeManagedDeviceApiService) MeManagedDevicesGetDeviceConfigurationStates(ctx _context.Context, managedDeviceId string, deviceConfigurationStateId string) ApiMeManagedDevicesGetDeviceConfigurationStatesRequest {
	return ApiMeManagedDevicesGetDeviceConfigurationStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
		deviceConfigurationStateId: deviceConfigurationStateId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfigurationState
func (a *MeManagedDeviceApiService) MeManagedDevicesGetDeviceConfigurationStatesExecute(r ApiMeManagedDevicesGetDeviceConfigurationStatesRequest) (MicrosoftGraphDeviceConfigurationState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfigurationState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeManagedDevicesGetDeviceConfigurationStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}/deviceConfigurationStates/{deviceConfigurationState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest) Top(top int32) ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest) Skip(skip int32) ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest) Search(search string) ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest) Filter(filter string) ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest) Count(count bool) ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest) Orderby(orderby []string) ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest) Select_(select_ []string) ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest) Expand(expand []string) ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest) Execute() (CollectionOfDeviceCompliancePolicyState, *_nethttp.Response, error) {
	return r.ApiService.MeManagedDevicesListDeviceCompliancePolicyStatesExecute(r)
}

/*
MeManagedDevicesListDeviceCompliancePolicyStates Get deviceCompliancePolicyStates from me

Device compliance policy states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest
*/
func (a *MeManagedDeviceApiService) MeManagedDevicesListDeviceCompliancePolicyStates(ctx _context.Context, managedDeviceId string) ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest {
	return ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceCompliancePolicyState
func (a *MeManagedDeviceApiService) MeManagedDevicesListDeviceCompliancePolicyStatesExecute(r ApiMeManagedDevicesListDeviceCompliancePolicyStatesRequest) (CollectionOfDeviceCompliancePolicyState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceCompliancePolicyState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeManagedDevicesListDeviceCompliancePolicyStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}/deviceCompliancePolicyStates"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeManagedDevicesListDeviceConfigurationStatesRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeManagedDevicesListDeviceConfigurationStatesRequest) Top(top int32) ApiMeManagedDevicesListDeviceConfigurationStatesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeManagedDevicesListDeviceConfigurationStatesRequest) Skip(skip int32) ApiMeManagedDevicesListDeviceConfigurationStatesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeManagedDevicesListDeviceConfigurationStatesRequest) Search(search string) ApiMeManagedDevicesListDeviceConfigurationStatesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeManagedDevicesListDeviceConfigurationStatesRequest) Filter(filter string) ApiMeManagedDevicesListDeviceConfigurationStatesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeManagedDevicesListDeviceConfigurationStatesRequest) Count(count bool) ApiMeManagedDevicesListDeviceConfigurationStatesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeManagedDevicesListDeviceConfigurationStatesRequest) Orderby(orderby []string) ApiMeManagedDevicesListDeviceConfigurationStatesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeManagedDevicesListDeviceConfigurationStatesRequest) Select_(select_ []string) ApiMeManagedDevicesListDeviceConfigurationStatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeManagedDevicesListDeviceConfigurationStatesRequest) Expand(expand []string) ApiMeManagedDevicesListDeviceConfigurationStatesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeManagedDevicesListDeviceConfigurationStatesRequest) Execute() (CollectionOfDeviceConfigurationState, *_nethttp.Response, error) {
	return r.ApiService.MeManagedDevicesListDeviceConfigurationStatesExecute(r)
}

/*
MeManagedDevicesListDeviceConfigurationStates Get deviceConfigurationStates from me

Device configuration states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiMeManagedDevicesListDeviceConfigurationStatesRequest
*/
func (a *MeManagedDeviceApiService) MeManagedDevicesListDeviceConfigurationStates(ctx _context.Context, managedDeviceId string) ApiMeManagedDevicesListDeviceConfigurationStatesRequest {
	return ApiMeManagedDevicesListDeviceConfigurationStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceConfigurationState
func (a *MeManagedDeviceApiService) MeManagedDevicesListDeviceConfigurationStatesExecute(r ApiMeManagedDevicesListDeviceConfigurationStatesRequest) (CollectionOfDeviceConfigurationState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceConfigurationState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeManagedDevicesListDeviceConfigurationStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}/deviceConfigurationStates"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeManagedDevicesUpdateDeviceCategoryRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	microsoftGraphDeviceCategory *MicrosoftGraphDeviceCategory
}

// New navigation property values
func (r ApiMeManagedDevicesUpdateDeviceCategoryRequest) MicrosoftGraphDeviceCategory(microsoftGraphDeviceCategory MicrosoftGraphDeviceCategory) ApiMeManagedDevicesUpdateDeviceCategoryRequest {
	r.microsoftGraphDeviceCategory = &microsoftGraphDeviceCategory
	return r
}

func (r ApiMeManagedDevicesUpdateDeviceCategoryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeManagedDevicesUpdateDeviceCategoryExecute(r)
}

/*
MeManagedDevicesUpdateDeviceCategory Update the navigation property deviceCategory in me

Device category

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiMeManagedDevicesUpdateDeviceCategoryRequest
*/
func (a *MeManagedDeviceApiService) MeManagedDevicesUpdateDeviceCategory(ctx _context.Context, managedDeviceId string) ApiMeManagedDevicesUpdateDeviceCategoryRequest {
	return ApiMeManagedDevicesUpdateDeviceCategoryRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
func (a *MeManagedDeviceApiService) MeManagedDevicesUpdateDeviceCategoryExecute(r ApiMeManagedDevicesUpdateDeviceCategoryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeManagedDevicesUpdateDeviceCategory")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}/deviceCategory"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceCategory == nil {
		return nil, reportError("microsoftGraphDeviceCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeManagedDevicesUpdateDeviceCompliancePolicyStatesRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	deviceCompliancePolicyStateId string
	microsoftGraphDeviceCompliancePolicyState *MicrosoftGraphDeviceCompliancePolicyState
}

// New navigation property values
func (r ApiMeManagedDevicesUpdateDeviceCompliancePolicyStatesRequest) MicrosoftGraphDeviceCompliancePolicyState(microsoftGraphDeviceCompliancePolicyState MicrosoftGraphDeviceCompliancePolicyState) ApiMeManagedDevicesUpdateDeviceCompliancePolicyStatesRequest {
	r.microsoftGraphDeviceCompliancePolicyState = &microsoftGraphDeviceCompliancePolicyState
	return r
}

func (r ApiMeManagedDevicesUpdateDeviceCompliancePolicyStatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeManagedDevicesUpdateDeviceCompliancePolicyStatesExecute(r)
}

/*
MeManagedDevicesUpdateDeviceCompliancePolicyStates Update the navigation property deviceCompliancePolicyStates in me

Device compliance policy states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @param deviceCompliancePolicyStateId key: id of deviceCompliancePolicyState
 @return ApiMeManagedDevicesUpdateDeviceCompliancePolicyStatesRequest
*/
func (a *MeManagedDeviceApiService) MeManagedDevicesUpdateDeviceCompliancePolicyStates(ctx _context.Context, managedDeviceId string, deviceCompliancePolicyStateId string) ApiMeManagedDevicesUpdateDeviceCompliancePolicyStatesRequest {
	return ApiMeManagedDevicesUpdateDeviceCompliancePolicyStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
		deviceCompliancePolicyStateId: deviceCompliancePolicyStateId,
	}
}

// Execute executes the request
func (a *MeManagedDeviceApiService) MeManagedDevicesUpdateDeviceCompliancePolicyStatesExecute(r ApiMeManagedDevicesUpdateDeviceCompliancePolicyStatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeManagedDevicesUpdateDeviceCompliancePolicyStates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}/deviceCompliancePolicyStates/{deviceCompliancePolicyState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicyState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceCompliancePolicyState == nil {
		return nil, reportError("microsoftGraphDeviceCompliancePolicyState is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceCompliancePolicyState
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeManagedDevicesUpdateDeviceConfigurationStatesRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	deviceConfigurationStateId string
	microsoftGraphDeviceConfigurationState *MicrosoftGraphDeviceConfigurationState
}

// New navigation property values
func (r ApiMeManagedDevicesUpdateDeviceConfigurationStatesRequest) MicrosoftGraphDeviceConfigurationState(microsoftGraphDeviceConfigurationState MicrosoftGraphDeviceConfigurationState) ApiMeManagedDevicesUpdateDeviceConfigurationStatesRequest {
	r.microsoftGraphDeviceConfigurationState = &microsoftGraphDeviceConfigurationState
	return r
}

func (r ApiMeManagedDevicesUpdateDeviceConfigurationStatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeManagedDevicesUpdateDeviceConfigurationStatesExecute(r)
}

/*
MeManagedDevicesUpdateDeviceConfigurationStates Update the navigation property deviceConfigurationStates in me

Device configuration states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @param deviceConfigurationStateId key: id of deviceConfigurationState
 @return ApiMeManagedDevicesUpdateDeviceConfigurationStatesRequest
*/
func (a *MeManagedDeviceApiService) MeManagedDevicesUpdateDeviceConfigurationStates(ctx _context.Context, managedDeviceId string, deviceConfigurationStateId string) ApiMeManagedDevicesUpdateDeviceConfigurationStatesRequest {
	return ApiMeManagedDevicesUpdateDeviceConfigurationStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
		deviceConfigurationStateId: deviceConfigurationStateId,
	}
}

// Execute executes the request
func (a *MeManagedDeviceApiService) MeManagedDevicesUpdateDeviceConfigurationStatesExecute(r ApiMeManagedDevicesUpdateDeviceConfigurationStatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeManagedDevicesUpdateDeviceConfigurationStates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}/deviceConfigurationStates/{deviceConfigurationState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfigurationState == nil {
		return nil, reportError("microsoftGraphDeviceConfigurationState is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfigurationState
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeUpdateManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *MeManagedDeviceApiService
	managedDeviceId string
	microsoftGraphManagedDevice *MicrosoftGraphManagedDevice
}

// New navigation property values
func (r ApiMeUpdateManagedDevicesRequest) MicrosoftGraphManagedDevice(microsoftGraphManagedDevice MicrosoftGraphManagedDevice) ApiMeUpdateManagedDevicesRequest {
	r.microsoftGraphManagedDevice = &microsoftGraphManagedDevice
	return r
}

func (r ApiMeUpdateManagedDevicesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeUpdateManagedDevicesExecute(r)
}

/*
MeUpdateManagedDevices Update the navigation property managedDevices in me

The managed devices associated with the user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiMeUpdateManagedDevicesRequest
*/
func (a *MeManagedDeviceApiService) MeUpdateManagedDevices(ctx _context.Context, managedDeviceId string) ApiMeUpdateManagedDevicesRequest {
	return ApiMeUpdateManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
func (a *MeManagedDeviceApiService) MeUpdateManagedDevicesExecute(r ApiMeUpdateManagedDevicesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeManagedDeviceApiService.MeUpdateManagedDevices")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/managedDevices/{managedDevice-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDevice == nil {
		return nil, reportError("microsoftGraphManagedDevice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDevice
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
