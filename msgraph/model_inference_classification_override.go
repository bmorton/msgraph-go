/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InferenceClassificationOverride struct for InferenceClassificationOverride
type InferenceClassificationOverride struct {
	// Specifies how incoming messages from a specific sender should always be classified as. The possible values are: focused, other.
	ClassifyAs AnyOfmicrosoftGraphInferenceClassificationType `json:"classifyAs,omitempty"`
	// The email address information of the sender for whom the override is created.
	SenderEmailAddress AnyOfmicrosoftGraphEmailAddress `json:"senderEmailAddress,omitempty"`
}

// NewInferenceClassificationOverride instantiates a new InferenceClassificationOverride object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInferenceClassificationOverride() *InferenceClassificationOverride {
	this := InferenceClassificationOverride{}
	return &this
}

// NewInferenceClassificationOverrideWithDefaults instantiates a new InferenceClassificationOverride object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInferenceClassificationOverrideWithDefaults() *InferenceClassificationOverride {
	this := InferenceClassificationOverride{}
	return &this
}

// GetClassifyAs returns the ClassifyAs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InferenceClassificationOverride) GetClassifyAs() AnyOfmicrosoftGraphInferenceClassificationType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphInferenceClassificationType
		return ret
	}
	return o.ClassifyAs
}

// GetClassifyAsOk returns a tuple with the ClassifyAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InferenceClassificationOverride) GetClassifyAsOk() (*AnyOfmicrosoftGraphInferenceClassificationType, bool) {
	if o == nil || o.ClassifyAs == nil {
		return nil, false
	}
	return &o.ClassifyAs, true
}

// HasClassifyAs returns a boolean if a field has been set.
func (o *InferenceClassificationOverride) HasClassifyAs() bool {
	if o != nil && o.ClassifyAs != nil {
		return true
	}

	return false
}

// SetClassifyAs gets a reference to the given AnyOfmicrosoftGraphInferenceClassificationType and assigns it to the ClassifyAs field.
func (o *InferenceClassificationOverride) SetClassifyAs(v AnyOfmicrosoftGraphInferenceClassificationType) {
	o.ClassifyAs = v
}

// GetSenderEmailAddress returns the SenderEmailAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InferenceClassificationOverride) GetSenderEmailAddress() AnyOfmicrosoftGraphEmailAddress {
	if o == nil  {
		var ret AnyOfmicrosoftGraphEmailAddress
		return ret
	}
	return o.SenderEmailAddress
}

// GetSenderEmailAddressOk returns a tuple with the SenderEmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InferenceClassificationOverride) GetSenderEmailAddressOk() (*AnyOfmicrosoftGraphEmailAddress, bool) {
	if o == nil || o.SenderEmailAddress == nil {
		return nil, false
	}
	return &o.SenderEmailAddress, true
}

// HasSenderEmailAddress returns a boolean if a field has been set.
func (o *InferenceClassificationOverride) HasSenderEmailAddress() bool {
	if o != nil && o.SenderEmailAddress != nil {
		return true
	}

	return false
}

// SetSenderEmailAddress gets a reference to the given AnyOfmicrosoftGraphEmailAddress and assigns it to the SenderEmailAddress field.
func (o *InferenceClassificationOverride) SetSenderEmailAddress(v AnyOfmicrosoftGraphEmailAddress) {
	o.SenderEmailAddress = v
}

func (o InferenceClassificationOverride) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClassifyAs != nil {
		toSerialize["classifyAs"] = o.ClassifyAs
	}
	if o.SenderEmailAddress != nil {
		toSerialize["senderEmailAddress"] = o.SenderEmailAddress
	}
	return json.Marshal(toSerialize)
}

type NullableInferenceClassificationOverride struct {
	value *InferenceClassificationOverride
	isSet bool
}

func (v NullableInferenceClassificationOverride) Get() *InferenceClassificationOverride {
	return v.value
}

func (v *NullableInferenceClassificationOverride) Set(val *InferenceClassificationOverride) {
	v.value = val
	v.isSet = true
}

func (v NullableInferenceClassificationOverride) IsSet() bool {
	return v.isSet
}

func (v *NullableInferenceClassificationOverride) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInferenceClassificationOverride(val *InferenceClassificationOverride) *NullableInferenceClassificationOverride {
	return &NullableInferenceClassificationOverride{value: val, isSet: true}
}

func (v NullableInferenceClassificationOverride) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInferenceClassificationOverride) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


