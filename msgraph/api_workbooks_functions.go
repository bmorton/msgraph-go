/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// WorkbooksFunctionsApiService WorkbooksFunctionsApi service
type WorkbooksFunctionsApiService service

type ApiWorkbooksDriveItemDelta90ceRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemDelta90ceRequest) Execute() ([]*AnyOfmicrosoftGraphDriveItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemDelta90ceExecute(r)
}

/*
WorkbooksDriveItemDelta90ce Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemDelta90ceRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemDelta90ce(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemDelta90ceRequest {
	return ApiWorkbooksDriveItemDelta90ceRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphDriveItem
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemDelta90ceExecute(r ApiWorkbooksDriveItemDelta90ceRequest) ([]*AnyOfmicrosoftGraphDriveItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphDriveItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemDelta90ce")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.delta()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemDeltaCb24Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	token string
}


func (r ApiWorkbooksDriveItemDeltaCb24Request) Execute() ([]*AnyOfmicrosoftGraphDriveItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemDeltaCb24Execute(r)
}

/*
WorkbooksDriveItemDeltaCb24 Invoke function delta

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param token Usage: token={token}
 @return ApiWorkbooksDriveItemDeltaCb24Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemDeltaCb24(ctx _context.Context, driveItemId string, token string) ApiWorkbooksDriveItemDeltaCb24Request {
	return ApiWorkbooksDriveItemDeltaCb24Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		token: token,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphDriveItem
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemDeltaCb24Execute(r ApiWorkbooksDriveItemDeltaCb24Request) ([]*AnyOfmicrosoftGraphDriveItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphDriveItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemDeltaCb24")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.delta(token='{token}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"token"+"}", _neturl.PathEscape(parameterToString(r.token, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemGetActivitiesByInterval53eeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	startDateTime string
	endDateTime string
	interval string
}


func (r ApiWorkbooksDriveItemGetActivitiesByInterval53eeRequest) Execute() ([]*AnyOfmicrosoftGraphItemActivityStat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemGetActivitiesByInterval53eeExecute(r)
}

/*
WorkbooksDriveItemGetActivitiesByInterval53ee Invoke function getActivitiesByInterval

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param startDateTime Usage: startDateTime={startDateTime}
 @param endDateTime Usage: endDateTime={endDateTime}
 @param interval Usage: interval={interval}
 @return ApiWorkbooksDriveItemGetActivitiesByInterval53eeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemGetActivitiesByInterval53ee(ctx _context.Context, driveItemId string, startDateTime string, endDateTime string, interval string) ApiWorkbooksDriveItemGetActivitiesByInterval53eeRequest {
	return ApiWorkbooksDriveItemGetActivitiesByInterval53eeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		startDateTime: startDateTime,
		endDateTime: endDateTime,
		interval: interval,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphItemActivityStat
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemGetActivitiesByInterval53eeExecute(r ApiWorkbooksDriveItemGetActivitiesByInterval53eeRequest) ([]*AnyOfmicrosoftGraphItemActivityStat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphItemActivityStat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemGetActivitiesByInterval53ee")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.getActivitiesByInterval(startDateTime='{startDateTime}',endDateTime='{endDateTime}',interval='{interval}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"startDateTime"+"}", _neturl.PathEscape(parameterToString(r.startDateTime, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"endDateTime"+"}", _neturl.PathEscape(parameterToString(r.endDateTime, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"interval"+"}", _neturl.PathEscape(parameterToString(r.interval, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemGetActivitiesByInterval96b0Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemGetActivitiesByInterval96b0Request) Execute() ([]*AnyOfmicrosoftGraphItemActivityStat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemGetActivitiesByInterval96b0Execute(r)
}

/*
WorkbooksDriveItemGetActivitiesByInterval96b0 Invoke function getActivitiesByInterval

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemGetActivitiesByInterval96b0Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemGetActivitiesByInterval96b0(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemGetActivitiesByInterval96b0Request {
	return ApiWorkbooksDriveItemGetActivitiesByInterval96b0Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphItemActivityStat
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemGetActivitiesByInterval96b0Execute(r ApiWorkbooksDriveItemGetActivitiesByInterval96b0Request) ([]*AnyOfmicrosoftGraphItemActivityStat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphItemActivityStat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemGetActivitiesByInterval96b0")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.getActivitiesByInterval()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemListItemGetActivitiesByInterval53eeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	startDateTime string
	endDateTime string
	interval string
}


func (r ApiWorkbooksDriveItemListItemGetActivitiesByInterval53eeRequest) Execute() ([]*AnyOfmicrosoftGraphItemActivityStat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemListItemGetActivitiesByInterval53eeExecute(r)
}

/*
WorkbooksDriveItemListItemGetActivitiesByInterval53ee Invoke function getActivitiesByInterval

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param startDateTime Usage: startDateTime={startDateTime}
 @param endDateTime Usage: endDateTime={endDateTime}
 @param interval Usage: interval={interval}
 @return ApiWorkbooksDriveItemListItemGetActivitiesByInterval53eeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemListItemGetActivitiesByInterval53ee(ctx _context.Context, driveItemId string, startDateTime string, endDateTime string, interval string) ApiWorkbooksDriveItemListItemGetActivitiesByInterval53eeRequest {
	return ApiWorkbooksDriveItemListItemGetActivitiesByInterval53eeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		startDateTime: startDateTime,
		endDateTime: endDateTime,
		interval: interval,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphItemActivityStat
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemListItemGetActivitiesByInterval53eeExecute(r ApiWorkbooksDriveItemListItemGetActivitiesByInterval53eeRequest) ([]*AnyOfmicrosoftGraphItemActivityStat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphItemActivityStat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemListItemGetActivitiesByInterval53ee")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/listItem/microsoft.graph.getActivitiesByInterval(startDateTime='{startDateTime}',endDateTime='{endDateTime}',interval='{interval}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"startDateTime"+"}", _neturl.PathEscape(parameterToString(r.startDateTime, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"endDateTime"+"}", _neturl.PathEscape(parameterToString(r.endDateTime, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"interval"+"}", _neturl.PathEscape(parameterToString(r.interval, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemListItemGetActivitiesByInterval96b0Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemListItemGetActivitiesByInterval96b0Request) Execute() ([]*AnyOfmicrosoftGraphItemActivityStat, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemListItemGetActivitiesByInterval96b0Execute(r)
}

/*
WorkbooksDriveItemListItemGetActivitiesByInterval96b0 Invoke function getActivitiesByInterval

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemListItemGetActivitiesByInterval96b0Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemListItemGetActivitiesByInterval96b0(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemListItemGetActivitiesByInterval96b0Request {
	return ApiWorkbooksDriveItemListItemGetActivitiesByInterval96b0Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphItemActivityStat
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemListItemGetActivitiesByInterval96b0Execute(r ApiWorkbooksDriveItemListItemGetActivitiesByInterval96b0Request) ([]*AnyOfmicrosoftGraphItemActivityStat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphItemActivityStat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemListItemGetActivitiesByInterval96b0")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/listItem/microsoft.graph.getActivitiesByInterval()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemSearchRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	q string
}


func (r ApiWorkbooksDriveItemSearchRequest) Execute() ([]*AnyOfmicrosoftGraphDriveItem, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemSearchExecute(r)
}

/*
WorkbooksDriveItemSearch Invoke function search

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param q Usage: q={q}
 @return ApiWorkbooksDriveItemSearchRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemSearch(ctx _context.Context, driveItemId string, q string) ApiWorkbooksDriveItemSearchRequest {
	return ApiWorkbooksDriveItemSearchRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		q: q,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphDriveItem
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemSearchExecute(r ApiWorkbooksDriveItemSearchRequest) ([]*AnyOfmicrosoftGraphDriveItem, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphDriveItem
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemSearch")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/microsoft.graph.search(q='{q}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"q"+"}", _neturl.PathEscape(parameterToString(r.q, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemRange(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemRangeRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemRangeExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetCellRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	row int32
	column int32
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetCellExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetCellRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetCell(ctx _context.Context, driveItemId string, workbookNamedItemId string, row int32, column int32) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetCellRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetCellRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetCellExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsCount(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsCountRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsCountExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	name string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemRequest) Execute() (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItem Invoke function item

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param name Usage: name={name}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItem(ctx _context.Context, driveItemId string, workbookNamedItemId string, name string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		name: name,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookChart
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemRequest) (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItem")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/microsoft.graph.item(name='{name}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemAt(ctx _context.Context, driveItemId string, workbookNamedItemId string, index int32) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookChart
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemAtExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemAtRequest) (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage6d93Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	width int32
	height int32
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage6d93Request) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage6d93Execute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage6d93 Invoke function image

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param width Usage: width={width}
 @param height Usage: height={height}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage6d93Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage6d93(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, width int32, height int32) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage6d93Request {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage6d93Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		width: width,
		height: height,
	}
}

// Execute executes the request
//  @return string
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage6d93Execute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage6d93Request) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage6d93")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/microsoft.graph.image(width={width},height={height})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"width"+"}", _neturl.PathEscape(parameterToString(r.width, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"height"+"}", _neturl.PathEscape(parameterToString(r.height, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.width < -2147483648 {
		return localVarReturnValue, nil, reportError("width must be greater than -2147483648")
	}
	if r.width > 2147483647 {
		return localVarReturnValue, nil, reportError("width must be less than 2147483647")
	}
	if r.height < -2147483648 {
		return localVarReturnValue, nil, reportError("height must be greater than -2147483648")
	}
	if r.height > 2147483647 {
		return localVarReturnValue, nil, reportError("height must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9c4fRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	width int32
	height int32
	fittingMode string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9c4fRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9c4fExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9c4f Invoke function image

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param width Usage: width={width}
 @param height Usage: height={height}
 @param fittingMode Usage: fittingMode={fittingMode}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9c4fRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9c4f(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, width int32, height int32, fittingMode string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9c4fRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9c4fRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		width: width,
		height: height,
		fittingMode: fittingMode,
	}
}

// Execute executes the request
//  @return string
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9c4fExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9c4fRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9c4f")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/microsoft.graph.image(width={width},height={height},fittingMode='{fittingMode}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"width"+"}", _neturl.PathEscape(parameterToString(r.width, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"height"+"}", _neturl.PathEscape(parameterToString(r.height, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fittingMode"+"}", _neturl.PathEscape(parameterToString(r.fittingMode, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.width < -2147483648 {
		return localVarReturnValue, nil, reportError("width must be greater than -2147483648")
	}
	if r.width > 2147483647 {
		return localVarReturnValue, nil, reportError("width must be less than 2147483647")
	}
	if r.height < -2147483648 {
		return localVarReturnValue, nil, reportError("height must be greater than -2147483648")
	}
	if r.height > 2147483647 {
		return localVarReturnValue, nil, reportError("height must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9d93Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9d93Request) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9d93Execute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9d93 Invoke function image

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9d93Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9d93(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9d93Request {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9d93Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return string
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9d93Execute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9d93Request) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImage9d93")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/microsoft.graph.image()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImageE058Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	width int32
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImageE058Request) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImageE058Execute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImageE058 Invoke function image

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param width Usage: width={width}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImageE058Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImageE058(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, width int32) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImageE058Request {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImageE058Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		width: width,
	}
}

// Execute executes the request
//  @return string
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImageE058Execute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImageE058Request) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartImageE058")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/microsoft.graph.image(width={width})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"width"+"}", _neturl.PathEscape(parameterToString(r.width, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.width < -2147483648 {
		return localVarReturnValue, nil, reportError("width must be greater than -2147483648")
	}
	if r.width > 2147483647 {
		return localVarReturnValue, nil, reportError("width must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesCount(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesCountRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesCountExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesItemAt(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, index int32) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookChartSeries
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesItemAtExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesItemAtRequest) (AnyOfmicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookChartSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCount(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	workbookChartSeriesId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAt(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, workbookChartSeriesId string, index int32) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookChartPoint
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest) (AnyOfmicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookChartPoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetCellRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	row int32
	column int32
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetCellExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetCellRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetCell(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, row int32, column int32) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetCellRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetCellRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetCellExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/worksheet/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange0e4aRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange0e4aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange0e4aExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange0e4a Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange0e4aRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange0e4a(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange0e4aRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange0e4aRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange0e4aExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange0e4aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange0e4a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/worksheet/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange7d76Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	address string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange7d76Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange7d76Execute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange7d76 Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param address Usage: address={address}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange7d76Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange7d76(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, address string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange7d76Request {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange7d76Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		address: address,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange7d76Execute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange7d76Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetRange7d76")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/worksheet/microsoft.graph.range(address='{address}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
	valuesOnly bool
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRange206dExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRange206d(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string, valuesOnly bool) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRange206dExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/worksheet/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRangeEc2c(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetChartsWorkbookChartWorksheetUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/charts/{workbookChart-id}/worksheet/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesWorkbookNamedItemRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookNamedItemId1 string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesWorkbookNamedItemRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesWorkbookNamedItemRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesWorkbookNamedItemRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookNamedItemId1 key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesWorkbookNamedItemRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesWorkbookNamedItemRange(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookNamedItemId1 string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesWorkbookNamedItemRangeRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesWorkbookNamedItemRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookNamedItemId1: workbookNamedItemId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesWorkbookNamedItemRangeExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesWorkbookNamedItemRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetNamesWorkbookNamedItemRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/names/{workbookNamedItem-id1}/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id1"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookPivotTableId string
	row int32
	column int32
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetCellExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookPivotTableId key: id of workbookPivotTable
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetCell(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookPivotTableId string, row int32, column int32) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookPivotTableId: workbookPivotTableId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetCellExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookPivotTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4a Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4a(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookPivotTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookPivotTableId string
	address string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Execute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76 Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookPivotTableId key: id of workbookPivotTable
 @param address Usage: address={address}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookPivotTableId string, address string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookPivotTableId: workbookPivotTableId,
		address: address,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Execute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet/microsoft.graph.range(address='{address}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookPivotTableId string
	valuesOnly bool
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookPivotTableId key: id of workbookPivotTable
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206d(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookPivotTableId string, valuesOnly bool) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookPivotTableId: workbookPivotTableId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookPivotTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2c(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookPivotTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange0e4aRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange0e4aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange0e4aExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange0e4a Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange0e4aRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange0e4a(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange0e4aRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange0e4aRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange0e4aExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange0e4aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange0e4a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange7d76Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	address string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange7d76Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange7d76Execute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange7d76 Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param address Usage: address={address}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange7d76Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange7d76(ctx _context.Context, driveItemId string, workbookNamedItemId string, address string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange7d76Request {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange7d76Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		address: address,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange7d76Execute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange7d76Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetRange7d76")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/microsoft.graph.range(address='{address}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesCount(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesCountRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesCountExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesItemAt(ctx _context.Context, driveItemId string, workbookNamedItemId string, index int32) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTable
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesItemAtExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesItemAtRequest) (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsCount(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsCountRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsCountExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsItemAt(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, index int32) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTableColumn
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsItemAtExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsItemAtRequest) (AnyOfmicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTableColumn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange Invoke function dataBodyRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/microsoft.graph.dataBodyRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRange Invoke function headerRowRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRange(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/microsoft.graph.headerRowRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRange(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableColumnId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRange Invoke function totalRowRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRange(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/microsoft.graph.totalRowRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableDataBodyRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableDataBodyRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableDataBodyRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableDataBodyRange Invoke function dataBodyRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableDataBodyRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableDataBodyRange(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableDataBodyRangeRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableDataBodyRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableDataBodyRangeExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableDataBodyRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableDataBodyRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/microsoft.graph.dataBodyRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableHeaderRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableHeaderRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableHeaderRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableHeaderRowRange Invoke function headerRowRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableHeaderRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableHeaderRowRange(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableHeaderRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableHeaderRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableHeaderRowRangeExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableHeaderRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableHeaderRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/microsoft.graph.headerRowRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRange(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRangeRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRangeExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsCount(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsCountRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsCountExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/rows/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsItemAt(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, index int32) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTableRow
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsItemAtExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsItemAtRequest) (AnyOfmicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/rows/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	workbookTableRowId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsWorkbookTableRowRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableRowId key: id of workbookTableRow
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsWorkbookTableRowRange(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, workbookTableRowId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		workbookTableRowId: workbookTableRowId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableRowsWorkbookTableRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/rows/{workbookTableRow-id}/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableRow-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableRowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableTotalRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableTotalRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableTotalRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableTotalRowRange Invoke function totalRowRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableTotalRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableTotalRowRange(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableTotalRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableTotalRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableTotalRowRangeExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableTotalRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableTotalRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/microsoft.graph.totalRowRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetCellRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	row int32
	column int32
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetCellExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetCellRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetCell(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, row int32, column int32) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetCellRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetCellRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetCellExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/worksheet/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange0e4aRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange0e4aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange0e4aExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange0e4a Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange0e4aRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange0e4a(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange0e4aRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange0e4aRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange0e4aExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange0e4aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange0e4a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/worksheet/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange7d76Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	address string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange7d76Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange7d76Execute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange7d76 Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param address Usage: address={address}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange7d76Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange7d76(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, address string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange7d76Request {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange7d76Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		address: address,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange7d76Execute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange7d76Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetRange7d76")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/worksheet/microsoft.graph.range(address='{address}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
	valuesOnly bool
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRange206dExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRange206dRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRange206d(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string, valuesOnly bool) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRange206dRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRange206dExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/worksheet/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRangeEc2c(ctx _context.Context, driveItemId string, workbookNamedItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetTablesWorkbookTableWorksheetUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/tables/{workbookTable-id}/worksheet/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
	valuesOnly bool
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRange206dExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRange206dRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRange206d(ctx _context.Context, driveItemId string, workbookNamedItemId string, valuesOnly bool) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRange206dRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRange206dExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookNamedItemId string
}


func (r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRangeEc2cExecute(r)
}

/*
WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRangeEc2c(ctx _context.Context, driveItemId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest {
	return ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRangeEc2cExecute(r ApiWorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookNamesWorkbookNamedItemWorksheetUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/names/{workbookNamedItem-id}/worksheet/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookSessionInfoResourceRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	key string
}


func (r ApiWorkbooksDriveItemWorkbookSessionInfoResourceRequest) Execute() (AnyOfmicrosoftGraphWorkbookSessionInfo, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookSessionInfoResourceExecute(r)
}

/*
WorkbooksDriveItemWorkbookSessionInfoResource Invoke function sessionInfoResource

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param key Usage: key={key}
 @return ApiWorkbooksDriveItemWorkbookSessionInfoResourceRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookSessionInfoResource(ctx _context.Context, driveItemId string, key string) ApiWorkbooksDriveItemWorkbookSessionInfoResourceRequest {
	return ApiWorkbooksDriveItemWorkbookSessionInfoResourceRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		key: key,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookSessionInfo
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookSessionInfoResourceExecute(r ApiWorkbooksDriveItemWorkbookSessionInfoResourceRequest) (AnyOfmicrosoftGraphWorkbookSessionInfo, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookSessionInfo
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookSessionInfoResource")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/microsoft.graph.sessionInfoResource(key='{key}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", _neturl.PathEscape(parameterToString(r.key, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTableRowOperationResultRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	key string
}


func (r ApiWorkbooksDriveItemWorkbookTableRowOperationResultRequest) Execute() (AnyOfmicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTableRowOperationResultExecute(r)
}

/*
WorkbooksDriveItemWorkbookTableRowOperationResult Invoke function tableRowOperationResult

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param key Usage: key={key}
 @return ApiWorkbooksDriveItemWorkbookTableRowOperationResultRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTableRowOperationResult(ctx _context.Context, driveItemId string, key string) ApiWorkbooksDriveItemWorkbookTableRowOperationResultRequest {
	return ApiWorkbooksDriveItemWorkbookTableRowOperationResultRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		key: key,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTableRow
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTableRowOperationResultExecute(r ApiWorkbooksDriveItemWorkbookTableRowOperationResultRequest) (AnyOfmicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTableRowOperationResult")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/microsoft.graph.tableRowOperationResult(key='{key}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"key"+"}", _neturl.PathEscape(parameterToString(r.key, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @return ApiWorkbooksDriveItemWorkbookTablesCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesCount(ctx _context.Context, driveItemId string) ApiWorkbooksDriveItemWorkbookTablesCountRequest {
	return ApiWorkbooksDriveItemWorkbookTablesCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesCountExecute(r ApiWorkbooksDriveItemWorkbookTablesCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookTablesItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookTablesItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesItemAt(ctx _context.Context, driveItemId string, index int32) ApiWorkbooksDriveItemWorkbookTablesItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookTablesItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTable
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesItemAtExecute(r ApiWorkbooksDriveItemWorkbookTablesItemAtRequest) (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsCount(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsCountRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsCountExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsItemAt(ctx _context.Context, driveItemId string, workbookTableId string, index int32) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTableColumn
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsItemAtExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsItemAtRequest) (AnyOfmicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTableColumn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange Invoke function dataBodyRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/microsoft.graph.dataBodyRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRange Invoke function headerRowRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRange(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/microsoft.graph.headerRowRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnRange(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookTableColumnId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRange Invoke function totalRowRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRange(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/microsoft.graph.totalRowRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableDataBodyRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableDataBodyRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableDataBodyRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableDataBodyRange Invoke function dataBodyRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableDataBodyRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableDataBodyRange(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableDataBodyRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableDataBodyRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableDataBodyRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableDataBodyRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableDataBodyRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/microsoft.graph.dataBodyRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableHeaderRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableHeaderRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableHeaderRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableHeaderRowRange Invoke function headerRowRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableHeaderRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableHeaderRowRange(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableHeaderRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableHeaderRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableHeaderRowRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableHeaderRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableHeaderRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/microsoft.graph.headerRowRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableRange(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableRowsCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableRowsCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableRowsCount(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsCountRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableRowsCountExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableRowsCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/rows/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableRowsItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableRowsItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableRowsItemAt(ctx _context.Context, driveItemId string, workbookTableId string, index int32) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTableRow
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableRowsItemAtExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsItemAtRequest) (AnyOfmicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableRowsItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/rows/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsWorkbookTableRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookTableRowId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsWorkbookTableRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableRowsWorkbookTableRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableRowsWorkbookTableRowRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableRowId key: id of workbookTableRow
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsWorkbookTableRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableRowsWorkbookTableRowRange(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableRowId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsWorkbookTableRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsWorkbookTableRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableRowId: workbookTableRowId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableRowsWorkbookTableRowRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableRowsWorkbookTableRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableRowsWorkbookTableRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/rows/{workbookTableRow-id}/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableRow-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableRowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableTotalRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableTotalRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableTotalRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableTotalRowRange Invoke function totalRowRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableTotalRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableTotalRowRange(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableTotalRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableTotalRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableTotalRowRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableTotalRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableTotalRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/microsoft.graph.totalRowRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetCellRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	row int32
	column int32
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetCellExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetCellRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetCell(ctx _context.Context, driveItemId string, workbookTableId string, row int32, column int32) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetCellRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetCellRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetCellExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsCount(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsCountRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsCountExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	name string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemRequest) Execute() (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItem Invoke function item

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param name Usage: name={name}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItem(ctx _context.Context, driveItemId string, workbookTableId string, name string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		name: name,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookChart
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemRequest) (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItem")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/microsoft.graph.item(name='{name}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemAt(ctx _context.Context, driveItemId string, workbookTableId string, index int32) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookChart
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemAtExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemAtRequest) (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage6d93Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	width int32
	height int32
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage6d93Request) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage6d93Execute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage6d93 Invoke function image

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param width Usage: width={width}
 @param height Usage: height={height}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage6d93Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage6d93(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, width int32, height int32) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage6d93Request {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage6d93Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		width: width,
		height: height,
	}
}

// Execute executes the request
//  @return string
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage6d93Execute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage6d93Request) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage6d93")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/microsoft.graph.image(width={width},height={height})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"width"+"}", _neturl.PathEscape(parameterToString(r.width, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"height"+"}", _neturl.PathEscape(parameterToString(r.height, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.width < -2147483648 {
		return localVarReturnValue, nil, reportError("width must be greater than -2147483648")
	}
	if r.width > 2147483647 {
		return localVarReturnValue, nil, reportError("width must be less than 2147483647")
	}
	if r.height < -2147483648 {
		return localVarReturnValue, nil, reportError("height must be greater than -2147483648")
	}
	if r.height > 2147483647 {
		return localVarReturnValue, nil, reportError("height must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9c4fRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	width int32
	height int32
	fittingMode string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9c4fRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9c4fExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9c4f Invoke function image

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param width Usage: width={width}
 @param height Usage: height={height}
 @param fittingMode Usage: fittingMode={fittingMode}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9c4fRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9c4f(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, width int32, height int32, fittingMode string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9c4fRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9c4fRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		width: width,
		height: height,
		fittingMode: fittingMode,
	}
}

// Execute executes the request
//  @return string
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9c4fExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9c4fRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9c4f")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/microsoft.graph.image(width={width},height={height},fittingMode='{fittingMode}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"width"+"}", _neturl.PathEscape(parameterToString(r.width, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"height"+"}", _neturl.PathEscape(parameterToString(r.height, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fittingMode"+"}", _neturl.PathEscape(parameterToString(r.fittingMode, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.width < -2147483648 {
		return localVarReturnValue, nil, reportError("width must be greater than -2147483648")
	}
	if r.width > 2147483647 {
		return localVarReturnValue, nil, reportError("width must be less than 2147483647")
	}
	if r.height < -2147483648 {
		return localVarReturnValue, nil, reportError("height must be greater than -2147483648")
	}
	if r.height > 2147483647 {
		return localVarReturnValue, nil, reportError("height must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9d93Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9d93Request) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9d93Execute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9d93 Invoke function image

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9d93Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9d93(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9d93Request {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9d93Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return string
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9d93Execute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9d93Request) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImage9d93")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/microsoft.graph.image()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImageE058Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	width int32
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImageE058Request) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImageE058Execute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImageE058 Invoke function image

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param width Usage: width={width}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImageE058Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImageE058(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, width int32) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImageE058Request {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImageE058Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		width: width,
	}
}

// Execute executes the request
//  @return string
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImageE058Execute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImageE058Request) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartImageE058")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/microsoft.graph.image(width={width})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"width"+"}", _neturl.PathEscape(parameterToString(r.width, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.width < -2147483648 {
		return localVarReturnValue, nil, reportError("width must be greater than -2147483648")
	}
	if r.width > 2147483647 {
		return localVarReturnValue, nil, reportError("width must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesCount(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesCountRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesCountExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesItemAt(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, index int32) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookChartSeries
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesItemAtExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesItemAtRequest) (AnyOfmicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookChartSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCount(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	workbookChartSeriesId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAt(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, workbookChartSeriesId string, index int32) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookChartPoint
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest) (AnyOfmicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookChartPoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetCellRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	row int32
	column int32
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetCellExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetCellRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetCell(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, row int32, column int32) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetCellRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetCellRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetCellExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/worksheet/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange0e4aRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange0e4aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange0e4aExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange0e4a Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange0e4aRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange0e4a(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange0e4aRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange0e4aRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange0e4aExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange0e4aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange0e4a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/worksheet/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange7d76Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	address string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange7d76Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange7d76Execute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange7d76 Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param address Usage: address={address}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange7d76Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange7d76(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, address string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange7d76Request {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange7d76Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		address: address,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange7d76Execute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange7d76Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetRange7d76")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/worksheet/microsoft.graph.range(address='{address}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
	valuesOnly bool
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRange206dExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRange206d(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string, valuesOnly bool) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRange206dExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/worksheet/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRangeEc2c(ctx _context.Context, driveItemId string, workbookTableId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetChartsWorkbookChartWorksheetUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/charts/{workbookChart-id}/worksheet/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookNamedItemId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemRange(ctx _context.Context, driveItemId string, workbookTableId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names/{workbookNamedItem-id}/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetCellRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookNamedItemId string
	row int32
	column int32
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetCellExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookNamedItemId key: id of workbookNamedItem
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetCellRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetCell(ctx _context.Context, driveItemId string, workbookTableId string, workbookNamedItemId string, row int32, column int32) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetCellRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetCellRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookNamedItemId: workbookNamedItemId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetCellExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names/{workbookNamedItem-id}/worksheet/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange0e4aRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookNamedItemId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange0e4aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange0e4aExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange0e4a Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange0e4aRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange0e4a(ctx _context.Context, driveItemId string, workbookTableId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange0e4aRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange0e4aRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange0e4aExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange0e4aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange0e4a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names/{workbookNamedItem-id}/worksheet/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange7d76Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookNamedItemId string
	address string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange7d76Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange7d76Execute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange7d76 Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookNamedItemId key: id of workbookNamedItem
 @param address Usage: address={address}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange7d76Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange7d76(ctx _context.Context, driveItemId string, workbookTableId string, workbookNamedItemId string, address string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange7d76Request {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange7d76Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookNamedItemId: workbookNamedItemId,
		address: address,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange7d76Execute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange7d76Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetRange7d76")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names/{workbookNamedItem-id}/worksheet/microsoft.graph.range(address='{address}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookNamedItemId string
	valuesOnly bool
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookNamedItemId key: id of workbookNamedItem
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRange206d(ctx _context.Context, driveItemId string, workbookTableId string, workbookNamedItemId string, valuesOnly bool) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookNamedItemId: workbookNamedItemId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names/{workbookNamedItem-id}/worksheet/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookNamedItemId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2c(ctx _context.Context, driveItemId string, workbookTableId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/names/{workbookNamedItem-id}/worksheet/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookPivotTableId string
	row int32
	column int32
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetCellExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookPivotTableId key: id of workbookPivotTable
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetCell(ctx _context.Context, driveItemId string, workbookTableId string, workbookPivotTableId string, row int32, column int32) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookPivotTableId: workbookPivotTableId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetCellExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookPivotTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4a Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4a(ctx _context.Context, driveItemId string, workbookTableId string, workbookPivotTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookPivotTableId string
	address string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Execute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76 Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookPivotTableId key: id of workbookPivotTable
 @param address Usage: address={address}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76(ctx _context.Context, driveItemId string, workbookTableId string, workbookPivotTableId string, address string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookPivotTableId: workbookPivotTableId,
		address: address,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Execute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet/microsoft.graph.range(address='{address}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookPivotTableId string
	valuesOnly bool
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookPivotTableId key: id of workbookPivotTable
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206d(ctx _context.Context, driveItemId string, workbookTableId string, workbookPivotTableId string, valuesOnly bool) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookPivotTableId: workbookPivotTableId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookPivotTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2c(ctx _context.Context, driveItemId string, workbookTableId string, workbookPivotTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/pivotTables/{workbookPivotTable-id}/worksheet/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange0e4aRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange0e4aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange0e4aExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange0e4a Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange0e4aRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange0e4a(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange0e4aRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange0e4aRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange0e4aExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange0e4aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange0e4a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange7d76Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	address string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange7d76Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange7d76Execute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange7d76 Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param address Usage: address={address}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange7d76Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange7d76(ctx _context.Context, driveItemId string, workbookTableId string, address string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange7d76Request {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange7d76Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		address: address,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange7d76Execute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange7d76Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetRange7d76")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/microsoft.graph.range(address='{address}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesCount(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesCountRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesCountExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/tables/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesItemAt(ctx _context.Context, driveItemId string, workbookTableId string, index int32) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTable
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesItemAtExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesItemAtRequest) (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/tables/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableDataBodyRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookTableId1 string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableDataBodyRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableDataBodyRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableDataBodyRange Invoke function dataBodyRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableId1 key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableDataBodyRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableDataBodyRange(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableId1 string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableDataBodyRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableDataBodyRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableId1: workbookTableId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableDataBodyRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableDataBodyRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableDataBodyRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/tables/{workbookTable-id1}/microsoft.graph.dataBodyRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id1"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableHeaderRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookTableId1 string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableHeaderRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableHeaderRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableHeaderRowRange Invoke function headerRowRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableId1 key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableHeaderRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableHeaderRowRange(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableId1 string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableHeaderRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableHeaderRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableId1: workbookTableId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableHeaderRowRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableHeaderRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableHeaderRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/tables/{workbookTable-id1}/microsoft.graph.headerRowRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id1"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookTableId1 string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableId1 key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableRange(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableId1 string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableId1: workbookTableId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/tables/{workbookTable-id1}/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id1"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableTotalRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	workbookTableId1 string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableTotalRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableTotalRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableTotalRowRange Invoke function totalRowRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param workbookTableId1 key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableTotalRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableTotalRowRange(ctx _context.Context, driveItemId string, workbookTableId string, workbookTableId1 string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableTotalRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableTotalRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		workbookTableId1: workbookTableId1,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableTotalRowRangeExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableTotalRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetTablesWorkbookTableTotalRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/tables/{workbookTable-id1}/microsoft.graph.totalRowRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id1"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
	valuesOnly bool
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRange206dExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRange206dRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRange206d(ctx _context.Context, driveItemId string, workbookTableId string, valuesOnly bool) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRange206dRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRange206dExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRangeEc2cExecute(r)
}

/*
WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRangeEc2cRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRangeEc2c(ctx _context.Context, driveItemId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRangeEc2cRequest {
	return ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRangeEc2cExecute(r ApiWorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookTablesWorkbookTableWorksheetUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/tables/{workbookTable-id}/worksheet/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetCellRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	row int32
	column int32
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetCellExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetCellRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetCell(ctx _context.Context, driveItemId string, workbookWorksheetId string, row int32, column int32) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetCellRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetCellRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetCellExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsCount(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsCountRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsCountExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	name string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemRequest) Execute() (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItem Invoke function item

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param name Usage: name={name}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItem(ctx _context.Context, driveItemId string, workbookWorksheetId string, name string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		name: name,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookChart
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemRequest) (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItem")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/microsoft.graph.item(name='{name}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"name"+"}", _neturl.PathEscape(parameterToString(r.name, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemAt(ctx _context.Context, driveItemId string, workbookWorksheetId string, index int32) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookChart
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemAtExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemAtRequest) (AnyOfmicrosoftGraphWorkbookChart, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookChart
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage6d93Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	width int32
	height int32
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage6d93Request) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage6d93Execute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage6d93 Invoke function image

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param width Usage: width={width}
 @param height Usage: height={height}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage6d93Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage6d93(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, width int32, height int32) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage6d93Request {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage6d93Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		width: width,
		height: height,
	}
}

// Execute executes the request
//  @return string
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage6d93Execute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage6d93Request) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage6d93")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/microsoft.graph.image(width={width},height={height})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"width"+"}", _neturl.PathEscape(parameterToString(r.width, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"height"+"}", _neturl.PathEscape(parameterToString(r.height, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.width < -2147483648 {
		return localVarReturnValue, nil, reportError("width must be greater than -2147483648")
	}
	if r.width > 2147483647 {
		return localVarReturnValue, nil, reportError("width must be less than 2147483647")
	}
	if r.height < -2147483648 {
		return localVarReturnValue, nil, reportError("height must be greater than -2147483648")
	}
	if r.height > 2147483647 {
		return localVarReturnValue, nil, reportError("height must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9c4fRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	width int32
	height int32
	fittingMode string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9c4fRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9c4fExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9c4f Invoke function image

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param width Usage: width={width}
 @param height Usage: height={height}
 @param fittingMode Usage: fittingMode={fittingMode}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9c4fRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9c4f(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, width int32, height int32, fittingMode string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9c4fRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9c4fRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		width: width,
		height: height,
		fittingMode: fittingMode,
	}
}

// Execute executes the request
//  @return string
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9c4fExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9c4fRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9c4f")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/microsoft.graph.image(width={width},height={height},fittingMode='{fittingMode}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"width"+"}", _neturl.PathEscape(parameterToString(r.width, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"height"+"}", _neturl.PathEscape(parameterToString(r.height, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fittingMode"+"}", _neturl.PathEscape(parameterToString(r.fittingMode, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.width < -2147483648 {
		return localVarReturnValue, nil, reportError("width must be greater than -2147483648")
	}
	if r.width > 2147483647 {
		return localVarReturnValue, nil, reportError("width must be less than 2147483647")
	}
	if r.height < -2147483648 {
		return localVarReturnValue, nil, reportError("height must be greater than -2147483648")
	}
	if r.height > 2147483647 {
		return localVarReturnValue, nil, reportError("height must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9d93Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9d93Request) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9d93Execute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9d93 Invoke function image

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9d93Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9d93(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9d93Request {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9d93Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return string
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9d93Execute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9d93Request) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImage9d93")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/microsoft.graph.image()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImageE058Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	width int32
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImageE058Request) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImageE058Execute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImageE058 Invoke function image

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param width Usage: width={width}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImageE058Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImageE058(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, width int32) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImageE058Request {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImageE058Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		width: width,
	}
}

// Execute executes the request
//  @return string
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImageE058Execute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImageE058Request) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartImageE058")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/microsoft.graph.image(width={width})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"width"+"}", _neturl.PathEscape(parameterToString(r.width, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.width < -2147483648 {
		return localVarReturnValue, nil, reportError("width must be greater than -2147483648")
	}
	if r.width > 2147483647 {
		return localVarReturnValue, nil, reportError("width must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesCount(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesCountRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesCountExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesItemAt(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, index int32) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookChartSeries
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesItemAtExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesItemAtRequest) (AnyOfmicrosoftGraphWorkbookChartSeries, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookChartSeries
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCount(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	workbookChartSeriesId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param workbookChartSeriesId key: id of workbookChartSeries
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAt(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, workbookChartSeriesId string, index int32) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		workbookChartSeriesId: workbookChartSeriesId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookChartPoint
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAtRequest) (AnyOfmicrosoftGraphWorkbookChartPoint, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookChartPoint
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartSeriesWorkbookChartSeriesPointsItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/series/{workbookChartSeries-id}/points/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChartSeries-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartSeriesId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetCellRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	row int32
	column int32
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetCellExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetCellRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetCell(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, row int32, column int32) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetCellRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetCellRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetCellExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/worksheet/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange0e4aRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange0e4aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange0e4aExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange0e4a Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange0e4aRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange0e4a(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange0e4aRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange0e4aRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange0e4aExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange0e4aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange0e4a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/worksheet/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange7d76Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	address string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange7d76Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange7d76Execute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange7d76 Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param address Usage: address={address}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange7d76Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange7d76(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, address string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange7d76Request {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange7d76Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		address: address,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange7d76Execute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange7d76Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetRange7d76")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/worksheet/microsoft.graph.range(address='{address}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
	valuesOnly bool
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRange206dExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRange206d(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string, valuesOnly bool) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRange206dExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/worksheet/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookChartId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookChartId key: id of workbookChart
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRangeEc2c(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookChartId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookChartId: workbookChartId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetChartsWorkbookChartWorksheetUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/charts/{workbookChart-id}/worksheet/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookChart-id"+"}", _neturl.PathEscape(parameterToString(r.workbookChartId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookNamedItemId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemRange(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemRangeRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemRangeExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names/{workbookNamedItem-id}/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetCellRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookNamedItemId string
	row int32
	column int32
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetCellExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookNamedItemId key: id of workbookNamedItem
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetCellRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetCell(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookNamedItemId string, row int32, column int32) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetCellRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetCellRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookNamedItemId: workbookNamedItemId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetCellExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names/{workbookNamedItem-id}/worksheet/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange0e4aRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookNamedItemId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange0e4aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange0e4aExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange0e4a Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange0e4aRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange0e4a(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange0e4aRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange0e4aRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange0e4aExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange0e4aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange0e4a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names/{workbookNamedItem-id}/worksheet/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange7d76Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookNamedItemId string
	address string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange7d76Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange7d76Execute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange7d76 Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookNamedItemId key: id of workbookNamedItem
 @param address Usage: address={address}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange7d76Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange7d76(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookNamedItemId string, address string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange7d76Request {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange7d76Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookNamedItemId: workbookNamedItemId,
		address: address,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange7d76Execute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange7d76Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetRange7d76")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names/{workbookNamedItem-id}/worksheet/microsoft.graph.range(address='{address}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookNamedItemId string
	valuesOnly bool
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookNamedItemId key: id of workbookNamedItem
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRange206d(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookNamedItemId string, valuesOnly bool) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookNamedItemId: workbookNamedItemId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names/{workbookNamedItem-id}/worksheet/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookNamedItemId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookNamedItemId key: id of workbookNamedItem
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2c(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookNamedItemId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookNamedItemId: workbookNamedItemId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetNamesWorkbookNamedItemWorksheetUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/names/{workbookNamedItem-id}/worksheet/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookNamedItem-id"+"}", _neturl.PathEscape(parameterToString(r.workbookNamedItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookPivotTableId string
	row int32
	column int32
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetCellExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookPivotTableId key: id of workbookPivotTable
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetCell(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookPivotTableId string, row int32, column int32) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookPivotTableId: workbookPivotTableId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetCellExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/pivotTables/{workbookPivotTable-id}/worksheet/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookPivotTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4a Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4a(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookPivotTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange0e4a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/pivotTables/{workbookPivotTable-id}/worksheet/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookPivotTableId string
	address string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Execute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76 Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookPivotTableId key: id of workbookPivotTable
 @param address Usage: address={address}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookPivotTableId string, address string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookPivotTableId: workbookPivotTableId,
		address: address,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Execute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetRange7d76")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/pivotTables/{workbookPivotTable-id}/worksheet/microsoft.graph.range(address='{address}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookPivotTableId string
	valuesOnly bool
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookPivotTableId key: id of workbookPivotTable
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206d(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookPivotTableId string, valuesOnly bool) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookPivotTableId: workbookPivotTableId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/pivotTables/{workbookPivotTable-id}/worksheet/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookPivotTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookPivotTableId key: id of workbookPivotTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2c(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookPivotTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookPivotTableId: workbookPivotTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetPivotTablesWorkbookPivotTableWorksheetUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/pivotTables/{workbookPivotTable-id}/worksheet/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookPivotTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookPivotTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange0e4aRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange0e4aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange0e4aExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange0e4a Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange0e4aRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange0e4a(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange0e4aRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange0e4aRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange0e4aExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange0e4aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange0e4a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange7d76Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	address string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange7d76Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange7d76Execute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange7d76 Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param address Usage: address={address}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange7d76Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange7d76(ctx _context.Context, driveItemId string, workbookWorksheetId string, address string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange7d76Request {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange7d76Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		address: address,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange7d76Execute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange7d76Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetRange7d76")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/microsoft.graph.range(address='{address}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesCount(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesCountRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesCountExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesItemAt(ctx _context.Context, driveItemId string, workbookWorksheetId string, index int32) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTable
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesItemAtExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesItemAtRequest) (AnyOfmicrosoftGraphWorkbookTable, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTable
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsCount(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsCountRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsCountExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsItemAt(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, index int32) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTableColumn
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsItemAtExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsItemAtRequest) (AnyOfmicrosoftGraphWorkbookTableColumn, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTableColumn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange Invoke function dataBodyRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnDataBodyRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/microsoft.graph.dataBodyRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRange Invoke function headerRowRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRange(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnHeaderRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/microsoft.graph.headerRowRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRange(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableColumnId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRange Invoke function totalRowRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableColumnId key: id of workbookTableColumn
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRange(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableColumnId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableColumnId: workbookTableColumnId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableColumnsWorkbookTableColumnTotalRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/columns/{workbookTableColumn-id}/microsoft.graph.totalRowRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableColumn-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableColumnId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableDataBodyRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableDataBodyRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableDataBodyRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableDataBodyRange Invoke function dataBodyRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableDataBodyRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableDataBodyRange(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableDataBodyRangeRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableDataBodyRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableDataBodyRangeExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableDataBodyRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableDataBodyRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/microsoft.graph.dataBodyRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableHeaderRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableHeaderRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableHeaderRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableHeaderRowRange Invoke function headerRowRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableHeaderRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableHeaderRowRange(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableHeaderRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableHeaderRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableHeaderRowRangeExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableHeaderRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableHeaderRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/microsoft.graph.headerRowRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRange(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRangeRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRangeExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsCountRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsCountRequest) Execute() (int32, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsCountExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsCount Invoke function count

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsCountRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsCount(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsCountRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsCountRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return int32
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsCountExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsCountRequest) (int32, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  int32
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsCount")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/rows/microsoft.graph.count()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsItemAtRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	index int32
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsItemAtRequest) Execute() (AnyOfmicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsItemAtExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsItemAt Invoke function itemAt

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param index Usage: index={index}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsItemAtRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsItemAt(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, index int32) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsItemAtRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsItemAtRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		index: index,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookTableRow
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsItemAtExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsItemAtRequest) (AnyOfmicrosoftGraphWorkbookTableRow, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookTableRow
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsItemAt")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/rows/microsoft.graph.itemAt(index={index})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.index < -2147483648 {
		return localVarReturnValue, nil, reportError("index must be greater than -2147483648")
	}
	if r.index > 2147483647 {
		return localVarReturnValue, nil, reportError("index must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	workbookTableRowId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsWorkbookTableRowRange Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param workbookTableRowId key: id of workbookTableRow
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsWorkbookTableRowRange(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, workbookTableRowId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		workbookTableRowId: workbookTableRowId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsWorkbookTableRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableRowsWorkbookTableRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/rows/{workbookTableRow-id}/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTableRow-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableRowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableTotalRowRangeRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableTotalRowRangeRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableTotalRowRangeExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableTotalRowRange Invoke function totalRowRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableTotalRowRangeRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableTotalRowRange(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableTotalRowRangeRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableTotalRowRangeRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableTotalRowRangeExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableTotalRowRangeRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableTotalRowRange")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/microsoft.graph.totalRowRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetCellRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	row int32
	column int32
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetCellRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetCellExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetCell Invoke function cell

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param row Usage: row={row}
 @param column Usage: column={column}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetCellRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetCell(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, row int32, column int32) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetCellRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetCellRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		row: row,
		column: column,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetCellExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetCellRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetCell")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/worksheet/microsoft.graph.cell(row={row},column={column})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"row"+"}", _neturl.PathEscape(parameterToString(r.row, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"column"+"}", _neturl.PathEscape(parameterToString(r.column, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.row < -2147483648 {
		return localVarReturnValue, nil, reportError("row must be greater than -2147483648")
	}
	if r.row > 2147483647 {
		return localVarReturnValue, nil, reportError("row must be less than 2147483647")
	}
	if r.column < -2147483648 {
		return localVarReturnValue, nil, reportError("column must be greater than -2147483648")
	}
	if r.column > 2147483647 {
		return localVarReturnValue, nil, reportError("column must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange0e4aRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange0e4aRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange0e4aExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange0e4a Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange0e4aRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange0e4a(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange0e4aRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange0e4aRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange0e4aExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange0e4aRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange0e4a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/worksheet/microsoft.graph.range()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange7d76Request struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	address string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange7d76Request) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange7d76Execute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange7d76 Invoke function range

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param address Usage: address={address}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange7d76Request
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange7d76(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, address string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange7d76Request {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange7d76Request{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		address: address,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange7d76Execute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange7d76Request) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetRange7d76")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/worksheet/microsoft.graph.range(address='{address}')"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"address"+"}", _neturl.PathEscape(parameterToString(r.address, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
	valuesOnly bool
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRange206dExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRange206dRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRange206d(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string, valuesOnly bool) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRange206dRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRange206dExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/worksheet/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	workbookTableId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param workbookTableId key: id of workbookTable
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRangeEc2c(ctx _context.Context, driveItemId string, workbookWorksheetId string, workbookTableId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		workbookTableId: workbookTableId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetTablesWorkbookTableWorksheetUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/tables/{workbookTable-id}/worksheet/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookTable-id"+"}", _neturl.PathEscape(parameterToString(r.workbookTableId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRange206dRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
	valuesOnly bool
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRange206dRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRange206dExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRange206d Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @param valuesOnly Usage: valuesOnly={valuesOnly}
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRange206dRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRange206d(ctx _context.Context, driveItemId string, workbookWorksheetId string, valuesOnly bool) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRange206dRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRange206dRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
		valuesOnly: valuesOnly,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRange206dExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRange206dRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRange206d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/microsoft.graph.usedRange(valuesOnly={valuesOnly})"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"valuesOnly"+"}", _neturl.PathEscape(parameterToString(r.valuesOnly, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRangeEc2cRequest struct {
	ctx _context.Context
	ApiService *WorkbooksFunctionsApiService
	driveItemId string
	workbookWorksheetId string
}


func (r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRangeEc2cRequest) Execute() (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	return r.ApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRangeEc2cExecute(r)
}

/*
WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRangeEc2c Invoke function usedRange

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param driveItemId key: id of driveItem
 @param workbookWorksheetId key: id of workbookWorksheet
 @return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRangeEc2cRequest
*/
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRangeEc2c(ctx _context.Context, driveItemId string, workbookWorksheetId string) ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRangeEc2cRequest {
	return ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRangeEc2cRequest{
		ApiService: a,
		ctx: ctx,
		driveItemId: driveItemId,
		workbookWorksheetId: workbookWorksheetId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphWorkbookRange
func (a *WorkbooksFunctionsApiService) WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRangeEc2cExecute(r ApiWorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRangeEc2cRequest) (AnyOfmicrosoftGraphWorkbookRange, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphWorkbookRange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkbooksFunctionsApiService.WorkbooksDriveItemWorkbookWorksheetsWorkbookWorksheetUsedRangeEc2c")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/workbooks/{driveItem-id}/workbook/worksheets/{workbookWorksheet-id}/microsoft.graph.usedRange()"
	localVarPath = strings.Replace(localVarPath, "{"+"driveItem-id"+"}", _neturl.PathEscape(parameterToString(r.driveItemId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"workbookWorksheet-id"+"}", _neturl.PathEscape(parameterToString(r.workbookWorksheetId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
