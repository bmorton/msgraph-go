/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphClonableTeamParts the model 'MicrosoftGraphClonableTeamParts'
type MicrosoftGraphClonableTeamParts string

// List of microsoft.graph.clonableTeamParts
const (
	APPS MicrosoftGraphClonableTeamParts = "apps"
	TABS MicrosoftGraphClonableTeamParts = "tabs"
	SETTINGS MicrosoftGraphClonableTeamParts = "settings"
	CHANNELS MicrosoftGraphClonableTeamParts = "channels"
	MEMBERS MicrosoftGraphClonableTeamParts = "members"
)

// All allowed values of MicrosoftGraphClonableTeamParts enum
var AllowedMicrosoftGraphClonableTeamPartsEnumValues = []MicrosoftGraphClonableTeamParts{
	"apps",
	"tabs",
	"settings",
	"channels",
	"members",
}

func (v *MicrosoftGraphClonableTeamParts) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphClonableTeamParts(value)
	for _, existing := range AllowedMicrosoftGraphClonableTeamPartsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphClonableTeamParts", value)
}

// NewMicrosoftGraphClonableTeamPartsFromValue returns a pointer to a valid MicrosoftGraphClonableTeamParts
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphClonableTeamPartsFromValue(v string) (*MicrosoftGraphClonableTeamParts, error) {
	ev := MicrosoftGraphClonableTeamParts(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphClonableTeamParts: valid values are %v", v, AllowedMicrosoftGraphClonableTeamPartsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphClonableTeamParts) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphClonableTeamPartsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.clonableTeamParts value
func (v MicrosoftGraphClonableTeamParts) Ptr() *MicrosoftGraphClonableTeamParts {
	return &v
}

type NullableMicrosoftGraphClonableTeamParts struct {
	value *MicrosoftGraphClonableTeamParts
	isSet bool
}

func (v NullableMicrosoftGraphClonableTeamParts) Get() *MicrosoftGraphClonableTeamParts {
	return v.value
}

func (v *NullableMicrosoftGraphClonableTeamParts) Set(val *MicrosoftGraphClonableTeamParts) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphClonableTeamParts) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphClonableTeamParts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphClonableTeamParts(val *MicrosoftGraphClonableTeamParts) *NullableMicrosoftGraphClonableTeamParts {
	return &NullableMicrosoftGraphClonableTeamParts{value: val, isSet: true}
}

func (v NullableMicrosoftGraphClonableTeamParts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphClonableTeamParts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

