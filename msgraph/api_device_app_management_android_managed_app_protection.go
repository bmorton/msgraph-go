/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceAppManagementAndroidManagedAppProtectionApiService DeviceAppManagementAndroidManagedAppProtectionApi service
type DeviceAppManagementAndroidManagedAppProtectionApiService service

type ApiDeviceAppManagementAndroidManagedAppProtectionsCreateAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementAndroidManagedAppProtectionApiService
	androidManagedAppProtectionId string
	microsoftGraphManagedMobileApp *MicrosoftGraphManagedMobileApp
}

// New navigation property
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsCreateAppsRequest) MicrosoftGraphManagedMobileApp(microsoftGraphManagedMobileApp MicrosoftGraphManagedMobileApp) ApiDeviceAppManagementAndroidManagedAppProtectionsCreateAppsRequest {
	r.microsoftGraphManagedMobileApp = &microsoftGraphManagedMobileApp
	return r
}

func (r ApiDeviceAppManagementAndroidManagedAppProtectionsCreateAppsRequest) Execute() (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementAndroidManagedAppProtectionsCreateAppsExecute(r)
}

/*
DeviceAppManagementAndroidManagedAppProtectionsCreateApps Create new navigation property to apps for deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param androidManagedAppProtectionId key: id of androidManagedAppProtection
 @return ApiDeviceAppManagementAndroidManagedAppProtectionsCreateAppsRequest
*/
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsCreateApps(ctx _context.Context, androidManagedAppProtectionId string) ApiDeviceAppManagementAndroidManagedAppProtectionsCreateAppsRequest {
	return ApiDeviceAppManagementAndroidManagedAppProtectionsCreateAppsRequest{
		ApiService: a,
		ctx: ctx,
		androidManagedAppProtectionId: androidManagedAppProtectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedMobileApp
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsCreateAppsExecute(r ApiDeviceAppManagementAndroidManagedAppProtectionsCreateAppsRequest) (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedMobileApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementAndroidManagedAppProtectionApiService.DeviceAppManagementAndroidManagedAppProtectionsCreateApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}/apps"
	localVarPath = strings.Replace(localVarPath, "{"+"androidManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.androidManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedMobileApp == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedMobileApp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedMobileApp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementAndroidManagedAppProtectionApiService
	androidManagedAppProtectionId string
	managedMobileAppId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteAppsRequest) IfMatch(ifMatch string) ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteAppsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementAndroidManagedAppProtectionsDeleteAppsExecute(r)
}

/*
DeviceAppManagementAndroidManagedAppProtectionsDeleteApps Delete navigation property apps for deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param androidManagedAppProtectionId key: id of androidManagedAppProtection
 @param managedMobileAppId key: id of managedMobileApp
 @return ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteAppsRequest
*/
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsDeleteApps(ctx _context.Context, androidManagedAppProtectionId string, managedMobileAppId string) ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteAppsRequest {
	return ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteAppsRequest{
		ApiService: a,
		ctx: ctx,
		androidManagedAppProtectionId: androidManagedAppProtectionId,
		managedMobileAppId: managedMobileAppId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsDeleteAppsExecute(r ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementAndroidManagedAppProtectionApiService.DeviceAppManagementAndroidManagedAppProtectionsDeleteApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}/apps/{managedMobileApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"androidManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.androidManagedAppProtectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedMobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.managedMobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteDeploymentSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementAndroidManagedAppProtectionApiService
	androidManagedAppProtectionId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteDeploymentSummaryRequest) IfMatch(ifMatch string) ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteDeploymentSummaryRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteDeploymentSummaryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementAndroidManagedAppProtectionsDeleteDeploymentSummaryExecute(r)
}

/*
DeviceAppManagementAndroidManagedAppProtectionsDeleteDeploymentSummary Delete navigation property deploymentSummary for deviceAppManagement

Navigation property to deployment summary of the configuration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param androidManagedAppProtectionId key: id of androidManagedAppProtection
 @return ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteDeploymentSummaryRequest
*/
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsDeleteDeploymentSummary(ctx _context.Context, androidManagedAppProtectionId string) ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteDeploymentSummaryRequest {
	return ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteDeploymentSummaryRequest{
		ApiService: a,
		ctx: ctx,
		androidManagedAppProtectionId: androidManagedAppProtectionId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsDeleteDeploymentSummaryExecute(r ApiDeviceAppManagementAndroidManagedAppProtectionsDeleteDeploymentSummaryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementAndroidManagedAppProtectionApiService.DeviceAppManagementAndroidManagedAppProtectionsDeleteDeploymentSummary")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}/deploymentSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"androidManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.androidManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementAndroidManagedAppProtectionsGetAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementAndroidManagedAppProtectionApiService
	androidManagedAppProtectionId string
	managedMobileAppId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsGetAppsRequest) Select_(select_ []string) ApiDeviceAppManagementAndroidManagedAppProtectionsGetAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsGetAppsRequest) Expand(expand []string) ApiDeviceAppManagementAndroidManagedAppProtectionsGetAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementAndroidManagedAppProtectionsGetAppsRequest) Execute() (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementAndroidManagedAppProtectionsGetAppsExecute(r)
}

/*
DeviceAppManagementAndroidManagedAppProtectionsGetApps Get apps from deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param androidManagedAppProtectionId key: id of androidManagedAppProtection
 @param managedMobileAppId key: id of managedMobileApp
 @return ApiDeviceAppManagementAndroidManagedAppProtectionsGetAppsRequest
*/
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsGetApps(ctx _context.Context, androidManagedAppProtectionId string, managedMobileAppId string) ApiDeviceAppManagementAndroidManagedAppProtectionsGetAppsRequest {
	return ApiDeviceAppManagementAndroidManagedAppProtectionsGetAppsRequest{
		ApiService: a,
		ctx: ctx,
		androidManagedAppProtectionId: androidManagedAppProtectionId,
		managedMobileAppId: managedMobileAppId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedMobileApp
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsGetAppsExecute(r ApiDeviceAppManagementAndroidManagedAppProtectionsGetAppsRequest) (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedMobileApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementAndroidManagedAppProtectionApiService.DeviceAppManagementAndroidManagedAppProtectionsGetApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}/apps/{managedMobileApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"androidManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.androidManagedAppProtectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedMobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.managedMobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementAndroidManagedAppProtectionsGetDeploymentSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementAndroidManagedAppProtectionApiService
	androidManagedAppProtectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsGetDeploymentSummaryRequest) Select_(select_ []string) ApiDeviceAppManagementAndroidManagedAppProtectionsGetDeploymentSummaryRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsGetDeploymentSummaryRequest) Expand(expand []string) ApiDeviceAppManagementAndroidManagedAppProtectionsGetDeploymentSummaryRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementAndroidManagedAppProtectionsGetDeploymentSummaryRequest) Execute() (MicrosoftGraphManagedAppPolicyDeploymentSummary, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementAndroidManagedAppProtectionsGetDeploymentSummaryExecute(r)
}

/*
DeviceAppManagementAndroidManagedAppProtectionsGetDeploymentSummary Get deploymentSummary from deviceAppManagement

Navigation property to deployment summary of the configuration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param androidManagedAppProtectionId key: id of androidManagedAppProtection
 @return ApiDeviceAppManagementAndroidManagedAppProtectionsGetDeploymentSummaryRequest
*/
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsGetDeploymentSummary(ctx _context.Context, androidManagedAppProtectionId string) ApiDeviceAppManagementAndroidManagedAppProtectionsGetDeploymentSummaryRequest {
	return ApiDeviceAppManagementAndroidManagedAppProtectionsGetDeploymentSummaryRequest{
		ApiService: a,
		ctx: ctx,
		androidManagedAppProtectionId: androidManagedAppProtectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedAppPolicyDeploymentSummary
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsGetDeploymentSummaryExecute(r ApiDeviceAppManagementAndroidManagedAppProtectionsGetDeploymentSummaryRequest) (MicrosoftGraphManagedAppPolicyDeploymentSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedAppPolicyDeploymentSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementAndroidManagedAppProtectionApiService.DeviceAppManagementAndroidManagedAppProtectionsGetDeploymentSummary")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}/deploymentSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"androidManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.androidManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementAndroidManagedAppProtectionApiService
	androidManagedAppProtectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest) Top(top int32) ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest) Skip(skip int32) ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest) Search(search string) ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest) Filter(filter string) ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest) Count(count bool) ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest) Orderby(orderby []string) ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest) Select_(select_ []string) ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest) Expand(expand []string) ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest) Execute() (CollectionOfManagedMobileApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementAndroidManagedAppProtectionsListAppsExecute(r)
}

/*
DeviceAppManagementAndroidManagedAppProtectionsListApps Get apps from deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param androidManagedAppProtectionId key: id of androidManagedAppProtection
 @return ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest
*/
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsListApps(ctx _context.Context, androidManagedAppProtectionId string) ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest {
	return ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest{
		ApiService: a,
		ctx: ctx,
		androidManagedAppProtectionId: androidManagedAppProtectionId,
	}
}

// Execute executes the request
//  @return CollectionOfManagedMobileApp
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsListAppsExecute(r ApiDeviceAppManagementAndroidManagedAppProtectionsListAppsRequest) (CollectionOfManagedMobileApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedMobileApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementAndroidManagedAppProtectionApiService.DeviceAppManagementAndroidManagedAppProtectionsListApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}/apps"
	localVarPath = strings.Replace(localVarPath, "{"+"androidManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.androidManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementAndroidManagedAppProtectionApiService
	androidManagedAppProtectionId string
	managedMobileAppId string
	microsoftGraphManagedMobileApp *MicrosoftGraphManagedMobileApp
}

// New navigation property values
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateAppsRequest) MicrosoftGraphManagedMobileApp(microsoftGraphManagedMobileApp MicrosoftGraphManagedMobileApp) ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateAppsRequest {
	r.microsoftGraphManagedMobileApp = &microsoftGraphManagedMobileApp
	return r
}

func (r ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementAndroidManagedAppProtectionsUpdateAppsExecute(r)
}

/*
DeviceAppManagementAndroidManagedAppProtectionsUpdateApps Update the navigation property apps in deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param androidManagedAppProtectionId key: id of androidManagedAppProtection
 @param managedMobileAppId key: id of managedMobileApp
 @return ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateAppsRequest
*/
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsUpdateApps(ctx _context.Context, androidManagedAppProtectionId string, managedMobileAppId string) ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateAppsRequest {
	return ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateAppsRequest{
		ApiService: a,
		ctx: ctx,
		androidManagedAppProtectionId: androidManagedAppProtectionId,
		managedMobileAppId: managedMobileAppId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsUpdateAppsExecute(r ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementAndroidManagedAppProtectionApiService.DeviceAppManagementAndroidManagedAppProtectionsUpdateApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}/apps/{managedMobileApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"androidManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.androidManagedAppProtectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedMobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.managedMobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedMobileApp == nil {
		return nil, reportError("microsoftGraphManagedMobileApp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedMobileApp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateDeploymentSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementAndroidManagedAppProtectionApiService
	androidManagedAppProtectionId string
	microsoftGraphManagedAppPolicyDeploymentSummary *MicrosoftGraphManagedAppPolicyDeploymentSummary
}

// New navigation property values
func (r ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateDeploymentSummaryRequest) MicrosoftGraphManagedAppPolicyDeploymentSummary(microsoftGraphManagedAppPolicyDeploymentSummary MicrosoftGraphManagedAppPolicyDeploymentSummary) ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateDeploymentSummaryRequest {
	r.microsoftGraphManagedAppPolicyDeploymentSummary = &microsoftGraphManagedAppPolicyDeploymentSummary
	return r
}

func (r ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateDeploymentSummaryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementAndroidManagedAppProtectionsUpdateDeploymentSummaryExecute(r)
}

/*
DeviceAppManagementAndroidManagedAppProtectionsUpdateDeploymentSummary Update the navigation property deploymentSummary in deviceAppManagement

Navigation property to deployment summary of the configuration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param androidManagedAppProtectionId key: id of androidManagedAppProtection
 @return ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateDeploymentSummaryRequest
*/
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsUpdateDeploymentSummary(ctx _context.Context, androidManagedAppProtectionId string) ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateDeploymentSummaryRequest {
	return ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateDeploymentSummaryRequest{
		ApiService: a,
		ctx: ctx,
		androidManagedAppProtectionId: androidManagedAppProtectionId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementAndroidManagedAppProtectionsUpdateDeploymentSummaryExecute(r ApiDeviceAppManagementAndroidManagedAppProtectionsUpdateDeploymentSummaryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementAndroidManagedAppProtectionApiService.DeviceAppManagementAndroidManagedAppProtectionsUpdateDeploymentSummary")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}/deploymentSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"androidManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.androidManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedAppPolicyDeploymentSummary == nil {
		return nil, reportError("microsoftGraphManagedAppPolicyDeploymentSummary is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedAppPolicyDeploymentSummary
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementCreateAndroidManagedAppProtectionsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementAndroidManagedAppProtectionApiService
	microsoftGraphAndroidManagedAppProtection *MicrosoftGraphAndroidManagedAppProtection
}

// New navigation property
func (r ApiDeviceAppManagementCreateAndroidManagedAppProtectionsRequest) MicrosoftGraphAndroidManagedAppProtection(microsoftGraphAndroidManagedAppProtection MicrosoftGraphAndroidManagedAppProtection) ApiDeviceAppManagementCreateAndroidManagedAppProtectionsRequest {
	r.microsoftGraphAndroidManagedAppProtection = &microsoftGraphAndroidManagedAppProtection
	return r
}

func (r ApiDeviceAppManagementCreateAndroidManagedAppProtectionsRequest) Execute() (MicrosoftGraphAndroidManagedAppProtection, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementCreateAndroidManagedAppProtectionsExecute(r)
}

/*
DeviceAppManagementCreateAndroidManagedAppProtections Create new navigation property to androidManagedAppProtections for deviceAppManagement

Android managed app policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementCreateAndroidManagedAppProtectionsRequest
*/
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementCreateAndroidManagedAppProtections(ctx _context.Context) ApiDeviceAppManagementCreateAndroidManagedAppProtectionsRequest {
	return ApiDeviceAppManagementCreateAndroidManagedAppProtectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAndroidManagedAppProtection
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementCreateAndroidManagedAppProtectionsExecute(r ApiDeviceAppManagementCreateAndroidManagedAppProtectionsRequest) (MicrosoftGraphAndroidManagedAppProtection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAndroidManagedAppProtection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementAndroidManagedAppProtectionApiService.DeviceAppManagementCreateAndroidManagedAppProtections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/androidManagedAppProtections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAndroidManagedAppProtection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAndroidManagedAppProtection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAndroidManagedAppProtection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDeleteAndroidManagedAppProtectionsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementAndroidManagedAppProtectionApiService
	androidManagedAppProtectionId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementDeleteAndroidManagedAppProtectionsRequest) IfMatch(ifMatch string) ApiDeviceAppManagementDeleteAndroidManagedAppProtectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementDeleteAndroidManagedAppProtectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDeleteAndroidManagedAppProtectionsExecute(r)
}

/*
DeviceAppManagementDeleteAndroidManagedAppProtections Delete navigation property androidManagedAppProtections for deviceAppManagement

Android managed app policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param androidManagedAppProtectionId key: id of androidManagedAppProtection
 @return ApiDeviceAppManagementDeleteAndroidManagedAppProtectionsRequest
*/
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementDeleteAndroidManagedAppProtections(ctx _context.Context, androidManagedAppProtectionId string) ApiDeviceAppManagementDeleteAndroidManagedAppProtectionsRequest {
	return ApiDeviceAppManagementDeleteAndroidManagedAppProtectionsRequest{
		ApiService: a,
		ctx: ctx,
		androidManagedAppProtectionId: androidManagedAppProtectionId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementDeleteAndroidManagedAppProtectionsExecute(r ApiDeviceAppManagementDeleteAndroidManagedAppProtectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementAndroidManagedAppProtectionApiService.DeviceAppManagementDeleteAndroidManagedAppProtections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"androidManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.androidManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementGetAndroidManagedAppProtectionsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementAndroidManagedAppProtectionApiService
	androidManagedAppProtectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementGetAndroidManagedAppProtectionsRequest) Select_(select_ []string) ApiDeviceAppManagementGetAndroidManagedAppProtectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementGetAndroidManagedAppProtectionsRequest) Expand(expand []string) ApiDeviceAppManagementGetAndroidManagedAppProtectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementGetAndroidManagedAppProtectionsRequest) Execute() (MicrosoftGraphAndroidManagedAppProtection, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementGetAndroidManagedAppProtectionsExecute(r)
}

/*
DeviceAppManagementGetAndroidManagedAppProtections Get androidManagedAppProtections from deviceAppManagement

Android managed app policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param androidManagedAppProtectionId key: id of androidManagedAppProtection
 @return ApiDeviceAppManagementGetAndroidManagedAppProtectionsRequest
*/
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementGetAndroidManagedAppProtections(ctx _context.Context, androidManagedAppProtectionId string) ApiDeviceAppManagementGetAndroidManagedAppProtectionsRequest {
	return ApiDeviceAppManagementGetAndroidManagedAppProtectionsRequest{
		ApiService: a,
		ctx: ctx,
		androidManagedAppProtectionId: androidManagedAppProtectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAndroidManagedAppProtection
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementGetAndroidManagedAppProtectionsExecute(r ApiDeviceAppManagementGetAndroidManagedAppProtectionsRequest) (MicrosoftGraphAndroidManagedAppProtection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAndroidManagedAppProtection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementAndroidManagedAppProtectionApiService.DeviceAppManagementGetAndroidManagedAppProtections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"androidManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.androidManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementAndroidManagedAppProtectionApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest) Top(top int32) ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest) Skip(skip int32) ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest) Search(search string) ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest) Filter(filter string) ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest) Count(count bool) ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest) Orderby(orderby []string) ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest) Select_(select_ []string) ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest) Expand(expand []string) ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest) Execute() (CollectionOfAndroidManagedAppProtection, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementListAndroidManagedAppProtectionsExecute(r)
}

/*
DeviceAppManagementListAndroidManagedAppProtections Get androidManagedAppProtections from deviceAppManagement

Android managed app policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest
*/
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementListAndroidManagedAppProtections(ctx _context.Context) ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest {
	return ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfAndroidManagedAppProtection
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementListAndroidManagedAppProtectionsExecute(r ApiDeviceAppManagementListAndroidManagedAppProtectionsRequest) (CollectionOfAndroidManagedAppProtection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAndroidManagedAppProtection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementAndroidManagedAppProtectionApiService.DeviceAppManagementListAndroidManagedAppProtections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/androidManagedAppProtections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementUpdateAndroidManagedAppProtectionsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementAndroidManagedAppProtectionApiService
	androidManagedAppProtectionId string
	microsoftGraphAndroidManagedAppProtection *MicrosoftGraphAndroidManagedAppProtection
}

// New navigation property values
func (r ApiDeviceAppManagementUpdateAndroidManagedAppProtectionsRequest) MicrosoftGraphAndroidManagedAppProtection(microsoftGraphAndroidManagedAppProtection MicrosoftGraphAndroidManagedAppProtection) ApiDeviceAppManagementUpdateAndroidManagedAppProtectionsRequest {
	r.microsoftGraphAndroidManagedAppProtection = &microsoftGraphAndroidManagedAppProtection
	return r
}

func (r ApiDeviceAppManagementUpdateAndroidManagedAppProtectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementUpdateAndroidManagedAppProtectionsExecute(r)
}

/*
DeviceAppManagementUpdateAndroidManagedAppProtections Update the navigation property androidManagedAppProtections in deviceAppManagement

Android managed app policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param androidManagedAppProtectionId key: id of androidManagedAppProtection
 @return ApiDeviceAppManagementUpdateAndroidManagedAppProtectionsRequest
*/
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementUpdateAndroidManagedAppProtections(ctx _context.Context, androidManagedAppProtectionId string) ApiDeviceAppManagementUpdateAndroidManagedAppProtectionsRequest {
	return ApiDeviceAppManagementUpdateAndroidManagedAppProtectionsRequest{
		ApiService: a,
		ctx: ctx,
		androidManagedAppProtectionId: androidManagedAppProtectionId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementAndroidManagedAppProtectionApiService) DeviceAppManagementUpdateAndroidManagedAppProtectionsExecute(r ApiDeviceAppManagementUpdateAndroidManagedAppProtectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementAndroidManagedAppProtectionApiService.DeviceAppManagementUpdateAndroidManagedAppProtections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/androidManagedAppProtections/{androidManagedAppProtection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"androidManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.androidManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAndroidManagedAppProtection == nil {
		return nil, reportError("microsoftGraphAndroidManagedAppProtection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAndroidManagedAppProtection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
