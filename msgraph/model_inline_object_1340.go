/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject1340 struct for InlineObject1340
type InlineObject1340 struct {
	Number AnyOfobject `json:"number,omitempty"`
	Decimals AnyOfobject `json:"decimals,omitempty"`
	NoCommas AnyOfobject `json:"noCommas,omitempty"`
}

// NewInlineObject1340 instantiates a new InlineObject1340 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1340() *InlineObject1340 {
	this := InlineObject1340{}
	return &this
}

// NewInlineObject1340WithDefaults instantiates a new InlineObject1340 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1340WithDefaults() *InlineObject1340 {
	this := InlineObject1340{}
	return &this
}

// GetNumber returns the Number field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1340) GetNumber() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Number
}

// GetNumberOk returns a tuple with the Number field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1340) GetNumberOk() (*AnyOfobject, bool) {
	if o == nil || o.Number == nil {
		return nil, false
	}
	return &o.Number, true
}

// HasNumber returns a boolean if a field has been set.
func (o *InlineObject1340) HasNumber() bool {
	if o != nil && o.Number != nil {
		return true
	}

	return false
}

// SetNumber gets a reference to the given AnyOfobject and assigns it to the Number field.
func (o *InlineObject1340) SetNumber(v AnyOfobject) {
	o.Number = v
}

// GetDecimals returns the Decimals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1340) GetDecimals() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Decimals
}

// GetDecimalsOk returns a tuple with the Decimals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1340) GetDecimalsOk() (*AnyOfobject, bool) {
	if o == nil || o.Decimals == nil {
		return nil, false
	}
	return &o.Decimals, true
}

// HasDecimals returns a boolean if a field has been set.
func (o *InlineObject1340) HasDecimals() bool {
	if o != nil && o.Decimals != nil {
		return true
	}

	return false
}

// SetDecimals gets a reference to the given AnyOfobject and assigns it to the Decimals field.
func (o *InlineObject1340) SetDecimals(v AnyOfobject) {
	o.Decimals = v
}

// GetNoCommas returns the NoCommas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1340) GetNoCommas() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.NoCommas
}

// GetNoCommasOk returns a tuple with the NoCommas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1340) GetNoCommasOk() (*AnyOfobject, bool) {
	if o == nil || o.NoCommas == nil {
		return nil, false
	}
	return &o.NoCommas, true
}

// HasNoCommas returns a boolean if a field has been set.
func (o *InlineObject1340) HasNoCommas() bool {
	if o != nil && o.NoCommas != nil {
		return true
	}

	return false
}

// SetNoCommas gets a reference to the given AnyOfobject and assigns it to the NoCommas field.
func (o *InlineObject1340) SetNoCommas(v AnyOfobject) {
	o.NoCommas = v
}

func (o InlineObject1340) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Number != nil {
		toSerialize["number"] = o.Number
	}
	if o.Decimals != nil {
		toSerialize["decimals"] = o.Decimals
	}
	if o.NoCommas != nil {
		toSerialize["noCommas"] = o.NoCommas
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1340 struct {
	value *InlineObject1340
	isSet bool
}

func (v NullableInlineObject1340) Get() *InlineObject1340 {
	return v.value
}

func (v *NullableInlineObject1340) Set(val *InlineObject1340) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1340) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1340) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1340(val *InlineObject1340) *NullableInlineObject1340 {
	return &NullableInlineObject1340{value: val, isSet: true}
}

func (v NullableInlineObject1340) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1340) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


