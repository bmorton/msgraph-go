/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphImportance the model 'MicrosoftGraphImportance'
type MicrosoftGraphImportance string

// List of microsoft.graph.importance
const (
	LOW MicrosoftGraphImportance = "low"
	NORMAL MicrosoftGraphImportance = "normal"
	HIGH MicrosoftGraphImportance = "high"
)

// All allowed values of MicrosoftGraphImportance enum
var AllowedMicrosoftGraphImportanceEnumValues = []MicrosoftGraphImportance{
	"low",
	"normal",
	"high",
}

func (v *MicrosoftGraphImportance) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphImportance(value)
	for _, existing := range AllowedMicrosoftGraphImportanceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphImportance", value)
}

// NewMicrosoftGraphImportanceFromValue returns a pointer to a valid MicrosoftGraphImportance
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphImportanceFromValue(v string) (*MicrosoftGraphImportance, error) {
	ev := MicrosoftGraphImportance(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphImportance: valid values are %v", v, AllowedMicrosoftGraphImportanceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphImportance) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphImportanceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.importance value
func (v MicrosoftGraphImportance) Ptr() *MicrosoftGraphImportance {
	return &v
}

type NullableMicrosoftGraphImportance struct {
	value *MicrosoftGraphImportance
	isSet bool
}

func (v NullableMicrosoftGraphImportance) Get() *MicrosoftGraphImportance {
	return v.value
}

func (v *NullableMicrosoftGraphImportance) Set(val *MicrosoftGraphImportance) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphImportance) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphImportance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphImportance(val *MicrosoftGraphImportance) *NullableMicrosoftGraphImportance {
	return &NullableMicrosoftGraphImportance{value: val, isSet: true}
}

func (v NullableMicrosoftGraphImportance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphImportance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

