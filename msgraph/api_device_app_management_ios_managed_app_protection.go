/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceAppManagementIosManagedAppProtectionApiService DeviceAppManagementIosManagedAppProtectionApi service
type DeviceAppManagementIosManagedAppProtectionApiService service

type ApiDeviceAppManagementCreateIosManagedAppProtectionsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementIosManagedAppProtectionApiService
	microsoftGraphIosManagedAppProtection *MicrosoftGraphIosManagedAppProtection
}

// New navigation property
func (r ApiDeviceAppManagementCreateIosManagedAppProtectionsRequest) MicrosoftGraphIosManagedAppProtection(microsoftGraphIosManagedAppProtection MicrosoftGraphIosManagedAppProtection) ApiDeviceAppManagementCreateIosManagedAppProtectionsRequest {
	r.microsoftGraphIosManagedAppProtection = &microsoftGraphIosManagedAppProtection
	return r
}

func (r ApiDeviceAppManagementCreateIosManagedAppProtectionsRequest) Execute() (MicrosoftGraphIosManagedAppProtection, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementCreateIosManagedAppProtectionsExecute(r)
}

/*
DeviceAppManagementCreateIosManagedAppProtections Create new navigation property to iosManagedAppProtections for deviceAppManagement

iOS managed app policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementCreateIosManagedAppProtectionsRequest
*/
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementCreateIosManagedAppProtections(ctx _context.Context) ApiDeviceAppManagementCreateIosManagedAppProtectionsRequest {
	return ApiDeviceAppManagementCreateIosManagedAppProtectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphIosManagedAppProtection
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementCreateIosManagedAppProtectionsExecute(r ApiDeviceAppManagementCreateIosManagedAppProtectionsRequest) (MicrosoftGraphIosManagedAppProtection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphIosManagedAppProtection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementIosManagedAppProtectionApiService.DeviceAppManagementCreateIosManagedAppProtections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/iosManagedAppProtections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphIosManagedAppProtection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphIosManagedAppProtection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphIosManagedAppProtection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDeleteIosManagedAppProtectionsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementIosManagedAppProtectionApiService
	iosManagedAppProtectionId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementDeleteIosManagedAppProtectionsRequest) IfMatch(ifMatch string) ApiDeviceAppManagementDeleteIosManagedAppProtectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementDeleteIosManagedAppProtectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDeleteIosManagedAppProtectionsExecute(r)
}

/*
DeviceAppManagementDeleteIosManagedAppProtections Delete navigation property iosManagedAppProtections for deviceAppManagement

iOS managed app policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param iosManagedAppProtectionId key: id of iosManagedAppProtection
 @return ApiDeviceAppManagementDeleteIosManagedAppProtectionsRequest
*/
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementDeleteIosManagedAppProtections(ctx _context.Context, iosManagedAppProtectionId string) ApiDeviceAppManagementDeleteIosManagedAppProtectionsRequest {
	return ApiDeviceAppManagementDeleteIosManagedAppProtectionsRequest{
		ApiService: a,
		ctx: ctx,
		iosManagedAppProtectionId: iosManagedAppProtectionId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementDeleteIosManagedAppProtectionsExecute(r ApiDeviceAppManagementDeleteIosManagedAppProtectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementIosManagedAppProtectionApiService.DeviceAppManagementDeleteIosManagedAppProtections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"iosManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.iosManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementGetIosManagedAppProtectionsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementIosManagedAppProtectionApiService
	iosManagedAppProtectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementGetIosManagedAppProtectionsRequest) Select_(select_ []string) ApiDeviceAppManagementGetIosManagedAppProtectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementGetIosManagedAppProtectionsRequest) Expand(expand []string) ApiDeviceAppManagementGetIosManagedAppProtectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementGetIosManagedAppProtectionsRequest) Execute() (MicrosoftGraphIosManagedAppProtection, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementGetIosManagedAppProtectionsExecute(r)
}

/*
DeviceAppManagementGetIosManagedAppProtections Get iosManagedAppProtections from deviceAppManagement

iOS managed app policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param iosManagedAppProtectionId key: id of iosManagedAppProtection
 @return ApiDeviceAppManagementGetIosManagedAppProtectionsRequest
*/
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementGetIosManagedAppProtections(ctx _context.Context, iosManagedAppProtectionId string) ApiDeviceAppManagementGetIosManagedAppProtectionsRequest {
	return ApiDeviceAppManagementGetIosManagedAppProtectionsRequest{
		ApiService: a,
		ctx: ctx,
		iosManagedAppProtectionId: iosManagedAppProtectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphIosManagedAppProtection
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementGetIosManagedAppProtectionsExecute(r ApiDeviceAppManagementGetIosManagedAppProtectionsRequest) (MicrosoftGraphIosManagedAppProtection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphIosManagedAppProtection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementIosManagedAppProtectionApiService.DeviceAppManagementGetIosManagedAppProtections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"iosManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.iosManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementIosManagedAppProtectionsCreateAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementIosManagedAppProtectionApiService
	iosManagedAppProtectionId string
	microsoftGraphManagedMobileApp *MicrosoftGraphManagedMobileApp
}

// New navigation property
func (r ApiDeviceAppManagementIosManagedAppProtectionsCreateAppsRequest) MicrosoftGraphManagedMobileApp(microsoftGraphManagedMobileApp MicrosoftGraphManagedMobileApp) ApiDeviceAppManagementIosManagedAppProtectionsCreateAppsRequest {
	r.microsoftGraphManagedMobileApp = &microsoftGraphManagedMobileApp
	return r
}

func (r ApiDeviceAppManagementIosManagedAppProtectionsCreateAppsRequest) Execute() (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementIosManagedAppProtectionsCreateAppsExecute(r)
}

/*
DeviceAppManagementIosManagedAppProtectionsCreateApps Create new navigation property to apps for deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param iosManagedAppProtectionId key: id of iosManagedAppProtection
 @return ApiDeviceAppManagementIosManagedAppProtectionsCreateAppsRequest
*/
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsCreateApps(ctx _context.Context, iosManagedAppProtectionId string) ApiDeviceAppManagementIosManagedAppProtectionsCreateAppsRequest {
	return ApiDeviceAppManagementIosManagedAppProtectionsCreateAppsRequest{
		ApiService: a,
		ctx: ctx,
		iosManagedAppProtectionId: iosManagedAppProtectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedMobileApp
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsCreateAppsExecute(r ApiDeviceAppManagementIosManagedAppProtectionsCreateAppsRequest) (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedMobileApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementIosManagedAppProtectionApiService.DeviceAppManagementIosManagedAppProtectionsCreateApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}/apps"
	localVarPath = strings.Replace(localVarPath, "{"+"iosManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.iosManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedMobileApp == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedMobileApp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedMobileApp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementIosManagedAppProtectionsDeleteAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementIosManagedAppProtectionApiService
	iosManagedAppProtectionId string
	managedMobileAppId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementIosManagedAppProtectionsDeleteAppsRequest) IfMatch(ifMatch string) ApiDeviceAppManagementIosManagedAppProtectionsDeleteAppsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementIosManagedAppProtectionsDeleteAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementIosManagedAppProtectionsDeleteAppsExecute(r)
}

/*
DeviceAppManagementIosManagedAppProtectionsDeleteApps Delete navigation property apps for deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param iosManagedAppProtectionId key: id of iosManagedAppProtection
 @param managedMobileAppId key: id of managedMobileApp
 @return ApiDeviceAppManagementIosManagedAppProtectionsDeleteAppsRequest
*/
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsDeleteApps(ctx _context.Context, iosManagedAppProtectionId string, managedMobileAppId string) ApiDeviceAppManagementIosManagedAppProtectionsDeleteAppsRequest {
	return ApiDeviceAppManagementIosManagedAppProtectionsDeleteAppsRequest{
		ApiService: a,
		ctx: ctx,
		iosManagedAppProtectionId: iosManagedAppProtectionId,
		managedMobileAppId: managedMobileAppId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsDeleteAppsExecute(r ApiDeviceAppManagementIosManagedAppProtectionsDeleteAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementIosManagedAppProtectionApiService.DeviceAppManagementIosManagedAppProtectionsDeleteApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}/apps/{managedMobileApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"iosManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.iosManagedAppProtectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedMobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.managedMobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementIosManagedAppProtectionsDeleteDeploymentSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementIosManagedAppProtectionApiService
	iosManagedAppProtectionId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementIosManagedAppProtectionsDeleteDeploymentSummaryRequest) IfMatch(ifMatch string) ApiDeviceAppManagementIosManagedAppProtectionsDeleteDeploymentSummaryRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementIosManagedAppProtectionsDeleteDeploymentSummaryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementIosManagedAppProtectionsDeleteDeploymentSummaryExecute(r)
}

/*
DeviceAppManagementIosManagedAppProtectionsDeleteDeploymentSummary Delete navigation property deploymentSummary for deviceAppManagement

Navigation property to deployment summary of the configuration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param iosManagedAppProtectionId key: id of iosManagedAppProtection
 @return ApiDeviceAppManagementIosManagedAppProtectionsDeleteDeploymentSummaryRequest
*/
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsDeleteDeploymentSummary(ctx _context.Context, iosManagedAppProtectionId string) ApiDeviceAppManagementIosManagedAppProtectionsDeleteDeploymentSummaryRequest {
	return ApiDeviceAppManagementIosManagedAppProtectionsDeleteDeploymentSummaryRequest{
		ApiService: a,
		ctx: ctx,
		iosManagedAppProtectionId: iosManagedAppProtectionId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsDeleteDeploymentSummaryExecute(r ApiDeviceAppManagementIosManagedAppProtectionsDeleteDeploymentSummaryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementIosManagedAppProtectionApiService.DeviceAppManagementIosManagedAppProtectionsDeleteDeploymentSummary")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}/deploymentSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"iosManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.iosManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementIosManagedAppProtectionsGetAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementIosManagedAppProtectionApiService
	iosManagedAppProtectionId string
	managedMobileAppId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementIosManagedAppProtectionsGetAppsRequest) Select_(select_ []string) ApiDeviceAppManagementIosManagedAppProtectionsGetAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementIosManagedAppProtectionsGetAppsRequest) Expand(expand []string) ApiDeviceAppManagementIosManagedAppProtectionsGetAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementIosManagedAppProtectionsGetAppsRequest) Execute() (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementIosManagedAppProtectionsGetAppsExecute(r)
}

/*
DeviceAppManagementIosManagedAppProtectionsGetApps Get apps from deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param iosManagedAppProtectionId key: id of iosManagedAppProtection
 @param managedMobileAppId key: id of managedMobileApp
 @return ApiDeviceAppManagementIosManagedAppProtectionsGetAppsRequest
*/
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsGetApps(ctx _context.Context, iosManagedAppProtectionId string, managedMobileAppId string) ApiDeviceAppManagementIosManagedAppProtectionsGetAppsRequest {
	return ApiDeviceAppManagementIosManagedAppProtectionsGetAppsRequest{
		ApiService: a,
		ctx: ctx,
		iosManagedAppProtectionId: iosManagedAppProtectionId,
		managedMobileAppId: managedMobileAppId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedMobileApp
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsGetAppsExecute(r ApiDeviceAppManagementIosManagedAppProtectionsGetAppsRequest) (MicrosoftGraphManagedMobileApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedMobileApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementIosManagedAppProtectionApiService.DeviceAppManagementIosManagedAppProtectionsGetApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}/apps/{managedMobileApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"iosManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.iosManagedAppProtectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedMobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.managedMobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementIosManagedAppProtectionsGetDeploymentSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementIosManagedAppProtectionApiService
	iosManagedAppProtectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementIosManagedAppProtectionsGetDeploymentSummaryRequest) Select_(select_ []string) ApiDeviceAppManagementIosManagedAppProtectionsGetDeploymentSummaryRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementIosManagedAppProtectionsGetDeploymentSummaryRequest) Expand(expand []string) ApiDeviceAppManagementIosManagedAppProtectionsGetDeploymentSummaryRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementIosManagedAppProtectionsGetDeploymentSummaryRequest) Execute() (MicrosoftGraphManagedAppPolicyDeploymentSummary, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementIosManagedAppProtectionsGetDeploymentSummaryExecute(r)
}

/*
DeviceAppManagementIosManagedAppProtectionsGetDeploymentSummary Get deploymentSummary from deviceAppManagement

Navigation property to deployment summary of the configuration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param iosManagedAppProtectionId key: id of iosManagedAppProtection
 @return ApiDeviceAppManagementIosManagedAppProtectionsGetDeploymentSummaryRequest
*/
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsGetDeploymentSummary(ctx _context.Context, iosManagedAppProtectionId string) ApiDeviceAppManagementIosManagedAppProtectionsGetDeploymentSummaryRequest {
	return ApiDeviceAppManagementIosManagedAppProtectionsGetDeploymentSummaryRequest{
		ApiService: a,
		ctx: ctx,
		iosManagedAppProtectionId: iosManagedAppProtectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedAppPolicyDeploymentSummary
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsGetDeploymentSummaryExecute(r ApiDeviceAppManagementIosManagedAppProtectionsGetDeploymentSummaryRequest) (MicrosoftGraphManagedAppPolicyDeploymentSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedAppPolicyDeploymentSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementIosManagedAppProtectionApiService.DeviceAppManagementIosManagedAppProtectionsGetDeploymentSummary")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}/deploymentSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"iosManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.iosManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementIosManagedAppProtectionApiService
	iosManagedAppProtectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest) Top(top int32) ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest) Skip(skip int32) ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest) Search(search string) ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest) Filter(filter string) ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest) Count(count bool) ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest) Orderby(orderby []string) ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest) Select_(select_ []string) ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest) Expand(expand []string) ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest) Execute() (CollectionOfManagedMobileApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementIosManagedAppProtectionsListAppsExecute(r)
}

/*
DeviceAppManagementIosManagedAppProtectionsListApps Get apps from deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param iosManagedAppProtectionId key: id of iosManagedAppProtection
 @return ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest
*/
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsListApps(ctx _context.Context, iosManagedAppProtectionId string) ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest {
	return ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest{
		ApiService: a,
		ctx: ctx,
		iosManagedAppProtectionId: iosManagedAppProtectionId,
	}
}

// Execute executes the request
//  @return CollectionOfManagedMobileApp
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsListAppsExecute(r ApiDeviceAppManagementIosManagedAppProtectionsListAppsRequest) (CollectionOfManagedMobileApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedMobileApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementIosManagedAppProtectionApiService.DeviceAppManagementIosManagedAppProtectionsListApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}/apps"
	localVarPath = strings.Replace(localVarPath, "{"+"iosManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.iosManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementIosManagedAppProtectionsUpdateAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementIosManagedAppProtectionApiService
	iosManagedAppProtectionId string
	managedMobileAppId string
	microsoftGraphManagedMobileApp *MicrosoftGraphManagedMobileApp
}

// New navigation property values
func (r ApiDeviceAppManagementIosManagedAppProtectionsUpdateAppsRequest) MicrosoftGraphManagedMobileApp(microsoftGraphManagedMobileApp MicrosoftGraphManagedMobileApp) ApiDeviceAppManagementIosManagedAppProtectionsUpdateAppsRequest {
	r.microsoftGraphManagedMobileApp = &microsoftGraphManagedMobileApp
	return r
}

func (r ApiDeviceAppManagementIosManagedAppProtectionsUpdateAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementIosManagedAppProtectionsUpdateAppsExecute(r)
}

/*
DeviceAppManagementIosManagedAppProtectionsUpdateApps Update the navigation property apps in deviceAppManagement

List of apps to which the policy is deployed.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param iosManagedAppProtectionId key: id of iosManagedAppProtection
 @param managedMobileAppId key: id of managedMobileApp
 @return ApiDeviceAppManagementIosManagedAppProtectionsUpdateAppsRequest
*/
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsUpdateApps(ctx _context.Context, iosManagedAppProtectionId string, managedMobileAppId string) ApiDeviceAppManagementIosManagedAppProtectionsUpdateAppsRequest {
	return ApiDeviceAppManagementIosManagedAppProtectionsUpdateAppsRequest{
		ApiService: a,
		ctx: ctx,
		iosManagedAppProtectionId: iosManagedAppProtectionId,
		managedMobileAppId: managedMobileAppId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsUpdateAppsExecute(r ApiDeviceAppManagementIosManagedAppProtectionsUpdateAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementIosManagedAppProtectionApiService.DeviceAppManagementIosManagedAppProtectionsUpdateApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}/apps/{managedMobileApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"iosManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.iosManagedAppProtectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedMobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.managedMobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedMobileApp == nil {
		return nil, reportError("microsoftGraphManagedMobileApp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedMobileApp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementIosManagedAppProtectionsUpdateDeploymentSummaryRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementIosManagedAppProtectionApiService
	iosManagedAppProtectionId string
	microsoftGraphManagedAppPolicyDeploymentSummary *MicrosoftGraphManagedAppPolicyDeploymentSummary
}

// New navigation property values
func (r ApiDeviceAppManagementIosManagedAppProtectionsUpdateDeploymentSummaryRequest) MicrosoftGraphManagedAppPolicyDeploymentSummary(microsoftGraphManagedAppPolicyDeploymentSummary MicrosoftGraphManagedAppPolicyDeploymentSummary) ApiDeviceAppManagementIosManagedAppProtectionsUpdateDeploymentSummaryRequest {
	r.microsoftGraphManagedAppPolicyDeploymentSummary = &microsoftGraphManagedAppPolicyDeploymentSummary
	return r
}

func (r ApiDeviceAppManagementIosManagedAppProtectionsUpdateDeploymentSummaryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementIosManagedAppProtectionsUpdateDeploymentSummaryExecute(r)
}

/*
DeviceAppManagementIosManagedAppProtectionsUpdateDeploymentSummary Update the navigation property deploymentSummary in deviceAppManagement

Navigation property to deployment summary of the configuration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param iosManagedAppProtectionId key: id of iosManagedAppProtection
 @return ApiDeviceAppManagementIosManagedAppProtectionsUpdateDeploymentSummaryRequest
*/
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsUpdateDeploymentSummary(ctx _context.Context, iosManagedAppProtectionId string) ApiDeviceAppManagementIosManagedAppProtectionsUpdateDeploymentSummaryRequest {
	return ApiDeviceAppManagementIosManagedAppProtectionsUpdateDeploymentSummaryRequest{
		ApiService: a,
		ctx: ctx,
		iosManagedAppProtectionId: iosManagedAppProtectionId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementIosManagedAppProtectionsUpdateDeploymentSummaryExecute(r ApiDeviceAppManagementIosManagedAppProtectionsUpdateDeploymentSummaryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementIosManagedAppProtectionApiService.DeviceAppManagementIosManagedAppProtectionsUpdateDeploymentSummary")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}/deploymentSummary"
	localVarPath = strings.Replace(localVarPath, "{"+"iosManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.iosManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedAppPolicyDeploymentSummary == nil {
		return nil, reportError("microsoftGraphManagedAppPolicyDeploymentSummary is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedAppPolicyDeploymentSummary
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementListIosManagedAppProtectionsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementIosManagedAppProtectionApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementListIosManagedAppProtectionsRequest) Top(top int32) ApiDeviceAppManagementListIosManagedAppProtectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementListIosManagedAppProtectionsRequest) Skip(skip int32) ApiDeviceAppManagementListIosManagedAppProtectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementListIosManagedAppProtectionsRequest) Search(search string) ApiDeviceAppManagementListIosManagedAppProtectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementListIosManagedAppProtectionsRequest) Filter(filter string) ApiDeviceAppManagementListIosManagedAppProtectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementListIosManagedAppProtectionsRequest) Count(count bool) ApiDeviceAppManagementListIosManagedAppProtectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementListIosManagedAppProtectionsRequest) Orderby(orderby []string) ApiDeviceAppManagementListIosManagedAppProtectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementListIosManagedAppProtectionsRequest) Select_(select_ []string) ApiDeviceAppManagementListIosManagedAppProtectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementListIosManagedAppProtectionsRequest) Expand(expand []string) ApiDeviceAppManagementListIosManagedAppProtectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementListIosManagedAppProtectionsRequest) Execute() (CollectionOfIosManagedAppProtection, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementListIosManagedAppProtectionsExecute(r)
}

/*
DeviceAppManagementListIosManagedAppProtections Get iosManagedAppProtections from deviceAppManagement

iOS managed app policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementListIosManagedAppProtectionsRequest
*/
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementListIosManagedAppProtections(ctx _context.Context) ApiDeviceAppManagementListIosManagedAppProtectionsRequest {
	return ApiDeviceAppManagementListIosManagedAppProtectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfIosManagedAppProtection
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementListIosManagedAppProtectionsExecute(r ApiDeviceAppManagementListIosManagedAppProtectionsRequest) (CollectionOfIosManagedAppProtection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfIosManagedAppProtection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementIosManagedAppProtectionApiService.DeviceAppManagementListIosManagedAppProtections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/iosManagedAppProtections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementUpdateIosManagedAppProtectionsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementIosManagedAppProtectionApiService
	iosManagedAppProtectionId string
	microsoftGraphIosManagedAppProtection *MicrosoftGraphIosManagedAppProtection
}

// New navigation property values
func (r ApiDeviceAppManagementUpdateIosManagedAppProtectionsRequest) MicrosoftGraphIosManagedAppProtection(microsoftGraphIosManagedAppProtection MicrosoftGraphIosManagedAppProtection) ApiDeviceAppManagementUpdateIosManagedAppProtectionsRequest {
	r.microsoftGraphIosManagedAppProtection = &microsoftGraphIosManagedAppProtection
	return r
}

func (r ApiDeviceAppManagementUpdateIosManagedAppProtectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementUpdateIosManagedAppProtectionsExecute(r)
}

/*
DeviceAppManagementUpdateIosManagedAppProtections Update the navigation property iosManagedAppProtections in deviceAppManagement

iOS managed app policies.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param iosManagedAppProtectionId key: id of iosManagedAppProtection
 @return ApiDeviceAppManagementUpdateIosManagedAppProtectionsRequest
*/
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementUpdateIosManagedAppProtections(ctx _context.Context, iosManagedAppProtectionId string) ApiDeviceAppManagementUpdateIosManagedAppProtectionsRequest {
	return ApiDeviceAppManagementUpdateIosManagedAppProtectionsRequest{
		ApiService: a,
		ctx: ctx,
		iosManagedAppProtectionId: iosManagedAppProtectionId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementIosManagedAppProtectionApiService) DeviceAppManagementUpdateIosManagedAppProtectionsExecute(r ApiDeviceAppManagementUpdateIosManagedAppProtectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementIosManagedAppProtectionApiService.DeviceAppManagementUpdateIosManagedAppProtections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/iosManagedAppProtections/{iosManagedAppProtection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"iosManagedAppProtection-id"+"}", _neturl.PathEscape(parameterToString(r.iosManagedAppProtectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphIosManagedAppProtection == nil {
		return nil, reportError("microsoftGraphIosManagedAppProtection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphIosManagedAppProtection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
