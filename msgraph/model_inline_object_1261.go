/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// InlineObject1261 struct for InlineObject1261
type InlineObject1261 struct {
	RealNum AnyOfobject `json:"realNum,omitempty"`
	INum AnyOfobject `json:"iNum,omitempty"`
	Suffix AnyOfobject `json:"suffix,omitempty"`
}

// NewInlineObject1261 instantiates a new InlineObject1261 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1261() *InlineObject1261 {
	this := InlineObject1261{}
	return &this
}

// NewInlineObject1261WithDefaults instantiates a new InlineObject1261 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1261WithDefaults() *InlineObject1261 {
	this := InlineObject1261{}
	return &this
}

// GetRealNum returns the RealNum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1261) GetRealNum() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.RealNum
}

// GetRealNumOk returns a tuple with the RealNum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1261) GetRealNumOk() (*AnyOfobject, bool) {
	if o == nil || o.RealNum == nil {
		return nil, false
	}
	return &o.RealNum, true
}

// HasRealNum returns a boolean if a field has been set.
func (o *InlineObject1261) HasRealNum() bool {
	if o != nil && o.RealNum != nil {
		return true
	}

	return false
}

// SetRealNum gets a reference to the given AnyOfobject and assigns it to the RealNum field.
func (o *InlineObject1261) SetRealNum(v AnyOfobject) {
	o.RealNum = v
}

// GetINum returns the INum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1261) GetINum() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.INum
}

// GetINumOk returns a tuple with the INum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1261) GetINumOk() (*AnyOfobject, bool) {
	if o == nil || o.INum == nil {
		return nil, false
	}
	return &o.INum, true
}

// HasINum returns a boolean if a field has been set.
func (o *InlineObject1261) HasINum() bool {
	if o != nil && o.INum != nil {
		return true
	}

	return false
}

// SetINum gets a reference to the given AnyOfobject and assigns it to the INum field.
func (o *InlineObject1261) SetINum(v AnyOfobject) {
	o.INum = v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1261) GetSuffix() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Suffix
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1261) GetSuffixOk() (*AnyOfobject, bool) {
	if o == nil || o.Suffix == nil {
		return nil, false
	}
	return &o.Suffix, true
}

// HasSuffix returns a boolean if a field has been set.
func (o *InlineObject1261) HasSuffix() bool {
	if o != nil && o.Suffix != nil {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given AnyOfobject and assigns it to the Suffix field.
func (o *InlineObject1261) SetSuffix(v AnyOfobject) {
	o.Suffix = v
}

func (o InlineObject1261) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RealNum != nil {
		toSerialize["realNum"] = o.RealNum
	}
	if o.INum != nil {
		toSerialize["iNum"] = o.INum
	}
	if o.Suffix != nil {
		toSerialize["suffix"] = o.Suffix
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1261 struct {
	value *InlineObject1261
	isSet bool
}

func (v NullableInlineObject1261) Get() *InlineObject1261 {
	return v.value
}

func (v *NullableInlineObject1261) Set(val *InlineObject1261) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1261) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1261) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1261(val *InlineObject1261) *NullableInlineObject1261 {
	return &NullableInlineObject1261{value: val, isSet: true}
}

func (v NullableInlineObject1261) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1261) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


