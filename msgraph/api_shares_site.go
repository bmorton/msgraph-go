/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// SharesSiteApiService SharesSiteApi service
type SharesSiteApiService service

type ApiSharesDeleteSiteRequest struct {
	ctx _context.Context
	ApiService *SharesSiteApiService
	sharedDriveItemId string
	ifMatch *string
}

// ETag
func (r ApiSharesDeleteSiteRequest) IfMatch(ifMatch string) ApiSharesDeleteSiteRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiSharesDeleteSiteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesDeleteSiteExecute(r)
}

/*
SharesDeleteSite Delete navigation property site for shares

Used to access the underlying site

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @return ApiSharesDeleteSiteRequest
*/
func (a *SharesSiteApiService) SharesDeleteSite(ctx _context.Context, sharedDriveItemId string) ApiSharesDeleteSiteRequest {
	return ApiSharesDeleteSiteRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
	}
}

// Execute executes the request
func (a *SharesSiteApiService) SharesDeleteSiteExecute(r ApiSharesDeleteSiteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesSiteApiService.SharesDeleteSite")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/site"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSharesGetSiteRequest struct {
	ctx _context.Context
	ApiService *SharesSiteApiService
	sharedDriveItemId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiSharesGetSiteRequest) Select_(select_ []string) ApiSharesGetSiteRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiSharesGetSiteRequest) Expand(expand []string) ApiSharesGetSiteRequest {
	r.expand = &expand
	return r
}

func (r ApiSharesGetSiteRequest) Execute() (MicrosoftGraphSite, *_nethttp.Response, error) {
	return r.ApiService.SharesGetSiteExecute(r)
}

/*
SharesGetSite Get site from shares

Used to access the underlying site

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @return ApiSharesGetSiteRequest
*/
func (a *SharesSiteApiService) SharesGetSite(ctx _context.Context, sharedDriveItemId string) ApiSharesGetSiteRequest {
	return ApiSharesGetSiteRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSite
func (a *SharesSiteApiService) SharesGetSiteExecute(r ApiSharesGetSiteRequest) (MicrosoftGraphSite, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSite
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesSiteApiService.SharesGetSite")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/site"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSharesUpdateSiteRequest struct {
	ctx _context.Context
	ApiService *SharesSiteApiService
	sharedDriveItemId string
	microsoftGraphSite *MicrosoftGraphSite
}

// New navigation property values
func (r ApiSharesUpdateSiteRequest) MicrosoftGraphSite(microsoftGraphSite MicrosoftGraphSite) ApiSharesUpdateSiteRequest {
	r.microsoftGraphSite = &microsoftGraphSite
	return r
}

func (r ApiSharesUpdateSiteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SharesUpdateSiteExecute(r)
}

/*
SharesUpdateSite Update the navigation property site in shares

Used to access the underlying site

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sharedDriveItemId key: id of sharedDriveItem
 @return ApiSharesUpdateSiteRequest
*/
func (a *SharesSiteApiService) SharesUpdateSite(ctx _context.Context, sharedDriveItemId string) ApiSharesUpdateSiteRequest {
	return ApiSharesUpdateSiteRequest{
		ApiService: a,
		ctx: ctx,
		sharedDriveItemId: sharedDriveItemId,
	}
}

// Execute executes the request
func (a *SharesSiteApiService) SharesUpdateSiteExecute(r ApiSharesUpdateSiteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SharesSiteApiService.SharesUpdateSite")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/shares/{sharedDriveItem-id}/site"
	localVarPath = strings.Replace(localVarPath, "{"+"sharedDriveItem-id"+"}", _neturl.PathEscape(parameterToString(r.sharedDriveItemId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSite == nil {
		return nil, reportError("microsoftGraphSite is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSite
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
