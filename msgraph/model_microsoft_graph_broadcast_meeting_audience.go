/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphBroadcastMeetingAudience the model 'MicrosoftGraphBroadcastMeetingAudience'
type MicrosoftGraphBroadcastMeetingAudience string

// List of microsoft.graph.broadcastMeetingAudience
const (
	ROLE_IS_ATTENDEE MicrosoftGraphBroadcastMeetingAudience = "roleIsAttendee"
	ORGANIZATION MicrosoftGraphBroadcastMeetingAudience = "organization"
	EVERYONE MicrosoftGraphBroadcastMeetingAudience = "everyone"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphBroadcastMeetingAudience = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphBroadcastMeetingAudience enum
var AllowedMicrosoftGraphBroadcastMeetingAudienceEnumValues = []MicrosoftGraphBroadcastMeetingAudience{
	"roleIsAttendee",
	"organization",
	"everyone",
	"unknownFutureValue",
}

func (v *MicrosoftGraphBroadcastMeetingAudience) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphBroadcastMeetingAudience(value)
	for _, existing := range AllowedMicrosoftGraphBroadcastMeetingAudienceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphBroadcastMeetingAudience", value)
}

// NewMicrosoftGraphBroadcastMeetingAudienceFromValue returns a pointer to a valid MicrosoftGraphBroadcastMeetingAudience
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphBroadcastMeetingAudienceFromValue(v string) (*MicrosoftGraphBroadcastMeetingAudience, error) {
	ev := MicrosoftGraphBroadcastMeetingAudience(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphBroadcastMeetingAudience: valid values are %v", v, AllowedMicrosoftGraphBroadcastMeetingAudienceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphBroadcastMeetingAudience) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphBroadcastMeetingAudienceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.broadcastMeetingAudience value
func (v MicrosoftGraphBroadcastMeetingAudience) Ptr() *MicrosoftGraphBroadcastMeetingAudience {
	return &v
}

type NullableMicrosoftGraphBroadcastMeetingAudience struct {
	value *MicrosoftGraphBroadcastMeetingAudience
	isSet bool
}

func (v NullableMicrosoftGraphBroadcastMeetingAudience) Get() *MicrosoftGraphBroadcastMeetingAudience {
	return v.value
}

func (v *NullableMicrosoftGraphBroadcastMeetingAudience) Set(val *MicrosoftGraphBroadcastMeetingAudience) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphBroadcastMeetingAudience) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphBroadcastMeetingAudience) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphBroadcastMeetingAudience(val *MicrosoftGraphBroadcastMeetingAudience) *NullableMicrosoftGraphBroadcastMeetingAudience {
	return &NullableMicrosoftGraphBroadcastMeetingAudience{value: val, isSet: true}
}

func (v NullableMicrosoftGraphBroadcastMeetingAudience) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphBroadcastMeetingAudience) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

