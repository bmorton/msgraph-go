/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"os"
)

// Linger please
var (
	_ _context.Context
)

// MeOnenoteApiService MeOnenoteApi service
type MeOnenoteApiService service

type ApiMeDeleteOnenoteRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	ifMatch *string
}

// ETag
func (r ApiMeDeleteOnenoteRequest) IfMatch(ifMatch string) ApiMeDeleteOnenoteRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeDeleteOnenoteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeDeleteOnenoteExecute(r)
}

/*
MeDeleteOnenote Delete navigation property onenote for me

Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeDeleteOnenoteRequest
*/
func (a *MeOnenoteApiService) MeDeleteOnenote(ctx _context.Context) ApiMeDeleteOnenoteRequest {
	return ApiMeDeleteOnenoteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeDeleteOnenoteExecute(r ApiMeDeleteOnenoteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeDeleteOnenote")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeGetOnenoteRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeGetOnenoteRequest) Select_(select_ []string) ApiMeGetOnenoteRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeGetOnenoteRequest) Expand(expand []string) ApiMeGetOnenoteRequest {
	r.expand = &expand
	return r
}

func (r ApiMeGetOnenoteRequest) Execute() (MicrosoftGraphOnenote, *_nethttp.Response, error) {
	return r.ApiService.MeGetOnenoteExecute(r)
}

/*
MeGetOnenote Get onenote from me

Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeGetOnenoteRequest
*/
func (a *MeOnenoteApiService) MeGetOnenote(ctx _context.Context) ApiMeGetOnenoteRequest {
	return ApiMeGetOnenoteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenote
func (a *MeOnenoteApiService) MeGetOnenoteExecute(r ApiMeGetOnenoteRequest) (MicrosoftGraphOnenote, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenote
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeGetOnenote")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteCreateNotebooksRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property
func (r ApiMeOnenoteCreateNotebooksRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteCreateNotebooksRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteCreateNotebooksRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteCreateNotebooksExecute(r)
}

/*
MeOnenoteCreateNotebooks Create new navigation property to notebooks for me

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOnenoteCreateNotebooksRequest
*/
func (a *MeOnenoteApiService) MeOnenoteCreateNotebooks(ctx _context.Context) ApiMeOnenoteCreateNotebooksRequest {
	return ApiMeOnenoteCreateNotebooksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteCreateNotebooksExecute(r ApiMeOnenoteCreateNotebooksRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteCreateNotebooks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteCreateOperationsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	microsoftGraphOnenoteOperation *MicrosoftGraphOnenoteOperation
}

// New navigation property
func (r ApiMeOnenoteCreateOperationsRequest) MicrosoftGraphOnenoteOperation(microsoftGraphOnenoteOperation MicrosoftGraphOnenoteOperation) ApiMeOnenoteCreateOperationsRequest {
	r.microsoftGraphOnenoteOperation = &microsoftGraphOnenoteOperation
	return r
}

func (r ApiMeOnenoteCreateOperationsRequest) Execute() (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteCreateOperationsExecute(r)
}

/*
MeOnenoteCreateOperations Create new navigation property to operations for me

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOnenoteCreateOperationsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteCreateOperations(ctx _context.Context) ApiMeOnenoteCreateOperationsRequest {
	return ApiMeOnenoteCreateOperationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteOperation
func (a *MeOnenoteApiService) MeOnenoteCreateOperationsExecute(r ApiMeOnenoteCreateOperationsRequest) (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteCreateOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/operations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteOperation == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteCreatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiMeOnenoteCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenoteCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenoteCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteCreatePagesExecute(r)
}

/*
MeOnenoteCreatePages Create new navigation property to pages for me

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOnenoteCreatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteCreatePages(ctx _context.Context) ApiMeOnenoteCreatePagesRequest {
	return ApiMeOnenoteCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenoteCreatePagesExecute(r ApiMeOnenoteCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteCreateResourcesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	microsoftGraphOnenoteResource *MicrosoftGraphOnenoteResource
}

// New navigation property
func (r ApiMeOnenoteCreateResourcesRequest) MicrosoftGraphOnenoteResource(microsoftGraphOnenoteResource MicrosoftGraphOnenoteResource) ApiMeOnenoteCreateResourcesRequest {
	r.microsoftGraphOnenoteResource = &microsoftGraphOnenoteResource
	return r
}

func (r ApiMeOnenoteCreateResourcesRequest) Execute() (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteCreateResourcesExecute(r)
}

/*
MeOnenoteCreateResources Create new navigation property to resources for me

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOnenoteCreateResourcesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteCreateResources(ctx _context.Context) ApiMeOnenoteCreateResourcesRequest {
	return ApiMeOnenoteCreateResourcesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteResource
func (a *MeOnenoteApiService) MeOnenoteCreateResourcesExecute(r ApiMeOnenoteCreateResourcesRequest) (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteCreateResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/resources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteResource == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenoteCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteCreateSectionGroupsExecute(r)
}

/*
MeOnenoteCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOnenoteCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteCreateSectionGroups(ctx _context.Context) ApiMeOnenoteCreateSectionGroupsRequest {
	return ApiMeOnenoteCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteCreateSectionGroupsExecute(r ApiMeOnenoteCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenoteCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteCreateSectionsExecute(r)
}

/*
MeOnenoteCreateSections Create new navigation property to sections for me

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOnenoteCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteCreateSections(ctx _context.Context) ApiMeOnenoteCreateSectionsRequest {
	return ApiMeOnenoteCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteCreateSectionsExecute(r ApiMeOnenoteCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteDeleteNotebooksRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteDeleteNotebooksRequest) IfMatch(ifMatch string) ApiMeOnenoteDeleteNotebooksRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteDeleteNotebooksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteDeleteNotebooksExecute(r)
}

/*
MeOnenoteDeleteNotebooks Delete navigation property notebooks for me

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @return ApiMeOnenoteDeleteNotebooksRequest
*/
func (a *MeOnenoteApiService) MeOnenoteDeleteNotebooks(ctx _context.Context, notebookId string) ApiMeOnenoteDeleteNotebooksRequest {
	return ApiMeOnenoteDeleteNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteDeleteNotebooksExecute(r ApiMeOnenoteDeleteNotebooksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteDeleteNotebooks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteDeleteOperationsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteOperationId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteDeleteOperationsRequest) IfMatch(ifMatch string) ApiMeOnenoteDeleteOperationsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteDeleteOperationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteDeleteOperationsExecute(r)
}

/*
MeOnenoteDeleteOperations Delete navigation property operations for me

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteOperationId key: id of onenoteOperation
 @return ApiMeOnenoteDeleteOperationsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteDeleteOperations(ctx _context.Context, onenoteOperationId string) ApiMeOnenoteDeleteOperationsRequest {
	return ApiMeOnenoteDeleteOperationsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteOperationId: onenoteOperationId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteDeleteOperationsExecute(r ApiMeOnenoteDeleteOperationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteDeleteOperations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/operations/{onenoteOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteOperation-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteDeletePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteDeletePagesRequest) IfMatch(ifMatch string) ApiMeOnenoteDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteDeletePagesExecute(r)
}

/*
MeOnenoteDeletePages Delete navigation property pages for me

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteDeletePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteDeletePages(ctx _context.Context, onenotePageId string) ApiMeOnenoteDeletePagesRequest {
	return ApiMeOnenoteDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteDeletePagesExecute(r ApiMeOnenoteDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteDeleteResourcesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteResourceId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteDeleteResourcesRequest) IfMatch(ifMatch string) ApiMeOnenoteDeleteResourcesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteDeleteResourcesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteDeleteResourcesExecute(r)
}

/*
MeOnenoteDeleteResources Delete navigation property resources for me

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteResourceId key: id of onenoteResource
 @return ApiMeOnenoteDeleteResourcesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteDeleteResources(ctx _context.Context, onenoteResourceId string) ApiMeOnenoteDeleteResourcesRequest {
	return ApiMeOnenoteDeleteResourcesRequest{
		ApiService: a,
		ctx: ctx,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteDeleteResourcesExecute(r ApiMeOnenoteDeleteResourcesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteDeleteResources")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/resources/{onenoteResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenoteDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteDeleteSectionGroupsExecute(r)
}

/*
MeOnenoteDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteDeleteSectionGroups(ctx _context.Context, sectionGroupId string) ApiMeOnenoteDeleteSectionGroupsRequest {
	return ApiMeOnenoteDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteDeleteSectionGroupsExecute(r ApiMeOnenoteDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenoteDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteDeleteSectionsExecute(r)
}

/*
MeOnenoteDeleteSections Delete navigation property sections for me

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteDeleteSections(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteDeleteSectionsRequest {
	return ApiMeOnenoteDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteDeleteSectionsExecute(r ApiMeOnenoteDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteGetNotebooksRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteGetNotebooksRequest) Select_(select_ []string) ApiMeOnenoteGetNotebooksRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteGetNotebooksRequest) Expand(expand []string) ApiMeOnenoteGetNotebooksRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteGetNotebooksRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteGetNotebooksExecute(r)
}

/*
MeOnenoteGetNotebooks Get notebooks from me

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @return ApiMeOnenoteGetNotebooksRequest
*/
func (a *MeOnenoteApiService) MeOnenoteGetNotebooks(ctx _context.Context, notebookId string) ApiMeOnenoteGetNotebooksRequest {
	return ApiMeOnenoteGetNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteGetNotebooksExecute(r ApiMeOnenoteGetNotebooksRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteGetNotebooks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteGetOperationsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteOperationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteGetOperationsRequest) Select_(select_ []string) ApiMeOnenoteGetOperationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteGetOperationsRequest) Expand(expand []string) ApiMeOnenoteGetOperationsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteGetOperationsRequest) Execute() (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteGetOperationsExecute(r)
}

/*
MeOnenoteGetOperations Get operations from me

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteOperationId key: id of onenoteOperation
 @return ApiMeOnenoteGetOperationsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteGetOperations(ctx _context.Context, onenoteOperationId string) ApiMeOnenoteGetOperationsRequest {
	return ApiMeOnenoteGetOperationsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteOperationId: onenoteOperationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteOperation
func (a *MeOnenoteApiService) MeOnenoteGetOperationsExecute(r ApiMeOnenoteGetOperationsRequest) (MicrosoftGraphOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteGetOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/operations/{onenoteOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteOperation-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteGetPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteGetPagesRequest) Select_(select_ []string) ApiMeOnenoteGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteGetPagesRequest) Expand(expand []string) ApiMeOnenoteGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteGetPagesExecute(r)
}

/*
MeOnenoteGetPages Get pages from me

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteGetPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteGetPages(ctx _context.Context, onenotePageId string) ApiMeOnenoteGetPagesRequest {
	return ApiMeOnenoteGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenoteGetPagesExecute(r ApiMeOnenoteGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
}


func (r ApiMeOnenoteGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteGetPagesContentExecute(r)
}

/*
MeOnenoteGetPagesContent Get media content for the navigation property pages from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteGetPagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteGetPagesContent(ctx _context.Context, onenotePageId string) ApiMeOnenoteGetPagesContentRequest {
	return ApiMeOnenoteGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *MeOnenoteApiService) MeOnenoteGetPagesContentExecute(r ApiMeOnenoteGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteGetResourcesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteResourceId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteGetResourcesRequest) Select_(select_ []string) ApiMeOnenoteGetResourcesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteGetResourcesRequest) Expand(expand []string) ApiMeOnenoteGetResourcesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteGetResourcesRequest) Execute() (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteGetResourcesExecute(r)
}

/*
MeOnenoteGetResources Get resources from me

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteResourceId key: id of onenoteResource
 @return ApiMeOnenoteGetResourcesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteGetResources(ctx _context.Context, onenoteResourceId string) ApiMeOnenoteGetResourcesRequest {
	return ApiMeOnenoteGetResourcesRequest{
		ApiService: a,
		ctx: ctx,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteResource
func (a *MeOnenoteApiService) MeOnenoteGetResourcesExecute(r ApiMeOnenoteGetResourcesRequest) (MicrosoftGraphOnenoteResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteGetResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/resources/{onenoteResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteGetResourcesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteResourceId string
}


func (r ApiMeOnenoteGetResourcesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteGetResourcesContentExecute(r)
}

/*
MeOnenoteGetResourcesContent Get media content for the navigation property resources from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteResourceId key: id of onenoteResource
 @return ApiMeOnenoteGetResourcesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteGetResourcesContent(ctx _context.Context, onenoteResourceId string) ApiMeOnenoteGetResourcesContentRequest {
	return ApiMeOnenoteGetResourcesContentRequest{
		ApiService: a,
		ctx: ctx,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *MeOnenoteApiService) MeOnenoteGetResourcesContentExecute(r ApiMeOnenoteGetResourcesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteGetResourcesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/resources/{onenoteResource-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteGetSectionGroupsExecute(r)
}

/*
MeOnenoteGetSectionGroups Get sectionGroups from me

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteGetSectionGroups(ctx _context.Context, sectionGroupId string) ApiMeOnenoteGetSectionGroupsRequest {
	return ApiMeOnenoteGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteGetSectionGroupsExecute(r ApiMeOnenoteGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteGetSectionsRequest) Select_(select_ []string) ApiMeOnenoteGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteGetSectionsRequest) Expand(expand []string) ApiMeOnenoteGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteGetSectionsExecute(r)
}

/*
MeOnenoteGetSections Get sections from me

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteGetSections(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteGetSectionsRequest {
	return ApiMeOnenoteGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteGetSectionsExecute(r ApiMeOnenoteGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteListNotebooksRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteListNotebooksRequest) Top(top int32) ApiMeOnenoteListNotebooksRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteListNotebooksRequest) Skip(skip int32) ApiMeOnenoteListNotebooksRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteListNotebooksRequest) Search(search string) ApiMeOnenoteListNotebooksRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteListNotebooksRequest) Filter(filter string) ApiMeOnenoteListNotebooksRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteListNotebooksRequest) Count(count bool) ApiMeOnenoteListNotebooksRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteListNotebooksRequest) Orderby(orderby []string) ApiMeOnenoteListNotebooksRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteListNotebooksRequest) Select_(select_ []string) ApiMeOnenoteListNotebooksRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteListNotebooksRequest) Expand(expand []string) ApiMeOnenoteListNotebooksRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteListNotebooksRequest) Execute() (CollectionOfNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteListNotebooksExecute(r)
}

/*
MeOnenoteListNotebooks Get notebooks from me

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOnenoteListNotebooksRequest
*/
func (a *MeOnenoteApiService) MeOnenoteListNotebooks(ctx _context.Context) ApiMeOnenoteListNotebooksRequest {
	return ApiMeOnenoteListNotebooksRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfNotebook
func (a *MeOnenoteApiService) MeOnenoteListNotebooksExecute(r ApiMeOnenoteListNotebooksRequest) (CollectionOfNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteListNotebooks")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteListOperationsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteListOperationsRequest) Top(top int32) ApiMeOnenoteListOperationsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteListOperationsRequest) Skip(skip int32) ApiMeOnenoteListOperationsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteListOperationsRequest) Search(search string) ApiMeOnenoteListOperationsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteListOperationsRequest) Filter(filter string) ApiMeOnenoteListOperationsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteListOperationsRequest) Count(count bool) ApiMeOnenoteListOperationsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteListOperationsRequest) Orderby(orderby []string) ApiMeOnenoteListOperationsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteListOperationsRequest) Select_(select_ []string) ApiMeOnenoteListOperationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteListOperationsRequest) Expand(expand []string) ApiMeOnenoteListOperationsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteListOperationsRequest) Execute() (CollectionOfOnenoteOperation, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteListOperationsExecute(r)
}

/*
MeOnenoteListOperations Get operations from me

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOnenoteListOperationsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteListOperations(ctx _context.Context) ApiMeOnenoteListOperationsRequest {
	return ApiMeOnenoteListOperationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteOperation
func (a *MeOnenoteApiService) MeOnenoteListOperationsExecute(r ApiMeOnenoteListOperationsRequest) (CollectionOfOnenoteOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteListOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/operations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteListPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteListPagesRequest) Top(top int32) ApiMeOnenoteListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteListPagesRequest) Skip(skip int32) ApiMeOnenoteListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteListPagesRequest) Search(search string) ApiMeOnenoteListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteListPagesRequest) Filter(filter string) ApiMeOnenoteListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteListPagesRequest) Count(count bool) ApiMeOnenoteListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteListPagesRequest) Orderby(orderby []string) ApiMeOnenoteListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteListPagesRequest) Select_(select_ []string) ApiMeOnenoteListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteListPagesRequest) Expand(expand []string) ApiMeOnenoteListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteListPagesExecute(r)
}

/*
MeOnenoteListPages Get pages from me

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOnenoteListPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteListPages(ctx _context.Context) ApiMeOnenoteListPagesRequest {
	return ApiMeOnenoteListPagesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *MeOnenoteApiService) MeOnenoteListPagesExecute(r ApiMeOnenoteListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteListResourcesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteListResourcesRequest) Top(top int32) ApiMeOnenoteListResourcesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteListResourcesRequest) Skip(skip int32) ApiMeOnenoteListResourcesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteListResourcesRequest) Search(search string) ApiMeOnenoteListResourcesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteListResourcesRequest) Filter(filter string) ApiMeOnenoteListResourcesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteListResourcesRequest) Count(count bool) ApiMeOnenoteListResourcesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteListResourcesRequest) Orderby(orderby []string) ApiMeOnenoteListResourcesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteListResourcesRequest) Select_(select_ []string) ApiMeOnenoteListResourcesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteListResourcesRequest) Expand(expand []string) ApiMeOnenoteListResourcesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteListResourcesRequest) Execute() (CollectionOfOnenoteResource, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteListResourcesExecute(r)
}

/*
MeOnenoteListResources Get resources from me

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOnenoteListResourcesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteListResources(ctx _context.Context) ApiMeOnenoteListResourcesRequest {
	return ApiMeOnenoteListResourcesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteResource
func (a *MeOnenoteApiService) MeOnenoteListResourcesExecute(r ApiMeOnenoteListResourcesRequest) (CollectionOfOnenoteResource, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteResource
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteListResources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/resources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteListSectionGroupsRequest) Top(top int32) ApiMeOnenoteListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteListSectionGroupsRequest) Skip(skip int32) ApiMeOnenoteListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteListSectionGroupsRequest) Search(search string) ApiMeOnenoteListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteListSectionGroupsRequest) Filter(filter string) ApiMeOnenoteListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteListSectionGroupsRequest) Count(count bool) ApiMeOnenoteListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenoteListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteListSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteListSectionGroupsExecute(r)
}

/*
MeOnenoteListSectionGroups Get sectionGroups from me

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOnenoteListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteListSectionGroups(ctx _context.Context) ApiMeOnenoteListSectionGroupsRequest {
	return ApiMeOnenoteListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenoteListSectionGroupsExecute(r ApiMeOnenoteListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteListSectionsRequest) Top(top int32) ApiMeOnenoteListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteListSectionsRequest) Skip(skip int32) ApiMeOnenoteListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteListSectionsRequest) Search(search string) ApiMeOnenoteListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteListSectionsRequest) Filter(filter string) ApiMeOnenoteListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteListSectionsRequest) Count(count bool) ApiMeOnenoteListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteListSectionsRequest) Orderby(orderby []string) ApiMeOnenoteListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteListSectionsRequest) Select_(select_ []string) ApiMeOnenoteListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteListSectionsRequest) Expand(expand []string) ApiMeOnenoteListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteListSectionsExecute(r)
}

/*
MeOnenoteListSections Get sections from me

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeOnenoteListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteListSections(ctx _context.Context) ApiMeOnenoteListSectionsRequest {
	return ApiMeOnenoteListSectionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteListSectionsExecute(r ApiMeOnenoteListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenoteNotebooksCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteNotebooksCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteNotebooksCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksCreateSectionGroupsExecute(r)
}

/*
MeOnenoteNotebooksCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @return ApiMeOnenoteNotebooksCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksCreateSectionGroups(ctx _context.Context, notebookId string) ApiMeOnenoteNotebooksCreateSectionGroupsRequest {
	return ApiMeOnenoteNotebooksCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteNotebooksCreateSectionGroupsExecute(r ApiMeOnenoteNotebooksCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenoteNotebooksCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteNotebooksCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteNotebooksCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksCreateSectionsExecute(r)
}

/*
MeOnenoteNotebooksCreateSections Create new navigation property to sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @return ApiMeOnenoteNotebooksCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksCreateSections(ctx _context.Context, notebookId string) ApiMeOnenoteNotebooksCreateSectionsRequest {
	return ApiMeOnenoteNotebooksCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteNotebooksCreateSectionsExecute(r ApiMeOnenoteNotebooksCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksDeleteSectionGroupsExecute(r)
}

/*
MeOnenoteNotebooksDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksDeleteSectionGroups(ctx _context.Context, notebookId string, sectionGroupId string) ApiMeOnenoteNotebooksDeleteSectionGroupsRequest {
	return ApiMeOnenoteNotebooksDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksDeleteSectionGroupsExecute(r ApiMeOnenoteNotebooksDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksDeleteSectionsExecute(r)
}

/*
MeOnenoteNotebooksDeleteSections Delete navigation property sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksDeleteSections(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksDeleteSectionsRequest {
	return ApiMeOnenoteNotebooksDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksDeleteSectionsExecute(r ApiMeOnenoteNotebooksDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteNotebooksGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteNotebooksGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksGetSectionGroupsExecute(r)
}

/*
MeOnenoteNotebooksGetSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksGetSectionGroups(ctx _context.Context, notebookId string, sectionGroupId string) ApiMeOnenoteNotebooksGetSectionGroupsRequest {
	return ApiMeOnenoteNotebooksGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteNotebooksGetSectionGroupsExecute(r ApiMeOnenoteNotebooksGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksGetSectionsRequest) Select_(select_ []string) ApiMeOnenoteNotebooksGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksGetSectionsRequest) Expand(expand []string) ApiMeOnenoteNotebooksGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksGetSectionsExecute(r)
}

/*
MeOnenoteNotebooksGetSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksGetSections(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksGetSectionsRequest {
	return ApiMeOnenoteNotebooksGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteNotebooksGetSectionsExecute(r ApiMeOnenoteNotebooksGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteNotebooksListSectionGroupsRequest) Top(top int32) ApiMeOnenoteNotebooksListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteNotebooksListSectionGroupsRequest) Skip(skip int32) ApiMeOnenoteNotebooksListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteNotebooksListSectionGroupsRequest) Search(search string) ApiMeOnenoteNotebooksListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteNotebooksListSectionGroupsRequest) Filter(filter string) ApiMeOnenoteNotebooksListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteNotebooksListSectionGroupsRequest) Count(count bool) ApiMeOnenoteNotebooksListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteNotebooksListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenoteNotebooksListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteNotebooksListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteNotebooksListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksListSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteNotebooksListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksListSectionGroupsExecute(r)
}

/*
MeOnenoteNotebooksListSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @return ApiMeOnenoteNotebooksListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksListSectionGroups(ctx _context.Context, notebookId string) ApiMeOnenoteNotebooksListSectionGroupsRequest {
	return ApiMeOnenoteNotebooksListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenoteNotebooksListSectionGroupsExecute(r ApiMeOnenoteNotebooksListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteNotebooksListSectionsRequest) Top(top int32) ApiMeOnenoteNotebooksListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteNotebooksListSectionsRequest) Skip(skip int32) ApiMeOnenoteNotebooksListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteNotebooksListSectionsRequest) Search(search string) ApiMeOnenoteNotebooksListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteNotebooksListSectionsRequest) Filter(filter string) ApiMeOnenoteNotebooksListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteNotebooksListSectionsRequest) Count(count bool) ApiMeOnenoteNotebooksListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteNotebooksListSectionsRequest) Orderby(orderby []string) ApiMeOnenoteNotebooksListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteNotebooksListSectionsRequest) Select_(select_ []string) ApiMeOnenoteNotebooksListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksListSectionsRequest) Expand(expand []string) ApiMeOnenoteNotebooksListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksListSectionsExecute(r)
}

/*
MeOnenoteNotebooksListSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @return ApiMeOnenoteNotebooksListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksListSections(ctx _context.Context, notebookId string) ApiMeOnenoteNotebooksListSectionsRequest {
	return ApiMeOnenoteNotebooksListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteNotebooksListSectionsExecute(r ApiMeOnenoteNotebooksListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsCreateSectionGroupsExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsCreateSectionGroups(ctx _context.Context, notebookId string, sectionGroupId string) ApiMeOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest {
	return ApiMeOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsCreateSectionGroupsExecute(r ApiMeOnenoteNotebooksSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenoteNotebooksSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteNotebooksSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsCreateSectionsExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsCreateSections Create new navigation property to sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionGroupsCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsCreateSections(ctx _context.Context, notebookId string, sectionGroupId string) ApiMeOnenoteNotebooksSectionGroupsCreateSectionsRequest {
	return ApiMeOnenoteNotebooksSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsCreateSectionsExecute(r ApiMeOnenoteNotebooksSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsDeleteParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsDeleteParentNotebook(ctx _context.Context, notebookId string, sectionGroupId string) ApiMeOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsDeleteParentNotebookExecute(r ApiMeOnenoteNotebooksSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsDeleteParentSectionGroup(ctx _context.Context, notebookId string, sectionGroupId string) ApiMeOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest {
	return ApiMeOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsDeleteParentSectionGroupExecute(r ApiMeOnenoteNotebooksSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsDeleteSectionGroups(ctx _context.Context, notebookId string, sectionGroupId string, sectionGroupId1 string) ApiMeOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest {
	return ApiMeOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsDeleteSectionGroupsExecute(r ApiMeOnenoteNotebooksSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsDeleteSectionsExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsDeleteSections Delete navigation property sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionGroupsDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsDeleteSections(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionGroupsDeleteSectionsRequest {
	return ApiMeOnenoteNotebooksSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsDeleteSectionsExecute(r ApiMeOnenoteNotebooksSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsGetParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsGetParentNotebook Get parentNotebook from me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionGroupsGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsGetParentNotebook(ctx _context.Context, notebookId string, sectionGroupId string) ApiMeOnenoteNotebooksSectionGroupsGetParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsGetParentNotebookExecute(r ApiMeOnenoteNotebooksSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsGetParentSectionGroupExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsGetParentSectionGroup(ctx _context.Context, notebookId string, sectionGroupId string) ApiMeOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest {
	return ApiMeOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsGetParentSectionGroupExecute(r ApiMeOnenoteNotebooksSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsGetSectionGroupsExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsGetSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionGroupsGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsGetSectionGroups(ctx _context.Context, notebookId string, sectionGroupId string, sectionGroupId1 string) ApiMeOnenoteNotebooksSectionGroupsGetSectionGroupsRequest {
	return ApiMeOnenoteNotebooksSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsGetSectionGroupsExecute(r ApiMeOnenoteNotebooksSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionGroupsGetSectionsRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsGetSectionsExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsGetSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionGroupsGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsGetSections(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionGroupsGetSectionsRequest {
	return ApiMeOnenoteNotebooksSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsGetSectionsExecute(r ApiMeOnenoteNotebooksSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Top(top int32) ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Search(search string) ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Count(count bool) ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsListSectionGroupsExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsListSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsListSectionGroups(ctx _context.Context, notebookId string, sectionGroupId string) ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest {
	return ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsListSectionGroupsExecute(r ApiMeOnenoteNotebooksSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest) Top(top int32) ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest) Skip(skip int32) ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest) Search(search string) ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest) Filter(filter string) ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest) Count(count bool) ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsListSectionsExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsListSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsListSections(ctx _context.Context, notebookId string, sectionGroupId string) ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest {
	return ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsListSectionsExecute(r ApiMeOnenoteNotebooksSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsCreatePagesExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsCreatePages Create new navigation property to pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsCreatePages(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsCreatePagesExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsDeletePagesExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsDeletePages Delete navigation property pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsDeletePages(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsDeletePagesExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebook(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroup(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsGetPagesExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsGetPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsGetPages(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsGetPagesExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsGetPagesContentExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsGetPagesContent Get media content for the navigation property pages from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsGetPagesContent(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsGetPagesContentExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsGetParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsGetParentNotebook Get parentNotebook from me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsGetParentNotebook(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsGetParentNotebookExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroup(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Top(top int32) ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Skip(skip int32) ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Search(search string) ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Filter(filter string) ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Count(count bool) ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Orderby(orderby []string) ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsListPagesExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsListPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsListPages(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsListPagesExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebook(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSection Delete navigation property parentSection for me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSection(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebook Get parentNotebook from me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebook(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsPagesGetParentSection Get parentSection from me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsPagesGetParentSection(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebook(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSection Update the navigation property parentSection in me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSection(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsUpdatePagesExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsUpdatePages Update the navigation property pages in me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsUpdatePages(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsUpdatePagesExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest) Body(body *os.File) ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsUpdatePagesContent Update media content for the navigation property pages in me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsUpdatePagesContent(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebook(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroup(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest {
	return ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupExecute(r ApiMeOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsUpdateParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsUpdateParentNotebook(ctx _context.Context, notebookId string, sectionGroupId string) ApiMeOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsUpdateParentNotebookExecute(r ApiMeOnenoteNotebooksSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsUpdateParentSectionGroup(ctx _context.Context, notebookId string, sectionGroupId string) ApiMeOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest {
	return ApiMeOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsUpdateParentSectionGroupExecute(r ApiMeOnenoteNotebooksSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsUpdateSectionGroups(ctx _context.Context, notebookId string, sectionGroupId string, sectionGroupId1 string) ApiMeOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest {
	return ApiMeOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsUpdateSectionGroupsExecute(r ApiMeOnenoteNotebooksSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteNotebooksSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteNotebooksSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionGroupsUpdateSectionsExecute(r)
}

/*
MeOnenoteNotebooksSectionGroupsUpdateSections Update the navigation property sections in me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionGroupsUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsUpdateSections(ctx _context.Context, notebookId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionGroupsUpdateSectionsRequest {
	return ApiMeOnenoteNotebooksSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionGroupsUpdateSectionsExecute(r ApiMeOnenoteNotebooksSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiMeOnenoteNotebooksSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenoteNotebooksSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenoteNotebooksSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsCreatePagesExecute(r)
}

/*
MeOnenoteNotebooksSectionsCreatePages Create new navigation property to pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsCreatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsCreatePages(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsCreatePagesRequest {
	return ApiMeOnenoteNotebooksSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsCreatePagesExecute(r ApiMeOnenoteNotebooksSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsDeletePagesExecute(r)
}

/*
MeOnenoteNotebooksSectionsDeletePages Delete navigation property pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionsDeletePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsDeletePages(ctx _context.Context, notebookId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionsDeletePagesRequest {
	return ApiMeOnenoteNotebooksSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsDeletePagesExecute(r ApiMeOnenoteNotebooksSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsDeleteParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionsDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsDeleteParentNotebook(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsDeleteParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsDeleteParentNotebookExecute(r ApiMeOnenoteNotebooksSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsDeleteParentSectionGroupExecute(r)
}

/*
MeOnenoteNotebooksSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsDeleteParentSectionGroup(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsDeleteParentSectionGroupRequest {
	return ApiMeOnenoteNotebooksSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsDeleteParentSectionGroupExecute(r ApiMeOnenoteNotebooksSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionsGetPagesRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionsGetPagesRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsGetPagesExecute(r)
}

/*
MeOnenoteNotebooksSectionsGetPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionsGetPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsGetPages(ctx _context.Context, notebookId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionsGetPagesRequest {
	return ApiMeOnenoteNotebooksSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsGetPagesExecute(r ApiMeOnenoteNotebooksSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiMeOnenoteNotebooksSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsGetPagesContentExecute(r)
}

/*
MeOnenoteNotebooksSectionsGetPagesContent Get media content for the navigation property pages from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionsGetPagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsGetPagesContent(ctx _context.Context, notebookId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionsGetPagesContentRequest {
	return ApiMeOnenoteNotebooksSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsGetPagesContentExecute(r ApiMeOnenoteNotebooksSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionsGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionsGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsGetParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionsGetParentNotebook Get parentNotebook from me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsGetParentNotebook(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsGetParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsGetParentNotebookExecute(r ApiMeOnenoteNotebooksSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsGetParentSectionGroupExecute(r)
}

/*
MeOnenoteNotebooksSectionsGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsGetParentSectionGroup(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsGetParentSectionGroupRequest {
	return ApiMeOnenoteNotebooksSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsGetParentSectionGroupExecute(r ApiMeOnenoteNotebooksSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteNotebooksSectionsListPagesRequest) Top(top int32) ApiMeOnenoteNotebooksSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteNotebooksSectionsListPagesRequest) Skip(skip int32) ApiMeOnenoteNotebooksSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteNotebooksSectionsListPagesRequest) Search(search string) ApiMeOnenoteNotebooksSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteNotebooksSectionsListPagesRequest) Filter(filter string) ApiMeOnenoteNotebooksSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteNotebooksSectionsListPagesRequest) Count(count bool) ApiMeOnenoteNotebooksSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteNotebooksSectionsListPagesRequest) Orderby(orderby []string) ApiMeOnenoteNotebooksSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionsListPagesRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionsListPagesRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsListPagesExecute(r)
}

/*
MeOnenoteNotebooksSectionsListPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsListPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsListPages(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsListPagesRequest {
	return ApiMeOnenoteNotebooksSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsListPagesExecute(r ApiMeOnenoteNotebooksSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsPagesDeleteParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsPagesDeleteParentNotebook(ctx _context.Context, notebookId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsPagesDeleteParentNotebookExecute(r ApiMeOnenoteNotebooksSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsPagesDeleteParentSectionExecute(r)
}

/*
MeOnenoteNotebooksSectionsPagesDeleteParentSection Delete navigation property parentSection for me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionsPagesDeleteParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsPagesDeleteParentSection(ctx _context.Context, notebookId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionsPagesDeleteParentSectionRequest {
	return ApiMeOnenoteNotebooksSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsPagesDeleteParentSectionExecute(r ApiMeOnenoteNotebooksSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsPagesGetParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionsPagesGetParentNotebook Get parentNotebook from me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionsPagesGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsPagesGetParentNotebook(ctx _context.Context, notebookId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionsPagesGetParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsPagesGetParentNotebookExecute(r ApiMeOnenoteNotebooksSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsPagesGetParentSectionExecute(r)
}

/*
MeOnenoteNotebooksSectionsPagesGetParentSection Get parentSection from me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionsPagesGetParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsPagesGetParentSection(ctx _context.Context, notebookId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionsPagesGetParentSectionRequest {
	return ApiMeOnenoteNotebooksSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsPagesGetParentSectionExecute(r ApiMeOnenoteNotebooksSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsPagesUpdateParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsPagesUpdateParentNotebook(ctx _context.Context, notebookId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsPagesUpdateParentNotebookExecute(r ApiMeOnenoteNotebooksSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteNotebooksSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteNotebooksSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsPagesUpdateParentSectionExecute(r)
}

/*
MeOnenoteNotebooksSectionsPagesUpdateParentSection Update the navigation property parentSection in me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionsPagesUpdateParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsPagesUpdateParentSection(ctx _context.Context, notebookId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionsPagesUpdateParentSectionRequest {
	return ApiMeOnenoteNotebooksSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsPagesUpdateParentSectionExecute(r ApiMeOnenoteNotebooksSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroups(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupCreateSectionsExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupCreateSections Create new navigation property to sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupCreateSections(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupCreateSectionsExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebook(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroups(ctx _context.Context, notebookId string, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupDeleteSections Delete navigation property sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupDeleteSections(ctx _context.Context, notebookId string, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupGetParentNotebook Get parentNotebook from me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupGetParentNotebook(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroup(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupGetSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupGetSectionGroups(ctx _context.Context, notebookId string, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupGetSectionsExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupGetSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupGetSections(ctx _context.Context, notebookId string, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupGetSectionsExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Search(search string) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupListSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupListSectionGroups(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Top(top int32) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Skip(skip int32) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Search(search string) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Filter(filter string) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Count(count bool) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Expand(expand []string) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupListSectionsExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupListSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupListSections(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupListSectionsExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebook(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroups(ctx _context.Context, notebookId string, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsExecute(r)
}

/*
MeOnenoteNotebooksSectionsParentSectionGroupUpdateSections Update the navigation property sections in me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupUpdateSections(ctx _context.Context, notebookId string, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest {
	return ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsExecute(r ApiMeOnenoteNotebooksSectionsParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenoteNotebooksSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenoteNotebooksSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsUpdatePagesExecute(r)
}

/*
MeOnenoteNotebooksSectionsUpdatePages Update the navigation property pages in me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionsUpdatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsUpdatePages(ctx _context.Context, notebookId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionsUpdatePagesRequest {
	return ApiMeOnenoteNotebooksSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsUpdatePagesExecute(r ApiMeOnenoteNotebooksSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiMeOnenoteNotebooksSectionsUpdatePagesContentRequest) Body(body *os.File) ApiMeOnenoteNotebooksSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiMeOnenoteNotebooksSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsUpdatePagesContentExecute(r)
}

/*
MeOnenoteNotebooksSectionsUpdatePagesContent Update media content for the navigation property pages in me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteNotebooksSectionsUpdatePagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsUpdatePagesContent(ctx _context.Context, notebookId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteNotebooksSectionsUpdatePagesContentRequest {
	return ApiMeOnenoteNotebooksSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsUpdatePagesContentExecute(r ApiMeOnenoteNotebooksSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteNotebooksSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteNotebooksSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsUpdateParentNotebookExecute(r)
}

/*
MeOnenoteNotebooksSectionsUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsUpdateParentNotebook(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsUpdateParentNotebookRequest {
	return ApiMeOnenoteNotebooksSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsUpdateParentNotebookExecute(r ApiMeOnenoteNotebooksSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteNotebooksSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteNotebooksSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteNotebooksSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksSectionsUpdateParentSectionGroupExecute(r)
}

/*
MeOnenoteNotebooksSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksSectionsUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsUpdateParentSectionGroup(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksSectionsUpdateParentSectionGroupRequest {
	return ApiMeOnenoteNotebooksSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksSectionsUpdateParentSectionGroupExecute(r ApiMeOnenoteNotebooksSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteNotebooksUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteNotebooksUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteNotebooksUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksUpdateSectionGroupsExecute(r)
}

/*
MeOnenoteNotebooksUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteNotebooksUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksUpdateSectionGroups(ctx _context.Context, notebookId string, sectionGroupId string) ApiMeOnenoteNotebooksUpdateSectionGroupsRequest {
	return ApiMeOnenoteNotebooksUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksUpdateSectionGroupsExecute(r ApiMeOnenoteNotebooksUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteNotebooksUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteNotebooksUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteNotebooksUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteNotebooksUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteNotebooksUpdateSectionsExecute(r)
}

/*
MeOnenoteNotebooksUpdateSections Update the navigation property sections in me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteNotebooksUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteNotebooksUpdateSections(ctx _context.Context, notebookId string, onenoteSectionId string) ApiMeOnenoteNotebooksUpdateSectionsRequest {
	return ApiMeOnenoteNotebooksUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteNotebooksUpdateSectionsExecute(r ApiMeOnenoteNotebooksUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteNotebooksUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenotePagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesDeleteParentNotebookExecute(r)
}

/*
MeOnenotePagesDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesDeleteParentNotebook(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesDeleteParentNotebookRequest {
	return ApiMeOnenotePagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesDeleteParentNotebookExecute(r ApiMeOnenotePagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiMeOnenotePagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesDeleteParentSectionExecute(r)
}

/*
MeOnenotePagesDeleteParentSection Delete navigation property parentSection for me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesDeleteParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesDeleteParentSection(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesDeleteParentSectionRequest {
	return ApiMeOnenotePagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesDeleteParentSectionExecute(r ApiMeOnenotePagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenotePagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesGetParentNotebookRequest) Expand(expand []string) ApiMeOnenotePagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesGetParentNotebookExecute(r)
}

/*
MeOnenotePagesGetParentNotebook Get parentNotebook from me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesGetParentNotebook(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesGetParentNotebookRequest {
	return ApiMeOnenotePagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenotePagesGetParentNotebookExecute(r ApiMeOnenotePagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesGetParentSectionRequest) Select_(select_ []string) ApiMeOnenotePagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesGetParentSectionRequest) Expand(expand []string) ApiMeOnenotePagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesGetParentSectionExecute(r)
}

/*
MeOnenotePagesGetParentSection Get parentSection from me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesGetParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesGetParentSection(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesGetParentSectionRequest {
	return ApiMeOnenotePagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesGetParentSectionExecute(r ApiMeOnenotePagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenotePagesParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookCreateSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentNotebookCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookCreateSectionGroups(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentNotebookCreateSectionGroupsRequest {
	return ApiMeOnenotePagesParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookCreateSectionGroupsExecute(r ApiMeOnenotePagesParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenotePagesParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenotePagesParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenotePagesParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookCreateSectionsExecute(r)
}

/*
MeOnenotePagesParentNotebookCreateSections Create new navigation property to sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentNotebookCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookCreateSections(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentNotebookCreateSectionsRequest {
	return ApiMeOnenotePagesParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookCreateSectionsExecute(r ApiMeOnenotePagesParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookDeleteSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookDeleteSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookDeleteSectionGroupsRequest {
	return ApiMeOnenotePagesParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookDeleteSectionGroupsExecute(r ApiMeOnenotePagesParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookDeleteSectionsExecute(r)
}

/*
MeOnenotePagesParentNotebookDeleteSections Delete navigation property sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookDeleteSections(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookDeleteSectionsRequest {
	return ApiMeOnenotePagesParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookDeleteSectionsExecute(r ApiMeOnenotePagesParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookGetSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentNotebookGetSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookGetSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookGetSectionGroupsRequest {
	return ApiMeOnenotePagesParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookGetSectionGroupsExecute(r ApiMeOnenotePagesParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookGetSectionsRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookGetSectionsRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookGetSectionsExecute(r)
}

/*
MeOnenotePagesParentNotebookGetSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookGetSections(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookGetSectionsRequest {
	return ApiMeOnenotePagesParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookGetSectionsExecute(r ApiMeOnenotePagesParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentNotebookListSectionGroupsRequest) Top(top int32) ApiMeOnenotePagesParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiMeOnenotePagesParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentNotebookListSectionGroupsRequest) Search(search string) ApiMeOnenotePagesParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentNotebookListSectionGroupsRequest) Filter(filter string) ApiMeOnenotePagesParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentNotebookListSectionGroupsRequest) Count(count bool) ApiMeOnenotePagesParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenotePagesParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookListSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentNotebookListSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentNotebookListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookListSectionGroups(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentNotebookListSectionGroupsRequest {
	return ApiMeOnenotePagesParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookListSectionGroupsExecute(r ApiMeOnenotePagesParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentNotebookListSectionsRequest) Top(top int32) ApiMeOnenotePagesParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentNotebookListSectionsRequest) Skip(skip int32) ApiMeOnenotePagesParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentNotebookListSectionsRequest) Search(search string) ApiMeOnenotePagesParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentNotebookListSectionsRequest) Filter(filter string) ApiMeOnenotePagesParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentNotebookListSectionsRequest) Count(count bool) ApiMeOnenotePagesParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentNotebookListSectionsRequest) Orderby(orderby []string) ApiMeOnenotePagesParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookListSectionsRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookListSectionsRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookListSectionsExecute(r)
}

/*
MeOnenotePagesParentNotebookListSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentNotebookListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookListSections(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentNotebookListSectionsRequest {
	return ApiMeOnenotePagesParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookListSectionsExecute(r ApiMeOnenotePagesParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsCreateSections Create new navigation property to sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsCreateSections(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsCreateSectionsExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsDeleteSections Delete navigation property sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsDeleteSections(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsDeleteSectionsExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsGetParentNotebookExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsGetSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsGetSections(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionsRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsGetSectionsExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsListSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsListSectionGroupsExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsListSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsListSections(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsListSectionsExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsSectionsCreatePages Create new navigation property to pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsCreatePages(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsSectionsDeletePages Delete navigation property pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsDeletePages(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebook(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroup(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsGetPagesExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsSectionsGetPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsGetPages(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsGetPagesExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebook Get parentNotebook from me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebook(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroup(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Top(top int32) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Skip(skip int32) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Search(search string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Filter(filter string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Count(count bool) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Orderby(orderby []string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsListPagesExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsSectionsListPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsListPages(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsListPagesExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsSectionsUpdatePages Update the navigation property pages in me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsUpdatePages(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebook(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroup(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionGroupsUpdateSections Update the navigation property sections in me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsUpdateSections(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionGroupsUpdateSectionsExecute(r ApiMeOnenotePagesParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiMeOnenotePagesParentNotebookSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenotePagesParentNotebookSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsCreatePagesExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsCreatePages Create new navigation property to pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsCreatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsCreatePages(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsCreatePagesRequest {
	return ApiMeOnenotePagesParentNotebookSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsCreatePagesExecute(r ApiMeOnenotePagesParentNotebookSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsDeletePagesExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsDeletePages Delete navigation property pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenotePagesParentNotebookSectionsDeletePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsDeletePages(ctx _context.Context, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiMeOnenotePagesParentNotebookSectionsDeletePagesRequest {
	return ApiMeOnenotePagesParentNotebookSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsDeletePagesExecute(r ApiMeOnenotePagesParentNotebookSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsDeleteParentNotebookExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsDeleteParentNotebook(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest {
	return ApiMeOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsDeleteParentNotebookExecute(r ApiMeOnenotePagesParentNotebookSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsDeleteParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsDeleteParentSectionGroup(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest {
	return ApiMeOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsDeleteParentSectionGroupExecute(r ApiMeOnenotePagesParentNotebookSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionsGetPagesRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionsGetPagesRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsGetPagesExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsGetPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenotePagesParentNotebookSectionsGetPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsGetPages(ctx _context.Context, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiMeOnenotePagesParentNotebookSectionsGetPagesRequest {
	return ApiMeOnenotePagesParentNotebookSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsGetPagesExecute(r ApiMeOnenotePagesParentNotebookSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionsGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionsGetParentNotebookRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsGetParentNotebookExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsGetParentNotebook Get parentNotebook from me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsGetParentNotebook(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsGetParentNotebookRequest {
	return ApiMeOnenotePagesParentNotebookSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsGetParentNotebookExecute(r ApiMeOnenotePagesParentNotebookSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsGetParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsGetParentSectionGroup(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest {
	return ApiMeOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsGetParentSectionGroupExecute(r ApiMeOnenotePagesParentNotebookSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentNotebookSectionsListPagesRequest) Top(top int32) ApiMeOnenotePagesParentNotebookSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentNotebookSectionsListPagesRequest) Skip(skip int32) ApiMeOnenotePagesParentNotebookSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentNotebookSectionsListPagesRequest) Search(search string) ApiMeOnenotePagesParentNotebookSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentNotebookSectionsListPagesRequest) Filter(filter string) ApiMeOnenotePagesParentNotebookSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentNotebookSectionsListPagesRequest) Count(count bool) ApiMeOnenotePagesParentNotebookSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentNotebookSectionsListPagesRequest) Orderby(orderby []string) ApiMeOnenotePagesParentNotebookSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionsListPagesRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionsListPagesRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsListPagesExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsListPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsListPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsListPages(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsListPagesRequest {
	return ApiMeOnenotePagesParentNotebookSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsListPagesExecute(r ApiMeOnenotePagesParentNotebookSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroups(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSections Create new navigation property to sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSections(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebook(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroups(ctx _context.Context, onenotePageId string, onenoteSectionId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSections Delete navigation property sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSections(ctx _context.Context, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebook Get parentNotebook from me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebook(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroup(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroups(ctx _context.Context, onenotePageId string, onenoteSectionId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupGetSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupGetSections(ctx _context.Context, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Search(search string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroups(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Top(top int32) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Skip(skip int32) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Search(search string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Filter(filter string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Count(count bool) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Expand(expand []string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupListSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupListSections(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebook(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroups(ctx _context.Context, onenotePageId string, onenoteSectionId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSections Update the navigation property sections in me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSections(ctx _context.Context, onenotePageId string, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest {
	return ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsExecute(r ApiMeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenotePagesParentNotebookSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsUpdatePagesExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsUpdatePages Update the navigation property pages in me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenotePagesParentNotebookSectionsUpdatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsUpdatePages(ctx _context.Context, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiMeOnenotePagesParentNotebookSectionsUpdatePagesRequest {
	return ApiMeOnenotePagesParentNotebookSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsUpdatePagesExecute(r ApiMeOnenotePagesParentNotebookSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsUpdateParentNotebookExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsUpdateParentNotebook(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest {
	return ApiMeOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsUpdateParentNotebookExecute(r ApiMeOnenotePagesParentNotebookSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookSectionsUpdateParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentNotebookSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsUpdateParentSectionGroup(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest {
	return ApiMeOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookSectionsUpdateParentSectionGroupExecute(r ApiMeOnenotePagesParentNotebookSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookUpdateSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentNotebookUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookUpdateSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentNotebookUpdateSectionGroupsRequest {
	return ApiMeOnenotePagesParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookUpdateSectionGroupsExecute(r ApiMeOnenotePagesParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenotePagesParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenotePagesParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenotePagesParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentNotebookUpdateSectionsExecute(r)
}

/*
MeOnenotePagesParentNotebookUpdateSections Update the navigation property sections in me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentNotebookUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookUpdateSections(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentNotebookUpdateSectionsRequest {
	return ApiMeOnenotePagesParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentNotebookUpdateSectionsExecute(r ApiMeOnenotePagesParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionCreatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiMeOnenotePagesParentSectionCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenotePagesParentSectionCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenotePagesParentSectionCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionCreatePagesExecute(r)
}

/*
MeOnenotePagesParentSectionCreatePages Create new navigation property to pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionCreatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionCreatePages(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionCreatePagesRequest {
	return ApiMeOnenotePagesParentSectionCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionCreatePagesExecute(r ApiMeOnenotePagesParentSectionCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionDeletePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenotePageId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentSectionDeletePagesRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentSectionDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentSectionDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionDeletePagesExecute(r)
}

/*
MeOnenotePagesParentSectionDeletePages Delete navigation property pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionDeletePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionDeletePages(ctx _context.Context, onenotePageId string, onenotePageId1 string) ApiMeOnenotePagesParentSectionDeletePagesRequest {
	return ApiMeOnenotePagesParentSectionDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionDeletePagesExecute(r ApiMeOnenotePagesParentSectionDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentSectionDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentSectionDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentSectionDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionDeleteParentNotebookExecute(r)
}

/*
MeOnenotePagesParentSectionDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionDeleteParentNotebook(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionDeleteParentNotebookRequest {
	return ApiMeOnenotePagesParentSectionDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionDeleteParentNotebookExecute(r ApiMeOnenotePagesParentSectionDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentSectionDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentSectionDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentSectionDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionDeleteParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentSectionDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionDeleteParentSectionGroup(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionDeleteParentSectionGroupRequest {
	return ApiMeOnenotePagesParentSectionDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionDeleteParentSectionGroupExecute(r ApiMeOnenotePagesParentSectionDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionGetPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenotePageId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionGetPagesRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionGetPagesRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionGetPagesExecute(r)
}

/*
MeOnenotePagesParentSectionGetPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionGetPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionGetPages(ctx _context.Context, onenotePageId string, onenotePageId1 string) ApiMeOnenotePagesParentSectionGetPagesRequest {
	return ApiMeOnenotePagesParentSectionGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionGetPagesExecute(r ApiMeOnenotePagesParentSectionGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionGetParentNotebookRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionGetParentNotebookExecute(r)
}

/*
MeOnenotePagesParentSectionGetParentNotebook Get parentNotebook from me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionGetParentNotebook(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionGetParentNotebookRequest {
	return ApiMeOnenotePagesParentSectionGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionGetParentNotebookExecute(r ApiMeOnenotePagesParentSectionGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionGetParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentSectionGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionGetParentSectionGroup(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionGetParentSectionGroupRequest {
	return ApiMeOnenotePagesParentSectionGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionGetParentSectionGroupExecute(r ApiMeOnenotePagesParentSectionGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionListPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentSectionListPagesRequest) Top(top int32) ApiMeOnenotePagesParentSectionListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentSectionListPagesRequest) Skip(skip int32) ApiMeOnenotePagesParentSectionListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentSectionListPagesRequest) Search(search string) ApiMeOnenotePagesParentSectionListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentSectionListPagesRequest) Filter(filter string) ApiMeOnenotePagesParentSectionListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentSectionListPagesRequest) Count(count bool) ApiMeOnenotePagesParentSectionListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentSectionListPagesRequest) Orderby(orderby []string) ApiMeOnenotePagesParentSectionListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionListPagesRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionListPagesRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionListPagesExecute(r)
}

/*
MeOnenotePagesParentSectionListPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionListPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionListPages(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionListPagesRequest {
	return ApiMeOnenotePagesParentSectionListPagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionListPagesExecute(r ApiMeOnenotePagesParentSectionListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookCreateSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookCreateSectionGroups(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookCreateSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenotePagesParentSectionParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenotePagesParentSectionParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookCreateSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookCreateSections Create new navigation property to sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentNotebookCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookCreateSections(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentNotebookCreateSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookCreateSectionsExecute(r ApiMeOnenotePagesParentSectionParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookDeleteSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookDeleteSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookDeleteSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookDeleteSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookDeleteSections Delete navigation property sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookDeleteSections(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookDeleteSectionsExecute(r ApiMeOnenotePagesParentSectionParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookGetSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookGetSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookGetSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookGetSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentNotebookGetSectionsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentNotebookGetSectionsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookGetSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookGetSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentSectionParentNotebookGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookGetSections(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentSectionParentNotebookGetSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookGetSectionsExecute(r ApiMeOnenotePagesParentSectionParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Top(top int32) ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Search(search string) ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Filter(filter string) ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Count(count bool) ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookListSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookListSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookListSectionGroups(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookListSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest) Top(top int32) ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest) Skip(skip int32) ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest) Search(search string) ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest) Filter(filter string) ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest) Count(count bool) ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest) Orderby(orderby []string) ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookListSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookListSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookListSections(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookListSectionsExecute(r ApiMeOnenotePagesParentSectionParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSections Create new navigation property to sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSections(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSections Delete navigation property sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSections(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsGetSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsGetSections(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsListSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsListSections(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSections Update the navigation property sections in me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSections(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string) ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsExecute(r ApiMeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookUpdateSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookUpdateSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookUpdateSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentNotebookUpdateSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentNotebookUpdateSections Update the navigation property sections in me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookUpdateSections(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentNotebookUpdateSectionsExecute(r ApiMeOnenotePagesParentSectionParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupCreateSectionGroups(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupCreateSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupCreateSections Create new navigation property to sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupCreateSections(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupCreateSectionsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupDeleteParentNotebook(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupDeleteSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupDeleteSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupDeleteSections Delete navigation property sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupDeleteSections(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupDeleteSectionsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupGetParentNotebookExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupGetParentNotebook Get parentNotebook from me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupGetParentNotebook(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupGetParentNotebookExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupGetParentSectionGroup(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupGetSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupGetSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupGetSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupGetSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupGetSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupGetSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupGetSections(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupGetSectionsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Search(search string) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupListSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupListSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupListSectionGroups(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupListSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Top(top int32) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Skip(skip int32) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Search(search string) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Filter(filter string) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Count(count bool) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupListSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupListSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupListSections(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupListSectionsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroups(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSections Create new navigation property to sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSections(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSections Delete navigation property sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSections(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSections(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Top(top int32) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Search(search string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Filter(filter string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Count(count bool) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroups(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Top(top int32) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Skip(skip int32) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Search(search string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Filter(filter string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Count(count bool) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Orderby(orderby []string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Select_(select_ []string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Expand(expand []string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupParentNotebookListSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookListSections(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSections Update the navigation property sections in me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSections(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupUpdateParentNotebook(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupUpdateSectionGroups(ctx _context.Context, onenotePageId string, sectionGroupId string) ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionParentSectionGroupUpdateSectionsExecute(r)
}

/*
MeOnenotePagesParentSectionParentSectionGroupUpdateSections Update the navigation property sections in me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupUpdateSections(ctx _context.Context, onenotePageId string, onenoteSectionId string) ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest {
	return ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionParentSectionGroupUpdateSectionsExecute(r ApiMeOnenotePagesParentSectionParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenotePageId1 string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiMeOnenotePagesParentSectionUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenotePagesParentSectionUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenotePagesParentSectionUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionUpdatePagesExecute(r)
}

/*
MeOnenotePagesParentSectionUpdatePages Update the navigation property pages in me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionUpdatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionUpdatePages(ctx _context.Context, onenotePageId string, onenotePageId1 string) ApiMeOnenotePagesParentSectionUpdatePagesRequest {
	return ApiMeOnenotePagesParentSectionUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionUpdatePagesExecute(r ApiMeOnenotePagesParentSectionUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenotePagesParentSectionUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenotePagesParentSectionUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenotePagesParentSectionUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionUpdateParentNotebookExecute(r)
}

/*
MeOnenotePagesParentSectionUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionUpdateParentNotebook(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionUpdateParentNotebookRequest {
	return ApiMeOnenotePagesParentSectionUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionUpdateParentNotebookExecute(r ApiMeOnenotePagesParentSectionUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesParentSectionUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenotePagesParentSectionUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenotePagesParentSectionUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenotePagesParentSectionUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesParentSectionUpdateParentSectionGroupExecute(r)
}

/*
MeOnenotePagesParentSectionUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesParentSectionUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionUpdateParentSectionGroup(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesParentSectionUpdateParentSectionGroupRequest {
	return ApiMeOnenotePagesParentSectionUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesParentSectionUpdateParentSectionGroupExecute(r ApiMeOnenotePagesParentSectionUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesParentSectionUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenotePagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenotePagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenotePagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesUpdateParentNotebookExecute(r)
}

/*
MeOnenotePagesUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesUpdateParentNotebook(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesUpdateParentNotebookRequest {
	return ApiMeOnenotePagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesUpdateParentNotebookExecute(r ApiMeOnenotePagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenotePagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenotePagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenotePagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenotePagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenotePagesUpdateParentSectionExecute(r)
}

/*
MeOnenotePagesUpdateParentSection Update the navigation property parentSection in me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenotePagesUpdateParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenotePagesUpdateParentSection(ctx _context.Context, onenotePageId string) ApiMeOnenotePagesUpdateParentSectionRequest {
	return ApiMeOnenotePagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenotePagesUpdateParentSectionExecute(r ApiMeOnenotePagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenotePagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
}


func (r ApiMeOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentExecute(r)
}

/*
MeOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContent Get media content for the navigation property pages from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContent(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiMeOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest {
	return ApiMeOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return *os.File
func (a *MeOnenoteApiService) MeOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentExecute(r ApiMeOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteParentNotebookSectionGroupsSectionsPagesGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	sectionGroupId string
	onenoteSectionId string
	onenotePageId1 string
	body **os.File
}

// New media content.
func (r ApiMeOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest) Body(body *os.File) ApiMeOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiMeOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentExecute(r)
}

/*
MeOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContent Update media content for the navigation property pages in me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContent(ctx _context.Context, onenotePageId string, sectionGroupId string, onenoteSectionId string, onenotePageId1 string) ApiMeOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest {
	return ApiMeOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentExecute(r ApiMeOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteParentNotebookSectionGroupsSectionsPagesUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteParentNotebookSectionsPagesGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
}


func (r ApiMeOnenoteParentNotebookSectionsPagesGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteParentNotebookSectionsPagesGetPagesContentExecute(r)
}

/*
MeOnenoteParentNotebookSectionsPagesGetPagesContent Get media content for the navigation property pages from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenoteParentNotebookSectionsPagesGetPagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteParentNotebookSectionsPagesGetPagesContent(ctx _context.Context, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiMeOnenoteParentNotebookSectionsPagesGetPagesContentRequest {
	return ApiMeOnenoteParentNotebookSectionsPagesGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return *os.File
func (a *MeOnenoteApiService) MeOnenoteParentNotebookSectionsPagesGetPagesContentExecute(r ApiMeOnenoteParentNotebookSectionsPagesGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteParentNotebookSectionsPagesGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenoteSectionId string
	onenotePageId1 string
	body **os.File
}

// New media content.
func (r ApiMeOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest) Body(body *os.File) ApiMeOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiMeOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteParentNotebookSectionsPagesUpdatePagesContentExecute(r)
}

/*
MeOnenoteParentNotebookSectionsPagesUpdatePagesContent Update media content for the navigation property pages in me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteParentNotebookSectionsPagesUpdatePagesContent(ctx _context.Context, onenotePageId string, onenoteSectionId string, onenotePageId1 string) ApiMeOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest {
	return ApiMeOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteParentNotebookSectionsPagesUpdatePagesContentExecute(r ApiMeOnenoteParentNotebookSectionsPagesUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteParentNotebookSectionsPagesUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteParentSectionPagesGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenotePageId1 string
}


func (r ApiMeOnenoteParentSectionPagesGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteParentSectionPagesGetPagesContentExecute(r)
}

/*
MeOnenoteParentSectionPagesGetPagesContent Get media content for the navigation property pages from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenoteParentSectionPagesGetPagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteParentSectionPagesGetPagesContent(ctx _context.Context, onenotePageId string, onenotePageId1 string) ApiMeOnenoteParentSectionPagesGetPagesContentRequest {
	return ApiMeOnenoteParentSectionPagesGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
//  @return *os.File
func (a *MeOnenoteApiService) MeOnenoteParentSectionPagesGetPagesContentExecute(r ApiMeOnenoteParentSectionPagesGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteParentSectionPagesGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteParentSectionPagesUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	onenotePageId1 string
	body **os.File
}

// New media content.
func (r ApiMeOnenoteParentSectionPagesUpdatePagesContentRequest) Body(body *os.File) ApiMeOnenoteParentSectionPagesUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiMeOnenoteParentSectionPagesUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteParentSectionPagesUpdatePagesContentExecute(r)
}

/*
MeOnenoteParentSectionPagesUpdatePagesContent Update media content for the navigation property pages in me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @param onenotePageId1 key: id of onenotePage
 @return ApiMeOnenoteParentSectionPagesUpdatePagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteParentSectionPagesUpdatePagesContent(ctx _context.Context, onenotePageId string, onenotePageId1 string) ApiMeOnenoteParentSectionPagesUpdatePagesContentRequest {
	return ApiMeOnenoteParentSectionPagesUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
		onenotePageId1: onenotePageId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteParentSectionPagesUpdatePagesContentExecute(r ApiMeOnenoteParentSectionPagesUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteParentSectionPagesUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/parentSection/pages/{onenotePage-id1}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id1"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenoteSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsCreateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsCreateSectionGroups(ctx _context.Context, sectionGroupId string) ApiMeOnenoteSectionGroupsCreateSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsCreateSectionGroupsExecute(r ApiMeOnenoteSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenoteSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsCreateSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsCreateSections Create new navigation property to sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsCreateSections(ctx _context.Context, sectionGroupId string) ApiMeOnenoteSectionGroupsCreateSectionsRequest {
	return ApiMeOnenoteSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsCreateSectionsExecute(r ApiMeOnenoteSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsDeleteParentNotebookExecute(r)
}

/*
MeOnenoteSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsDeleteParentNotebook(ctx _context.Context, sectionGroupId string) ApiMeOnenoteSectionGroupsDeleteParentNotebookRequest {
	return ApiMeOnenoteSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsDeleteParentNotebookExecute(r ApiMeOnenoteSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsDeleteParentSectionGroup(ctx _context.Context, sectionGroupId string) ApiMeOnenoteSectionGroupsDeleteParentSectionGroupRequest {
	return ApiMeOnenoteSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsDeleteParentSectionGroupExecute(r ApiMeOnenoteSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsDeleteSectionGroups(ctx _context.Context, sectionGroupId string, sectionGroupId1 string) ApiMeOnenoteSectionGroupsDeleteSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsDeleteSectionGroupsExecute(r ApiMeOnenoteSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsDeleteSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsDeleteSections Delete navigation property sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsDeleteSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsDeleteSectionsRequest {
	return ApiMeOnenoteSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsDeleteSectionsExecute(r ApiMeOnenoteSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsGetParentNotebookExecute(r)
}

/*
MeOnenoteSectionGroupsGetParentNotebook Get parentNotebook from me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsGetParentNotebook(ctx _context.Context, sectionGroupId string) ApiMeOnenoteSectionGroupsGetParentNotebookRequest {
	return ApiMeOnenoteSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsGetParentNotebookExecute(r ApiMeOnenoteSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsGetParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionGroupsGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsGetParentSectionGroup(ctx _context.Context, sectionGroupId string) ApiMeOnenoteSectionGroupsGetParentSectionGroupRequest {
	return ApiMeOnenoteSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsGetParentSectionGroupExecute(r ApiMeOnenoteSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsGetSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsGetSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsGetSectionGroups(ctx _context.Context, sectionGroupId string, sectionGroupId1 string) ApiMeOnenoteSectionGroupsGetSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsGetSectionGroupsExecute(r ApiMeOnenoteSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsGetSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsGetSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsGetSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsGetSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsGetSectionsRequest {
	return ApiMeOnenoteSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsGetSectionsExecute(r ApiMeOnenoteSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionGroupsListSectionGroupsRequest) Top(top int32) ApiMeOnenoteSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiMeOnenoteSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionGroupsListSectionGroupsRequest) Search(search string) ApiMeOnenoteSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiMeOnenoteSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionGroupsListSectionGroupsRequest) Count(count bool) ApiMeOnenoteSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenoteSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsListSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsListSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsListSectionGroups(ctx _context.Context, sectionGroupId string) ApiMeOnenoteSectionGroupsListSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsListSectionGroupsExecute(r ApiMeOnenoteSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionGroupsListSectionsRequest) Top(top int32) ApiMeOnenoteSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionGroupsListSectionsRequest) Skip(skip int32) ApiMeOnenoteSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionGroupsListSectionsRequest) Search(search string) ApiMeOnenoteSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionGroupsListSectionsRequest) Filter(filter string) ApiMeOnenoteSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionGroupsListSectionsRequest) Count(count bool) ApiMeOnenoteSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiMeOnenoteSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsListSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsListSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsListSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsListSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsListSections(ctx _context.Context, sectionGroupId string) ApiMeOnenoteSectionGroupsListSectionsRequest {
	return ApiMeOnenoteSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsListSectionsExecute(r ApiMeOnenoteSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookCreateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookCreateSectionGroups(ctx _context.Context, sectionGroupId string) ApiMeOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookCreateSectionGroupsExecute(r ApiMeOnenoteSectionGroupsParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenoteSectionGroupsParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionGroupsParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookCreateSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookCreateSections Create new navigation property to sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsParentNotebookCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookCreateSections(ctx _context.Context, sectionGroupId string) ApiMeOnenoteSectionGroupsParentNotebookCreateSectionsRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookCreateSectionsExecute(r ApiMeOnenoteSectionGroupsParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookDeleteSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookDeleteSectionGroups(ctx _context.Context, sectionGroupId string, sectionGroupId1 string) ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookDeleteSectionGroupsExecute(r ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookDeleteSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookDeleteSections Delete navigation property sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookDeleteSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionsRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookDeleteSectionsExecute(r ApiMeOnenoteSectionGroupsParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookGetSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookGetSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookGetSectionGroups(ctx _context.Context, sectionGroupId string, sectionGroupId1 string) ApiMeOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookGetSectionGroupsExecute(r ApiMeOnenoteSectionGroupsParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsParentNotebookGetSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsParentNotebookGetSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookGetSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookGetSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsParentNotebookGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookGetSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsParentNotebookGetSectionsRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookGetSectionsExecute(r ApiMeOnenoteSectionGroupsParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Top(top int32) ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Search(search string) ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Filter(filter string) ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Count(count bool) ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookListSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookListSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookListSectionGroups(ctx _context.Context, sectionGroupId string) ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookListSectionGroupsExecute(r ApiMeOnenoteSectionGroupsParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest) Top(top int32) ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest) Skip(skip int32) ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest) Search(search string) ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest) Filter(filter string) ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest) Count(count bool) ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest) Orderby(orderby []string) ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookListSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookListSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookListSections(ctx _context.Context, sectionGroupId string) ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookListSectionsExecute(r ApiMeOnenoteSectionGroupsParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsCreatePagesExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsCreatePages Create new navigation property to pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsCreatePages(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsCreatePagesExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsDeletePagesExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsDeletePages Delete navigation property pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsDeletePages(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsDeletePagesExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebook(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroup(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsGetPagesExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsGetPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsGetPages(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsGetPagesExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsGetPagesContentExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsGetPagesContent Get media content for the navigation property pages from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsGetPagesContent(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsGetPagesContentExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsGetParentNotebook Get parentNotebook from me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsGetParentNotebook(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroup(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Top(top int32) ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Skip(skip int32) ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Search(search string) ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Filter(filter string) ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Count(count bool) ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Orderby(orderby []string) ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsListPagesExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsListPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsListPages(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsListPagesExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebook(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSection Delete navigation property parentSection for me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSection(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebook Get parentNotebook from me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebook(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSection Get parentSection from me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSection(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebook(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSection Update the navigation property parentSection in me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSection(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsUpdatePages Update the navigation property pages in me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsUpdatePages(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest) Body(body *os.File) ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContent Update media content for the navigation property pages in me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContent(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebook(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroup(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupExecute(r ApiMeOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookUpdateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookUpdateSectionGroups(ctx _context.Context, sectionGroupId string, sectionGroupId1 string) ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookUpdateSectionGroupsExecute(r ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsParentNotebookUpdateSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsParentNotebookUpdateSections Update the navigation property sections in me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookUpdateSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionsRequest {
	return ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsParentNotebookUpdateSectionsExecute(r ApiMeOnenoteSectionGroupsParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiMeOnenoteSectionGroupsSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenoteSectionGroupsSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsCreatePagesExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsCreatePages Create new navigation property to pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsCreatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsCreatePages(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsSectionsCreatePagesRequest {
	return ApiMeOnenoteSectionGroupsSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsCreatePagesExecute(r ApiMeOnenoteSectionGroupsSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsDeletePagesExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsDeletePages Delete navigation property pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionsDeletePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsDeletePages(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionsDeletePagesRequest {
	return ApiMeOnenoteSectionGroupsSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsDeletePagesExecute(r ApiMeOnenoteSectionGroupsSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsDeleteParentNotebookExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsDeleteParentNotebook(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsSectionsDeleteParentNotebookRequest {
	return ApiMeOnenoteSectionGroupsSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsDeleteParentNotebookExecute(r ApiMeOnenoteSectionGroupsSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsDeleteParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsDeleteParentSectionGroup(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest {
	return ApiMeOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsDeleteParentSectionGroupExecute(r ApiMeOnenoteSectionGroupsSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsSectionsGetPagesRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsSectionsGetPagesRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsGetPagesExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsGetPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionsGetPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsGetPages(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionsGetPagesRequest {
	return ApiMeOnenoteSectionGroupsSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsGetPagesExecute(r ApiMeOnenoteSectionGroupsSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
}


func (r ApiMeOnenoteSectionGroupsSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsGetPagesContentExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsGetPagesContent Get media content for the navigation property pages from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionsGetPagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsGetPagesContent(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionsGetPagesContentRequest {
	return ApiMeOnenoteSectionGroupsSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsGetPagesContentExecute(r ApiMeOnenoteSectionGroupsSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsSectionsGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsSectionsGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsGetParentNotebookExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsGetParentNotebook Get parentNotebook from me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsGetParentNotebook(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsSectionsGetParentNotebookRequest {
	return ApiMeOnenoteSectionGroupsSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsGetParentNotebookExecute(r ApiMeOnenoteSectionGroupsSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsGetParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsGetParentSectionGroup(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsSectionsGetParentSectionGroupRequest {
	return ApiMeOnenoteSectionGroupsSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsGetParentSectionGroupExecute(r ApiMeOnenoteSectionGroupsSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionGroupsSectionsListPagesRequest) Top(top int32) ApiMeOnenoteSectionGroupsSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionGroupsSectionsListPagesRequest) Skip(skip int32) ApiMeOnenoteSectionGroupsSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionGroupsSectionsListPagesRequest) Search(search string) ApiMeOnenoteSectionGroupsSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionGroupsSectionsListPagesRequest) Filter(filter string) ApiMeOnenoteSectionGroupsSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionGroupsSectionsListPagesRequest) Count(count bool) ApiMeOnenoteSectionGroupsSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionGroupsSectionsListPagesRequest) Orderby(orderby []string) ApiMeOnenoteSectionGroupsSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsSectionsListPagesRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsSectionsListPagesRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsListPagesExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsListPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsListPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsListPages(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsSectionsListPagesRequest {
	return ApiMeOnenoteSectionGroupsSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsListPagesExecute(r ApiMeOnenoteSectionGroupsSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesDeleteParentNotebookExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesDeleteParentNotebook(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesDeleteParentNotebookExecute(r ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesDeleteParentSectionExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesDeleteParentSection Delete navigation property parentSection for me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesDeleteParentSection(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesDeleteParentSectionExecute(r ApiMeOnenoteSectionGroupsSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesGetParentNotebookExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesGetParentNotebook Get parentNotebook from me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesGetParentNotebook(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesGetParentNotebookExecute(r ApiMeOnenoteSectionGroupsSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesGetParentSectionExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesGetParentSection Get parentSection from me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionsPagesGetParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesGetParentSection(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionsPagesGetParentSectionRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesGetParentSectionExecute(r ApiMeOnenoteSectionGroupsSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroups(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsExecute(r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSections Create new navigation property to sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsExecute(r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroups(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string, sectionGroupId1 string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsExecute(r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSections Delete navigation property sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsExecute(r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroups(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string, sectionGroupId1 string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsExecute(r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesParentNotebookGetSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookGetSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsExecute(r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Top(top int32) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Search(search string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Filter(filter string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Count(count bool) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroups(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsExecute(r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Top(top int32) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Skip(skip int32) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Search(search string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Filter(filter string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Count(count bool) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Orderby(orderby []string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesParentNotebookListSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookListSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsExecute(r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroups(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string, sectionGroupId1 string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsExecute(r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSections Update the navigation property sections in me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsExecute(r ApiMeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesUpdateParentNotebookExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesUpdateParentNotebook(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesUpdateParentNotebookExecute(r ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsPagesUpdateParentSectionExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsPagesUpdateParentSection Update the navigation property parentSection in me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesUpdateParentSection(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest {
	return ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsPagesUpdateParentSectionExecute(r ApiMeOnenoteSectionGroupsSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroups(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsExecute(r ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsParentNotebookCreateSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsParentNotebookCreateSections Create new navigation property to sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookCreateSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest {
	return ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookCreateSectionsExecute(r ApiMeOnenoteSectionGroupsSectionsParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroups(ctx _context.Context, sectionGroupId string, onenoteSectionId string, sectionGroupId1 string) ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsExecute(r ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsParentNotebookDeleteSections Delete navigation property sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookDeleteSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest {
	return ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsExecute(r ApiMeOnenoteSectionGroupsSectionsParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsParentNotebookGetSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookGetSectionGroups(ctx _context.Context, sectionGroupId string, onenoteSectionId string, sectionGroupId1 string) ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsExecute(r ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsParentNotebookGetSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsParentNotebookGetSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookGetSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest {
	return ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookGetSectionsExecute(r ApiMeOnenoteSectionGroupsSectionsParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Top(top int32) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Search(search string) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Filter(filter string) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Count(count bool) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsParentNotebookListSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookListSectionGroups(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsExecute(r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Top(top int32) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Skip(skip int32) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Search(search string) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Filter(filter string) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Count(count bool) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Orderby(orderby []string) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsParentNotebookListSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsParentNotebookListSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookListSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest {
	return ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookListSectionsExecute(r ApiMeOnenoteSectionGroupsSectionsParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroups(ctx _context.Context, sectionGroupId string, onenoteSectionId string, sectionGroupId1 string) ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsExecute(r ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsParentNotebookUpdateSections Update the navigation property sections in me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookUpdateSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest {
	return ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsExecute(r ApiMeOnenoteSectionGroupsSectionsParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenoteSectionGroupsSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsUpdatePagesExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsUpdatePages Update the navigation property pages in me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionsUpdatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsUpdatePages(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionsUpdatePagesRequest {
	return ApiMeOnenoteSectionGroupsSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsUpdatePagesExecute(r ApiMeOnenoteSectionGroupsSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiMeOnenoteSectionGroupsSectionsUpdatePagesContentRequest) Body(body *os.File) ApiMeOnenoteSectionGroupsSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsUpdatePagesContentExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsUpdatePagesContent Update media content for the navigation property pages in me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionGroupsSectionsUpdatePagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsUpdatePagesContent(ctx _context.Context, sectionGroupId string, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionGroupsSectionsUpdatePagesContentRequest {
	return ApiMeOnenoteSectionGroupsSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsUpdatePagesContentExecute(r ApiMeOnenoteSectionGroupsSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteSectionGroupsSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsUpdateParentNotebookExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsUpdateParentNotebook(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsSectionsUpdateParentNotebookRequest {
	return ApiMeOnenoteSectionGroupsSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsUpdateParentNotebookExecute(r ApiMeOnenoteSectionGroupsSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsSectionsUpdateParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionGroupsSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsUpdateParentSectionGroup(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest {
	return ApiMeOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsSectionsUpdateParentSectionGroupExecute(r ApiMeOnenoteSectionGroupsSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsUpdateParentNotebookExecute(r)
}

/*
MeOnenoteSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsUpdateParentNotebook(ctx _context.Context, sectionGroupId string) ApiMeOnenoteSectionGroupsUpdateParentNotebookRequest {
	return ApiMeOnenoteSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsUpdateParentNotebookExecute(r ApiMeOnenoteSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsUpdateParentSectionGroup(ctx _context.Context, sectionGroupId string) ApiMeOnenoteSectionGroupsUpdateParentSectionGroupRequest {
	return ApiMeOnenoteSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsUpdateParentSectionGroupExecute(r ApiMeOnenoteSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionGroupsUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsUpdateSectionGroups(ctx _context.Context, sectionGroupId string, sectionGroupId1 string) ApiMeOnenoteSectionGroupsUpdateSectionGroupsRequest {
	return ApiMeOnenoteSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsUpdateSectionGroupsExecute(r ApiMeOnenoteSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionGroupsUpdateSectionsExecute(r)
}

/*
MeOnenoteSectionGroupsUpdateSections Update the navigation property sections in me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionGroupsUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsUpdateSections(ctx _context.Context, sectionGroupId string, onenoteSectionId string) ApiMeOnenoteSectionGroupsUpdateSectionsRequest {
	return ApiMeOnenoteSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionGroupsUpdateSectionsExecute(r ApiMeOnenoteSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsCreatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property
func (r ApiMeOnenoteSectionsCreatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenoteSectionsCreatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenoteSectionsCreatePagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsCreatePagesExecute(r)
}

/*
MeOnenoteSectionsCreatePages Create new navigation property to pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsCreatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsCreatePages(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsCreatePagesRequest {
	return ApiMeOnenoteSectionsCreatePagesRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenoteSectionsCreatePagesExecute(r ApiMeOnenoteSectionsCreatePagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsCreatePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsDeletePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsDeletePagesRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsDeletePagesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsDeletePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsDeletePagesExecute(r)
}

/*
MeOnenoteSectionsDeletePages Delete navigation property pages for me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsDeletePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsDeletePages(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsDeletePagesRequest {
	return ApiMeOnenoteSectionsDeletePagesRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsDeletePagesExecute(r ApiMeOnenoteSectionsDeletePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsDeletePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsDeleteParentNotebookExecute(r)
}

/*
MeOnenoteSectionsDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsDeleteParentNotebook(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsDeleteParentNotebookRequest {
	return ApiMeOnenoteSectionsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsDeleteParentNotebookExecute(r ApiMeOnenoteSectionsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsDeleteParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionsDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsDeleteParentSectionGroup(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsDeleteParentSectionGroupRequest {
	return ApiMeOnenoteSectionsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsDeleteParentSectionGroupExecute(r ApiMeOnenoteSectionsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsGetPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsGetPagesRequest) Select_(select_ []string) ApiMeOnenoteSectionsGetPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsGetPagesRequest) Expand(expand []string) ApiMeOnenoteSectionsGetPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsGetPagesRequest) Execute() (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsGetPagesExecute(r)
}

/*
MeOnenoteSectionsGetPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsGetPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsGetPages(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsGetPagesRequest {
	return ApiMeOnenoteSectionsGetPagesRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenotePage
func (a *MeOnenoteApiService) MeOnenoteSectionsGetPagesExecute(r ApiMeOnenoteSectionsGetPagesRequest) (MicrosoftGraphOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsGetPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsGetPagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
}


func (r ApiMeOnenoteSectionsGetPagesContentRequest) Execute() (*os.File, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsGetPagesContentExecute(r)
}

/*
MeOnenoteSectionsGetPagesContent Get media content for the navigation property pages from me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsGetPagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsGetPagesContent(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsGetPagesContentRequest {
	return ApiMeOnenoteSectionsGetPagesContentRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return *os.File
func (a *MeOnenoteApiService) MeOnenoteSectionsGetPagesContentExecute(r ApiMeOnenoteSectionsGetPagesContentRequest) (*os.File, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  *os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsGetPagesContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteSectionsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteSectionsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsGetParentNotebookExecute(r)
}

/*
MeOnenoteSectionsGetParentNotebook Get parentNotebook from me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsGetParentNotebook(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsGetParentNotebookRequest {
	return ApiMeOnenoteSectionsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteSectionsGetParentNotebookExecute(r ApiMeOnenoteSectionsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenoteSectionsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenoteSectionsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsGetParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionsGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsGetParentSectionGroup(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsGetParentSectionGroupRequest {
	return ApiMeOnenoteSectionsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsGetParentSectionGroupExecute(r ApiMeOnenoteSectionsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsListPagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionsListPagesRequest) Top(top int32) ApiMeOnenoteSectionsListPagesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionsListPagesRequest) Skip(skip int32) ApiMeOnenoteSectionsListPagesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionsListPagesRequest) Search(search string) ApiMeOnenoteSectionsListPagesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionsListPagesRequest) Filter(filter string) ApiMeOnenoteSectionsListPagesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionsListPagesRequest) Count(count bool) ApiMeOnenoteSectionsListPagesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionsListPagesRequest) Orderby(orderby []string) ApiMeOnenoteSectionsListPagesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionsListPagesRequest) Select_(select_ []string) ApiMeOnenoteSectionsListPagesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsListPagesRequest) Expand(expand []string) ApiMeOnenoteSectionsListPagesRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsListPagesRequest) Execute() (CollectionOfOnenotePage, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsListPagesExecute(r)
}

/*
MeOnenoteSectionsListPages Get pages from me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsListPagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsListPages(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsListPagesRequest {
	return ApiMeOnenoteSectionsListPagesRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenotePage
func (a *MeOnenoteApiService) MeOnenoteSectionsListPagesExecute(r ApiMeOnenoteSectionsListPagesRequest) (CollectionOfOnenotePage, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenotePage
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsListPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsPagesDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsPagesDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsPagesDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesDeleteParentNotebookExecute(r)
}

/*
MeOnenoteSectionsPagesDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsPagesDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesDeleteParentNotebook(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsPagesDeleteParentNotebookRequest {
	return ApiMeOnenoteSectionsPagesDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesDeleteParentNotebookExecute(r ApiMeOnenoteSectionsPagesDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesDeleteParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsPagesDeleteParentSectionRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsPagesDeleteParentSectionRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsPagesDeleteParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesDeleteParentSectionExecute(r)
}

/*
MeOnenoteSectionsPagesDeleteParentSection Delete navigation property parentSection for me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsPagesDeleteParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesDeleteParentSection(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsPagesDeleteParentSectionRequest {
	return ApiMeOnenoteSectionsPagesDeleteParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesDeleteParentSectionExecute(r ApiMeOnenoteSectionsPagesDeleteParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesDeleteParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsPagesGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteSectionsPagesGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsPagesGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteSectionsPagesGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsPagesGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesGetParentNotebookExecute(r)
}

/*
MeOnenoteSectionsPagesGetParentNotebook Get parentNotebook from me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsPagesGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesGetParentNotebook(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsPagesGetParentNotebookRequest {
	return ApiMeOnenoteSectionsPagesGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesGetParentNotebookExecute(r ApiMeOnenoteSectionsPagesGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesGetParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsPagesGetParentSectionRequest) Select_(select_ []string) ApiMeOnenoteSectionsPagesGetParentSectionRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsPagesGetParentSectionRequest) Expand(expand []string) ApiMeOnenoteSectionsPagesGetParentSectionRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsPagesGetParentSectionRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesGetParentSectionExecute(r)
}

/*
MeOnenoteSectionsPagesGetParentSection Get parentSection from me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsPagesGetParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesGetParentSection(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsPagesGetParentSectionRequest {
	return ApiMeOnenoteSectionsPagesGetParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesGetParentSectionExecute(r ApiMeOnenoteSectionsPagesGetParentSectionRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesGetParentSection")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookCreateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookCreateSectionGroups(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookCreateSectionGroupsExecute(r ApiMeOnenoteSectionsPagesParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenoteSectionsPagesParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionsPagesParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookCreateSectionsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookCreateSections Create new navigation property to sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsPagesParentNotebookCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookCreateSections(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsPagesParentNotebookCreateSectionsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookCreateSectionsExecute(r ApiMeOnenoteSectionsPagesParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookDeleteSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookDeleteSectionGroups(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookDeleteSectionGroupsExecute(r ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookDeleteSectionsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookDeleteSections Delete navigation property sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookDeleteSections(ctx _context.Context, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookDeleteSectionsExecute(r ApiMeOnenoteSectionsPagesParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookGetSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookGetSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookGetSectionGroups(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiMeOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookGetSectionGroupsExecute(r ApiMeOnenoteSectionsPagesParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsPagesParentNotebookGetSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionsPagesParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsPagesParentNotebookGetSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionsPagesParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookGetSectionsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookGetSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsPagesParentNotebookGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookGetSections(ctx _context.Context, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiMeOnenoteSectionsPagesParentNotebookGetSectionsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookGetSectionsExecute(r ApiMeOnenoteSectionsPagesParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Top(top int32) ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Search(search string) ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Filter(filter string) ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Count(count bool) ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookListSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookListSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookListSectionGroups(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookListSectionGroupsExecute(r ApiMeOnenoteSectionsPagesParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest) Top(top int32) ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest) Skip(skip int32) ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest) Search(search string) ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest) Filter(filter string) ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest) Count(count bool) ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest) Orderby(orderby []string) ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookListSectionsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookListSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookListSections(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookListSectionsExecute(r ApiMeOnenoteSectionsPagesParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSections Create new navigation property to sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSections(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSections Delete navigation property sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSections(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string, onenoteSectionId1 string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsGetSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsGetSections(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string, onenoteSectionId1 string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsListSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsListSections(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string, sectionGroupId1 string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSections Update the navigation property sections in me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSections(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string, onenoteSectionId1 string) ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsExecute(r ApiMeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookUpdateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookUpdateSectionGroups(ctx _context.Context, onenoteSectionId string, onenotePageId string, sectionGroupId string) ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookUpdateSectionGroupsExecute(r ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesParentNotebookUpdateSectionsExecute(r)
}

/*
MeOnenoteSectionsPagesParentNotebookUpdateSections Update the navigation property sections in me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookUpdateSections(ctx _context.Context, onenoteSectionId string, onenotePageId string, onenoteSectionId1 string) ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionsRequest {
	return ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesParentNotebookUpdateSectionsExecute(r ApiMeOnenoteSectionsPagesParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteSectionsPagesUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteSectionsPagesUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteSectionsPagesUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesUpdateParentNotebookExecute(r)
}

/*
MeOnenoteSectionsPagesUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the page.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsPagesUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesUpdateParentNotebook(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsPagesUpdateParentNotebookRequest {
	return ApiMeOnenoteSectionsPagesUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesUpdateParentNotebookExecute(r ApiMeOnenoteSectionsPagesUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsPagesUpdateParentSectionRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteSectionsPagesUpdateParentSectionRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionsPagesUpdateParentSectionRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionsPagesUpdateParentSectionRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsPagesUpdateParentSectionExecute(r)
}

/*
MeOnenoteSectionsPagesUpdateParentSection Update the navigation property parentSection in me

The section that contains the page. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsPagesUpdateParentSectionRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesUpdateParentSection(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsPagesUpdateParentSectionRequest {
	return ApiMeOnenoteSectionsPagesUpdateParentSectionRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsPagesUpdateParentSectionExecute(r ApiMeOnenoteSectionsPagesUpdateParentSectionRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsPagesUpdateParentSection")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/parentSection"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenoteSectionsParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookCreateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentNotebookCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookCreateSectionGroups(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentNotebookCreateSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookCreateSectionGroupsExecute(r ApiMeOnenoteSectionsParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenoteSectionsParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionsParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookCreateSectionsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookCreateSections Create new navigation property to sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentNotebookCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookCreateSections(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentNotebookCreateSectionsRequest {
	return ApiMeOnenoteSectionsParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookCreateSectionsExecute(r ApiMeOnenoteSectionsParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookDeleteSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookDeleteSectionGroups(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentNotebookDeleteSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookDeleteSectionGroupsExecute(r ApiMeOnenoteSectionsParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookDeleteSectionsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookDeleteSections Delete navigation property sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentNotebookDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookDeleteSections(ctx _context.Context, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenoteSectionsParentNotebookDeleteSectionsRequest {
	return ApiMeOnenoteSectionsParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookDeleteSectionsExecute(r ApiMeOnenoteSectionsParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookGetSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookGetSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookGetSectionGroups(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentNotebookGetSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookGetSectionGroupsExecute(r ApiMeOnenoteSectionsParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsParentNotebookGetSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentNotebookGetSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookGetSectionsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookGetSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentNotebookGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookGetSections(ctx _context.Context, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenoteSectionsParentNotebookGetSectionsRequest {
	return ApiMeOnenoteSectionsParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookGetSectionsExecute(r ApiMeOnenoteSectionsParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest) Top(top int32) ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest) Search(search string) ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest) Filter(filter string) ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest) Count(count bool) ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookListSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookListSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookListSectionGroups(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookListSectionGroupsExecute(r ApiMeOnenoteSectionsParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionsParentNotebookListSectionsRequest) Top(top int32) ApiMeOnenoteSectionsParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionsParentNotebookListSectionsRequest) Skip(skip int32) ApiMeOnenoteSectionsParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionsParentNotebookListSectionsRequest) Search(search string) ApiMeOnenoteSectionsParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionsParentNotebookListSectionsRequest) Filter(filter string) ApiMeOnenoteSectionsParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionsParentNotebookListSectionsRequest) Count(count bool) ApiMeOnenoteSectionsParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionsParentNotebookListSectionsRequest) Orderby(orderby []string) ApiMeOnenoteSectionsParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionsParentNotebookListSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentNotebookListSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookListSectionsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookListSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentNotebookListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookListSections(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentNotebookListSectionsRequest {
	return ApiMeOnenoteSectionsParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookListSectionsExecute(r ApiMeOnenoteSectionsParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroups(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsCreateSectionsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsCreateSections Create new navigation property to sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsCreateSections(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsCreateSectionsExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebook(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroup(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	sectionGroupId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroups(ctx _context.Context, onenoteSectionId string, sectionGroupId string, sectionGroupId1 string) ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsDeleteSections Delete navigation property sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsDeleteSections(ctx _context.Context, onenoteSectionId string, sectionGroupId string, onenoteSectionId1 string) ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsGetParentNotebook Get parentNotebook from me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsGetParentNotebook(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroup(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	sectionGroupId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsGetSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsGetSectionGroups(ctx _context.Context, onenoteSectionId string, sectionGroupId string, sectionGroupId1 string) ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsGetSectionsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsGetSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsGetSections(ctx _context.Context, onenoteSectionId string, sectionGroupId string, onenoteSectionId1 string) ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsGetSectionsExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Top(top int32) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Skip(skip int32) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Search(search string) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Filter(filter string) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Count(count bool) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsListSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsListSectionGroups(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Top(top int32) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Skip(skip int32) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Search(search string) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Filter(filter string) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Count(count bool) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Orderby(orderby []string) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsListSectionsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsListSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsListSections(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsListSectionsExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebook(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroup(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	sectionGroupId1 string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param sectionGroupId1 key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroups(ctx _context.Context, onenoteSectionId string, sectionGroupId string, sectionGroupId1 string) ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		sectionGroupId1: sectionGroupId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sectionGroups/{sectionGroup-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id1"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookSectionGroupsUpdateSections Update the navigation property sections in me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsUpdateSections(ctx _context.Context, onenoteSectionId string, sectionGroupId string, onenoteSectionId1 string) ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest {
	return ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsExecute(r ApiMeOnenoteSectionsParentNotebookSectionGroupsUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookSectionGroupsUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionsParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookUpdateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentNotebookUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookUpdateSectionGroups(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentNotebookUpdateSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookUpdateSectionGroupsExecute(r ApiMeOnenoteSectionsParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteSectionsParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionsParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionsParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentNotebookUpdateSectionsExecute(r)
}

/*
MeOnenoteSectionsParentNotebookUpdateSections Update the navigation property sections in me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentNotebookUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookUpdateSections(ctx _context.Context, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenoteSectionsParentNotebookUpdateSectionsRequest {
	return ApiMeOnenoteSectionsParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentNotebookUpdateSectionsExecute(r ApiMeOnenoteSectionsParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupCreateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupCreateSectionGroups(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupCreateSectionGroupsExecute(r ApiMeOnenoteSectionsParentSectionGroupCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenoteSectionsParentSectionGroupCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionsParentSectionGroupCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupCreateSectionsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupCreateSections Create new navigation property to sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupCreateSections(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentSectionGroupCreateSectionsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupCreateSectionsExecute(r ApiMeOnenoteSectionsParentSectionGroupCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupDeleteParentNotebookExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupDeleteParentNotebook Delete navigation property parentNotebook for me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupDeleteParentNotebook(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest {
	return ApiMeOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupDeleteParentNotebookExecute(r ApiMeOnenoteSectionsParentSectionGroupDeleteParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupDeleteParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupDeleteParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupDeleteParentSectionGroup Delete navigation property parentSectionGroup for me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupDeleteParentSectionGroup(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest {
	return ApiMeOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupDeleteParentSectionGroupExecute(r ApiMeOnenoteSectionsParentSectionGroupDeleteParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupDeleteParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupDeleteSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupDeleteSectionGroups(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupDeleteSectionGroupsExecute(r ApiMeOnenoteSectionsParentSectionGroupDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsParentSectionGroupDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsParentSectionGroupDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupDeleteSectionsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupDeleteSections Delete navigation property sections for me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupDeleteSections(ctx _context.Context, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenoteSectionsParentSectionGroupDeleteSectionsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupDeleteSectionsExecute(r ApiMeOnenoteSectionsParentSectionGroupDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupGetParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsParentSectionGroupGetParentNotebookRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentSectionGroupGetParentNotebookRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentSectionGroupGetParentNotebookRequest) Expand(expand []string) ApiMeOnenoteSectionsParentSectionGroupGetParentNotebookRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupGetParentNotebookRequest) Execute() (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupGetParentNotebookExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupGetParentNotebook Get parentNotebook from me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupGetParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupGetParentNotebook(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentSectionGroupGetParentNotebookRequest {
	return ApiMeOnenoteSectionsParentSectionGroupGetParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphNotebook
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupGetParentNotebookExecute(r ApiMeOnenoteSectionsParentSectionGroupGetParentNotebookRequest) (MicrosoftGraphNotebook, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphNotebook
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupGetParentNotebook")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) Expand(expand []string) ApiMeOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupGetParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupGetParentSectionGroup Get parentSectionGroup from me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupGetParentSectionGroup(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest {
	return ApiMeOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupGetParentSectionGroupExecute(r ApiMeOnenoteSectionsParentSectionGroupGetParentSectionGroupRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupGetParentSectionGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentSectionGroupGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentSectionGroupGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupGetSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupGetSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentSectionGroupGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupGetSectionGroups(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentSectionGroupGetSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupGetSectionGroupsExecute(r ApiMeOnenoteSectionsParentSectionGroupGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsParentSectionGroupGetSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentSectionGroupGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentSectionGroupGetSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentSectionGroupGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupGetSectionsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupGetSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupGetSections(ctx _context.Context, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenoteSectionsParentSectionGroupGetSectionsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupGetSectionsExecute(r ApiMeOnenoteSectionsParentSectionGroupGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Top(top int32) ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Skip(skip int32) ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Search(search string) ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Filter(filter string) ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Count(count bool) ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupListSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupListSectionGroups Get sectionGroups from me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupListSectionGroups(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupListSectionGroupsExecute(r ApiMeOnenoteSectionsParentSectionGroupListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest) Top(top int32) ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest) Skip(skip int32) ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest) Search(search string) ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest) Filter(filter string) ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest) Count(count bool) ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest) Orderby(orderby []string) ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupListSectionsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupListSections Get sections from me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupListSections(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupListSectionsExecute(r ApiMeOnenoteSectionsParentSectionGroupListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroups Create new navigation property to sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroups(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsExecute(r ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupParentNotebookCreateSections Create new navigation property to sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookCreateSections(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsExecute(r ApiMeOnenoteSectionsParentSectionGroupParentNotebookCreateSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupParentNotebookCreateSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroups Delete navigation property sectionGroups for me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroups(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsExecute(r ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenoteSectionId1 string
	ifMatch *string
}

// ETag
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest) IfMatch(ifMatch string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupParentNotebookDeleteSections Delete navigation property sections for me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookDeleteSections(ctx _context.Context, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsExecute(r ApiMeOnenoteSectionsParentSectionGroupParentNotebookDeleteSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupParentNotebookDeleteSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) Execute() (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroups(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsExecute(r ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroupsRequest) (MicrosoftGraphSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupParentNotebookGetSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenoteSectionId1 string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) Execute() (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupParentNotebookGetSectionsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupParentNotebookGetSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookGetSections(ctx _context.Context, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookGetSectionsExecute(r ApiMeOnenoteSectionsParentSectionGroupParentNotebookGetSectionsRequest) (MicrosoftGraphOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupParentNotebookGetSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Top(top int32) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Skip(skip int32) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Search(search string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Filter(filter string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Count(count bool) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Orderby(orderby []string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) Execute() (CollectionOfSectionGroup, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroups Get sectionGroups from me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroups(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfSectionGroup
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsExecute(r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroupsRequest) (CollectionOfSectionGroup, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSectionGroup
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupParentNotebookListSectionGroups")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Top(top int32) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Skip(skip int32) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Search(search string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Filter(filter string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Count(count bool) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Orderby(orderby []string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Select_(select_ []string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Expand(expand []string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	r.expand = &expand
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) Execute() (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupParentNotebookListSectionsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupParentNotebookListSections Get sections from me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookListSections(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
//  @return CollectionOfOnenoteSection
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookListSectionsExecute(r ApiMeOnenoteSectionsParentSectionGroupParentNotebookListSectionsRequest) (CollectionOfOnenoteSection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOnenoteSection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupParentNotebookListSections")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroups(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsExecute(r ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupParentNotebookUpdateSections Update the navigation property sections in me

The sections in the notebook. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookUpdateSections(ctx _context.Context, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsExecute(r ApiMeOnenoteSectionsParentSectionGroupParentNotebookUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupParentNotebookUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupUpdateParentNotebookExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupUpdateParentNotebook(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest {
	return ApiMeOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupUpdateParentNotebookExecute(r ApiMeOnenoteSectionsParentSectionGroupUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupUpdateParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section group. Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupUpdateParentSectionGroup(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest {
	return ApiMeOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupUpdateParentSectionGroupExecute(r ApiMeOnenoteSectionsParentSectionGroupUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupUpdateSectionGroupsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in the section. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupUpdateSectionGroups(ctx _context.Context, onenoteSectionId string, sectionGroupId string) ApiMeOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupUpdateSectionGroupsExecute(r ApiMeOnenoteSectionsParentSectionGroupUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsParentSectionGroupUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenoteSectionId1 string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteSectionsParentSectionGroupUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteSectionsParentSectionGroupUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteSectionsParentSectionGroupUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsParentSectionGroupUpdateSectionsExecute(r)
}

/*
MeOnenoteSectionsParentSectionGroupUpdateSections Update the navigation property sections in me

The sections in the section group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenoteSectionId1 key: id of onenoteSection
 @return ApiMeOnenoteSectionsParentSectionGroupUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupUpdateSections(ctx _context.Context, onenoteSectionId string, onenoteSectionId1 string) ApiMeOnenoteSectionsParentSectionGroupUpdateSectionsRequest {
	return ApiMeOnenoteSectionsParentSectionGroupUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenoteSectionId1: onenoteSectionId1,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsParentSectionGroupUpdateSectionsExecute(r ApiMeOnenoteSectionsParentSectionGroupUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsParentSectionGroupUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup/sections/{onenoteSection-id1}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id1"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId1, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiMeOnenoteSectionsUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenoteSectionsUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenoteSectionsUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsUpdatePagesExecute(r)
}

/*
MeOnenoteSectionsUpdatePages Update the navigation property pages in me

The collection of pages in the section.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsUpdatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsUpdatePages(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsUpdatePagesRequest {
	return ApiMeOnenoteSectionsUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsUpdatePagesExecute(r ApiMeOnenoteSectionsUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiMeOnenoteSectionsUpdatePagesContentRequest) Body(body *os.File) ApiMeOnenoteSectionsUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiMeOnenoteSectionsUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsUpdatePagesContentExecute(r)
}

/*
MeOnenoteSectionsUpdatePagesContent Update media content for the navigation property pages in me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteSectionsUpdatePagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsUpdatePagesContent(ctx _context.Context, onenoteSectionId string, onenotePageId string) ApiMeOnenoteSectionsUpdatePagesContentRequest {
	return ApiMeOnenoteSectionsUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsUpdatePagesContentExecute(r ApiMeOnenoteSectionsUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsUpdateParentNotebookRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteSectionsUpdateParentNotebookRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteSectionsUpdateParentNotebookRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteSectionsUpdateParentNotebookRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsUpdateParentNotebookExecute(r)
}

/*
MeOnenoteSectionsUpdateParentNotebook Update the navigation property parentNotebook in me

The notebook that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsUpdateParentNotebookRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsUpdateParentNotebook(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsUpdateParentNotebookRequest {
	return ApiMeOnenoteSectionsUpdateParentNotebookRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsUpdateParentNotebookExecute(r ApiMeOnenoteSectionsUpdateParentNotebookRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsUpdateParentNotebook")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentNotebook"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteSectionsUpdateParentSectionGroupRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteSectionsUpdateParentSectionGroupRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteSectionsUpdateParentSectionGroupRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteSectionsUpdateParentSectionGroupRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteSectionsUpdateParentSectionGroupExecute(r)
}

/*
MeOnenoteSectionsUpdateParentSectionGroup Update the navigation property parentSectionGroup in me

The section group that contains the section.  Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteSectionsUpdateParentSectionGroupRequest
*/
func (a *MeOnenoteApiService) MeOnenoteSectionsUpdateParentSectionGroup(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteSectionsUpdateParentSectionGroupRequest {
	return ApiMeOnenoteSectionsUpdateParentSectionGroupRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteSectionsUpdateParentSectionGroupExecute(r ApiMeOnenoteSectionsUpdateParentSectionGroupRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteSectionsUpdateParentSectionGroup")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}/parentSectionGroup"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteUpdateNotebooksRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	notebookId string
	microsoftGraphNotebook *MicrosoftGraphNotebook
}

// New navigation property values
func (r ApiMeOnenoteUpdateNotebooksRequest) MicrosoftGraphNotebook(microsoftGraphNotebook MicrosoftGraphNotebook) ApiMeOnenoteUpdateNotebooksRequest {
	r.microsoftGraphNotebook = &microsoftGraphNotebook
	return r
}

func (r ApiMeOnenoteUpdateNotebooksRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteUpdateNotebooksExecute(r)
}

/*
MeOnenoteUpdateNotebooks Update the navigation property notebooks in me

The collection of OneNote notebooks that are owned by the user or group. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param notebookId key: id of notebook
 @return ApiMeOnenoteUpdateNotebooksRequest
*/
func (a *MeOnenoteApiService) MeOnenoteUpdateNotebooks(ctx _context.Context, notebookId string) ApiMeOnenoteUpdateNotebooksRequest {
	return ApiMeOnenoteUpdateNotebooksRequest{
		ApiService: a,
		ctx: ctx,
		notebookId: notebookId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteUpdateNotebooksExecute(r ApiMeOnenoteUpdateNotebooksRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteUpdateNotebooks")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/notebooks/{notebook-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"notebook-id"+"}", _neturl.PathEscape(parameterToString(r.notebookId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphNotebook == nil {
		return nil, reportError("microsoftGraphNotebook is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphNotebook
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteUpdateOperationsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteOperationId string
	microsoftGraphOnenoteOperation *MicrosoftGraphOnenoteOperation
}

// New navigation property values
func (r ApiMeOnenoteUpdateOperationsRequest) MicrosoftGraphOnenoteOperation(microsoftGraphOnenoteOperation MicrosoftGraphOnenoteOperation) ApiMeOnenoteUpdateOperationsRequest {
	r.microsoftGraphOnenoteOperation = &microsoftGraphOnenoteOperation
	return r
}

func (r ApiMeOnenoteUpdateOperationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteUpdateOperationsExecute(r)
}

/*
MeOnenoteUpdateOperations Update the navigation property operations in me

The status of OneNote operations. Getting an operations collection is not supported, but you can get the status of long-running operations if the Operation-Location header is returned in the response. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteOperationId key: id of onenoteOperation
 @return ApiMeOnenoteUpdateOperationsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteUpdateOperations(ctx _context.Context, onenoteOperationId string) ApiMeOnenoteUpdateOperationsRequest {
	return ApiMeOnenoteUpdateOperationsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteOperationId: onenoteOperationId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteUpdateOperationsExecute(r ApiMeOnenoteUpdateOperationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteUpdateOperations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/operations/{onenoteOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteOperation-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteOperation == nil {
		return nil, reportError("microsoftGraphOnenoteOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteUpdatePagesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	microsoftGraphOnenotePage *MicrosoftGraphOnenotePage
}

// New navigation property values
func (r ApiMeOnenoteUpdatePagesRequest) MicrosoftGraphOnenotePage(microsoftGraphOnenotePage MicrosoftGraphOnenotePage) ApiMeOnenoteUpdatePagesRequest {
	r.microsoftGraphOnenotePage = &microsoftGraphOnenotePage
	return r
}

func (r ApiMeOnenoteUpdatePagesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteUpdatePagesExecute(r)
}

/*
MeOnenoteUpdatePages Update the navigation property pages in me

The pages in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteUpdatePagesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteUpdatePages(ctx _context.Context, onenotePageId string) ApiMeOnenoteUpdatePagesRequest {
	return ApiMeOnenoteUpdatePagesRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteUpdatePagesExecute(r ApiMeOnenoteUpdatePagesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteUpdatePages")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenotePage == nil {
		return nil, reportError("microsoftGraphOnenotePage is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenotePage
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteUpdatePagesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenotePageId string
	body **os.File
}

// New media content.
func (r ApiMeOnenoteUpdatePagesContentRequest) Body(body *os.File) ApiMeOnenoteUpdatePagesContentRequest {
	r.body = &body
	return r
}

func (r ApiMeOnenoteUpdatePagesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteUpdatePagesContentExecute(r)
}

/*
MeOnenoteUpdatePagesContent Update media content for the navigation property pages in me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenotePageId key: id of onenotePage
 @return ApiMeOnenoteUpdatePagesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteUpdatePagesContent(ctx _context.Context, onenotePageId string) ApiMeOnenoteUpdatePagesContentRequest {
	return ApiMeOnenoteUpdatePagesContentRequest{
		ApiService: a,
		ctx: ctx,
		onenotePageId: onenotePageId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteUpdatePagesContentExecute(r ApiMeOnenoteUpdatePagesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteUpdatePagesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/pages/{onenotePage-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"onenotePage-id"+"}", _neturl.PathEscape(parameterToString(r.onenotePageId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteUpdateResourcesRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteResourceId string
	microsoftGraphOnenoteResource *MicrosoftGraphOnenoteResource
}

// New navigation property values
func (r ApiMeOnenoteUpdateResourcesRequest) MicrosoftGraphOnenoteResource(microsoftGraphOnenoteResource MicrosoftGraphOnenoteResource) ApiMeOnenoteUpdateResourcesRequest {
	r.microsoftGraphOnenoteResource = &microsoftGraphOnenoteResource
	return r
}

func (r ApiMeOnenoteUpdateResourcesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteUpdateResourcesExecute(r)
}

/*
MeOnenoteUpdateResources Update the navigation property resources in me

The image and other file resources in OneNote pages. Getting a resources collection is not supported, but you can get the binary content of a specific resource. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteResourceId key: id of onenoteResource
 @return ApiMeOnenoteUpdateResourcesRequest
*/
func (a *MeOnenoteApiService) MeOnenoteUpdateResources(ctx _context.Context, onenoteResourceId string) ApiMeOnenoteUpdateResourcesRequest {
	return ApiMeOnenoteUpdateResourcesRequest{
		ApiService: a,
		ctx: ctx,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteUpdateResourcesExecute(r ApiMeOnenoteUpdateResourcesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteUpdateResources")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/resources/{onenoteResource-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteResource == nil {
		return nil, reportError("microsoftGraphOnenoteResource is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteResource
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteUpdateResourcesContentRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteResourceId string
	body **os.File
}

// New media content.
func (r ApiMeOnenoteUpdateResourcesContentRequest) Body(body *os.File) ApiMeOnenoteUpdateResourcesContentRequest {
	r.body = &body
	return r
}

func (r ApiMeOnenoteUpdateResourcesContentRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteUpdateResourcesContentExecute(r)
}

/*
MeOnenoteUpdateResourcesContent Update media content for the navigation property resources in me

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteResourceId key: id of onenoteResource
 @return ApiMeOnenoteUpdateResourcesContentRequest
*/
func (a *MeOnenoteApiService) MeOnenoteUpdateResourcesContent(ctx _context.Context, onenoteResourceId string) ApiMeOnenoteUpdateResourcesContentRequest {
	return ApiMeOnenoteUpdateResourcesContentRequest{
		ApiService: a,
		ctx: ctx,
		onenoteResourceId: onenoteResourceId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteUpdateResourcesContentExecute(r ApiMeOnenoteUpdateResourcesContentRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteUpdateResourcesContent")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/resources/{onenoteResource-id}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteResource-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteResourceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/octet-stream"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteUpdateSectionGroupsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	sectionGroupId string
	microsoftGraphSectionGroup *MicrosoftGraphSectionGroup
}

// New navigation property values
func (r ApiMeOnenoteUpdateSectionGroupsRequest) MicrosoftGraphSectionGroup(microsoftGraphSectionGroup MicrosoftGraphSectionGroup) ApiMeOnenoteUpdateSectionGroupsRequest {
	r.microsoftGraphSectionGroup = &microsoftGraphSectionGroup
	return r
}

func (r ApiMeOnenoteUpdateSectionGroupsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteUpdateSectionGroupsExecute(r)
}

/*
MeOnenoteUpdateSectionGroups Update the navigation property sectionGroups in me

The section groups in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sectionGroupId key: id of sectionGroup
 @return ApiMeOnenoteUpdateSectionGroupsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteUpdateSectionGroups(ctx _context.Context, sectionGroupId string) ApiMeOnenoteUpdateSectionGroupsRequest {
	return ApiMeOnenoteUpdateSectionGroupsRequest{
		ApiService: a,
		ctx: ctx,
		sectionGroupId: sectionGroupId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteUpdateSectionGroupsExecute(r ApiMeOnenoteUpdateSectionGroupsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteUpdateSectionGroups")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sectionGroups/{sectionGroup-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"sectionGroup-id"+"}", _neturl.PathEscape(parameterToString(r.sectionGroupId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSectionGroup == nil {
		return nil, reportError("microsoftGraphSectionGroup is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSectionGroup
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeOnenoteUpdateSectionsRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	onenoteSectionId string
	microsoftGraphOnenoteSection *MicrosoftGraphOnenoteSection
}

// New navigation property values
func (r ApiMeOnenoteUpdateSectionsRequest) MicrosoftGraphOnenoteSection(microsoftGraphOnenoteSection MicrosoftGraphOnenoteSection) ApiMeOnenoteUpdateSectionsRequest {
	r.microsoftGraphOnenoteSection = &microsoftGraphOnenoteSection
	return r
}

func (r ApiMeOnenoteUpdateSectionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeOnenoteUpdateSectionsExecute(r)
}

/*
MeOnenoteUpdateSections Update the navigation property sections in me

The sections in all OneNote notebooks that are owned by the user or group.  Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param onenoteSectionId key: id of onenoteSection
 @return ApiMeOnenoteUpdateSectionsRequest
*/
func (a *MeOnenoteApiService) MeOnenoteUpdateSections(ctx _context.Context, onenoteSectionId string) ApiMeOnenoteUpdateSectionsRequest {
	return ApiMeOnenoteUpdateSectionsRequest{
		ApiService: a,
		ctx: ctx,
		onenoteSectionId: onenoteSectionId,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeOnenoteUpdateSectionsExecute(r ApiMeOnenoteUpdateSectionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeOnenoteUpdateSections")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote/sections/{onenoteSection-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"onenoteSection-id"+"}", _neturl.PathEscape(parameterToString(r.onenoteSectionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenoteSection == nil {
		return nil, reportError("microsoftGraphOnenoteSection is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenoteSection
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiMeUpdateOnenoteRequest struct {
	ctx _context.Context
	ApiService *MeOnenoteApiService
	microsoftGraphOnenote *MicrosoftGraphOnenote
}

// New navigation property values
func (r ApiMeUpdateOnenoteRequest) MicrosoftGraphOnenote(microsoftGraphOnenote MicrosoftGraphOnenote) ApiMeUpdateOnenoteRequest {
	r.microsoftGraphOnenote = &microsoftGraphOnenote
	return r
}

func (r ApiMeUpdateOnenoteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.MeUpdateOnenoteExecute(r)
}

/*
MeUpdateOnenote Update the navigation property onenote in me

Read-only.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiMeUpdateOnenoteRequest
*/
func (a *MeOnenoteApiService) MeUpdateOnenote(ctx _context.Context) ApiMeUpdateOnenoteRequest {
	return ApiMeUpdateOnenoteRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *MeOnenoteApiService) MeUpdateOnenoteExecute(r ApiMeUpdateOnenoteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MeOnenoteApiService.MeUpdateOnenote")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/me/onenote"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOnenote == nil {
		return nil, reportError("microsoftGraphOnenote is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOnenote
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
