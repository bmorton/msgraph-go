/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphCallRecordsNetworkConnectionType the model 'MicrosoftGraphCallRecordsNetworkConnectionType'
type MicrosoftGraphCallRecordsNetworkConnectionType string

// List of microsoft.graph.callRecords.networkConnectionType
const (
	UNKNOWN MicrosoftGraphCallRecordsNetworkConnectionType = "unknown"
	WIRED MicrosoftGraphCallRecordsNetworkConnectionType = "wired"
	WIFI MicrosoftGraphCallRecordsNetworkConnectionType = "wifi"
	MOBILE MicrosoftGraphCallRecordsNetworkConnectionType = "mobile"
	TUNNEL MicrosoftGraphCallRecordsNetworkConnectionType = "tunnel"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphCallRecordsNetworkConnectionType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphCallRecordsNetworkConnectionType enum
var AllowedMicrosoftGraphCallRecordsNetworkConnectionTypeEnumValues = []MicrosoftGraphCallRecordsNetworkConnectionType{
	"unknown",
	"wired",
	"wifi",
	"mobile",
	"tunnel",
	"unknownFutureValue",
}

func (v *MicrosoftGraphCallRecordsNetworkConnectionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphCallRecordsNetworkConnectionType(value)
	for _, existing := range AllowedMicrosoftGraphCallRecordsNetworkConnectionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphCallRecordsNetworkConnectionType", value)
}

// NewMicrosoftGraphCallRecordsNetworkConnectionTypeFromValue returns a pointer to a valid MicrosoftGraphCallRecordsNetworkConnectionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphCallRecordsNetworkConnectionTypeFromValue(v string) (*MicrosoftGraphCallRecordsNetworkConnectionType, error) {
	ev := MicrosoftGraphCallRecordsNetworkConnectionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphCallRecordsNetworkConnectionType: valid values are %v", v, AllowedMicrosoftGraphCallRecordsNetworkConnectionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphCallRecordsNetworkConnectionType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphCallRecordsNetworkConnectionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.callRecords.networkConnectionType value
func (v MicrosoftGraphCallRecordsNetworkConnectionType) Ptr() *MicrosoftGraphCallRecordsNetworkConnectionType {
	return &v
}

type NullableMicrosoftGraphCallRecordsNetworkConnectionType struct {
	value *MicrosoftGraphCallRecordsNetworkConnectionType
	isSet bool
}

func (v NullableMicrosoftGraphCallRecordsNetworkConnectionType) Get() *MicrosoftGraphCallRecordsNetworkConnectionType {
	return v.value
}

func (v *NullableMicrosoftGraphCallRecordsNetworkConnectionType) Set(val *MicrosoftGraphCallRecordsNetworkConnectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphCallRecordsNetworkConnectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphCallRecordsNetworkConnectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphCallRecordsNetworkConnectionType(val *MicrosoftGraphCallRecordsNetworkConnectionType) *NullableMicrosoftGraphCallRecordsNetworkConnectionType {
	return &NullableMicrosoftGraphCallRecordsNetworkConnectionType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphCallRecordsNetworkConnectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphCallRecordsNetworkConnectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

