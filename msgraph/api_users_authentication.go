/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// UsersAuthenticationApiService UsersAuthenticationApi service
type UsersAuthenticationApiService service

type ApiUsersAuthenticationCreateFido2MethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	microsoftGraphFido2AuthenticationMethod *MicrosoftGraphFido2AuthenticationMethod
}

// New navigation property
func (r ApiUsersAuthenticationCreateFido2MethodsRequest) MicrosoftGraphFido2AuthenticationMethod(microsoftGraphFido2AuthenticationMethod MicrosoftGraphFido2AuthenticationMethod) ApiUsersAuthenticationCreateFido2MethodsRequest {
	r.microsoftGraphFido2AuthenticationMethod = &microsoftGraphFido2AuthenticationMethod
	return r
}

func (r ApiUsersAuthenticationCreateFido2MethodsRequest) Execute() (MicrosoftGraphFido2AuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationCreateFido2MethodsExecute(r)
}

/*
UsersAuthenticationCreateFido2Methods Create new navigation property to fido2Methods for users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersAuthenticationCreateFido2MethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationCreateFido2Methods(ctx _context.Context, userId string) ApiUsersAuthenticationCreateFido2MethodsRequest {
	return ApiUsersAuthenticationCreateFido2MethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphFido2AuthenticationMethod
func (a *UsersAuthenticationApiService) UsersAuthenticationCreateFido2MethodsExecute(r ApiUsersAuthenticationCreateFido2MethodsRequest) (MicrosoftGraphFido2AuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphFido2AuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationCreateFido2Methods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/fido2Methods"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphFido2AuthenticationMethod == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphFido2AuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphFido2AuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersAuthenticationCreateMethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	microsoftGraphAuthenticationMethod *MicrosoftGraphAuthenticationMethod
}

// New navigation property
func (r ApiUsersAuthenticationCreateMethodsRequest) MicrosoftGraphAuthenticationMethod(microsoftGraphAuthenticationMethod MicrosoftGraphAuthenticationMethod) ApiUsersAuthenticationCreateMethodsRequest {
	r.microsoftGraphAuthenticationMethod = &microsoftGraphAuthenticationMethod
	return r
}

func (r ApiUsersAuthenticationCreateMethodsRequest) Execute() (MicrosoftGraphAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationCreateMethodsExecute(r)
}

/*
UsersAuthenticationCreateMethods Create new navigation property to methods for users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersAuthenticationCreateMethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationCreateMethods(ctx _context.Context, userId string) ApiUsersAuthenticationCreateMethodsRequest {
	return ApiUsersAuthenticationCreateMethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAuthenticationMethod
func (a *UsersAuthenticationApiService) UsersAuthenticationCreateMethodsExecute(r ApiUsersAuthenticationCreateMethodsRequest) (MicrosoftGraphAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationCreateMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/methods"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAuthenticationMethod == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersAuthenticationCreateMicrosoftAuthenticatorMethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	microsoftGraphMicrosoftAuthenticatorAuthenticationMethod *MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod
}

// New navigation property
func (r ApiUsersAuthenticationCreateMicrosoftAuthenticatorMethodsRequest) MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod(microsoftGraphMicrosoftAuthenticatorAuthenticationMethod MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod) ApiUsersAuthenticationCreateMicrosoftAuthenticatorMethodsRequest {
	r.microsoftGraphMicrosoftAuthenticatorAuthenticationMethod = &microsoftGraphMicrosoftAuthenticatorAuthenticationMethod
	return r
}

func (r ApiUsersAuthenticationCreateMicrosoftAuthenticatorMethodsRequest) Execute() (MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationCreateMicrosoftAuthenticatorMethodsExecute(r)
}

/*
UsersAuthenticationCreateMicrosoftAuthenticatorMethods Create new navigation property to microsoftAuthenticatorMethods for users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersAuthenticationCreateMicrosoftAuthenticatorMethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationCreateMicrosoftAuthenticatorMethods(ctx _context.Context, userId string) ApiUsersAuthenticationCreateMicrosoftAuthenticatorMethodsRequest {
	return ApiUsersAuthenticationCreateMicrosoftAuthenticatorMethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod
func (a *UsersAuthenticationApiService) UsersAuthenticationCreateMicrosoftAuthenticatorMethodsExecute(r ApiUsersAuthenticationCreateMicrosoftAuthenticatorMethodsRequest) (MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationCreateMicrosoftAuthenticatorMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/microsoftAuthenticatorMethods"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMicrosoftAuthenticatorAuthenticationMethod == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphMicrosoftAuthenticatorAuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMicrosoftAuthenticatorAuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersAuthenticationCreateWindowsHelloForBusinessMethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	microsoftGraphWindowsHelloForBusinessAuthenticationMethod *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod
}

// New navigation property
func (r ApiUsersAuthenticationCreateWindowsHelloForBusinessMethodsRequest) MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod(microsoftGraphWindowsHelloForBusinessAuthenticationMethod MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod) ApiUsersAuthenticationCreateWindowsHelloForBusinessMethodsRequest {
	r.microsoftGraphWindowsHelloForBusinessAuthenticationMethod = &microsoftGraphWindowsHelloForBusinessAuthenticationMethod
	return r
}

func (r ApiUsersAuthenticationCreateWindowsHelloForBusinessMethodsRequest) Execute() (MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationCreateWindowsHelloForBusinessMethodsExecute(r)
}

/*
UsersAuthenticationCreateWindowsHelloForBusinessMethods Create new navigation property to windowsHelloForBusinessMethods for users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersAuthenticationCreateWindowsHelloForBusinessMethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationCreateWindowsHelloForBusinessMethods(ctx _context.Context, userId string) ApiUsersAuthenticationCreateWindowsHelloForBusinessMethodsRequest {
	return ApiUsersAuthenticationCreateWindowsHelloForBusinessMethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod
func (a *UsersAuthenticationApiService) UsersAuthenticationCreateWindowsHelloForBusinessMethodsExecute(r ApiUsersAuthenticationCreateWindowsHelloForBusinessMethodsRequest) (MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationCreateWindowsHelloForBusinessMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/windowsHelloForBusinessMethods"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWindowsHelloForBusinessAuthenticationMethod == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphWindowsHelloForBusinessAuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWindowsHelloForBusinessAuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersAuthenticationDeleteFido2MethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	fido2AuthenticationMethodId string
	ifMatch *string
}

// ETag
func (r ApiUsersAuthenticationDeleteFido2MethodsRequest) IfMatch(ifMatch string) ApiUsersAuthenticationDeleteFido2MethodsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersAuthenticationDeleteFido2MethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationDeleteFido2MethodsExecute(r)
}

/*
UsersAuthenticationDeleteFido2Methods Delete navigation property fido2Methods for users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param fido2AuthenticationMethodId key: id of fido2AuthenticationMethod
 @return ApiUsersAuthenticationDeleteFido2MethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationDeleteFido2Methods(ctx _context.Context, userId string, fido2AuthenticationMethodId string) ApiUsersAuthenticationDeleteFido2MethodsRequest {
	return ApiUsersAuthenticationDeleteFido2MethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		fido2AuthenticationMethodId: fido2AuthenticationMethodId,
	}
}

// Execute executes the request
func (a *UsersAuthenticationApiService) UsersAuthenticationDeleteFido2MethodsExecute(r ApiUsersAuthenticationDeleteFido2MethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationDeleteFido2Methods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/fido2Methods/{fido2AuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fido2AuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.fido2AuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersAuthenticationDeleteMethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	authenticationMethodId string
	ifMatch *string
}

// ETag
func (r ApiUsersAuthenticationDeleteMethodsRequest) IfMatch(ifMatch string) ApiUsersAuthenticationDeleteMethodsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersAuthenticationDeleteMethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationDeleteMethodsExecute(r)
}

/*
UsersAuthenticationDeleteMethods Delete navigation property methods for users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param authenticationMethodId key: id of authenticationMethod
 @return ApiUsersAuthenticationDeleteMethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationDeleteMethods(ctx _context.Context, userId string, authenticationMethodId string) ApiUsersAuthenticationDeleteMethodsRequest {
	return ApiUsersAuthenticationDeleteMethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		authenticationMethodId: authenticationMethodId,
	}
}

// Execute executes the request
func (a *UsersAuthenticationApiService) UsersAuthenticationDeleteMethodsExecute(r ApiUsersAuthenticationDeleteMethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationDeleteMethods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/methods/{authenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.authenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	microsoftAuthenticatorAuthenticationMethodId string
	ifMatch *string
}

// ETag
func (r ApiUsersAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest) IfMatch(ifMatch string) ApiUsersAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationDeleteMicrosoftAuthenticatorMethodsExecute(r)
}

/*
UsersAuthenticationDeleteMicrosoftAuthenticatorMethods Delete navigation property microsoftAuthenticatorMethods for users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param microsoftAuthenticatorAuthenticationMethodId key: id of microsoftAuthenticatorAuthenticationMethod
 @return ApiUsersAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationDeleteMicrosoftAuthenticatorMethods(ctx _context.Context, userId string, microsoftAuthenticatorAuthenticationMethodId string) ApiUsersAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest {
	return ApiUsersAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		microsoftAuthenticatorAuthenticationMethodId: microsoftAuthenticatorAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *UsersAuthenticationApiService) UsersAuthenticationDeleteMicrosoftAuthenticatorMethodsExecute(r ApiUsersAuthenticationDeleteMicrosoftAuthenticatorMethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationDeleteMicrosoftAuthenticatorMethods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/microsoftAuthenticatorMethods/{microsoftAuthenticatorAuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"microsoftAuthenticatorAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.microsoftAuthenticatorAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersAuthenticationDeleteWindowsHelloForBusinessMethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	windowsHelloForBusinessAuthenticationMethodId string
	ifMatch *string
}

// ETag
func (r ApiUsersAuthenticationDeleteWindowsHelloForBusinessMethodsRequest) IfMatch(ifMatch string) ApiUsersAuthenticationDeleteWindowsHelloForBusinessMethodsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersAuthenticationDeleteWindowsHelloForBusinessMethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationDeleteWindowsHelloForBusinessMethodsExecute(r)
}

/*
UsersAuthenticationDeleteWindowsHelloForBusinessMethods Delete navigation property windowsHelloForBusinessMethods for users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param windowsHelloForBusinessAuthenticationMethodId key: id of windowsHelloForBusinessAuthenticationMethod
 @return ApiUsersAuthenticationDeleteWindowsHelloForBusinessMethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationDeleteWindowsHelloForBusinessMethods(ctx _context.Context, userId string, windowsHelloForBusinessAuthenticationMethodId string) ApiUsersAuthenticationDeleteWindowsHelloForBusinessMethodsRequest {
	return ApiUsersAuthenticationDeleteWindowsHelloForBusinessMethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		windowsHelloForBusinessAuthenticationMethodId: windowsHelloForBusinessAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *UsersAuthenticationApiService) UsersAuthenticationDeleteWindowsHelloForBusinessMethodsExecute(r ApiUsersAuthenticationDeleteWindowsHelloForBusinessMethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationDeleteWindowsHelloForBusinessMethods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/windowsHelloForBusinessMethods/{windowsHelloForBusinessAuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"windowsHelloForBusinessAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.windowsHelloForBusinessAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersAuthenticationGetFido2MethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	fido2AuthenticationMethodId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersAuthenticationGetFido2MethodsRequest) Select_(select_ []string) ApiUsersAuthenticationGetFido2MethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersAuthenticationGetFido2MethodsRequest) Expand(expand []string) ApiUsersAuthenticationGetFido2MethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersAuthenticationGetFido2MethodsRequest) Execute() (MicrosoftGraphFido2AuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationGetFido2MethodsExecute(r)
}

/*
UsersAuthenticationGetFido2Methods Get fido2Methods from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param fido2AuthenticationMethodId key: id of fido2AuthenticationMethod
 @return ApiUsersAuthenticationGetFido2MethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationGetFido2Methods(ctx _context.Context, userId string, fido2AuthenticationMethodId string) ApiUsersAuthenticationGetFido2MethodsRequest {
	return ApiUsersAuthenticationGetFido2MethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		fido2AuthenticationMethodId: fido2AuthenticationMethodId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphFido2AuthenticationMethod
func (a *UsersAuthenticationApiService) UsersAuthenticationGetFido2MethodsExecute(r ApiUsersAuthenticationGetFido2MethodsRequest) (MicrosoftGraphFido2AuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphFido2AuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationGetFido2Methods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/fido2Methods/{fido2AuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fido2AuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.fido2AuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersAuthenticationGetMethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	authenticationMethodId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersAuthenticationGetMethodsRequest) Select_(select_ []string) ApiUsersAuthenticationGetMethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersAuthenticationGetMethodsRequest) Expand(expand []string) ApiUsersAuthenticationGetMethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersAuthenticationGetMethodsRequest) Execute() (MicrosoftGraphAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationGetMethodsExecute(r)
}

/*
UsersAuthenticationGetMethods Get methods from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param authenticationMethodId key: id of authenticationMethod
 @return ApiUsersAuthenticationGetMethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationGetMethods(ctx _context.Context, userId string, authenticationMethodId string) ApiUsersAuthenticationGetMethodsRequest {
	return ApiUsersAuthenticationGetMethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		authenticationMethodId: authenticationMethodId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAuthenticationMethod
func (a *UsersAuthenticationApiService) UsersAuthenticationGetMethodsExecute(r ApiUsersAuthenticationGetMethodsRequest) (MicrosoftGraphAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationGetMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/methods/{authenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.authenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersAuthenticationGetMicrosoftAuthenticatorMethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	microsoftAuthenticatorAuthenticationMethodId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersAuthenticationGetMicrosoftAuthenticatorMethodsRequest) Select_(select_ []string) ApiUsersAuthenticationGetMicrosoftAuthenticatorMethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersAuthenticationGetMicrosoftAuthenticatorMethodsRequest) Expand(expand []string) ApiUsersAuthenticationGetMicrosoftAuthenticatorMethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersAuthenticationGetMicrosoftAuthenticatorMethodsRequest) Execute() (MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationGetMicrosoftAuthenticatorMethodsExecute(r)
}

/*
UsersAuthenticationGetMicrosoftAuthenticatorMethods Get microsoftAuthenticatorMethods from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param microsoftAuthenticatorAuthenticationMethodId key: id of microsoftAuthenticatorAuthenticationMethod
 @return ApiUsersAuthenticationGetMicrosoftAuthenticatorMethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationGetMicrosoftAuthenticatorMethods(ctx _context.Context, userId string, microsoftAuthenticatorAuthenticationMethodId string) ApiUsersAuthenticationGetMicrosoftAuthenticatorMethodsRequest {
	return ApiUsersAuthenticationGetMicrosoftAuthenticatorMethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		microsoftAuthenticatorAuthenticationMethodId: microsoftAuthenticatorAuthenticationMethodId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod
func (a *UsersAuthenticationApiService) UsersAuthenticationGetMicrosoftAuthenticatorMethodsExecute(r ApiUsersAuthenticationGetMicrosoftAuthenticatorMethodsRequest) (MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationGetMicrosoftAuthenticatorMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/microsoftAuthenticatorMethods/{microsoftAuthenticatorAuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"microsoftAuthenticatorAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.microsoftAuthenticatorAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersAuthenticationGetWindowsHelloForBusinessMethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	windowsHelloForBusinessAuthenticationMethodId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersAuthenticationGetWindowsHelloForBusinessMethodsRequest) Select_(select_ []string) ApiUsersAuthenticationGetWindowsHelloForBusinessMethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersAuthenticationGetWindowsHelloForBusinessMethodsRequest) Expand(expand []string) ApiUsersAuthenticationGetWindowsHelloForBusinessMethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersAuthenticationGetWindowsHelloForBusinessMethodsRequest) Execute() (MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationGetWindowsHelloForBusinessMethodsExecute(r)
}

/*
UsersAuthenticationGetWindowsHelloForBusinessMethods Get windowsHelloForBusinessMethods from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param windowsHelloForBusinessAuthenticationMethodId key: id of windowsHelloForBusinessAuthenticationMethod
 @return ApiUsersAuthenticationGetWindowsHelloForBusinessMethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationGetWindowsHelloForBusinessMethods(ctx _context.Context, userId string, windowsHelloForBusinessAuthenticationMethodId string) ApiUsersAuthenticationGetWindowsHelloForBusinessMethodsRequest {
	return ApiUsersAuthenticationGetWindowsHelloForBusinessMethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		windowsHelloForBusinessAuthenticationMethodId: windowsHelloForBusinessAuthenticationMethodId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod
func (a *UsersAuthenticationApiService) UsersAuthenticationGetWindowsHelloForBusinessMethodsExecute(r ApiUsersAuthenticationGetWindowsHelloForBusinessMethodsRequest) (MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationGetWindowsHelloForBusinessMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/windowsHelloForBusinessMethods/{windowsHelloForBusinessAuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"windowsHelloForBusinessAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.windowsHelloForBusinessAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersAuthenticationListFido2MethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersAuthenticationListFido2MethodsRequest) Top(top int32) ApiUsersAuthenticationListFido2MethodsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersAuthenticationListFido2MethodsRequest) Skip(skip int32) ApiUsersAuthenticationListFido2MethodsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersAuthenticationListFido2MethodsRequest) Search(search string) ApiUsersAuthenticationListFido2MethodsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersAuthenticationListFido2MethodsRequest) Filter(filter string) ApiUsersAuthenticationListFido2MethodsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersAuthenticationListFido2MethodsRequest) Count(count bool) ApiUsersAuthenticationListFido2MethodsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersAuthenticationListFido2MethodsRequest) Orderby(orderby []string) ApiUsersAuthenticationListFido2MethodsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersAuthenticationListFido2MethodsRequest) Select_(select_ []string) ApiUsersAuthenticationListFido2MethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersAuthenticationListFido2MethodsRequest) Expand(expand []string) ApiUsersAuthenticationListFido2MethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersAuthenticationListFido2MethodsRequest) Execute() (CollectionOfFido2AuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationListFido2MethodsExecute(r)
}

/*
UsersAuthenticationListFido2Methods Get fido2Methods from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersAuthenticationListFido2MethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationListFido2Methods(ctx _context.Context, userId string) ApiUsersAuthenticationListFido2MethodsRequest {
	return ApiUsersAuthenticationListFido2MethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfFido2AuthenticationMethod
func (a *UsersAuthenticationApiService) UsersAuthenticationListFido2MethodsExecute(r ApiUsersAuthenticationListFido2MethodsRequest) (CollectionOfFido2AuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfFido2AuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationListFido2Methods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/fido2Methods"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersAuthenticationListMethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersAuthenticationListMethodsRequest) Top(top int32) ApiUsersAuthenticationListMethodsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersAuthenticationListMethodsRequest) Skip(skip int32) ApiUsersAuthenticationListMethodsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersAuthenticationListMethodsRequest) Search(search string) ApiUsersAuthenticationListMethodsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersAuthenticationListMethodsRequest) Filter(filter string) ApiUsersAuthenticationListMethodsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersAuthenticationListMethodsRequest) Count(count bool) ApiUsersAuthenticationListMethodsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersAuthenticationListMethodsRequest) Orderby(orderby []string) ApiUsersAuthenticationListMethodsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersAuthenticationListMethodsRequest) Select_(select_ []string) ApiUsersAuthenticationListMethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersAuthenticationListMethodsRequest) Expand(expand []string) ApiUsersAuthenticationListMethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersAuthenticationListMethodsRequest) Execute() (CollectionOfAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationListMethodsExecute(r)
}

/*
UsersAuthenticationListMethods Get methods from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersAuthenticationListMethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationListMethods(ctx _context.Context, userId string) ApiUsersAuthenticationListMethodsRequest {
	return ApiUsersAuthenticationListMethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfAuthenticationMethod
func (a *UsersAuthenticationApiService) UsersAuthenticationListMethodsExecute(r ApiUsersAuthenticationListMethodsRequest) (CollectionOfAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationListMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/methods"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest) Top(top int32) ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest) Skip(skip int32) ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest) Search(search string) ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest) Filter(filter string) ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest) Count(count bool) ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest) Orderby(orderby []string) ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest) Select_(select_ []string) ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest) Expand(expand []string) ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest) Execute() (CollectionOfMicrosoftAuthenticatorAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationListMicrosoftAuthenticatorMethodsExecute(r)
}

/*
UsersAuthenticationListMicrosoftAuthenticatorMethods Get microsoftAuthenticatorMethods from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationListMicrosoftAuthenticatorMethods(ctx _context.Context, userId string) ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest {
	return ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfMicrosoftAuthenticatorAuthenticationMethod
func (a *UsersAuthenticationApiService) UsersAuthenticationListMicrosoftAuthenticatorMethodsExecute(r ApiUsersAuthenticationListMicrosoftAuthenticatorMethodsRequest) (CollectionOfMicrosoftAuthenticatorAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfMicrosoftAuthenticatorAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationListMicrosoftAuthenticatorMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/microsoftAuthenticatorMethods"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest) Top(top int32) ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest) Skip(skip int32) ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest) Search(search string) ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest) Filter(filter string) ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest) Count(count bool) ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest) Orderby(orderby []string) ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest) Select_(select_ []string) ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest) Expand(expand []string) ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest) Execute() (CollectionOfWindowsHelloForBusinessAuthenticationMethod, *_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationListWindowsHelloForBusinessMethodsExecute(r)
}

/*
UsersAuthenticationListWindowsHelloForBusinessMethods Get windowsHelloForBusinessMethods from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationListWindowsHelloForBusinessMethods(ctx _context.Context, userId string) ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest {
	return ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfWindowsHelloForBusinessAuthenticationMethod
func (a *UsersAuthenticationApiService) UsersAuthenticationListWindowsHelloForBusinessMethodsExecute(r ApiUsersAuthenticationListWindowsHelloForBusinessMethodsRequest) (CollectionOfWindowsHelloForBusinessAuthenticationMethod, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfWindowsHelloForBusinessAuthenticationMethod
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationListWindowsHelloForBusinessMethods")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/windowsHelloForBusinessMethods"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	microsoftAuthenticatorAuthenticationMethodId string
	ifMatch *string
}

// ETag
func (r ApiUsersAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest) IfMatch(ifMatch string) ApiUsersAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceExecute(r)
}

/*
UsersAuthenticationMicrosoftAuthenticatorMethodsDeleteDevice Delete navigation property device for users

The registered device on which Microsoft Authenticator resides. This property is null if the device is not registered for passwordless Phone Sign-In.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param microsoftAuthenticatorAuthenticationMethodId key: id of microsoftAuthenticatorAuthenticationMethod
 @return ApiUsersAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationMicrosoftAuthenticatorMethodsDeleteDevice(ctx _context.Context, userId string, microsoftAuthenticatorAuthenticationMethodId string) ApiUsersAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest {
	return ApiUsersAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		microsoftAuthenticatorAuthenticationMethodId: microsoftAuthenticatorAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *UsersAuthenticationApiService) UsersAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceExecute(r ApiUsersAuthenticationMicrosoftAuthenticatorMethodsDeleteDeviceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationMicrosoftAuthenticatorMethodsDeleteDevice")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/microsoftAuthenticatorMethods/{microsoftAuthenticatorAuthenticationMethod-id}/device"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"microsoftAuthenticatorAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.microsoftAuthenticatorAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	microsoftAuthenticatorAuthenticationMethodId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest) Select_(select_ []string) ApiUsersAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest) Expand(expand []string) ApiUsersAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest) Execute() (MicrosoftGraphDevice, *_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationMicrosoftAuthenticatorMethodsGetDeviceExecute(r)
}

/*
UsersAuthenticationMicrosoftAuthenticatorMethodsGetDevice Get device from users

The registered device on which Microsoft Authenticator resides. This property is null if the device is not registered for passwordless Phone Sign-In.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param microsoftAuthenticatorAuthenticationMethodId key: id of microsoftAuthenticatorAuthenticationMethod
 @return ApiUsersAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationMicrosoftAuthenticatorMethodsGetDevice(ctx _context.Context, userId string, microsoftAuthenticatorAuthenticationMethodId string) ApiUsersAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest {
	return ApiUsersAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		microsoftAuthenticatorAuthenticationMethodId: microsoftAuthenticatorAuthenticationMethodId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDevice
func (a *UsersAuthenticationApiService) UsersAuthenticationMicrosoftAuthenticatorMethodsGetDeviceExecute(r ApiUsersAuthenticationMicrosoftAuthenticatorMethodsGetDeviceRequest) (MicrosoftGraphDevice, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationMicrosoftAuthenticatorMethodsGetDevice")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/microsoftAuthenticatorMethods/{microsoftAuthenticatorAuthenticationMethod-id}/device"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"microsoftAuthenticatorAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.microsoftAuthenticatorAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	microsoftAuthenticatorAuthenticationMethodId string
	microsoftGraphDevice *MicrosoftGraphDevice
}

// New navigation property values
func (r ApiUsersAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest) MicrosoftGraphDevice(microsoftGraphDevice MicrosoftGraphDevice) ApiUsersAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest {
	r.microsoftGraphDevice = &microsoftGraphDevice
	return r
}

func (r ApiUsersAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceExecute(r)
}

/*
UsersAuthenticationMicrosoftAuthenticatorMethodsUpdateDevice Update the navigation property device in users

The registered device on which Microsoft Authenticator resides. This property is null if the device is not registered for passwordless Phone Sign-In.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param microsoftAuthenticatorAuthenticationMethodId key: id of microsoftAuthenticatorAuthenticationMethod
 @return ApiUsersAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationMicrosoftAuthenticatorMethodsUpdateDevice(ctx _context.Context, userId string, microsoftAuthenticatorAuthenticationMethodId string) ApiUsersAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest {
	return ApiUsersAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		microsoftAuthenticatorAuthenticationMethodId: microsoftAuthenticatorAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *UsersAuthenticationApiService) UsersAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceExecute(r ApiUsersAuthenticationMicrosoftAuthenticatorMethodsUpdateDeviceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationMicrosoftAuthenticatorMethodsUpdateDevice")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/microsoftAuthenticatorMethods/{microsoftAuthenticatorAuthenticationMethod-id}/device"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"microsoftAuthenticatorAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.microsoftAuthenticatorAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDevice == nil {
		return nil, reportError("microsoftGraphDevice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDevice
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersAuthenticationUpdateFido2MethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	fido2AuthenticationMethodId string
	microsoftGraphFido2AuthenticationMethod *MicrosoftGraphFido2AuthenticationMethod
}

// New navigation property values
func (r ApiUsersAuthenticationUpdateFido2MethodsRequest) MicrosoftGraphFido2AuthenticationMethod(microsoftGraphFido2AuthenticationMethod MicrosoftGraphFido2AuthenticationMethod) ApiUsersAuthenticationUpdateFido2MethodsRequest {
	r.microsoftGraphFido2AuthenticationMethod = &microsoftGraphFido2AuthenticationMethod
	return r
}

func (r ApiUsersAuthenticationUpdateFido2MethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationUpdateFido2MethodsExecute(r)
}

/*
UsersAuthenticationUpdateFido2Methods Update the navigation property fido2Methods in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param fido2AuthenticationMethodId key: id of fido2AuthenticationMethod
 @return ApiUsersAuthenticationUpdateFido2MethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationUpdateFido2Methods(ctx _context.Context, userId string, fido2AuthenticationMethodId string) ApiUsersAuthenticationUpdateFido2MethodsRequest {
	return ApiUsersAuthenticationUpdateFido2MethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		fido2AuthenticationMethodId: fido2AuthenticationMethodId,
	}
}

// Execute executes the request
func (a *UsersAuthenticationApiService) UsersAuthenticationUpdateFido2MethodsExecute(r ApiUsersAuthenticationUpdateFido2MethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationUpdateFido2Methods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/fido2Methods/{fido2AuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"fido2AuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.fido2AuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphFido2AuthenticationMethod == nil {
		return nil, reportError("microsoftGraphFido2AuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphFido2AuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersAuthenticationUpdateMethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	authenticationMethodId string
	microsoftGraphAuthenticationMethod *MicrosoftGraphAuthenticationMethod
}

// New navigation property values
func (r ApiUsersAuthenticationUpdateMethodsRequest) MicrosoftGraphAuthenticationMethod(microsoftGraphAuthenticationMethod MicrosoftGraphAuthenticationMethod) ApiUsersAuthenticationUpdateMethodsRequest {
	r.microsoftGraphAuthenticationMethod = &microsoftGraphAuthenticationMethod
	return r
}

func (r ApiUsersAuthenticationUpdateMethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationUpdateMethodsExecute(r)
}

/*
UsersAuthenticationUpdateMethods Update the navigation property methods in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param authenticationMethodId key: id of authenticationMethod
 @return ApiUsersAuthenticationUpdateMethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationUpdateMethods(ctx _context.Context, userId string, authenticationMethodId string) ApiUsersAuthenticationUpdateMethodsRequest {
	return ApiUsersAuthenticationUpdateMethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		authenticationMethodId: authenticationMethodId,
	}
}

// Execute executes the request
func (a *UsersAuthenticationApiService) UsersAuthenticationUpdateMethodsExecute(r ApiUsersAuthenticationUpdateMethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationUpdateMethods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/methods/{authenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"authenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.authenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAuthenticationMethod == nil {
		return nil, reportError("microsoftGraphAuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	microsoftAuthenticatorAuthenticationMethodId string
	microsoftGraphMicrosoftAuthenticatorAuthenticationMethod *MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod
}

// New navigation property values
func (r ApiUsersAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest) MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod(microsoftGraphMicrosoftAuthenticatorAuthenticationMethod MicrosoftGraphMicrosoftAuthenticatorAuthenticationMethod) ApiUsersAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest {
	r.microsoftGraphMicrosoftAuthenticatorAuthenticationMethod = &microsoftGraphMicrosoftAuthenticatorAuthenticationMethod
	return r
}

func (r ApiUsersAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationUpdateMicrosoftAuthenticatorMethodsExecute(r)
}

/*
UsersAuthenticationUpdateMicrosoftAuthenticatorMethods Update the navigation property microsoftAuthenticatorMethods in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param microsoftAuthenticatorAuthenticationMethodId key: id of microsoftAuthenticatorAuthenticationMethod
 @return ApiUsersAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationUpdateMicrosoftAuthenticatorMethods(ctx _context.Context, userId string, microsoftAuthenticatorAuthenticationMethodId string) ApiUsersAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest {
	return ApiUsersAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		microsoftAuthenticatorAuthenticationMethodId: microsoftAuthenticatorAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *UsersAuthenticationApiService) UsersAuthenticationUpdateMicrosoftAuthenticatorMethodsExecute(r ApiUsersAuthenticationUpdateMicrosoftAuthenticatorMethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationUpdateMicrosoftAuthenticatorMethods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/microsoftAuthenticatorMethods/{microsoftAuthenticatorAuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"microsoftAuthenticatorAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.microsoftAuthenticatorAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMicrosoftAuthenticatorAuthenticationMethod == nil {
		return nil, reportError("microsoftGraphMicrosoftAuthenticatorAuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMicrosoftAuthenticatorAuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersAuthenticationUpdateWindowsHelloForBusinessMethodsRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	windowsHelloForBusinessAuthenticationMethodId string
	microsoftGraphWindowsHelloForBusinessAuthenticationMethod *MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod
}

// New navigation property values
func (r ApiUsersAuthenticationUpdateWindowsHelloForBusinessMethodsRequest) MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod(microsoftGraphWindowsHelloForBusinessAuthenticationMethod MicrosoftGraphWindowsHelloForBusinessAuthenticationMethod) ApiUsersAuthenticationUpdateWindowsHelloForBusinessMethodsRequest {
	r.microsoftGraphWindowsHelloForBusinessAuthenticationMethod = &microsoftGraphWindowsHelloForBusinessAuthenticationMethod
	return r
}

func (r ApiUsersAuthenticationUpdateWindowsHelloForBusinessMethodsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationUpdateWindowsHelloForBusinessMethodsExecute(r)
}

/*
UsersAuthenticationUpdateWindowsHelloForBusinessMethods Update the navigation property windowsHelloForBusinessMethods in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param windowsHelloForBusinessAuthenticationMethodId key: id of windowsHelloForBusinessAuthenticationMethod
 @return ApiUsersAuthenticationUpdateWindowsHelloForBusinessMethodsRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationUpdateWindowsHelloForBusinessMethods(ctx _context.Context, userId string, windowsHelloForBusinessAuthenticationMethodId string) ApiUsersAuthenticationUpdateWindowsHelloForBusinessMethodsRequest {
	return ApiUsersAuthenticationUpdateWindowsHelloForBusinessMethodsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		windowsHelloForBusinessAuthenticationMethodId: windowsHelloForBusinessAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *UsersAuthenticationApiService) UsersAuthenticationUpdateWindowsHelloForBusinessMethodsExecute(r ApiUsersAuthenticationUpdateWindowsHelloForBusinessMethodsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationUpdateWindowsHelloForBusinessMethods")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/windowsHelloForBusinessMethods/{windowsHelloForBusinessAuthenticationMethod-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"windowsHelloForBusinessAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.windowsHelloForBusinessAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphWindowsHelloForBusinessAuthenticationMethod == nil {
		return nil, reportError("microsoftGraphWindowsHelloForBusinessAuthenticationMethod is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphWindowsHelloForBusinessAuthenticationMethod
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	windowsHelloForBusinessAuthenticationMethodId string
	ifMatch *string
}

// ETag
func (r ApiUsersAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest) IfMatch(ifMatch string) ApiUsersAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceExecute(r)
}

/*
UsersAuthenticationWindowsHelloForBusinessMethodsDeleteDevice Delete navigation property device for users

The registered device on which this Windows Hello for Business key resides.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param windowsHelloForBusinessAuthenticationMethodId key: id of windowsHelloForBusinessAuthenticationMethod
 @return ApiUsersAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationWindowsHelloForBusinessMethodsDeleteDevice(ctx _context.Context, userId string, windowsHelloForBusinessAuthenticationMethodId string) ApiUsersAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest {
	return ApiUsersAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		windowsHelloForBusinessAuthenticationMethodId: windowsHelloForBusinessAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *UsersAuthenticationApiService) UsersAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceExecute(r ApiUsersAuthenticationWindowsHelloForBusinessMethodsDeleteDeviceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationWindowsHelloForBusinessMethodsDeleteDevice")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/windowsHelloForBusinessMethods/{windowsHelloForBusinessAuthenticationMethod-id}/device"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"windowsHelloForBusinessAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.windowsHelloForBusinessAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	windowsHelloForBusinessAuthenticationMethodId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest) Select_(select_ []string) ApiUsersAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest) Expand(expand []string) ApiUsersAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest) Execute() (MicrosoftGraphDevice, *_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationWindowsHelloForBusinessMethodsGetDeviceExecute(r)
}

/*
UsersAuthenticationWindowsHelloForBusinessMethodsGetDevice Get device from users

The registered device on which this Windows Hello for Business key resides.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param windowsHelloForBusinessAuthenticationMethodId key: id of windowsHelloForBusinessAuthenticationMethod
 @return ApiUsersAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationWindowsHelloForBusinessMethodsGetDevice(ctx _context.Context, userId string, windowsHelloForBusinessAuthenticationMethodId string) ApiUsersAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest {
	return ApiUsersAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		windowsHelloForBusinessAuthenticationMethodId: windowsHelloForBusinessAuthenticationMethodId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDevice
func (a *UsersAuthenticationApiService) UsersAuthenticationWindowsHelloForBusinessMethodsGetDeviceExecute(r ApiUsersAuthenticationWindowsHelloForBusinessMethodsGetDeviceRequest) (MicrosoftGraphDevice, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationWindowsHelloForBusinessMethodsGetDevice")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/windowsHelloForBusinessMethods/{windowsHelloForBusinessAuthenticationMethod-id}/device"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"windowsHelloForBusinessAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.windowsHelloForBusinessAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	windowsHelloForBusinessAuthenticationMethodId string
	microsoftGraphDevice *MicrosoftGraphDevice
}

// New navigation property values
func (r ApiUsersAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest) MicrosoftGraphDevice(microsoftGraphDevice MicrosoftGraphDevice) ApiUsersAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest {
	r.microsoftGraphDevice = &microsoftGraphDevice
	return r
}

func (r ApiUsersAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceExecute(r)
}

/*
UsersAuthenticationWindowsHelloForBusinessMethodsUpdateDevice Update the navigation property device in users

The registered device on which this Windows Hello for Business key resides.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param windowsHelloForBusinessAuthenticationMethodId key: id of windowsHelloForBusinessAuthenticationMethod
 @return ApiUsersAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest
*/
func (a *UsersAuthenticationApiService) UsersAuthenticationWindowsHelloForBusinessMethodsUpdateDevice(ctx _context.Context, userId string, windowsHelloForBusinessAuthenticationMethodId string) ApiUsersAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest {
	return ApiUsersAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		windowsHelloForBusinessAuthenticationMethodId: windowsHelloForBusinessAuthenticationMethodId,
	}
}

// Execute executes the request
func (a *UsersAuthenticationApiService) UsersAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceExecute(r ApiUsersAuthenticationWindowsHelloForBusinessMethodsUpdateDeviceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersAuthenticationWindowsHelloForBusinessMethodsUpdateDevice")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication/windowsHelloForBusinessMethods/{windowsHelloForBusinessAuthenticationMethod-id}/device"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"windowsHelloForBusinessAuthenticationMethod-id"+"}", _neturl.PathEscape(parameterToString(r.windowsHelloForBusinessAuthenticationMethodId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDevice == nil {
		return nil, reportError("microsoftGraphDevice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDevice
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersDeleteAuthenticationRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	ifMatch *string
}

// ETag
func (r ApiUsersDeleteAuthenticationRequest) IfMatch(ifMatch string) ApiUsersDeleteAuthenticationRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersDeleteAuthenticationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersDeleteAuthenticationExecute(r)
}

/*
UsersDeleteAuthentication Delete navigation property authentication for users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersDeleteAuthenticationRequest
*/
func (a *UsersAuthenticationApiService) UsersDeleteAuthentication(ctx _context.Context, userId string) ApiUsersDeleteAuthenticationRequest {
	return ApiUsersDeleteAuthenticationRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
func (a *UsersAuthenticationApiService) UsersDeleteAuthenticationExecute(r ApiUsersDeleteAuthenticationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersDeleteAuthentication")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersGetAuthenticationRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersGetAuthenticationRequest) Select_(select_ []string) ApiUsersGetAuthenticationRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersGetAuthenticationRequest) Expand(expand []string) ApiUsersGetAuthenticationRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersGetAuthenticationRequest) Execute() (MicrosoftGraphAuthentication, *_nethttp.Response, error) {
	return r.ApiService.UsersGetAuthenticationExecute(r)
}

/*
UsersGetAuthentication Get authentication from users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersGetAuthenticationRequest
*/
func (a *UsersAuthenticationApiService) UsersGetAuthentication(ctx _context.Context, userId string) ApiUsersGetAuthenticationRequest {
	return ApiUsersGetAuthenticationRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAuthentication
func (a *UsersAuthenticationApiService) UsersGetAuthenticationExecute(r ApiUsersGetAuthenticationRequest) (MicrosoftGraphAuthentication, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAuthentication
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersGetAuthentication")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersUpdateAuthenticationRequest struct {
	ctx _context.Context
	ApiService *UsersAuthenticationApiService
	userId string
	microsoftGraphAuthentication *MicrosoftGraphAuthentication
}

// New navigation property values
func (r ApiUsersUpdateAuthenticationRequest) MicrosoftGraphAuthentication(microsoftGraphAuthentication MicrosoftGraphAuthentication) ApiUsersUpdateAuthenticationRequest {
	r.microsoftGraphAuthentication = &microsoftGraphAuthentication
	return r
}

func (r ApiUsersUpdateAuthenticationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersUpdateAuthenticationExecute(r)
}

/*
UsersUpdateAuthentication Update the navigation property authentication in users

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUpdateAuthenticationRequest
*/
func (a *UsersAuthenticationApiService) UsersUpdateAuthentication(ctx _context.Context, userId string) ApiUsersUpdateAuthenticationRequest {
	return ApiUsersUpdateAuthenticationRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
func (a *UsersAuthenticationApiService) UsersUpdateAuthenticationExecute(r ApiUsersUpdateAuthenticationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersAuthenticationApiService.UsersUpdateAuthentication")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/authentication"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAuthentication == nil {
		return nil, reportError("microsoftGraphAuthentication is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAuthentication
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
