/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphManagedAppDataEncryptionType Represents the level to which app data is encrypted for managed apps
type MicrosoftGraphManagedAppDataEncryptionType string

// List of microsoft.graph.managedAppDataEncryptionType
const (
	USE_DEVICE_SETTINGS MicrosoftGraphManagedAppDataEncryptionType = "useDeviceSettings"
	AFTER_DEVICE_RESTART MicrosoftGraphManagedAppDataEncryptionType = "afterDeviceRestart"
	WHEN_DEVICE_LOCKED_EXCEPT_OPEN_FILES MicrosoftGraphManagedAppDataEncryptionType = "whenDeviceLockedExceptOpenFiles"
	WHEN_DEVICE_LOCKED MicrosoftGraphManagedAppDataEncryptionType = "whenDeviceLocked"
)

// All allowed values of MicrosoftGraphManagedAppDataEncryptionType enum
var AllowedMicrosoftGraphManagedAppDataEncryptionTypeEnumValues = []MicrosoftGraphManagedAppDataEncryptionType{
	"useDeviceSettings",
	"afterDeviceRestart",
	"whenDeviceLockedExceptOpenFiles",
	"whenDeviceLocked",
}

func (v *MicrosoftGraphManagedAppDataEncryptionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphManagedAppDataEncryptionType(value)
	for _, existing := range AllowedMicrosoftGraphManagedAppDataEncryptionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphManagedAppDataEncryptionType", value)
}

// NewMicrosoftGraphManagedAppDataEncryptionTypeFromValue returns a pointer to a valid MicrosoftGraphManagedAppDataEncryptionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphManagedAppDataEncryptionTypeFromValue(v string) (*MicrosoftGraphManagedAppDataEncryptionType, error) {
	ev := MicrosoftGraphManagedAppDataEncryptionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphManagedAppDataEncryptionType: valid values are %v", v, AllowedMicrosoftGraphManagedAppDataEncryptionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphManagedAppDataEncryptionType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphManagedAppDataEncryptionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.managedAppDataEncryptionType value
func (v MicrosoftGraphManagedAppDataEncryptionType) Ptr() *MicrosoftGraphManagedAppDataEncryptionType {
	return &v
}

type NullableMicrosoftGraphManagedAppDataEncryptionType struct {
	value *MicrosoftGraphManagedAppDataEncryptionType
	isSet bool
}

func (v NullableMicrosoftGraphManagedAppDataEncryptionType) Get() *MicrosoftGraphManagedAppDataEncryptionType {
	return v.value
}

func (v *NullableMicrosoftGraphManagedAppDataEncryptionType) Set(val *MicrosoftGraphManagedAppDataEncryptionType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphManagedAppDataEncryptionType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphManagedAppDataEncryptionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphManagedAppDataEncryptionType(val *MicrosoftGraphManagedAppDataEncryptionType) *NullableMicrosoftGraphManagedAppDataEncryptionType {
	return &NullableMicrosoftGraphManagedAppDataEncryptionType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphManagedAppDataEncryptionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphManagedAppDataEncryptionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

