/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphDeviceComplianceActionType Scheduled Action Type Enum
type MicrosoftGraphDeviceComplianceActionType string

// List of microsoft.graph.deviceComplianceActionType
const (
	NO_ACTION MicrosoftGraphDeviceComplianceActionType = "noAction"
	NOTIFICATION MicrosoftGraphDeviceComplianceActionType = "notification"
	BLOCK MicrosoftGraphDeviceComplianceActionType = "block"
	RETIRE MicrosoftGraphDeviceComplianceActionType = "retire"
	WIPE MicrosoftGraphDeviceComplianceActionType = "wipe"
	REMOVE_RESOURCE_ACCESS_PROFILES MicrosoftGraphDeviceComplianceActionType = "removeResourceAccessProfiles"
	PUSH_NOTIFICATION MicrosoftGraphDeviceComplianceActionType = "pushNotification"
)

// All allowed values of MicrosoftGraphDeviceComplianceActionType enum
var AllowedMicrosoftGraphDeviceComplianceActionTypeEnumValues = []MicrosoftGraphDeviceComplianceActionType{
	"noAction",
	"notification",
	"block",
	"retire",
	"wipe",
	"removeResourceAccessProfiles",
	"pushNotification",
}

func (v *MicrosoftGraphDeviceComplianceActionType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphDeviceComplianceActionType(value)
	for _, existing := range AllowedMicrosoftGraphDeviceComplianceActionTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphDeviceComplianceActionType", value)
}

// NewMicrosoftGraphDeviceComplianceActionTypeFromValue returns a pointer to a valid MicrosoftGraphDeviceComplianceActionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphDeviceComplianceActionTypeFromValue(v string) (*MicrosoftGraphDeviceComplianceActionType, error) {
	ev := MicrosoftGraphDeviceComplianceActionType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphDeviceComplianceActionType: valid values are %v", v, AllowedMicrosoftGraphDeviceComplianceActionTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphDeviceComplianceActionType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphDeviceComplianceActionTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.deviceComplianceActionType value
func (v MicrosoftGraphDeviceComplianceActionType) Ptr() *MicrosoftGraphDeviceComplianceActionType {
	return &v
}

type NullableMicrosoftGraphDeviceComplianceActionType struct {
	value *MicrosoftGraphDeviceComplianceActionType
	isSet bool
}

func (v NullableMicrosoftGraphDeviceComplianceActionType) Get() *MicrosoftGraphDeviceComplianceActionType {
	return v.value
}

func (v *NullableMicrosoftGraphDeviceComplianceActionType) Set(val *MicrosoftGraphDeviceComplianceActionType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphDeviceComplianceActionType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphDeviceComplianceActionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphDeviceComplianceActionType(val *MicrosoftGraphDeviceComplianceActionType) *NullableMicrosoftGraphDeviceComplianceActionType {
	return &NullableMicrosoftGraphDeviceComplianceActionType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphDeviceComplianceActionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphDeviceComplianceActionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

