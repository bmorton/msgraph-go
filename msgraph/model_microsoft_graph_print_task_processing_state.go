/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphPrintTaskProcessingState the model 'MicrosoftGraphPrintTaskProcessingState'
type MicrosoftGraphPrintTaskProcessingState string

// List of microsoft.graph.printTaskProcessingState
const (
	PENDING MicrosoftGraphPrintTaskProcessingState = "pending"
	PROCESSING MicrosoftGraphPrintTaskProcessingState = "processing"
	COMPLETED MicrosoftGraphPrintTaskProcessingState = "completed"
	ABORTED MicrosoftGraphPrintTaskProcessingState = "aborted"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphPrintTaskProcessingState = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphPrintTaskProcessingState enum
var AllowedMicrosoftGraphPrintTaskProcessingStateEnumValues = []MicrosoftGraphPrintTaskProcessingState{
	"pending",
	"processing",
	"completed",
	"aborted",
	"unknownFutureValue",
}

func (v *MicrosoftGraphPrintTaskProcessingState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphPrintTaskProcessingState(value)
	for _, existing := range AllowedMicrosoftGraphPrintTaskProcessingStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphPrintTaskProcessingState", value)
}

// NewMicrosoftGraphPrintTaskProcessingStateFromValue returns a pointer to a valid MicrosoftGraphPrintTaskProcessingState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphPrintTaskProcessingStateFromValue(v string) (*MicrosoftGraphPrintTaskProcessingState, error) {
	ev := MicrosoftGraphPrintTaskProcessingState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphPrintTaskProcessingState: valid values are %v", v, AllowedMicrosoftGraphPrintTaskProcessingStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphPrintTaskProcessingState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphPrintTaskProcessingStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.printTaskProcessingState value
func (v MicrosoftGraphPrintTaskProcessingState) Ptr() *MicrosoftGraphPrintTaskProcessingState {
	return &v
}

type NullableMicrosoftGraphPrintTaskProcessingState struct {
	value *MicrosoftGraphPrintTaskProcessingState
	isSet bool
}

func (v NullableMicrosoftGraphPrintTaskProcessingState) Get() *MicrosoftGraphPrintTaskProcessingState {
	return v.value
}

func (v *NullableMicrosoftGraphPrintTaskProcessingState) Set(val *MicrosoftGraphPrintTaskProcessingState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPrintTaskProcessingState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPrintTaskProcessingState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPrintTaskProcessingState(val *MicrosoftGraphPrintTaskProcessingState) *NullableMicrosoftGraphPrintTaskProcessingState {
	return &NullableMicrosoftGraphPrintTaskProcessingState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPrintTaskProcessingState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPrintTaskProcessingState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

