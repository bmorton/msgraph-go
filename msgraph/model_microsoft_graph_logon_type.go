/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphLogonType the model 'MicrosoftGraphLogonType'
type MicrosoftGraphLogonType string

// List of microsoft.graph.logonType
const (
	UNKNOWN MicrosoftGraphLogonType = "unknown"
	INTERACTIVE MicrosoftGraphLogonType = "interactive"
	REMOTE_INTERACTIVE MicrosoftGraphLogonType = "remoteInteractive"
	NETWORK MicrosoftGraphLogonType = "network"
	BATCH MicrosoftGraphLogonType = "batch"
	SERVICE MicrosoftGraphLogonType = "service"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphLogonType = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphLogonType enum
var AllowedMicrosoftGraphLogonTypeEnumValues = []MicrosoftGraphLogonType{
	"unknown",
	"interactive",
	"remoteInteractive",
	"network",
	"batch",
	"service",
	"unknownFutureValue",
}

func (v *MicrosoftGraphLogonType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphLogonType(value)
	for _, existing := range AllowedMicrosoftGraphLogonTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphLogonType", value)
}

// NewMicrosoftGraphLogonTypeFromValue returns a pointer to a valid MicrosoftGraphLogonType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphLogonTypeFromValue(v string) (*MicrosoftGraphLogonType, error) {
	ev := MicrosoftGraphLogonType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphLogonType: valid values are %v", v, AllowedMicrosoftGraphLogonTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphLogonType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphLogonTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.logonType value
func (v MicrosoftGraphLogonType) Ptr() *MicrosoftGraphLogonType {
	return &v
}

type NullableMicrosoftGraphLogonType struct {
	value *MicrosoftGraphLogonType
	isSet bool
}

func (v NullableMicrosoftGraphLogonType) Get() *MicrosoftGraphLogonType {
	return v.value
}

func (v *NullableMicrosoftGraphLogonType) Set(val *MicrosoftGraphLogonType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphLogonType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphLogonType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphLogonType(val *MicrosoftGraphLogonType) *NullableMicrosoftGraphLogonType {
	return &NullableMicrosoftGraphLogonType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphLogonType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphLogonType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

