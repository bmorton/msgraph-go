/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceManagementDeviceConfigurationApiService DeviceManagementDeviceConfigurationApi service
type DeviceManagementDeviceConfigurationApiService service

type ApiDeviceManagementCreateDeviceConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	microsoftGraphDeviceConfiguration *MicrosoftGraphDeviceConfiguration
}

// New navigation property
func (r ApiDeviceManagementCreateDeviceConfigurationsRequest) MicrosoftGraphDeviceConfiguration(microsoftGraphDeviceConfiguration MicrosoftGraphDeviceConfiguration) ApiDeviceManagementCreateDeviceConfigurationsRequest {
	r.microsoftGraphDeviceConfiguration = &microsoftGraphDeviceConfiguration
	return r
}

func (r ApiDeviceManagementCreateDeviceConfigurationsRequest) Execute() (MicrosoftGraphDeviceConfiguration, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementCreateDeviceConfigurationsExecute(r)
}

/*
DeviceManagementCreateDeviceConfigurations Create new navigation property to deviceConfigurations for deviceManagement

The device configurations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementCreateDeviceConfigurationsRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementCreateDeviceConfigurations(ctx _context.Context) ApiDeviceManagementCreateDeviceConfigurationsRequest {
	return ApiDeviceManagementCreateDeviceConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfiguration
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementCreateDeviceConfigurationsExecute(r ApiDeviceManagementCreateDeviceConfigurationsRequest) (MicrosoftGraphDeviceConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementCreateDeviceConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfiguration == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeleteDeviceConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeleteDeviceConfigurationsRequest) IfMatch(ifMatch string) ApiDeviceManagementDeleteDeviceConfigurationsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeleteDeviceConfigurationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeleteDeviceConfigurationsExecute(r)
}

/*
DeviceManagementDeleteDeviceConfigurations Delete navigation property deviceConfigurations for deviceManagement

The device configurations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementDeleteDeviceConfigurationsRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeleteDeviceConfigurations(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementDeleteDeviceConfigurationsRequest {
	return ApiDeviceManagementDeleteDeviceConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeleteDeviceConfigurationsExecute(r ApiDeviceManagementDeleteDeviceConfigurationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeleteDeviceConfigurations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsCreateAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	microsoftGraphDeviceConfigurationAssignment *MicrosoftGraphDeviceConfigurationAssignment
}

// New navigation property
func (r ApiDeviceManagementDeviceConfigurationsCreateAssignmentsRequest) MicrosoftGraphDeviceConfigurationAssignment(microsoftGraphDeviceConfigurationAssignment MicrosoftGraphDeviceConfigurationAssignment) ApiDeviceManagementDeviceConfigurationsCreateAssignmentsRequest {
	r.microsoftGraphDeviceConfigurationAssignment = &microsoftGraphDeviceConfigurationAssignment
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsCreateAssignmentsRequest) Execute() (MicrosoftGraphDeviceConfigurationAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsCreateAssignmentsExecute(r)
}

/*
DeviceManagementDeviceConfigurationsCreateAssignments Create new navigation property to assignments for deviceManagement

The list of assignments for the device configuration profile.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementDeviceConfigurationsCreateAssignmentsRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsCreateAssignments(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementDeviceConfigurationsCreateAssignmentsRequest {
	return ApiDeviceManagementDeviceConfigurationsCreateAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfigurationAssignment
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsCreateAssignmentsExecute(r ApiDeviceManagementDeviceConfigurationsCreateAssignmentsRequest) (MicrosoftGraphDeviceConfigurationAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfigurationAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsCreateAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/assignments"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfigurationAssignment == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceConfigurationAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfigurationAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsCreateDeviceSettingStateSummariesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	microsoftGraphSettingStateDeviceSummary *MicrosoftGraphSettingStateDeviceSummary
}

// New navigation property
func (r ApiDeviceManagementDeviceConfigurationsCreateDeviceSettingStateSummariesRequest) MicrosoftGraphSettingStateDeviceSummary(microsoftGraphSettingStateDeviceSummary MicrosoftGraphSettingStateDeviceSummary) ApiDeviceManagementDeviceConfigurationsCreateDeviceSettingStateSummariesRequest {
	r.microsoftGraphSettingStateDeviceSummary = &microsoftGraphSettingStateDeviceSummary
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsCreateDeviceSettingStateSummariesRequest) Execute() (MicrosoftGraphSettingStateDeviceSummary, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsCreateDeviceSettingStateSummariesExecute(r)
}

/*
DeviceManagementDeviceConfigurationsCreateDeviceSettingStateSummaries Create new navigation property to deviceSettingStateSummaries for deviceManagement

Device Configuration Setting State Device Summary

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementDeviceConfigurationsCreateDeviceSettingStateSummariesRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsCreateDeviceSettingStateSummaries(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementDeviceConfigurationsCreateDeviceSettingStateSummariesRequest {
	return ApiDeviceManagementDeviceConfigurationsCreateDeviceSettingStateSummariesRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSettingStateDeviceSummary
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsCreateDeviceSettingStateSummariesExecute(r ApiDeviceManagementDeviceConfigurationsCreateDeviceSettingStateSummariesRequest) (MicrosoftGraphSettingStateDeviceSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSettingStateDeviceSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsCreateDeviceSettingStateSummaries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/deviceSettingStateSummaries"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSettingStateDeviceSummary == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphSettingStateDeviceSummary is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSettingStateDeviceSummary
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsCreateDeviceStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	microsoftGraphDeviceConfigurationDeviceStatus *MicrosoftGraphDeviceConfigurationDeviceStatus
}

// New navigation property
func (r ApiDeviceManagementDeviceConfigurationsCreateDeviceStatusesRequest) MicrosoftGraphDeviceConfigurationDeviceStatus(microsoftGraphDeviceConfigurationDeviceStatus MicrosoftGraphDeviceConfigurationDeviceStatus) ApiDeviceManagementDeviceConfigurationsCreateDeviceStatusesRequest {
	r.microsoftGraphDeviceConfigurationDeviceStatus = &microsoftGraphDeviceConfigurationDeviceStatus
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsCreateDeviceStatusesRequest) Execute() (MicrosoftGraphDeviceConfigurationDeviceStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsCreateDeviceStatusesExecute(r)
}

/*
DeviceManagementDeviceConfigurationsCreateDeviceStatuses Create new navigation property to deviceStatuses for deviceManagement

Device configuration installation status by device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementDeviceConfigurationsCreateDeviceStatusesRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsCreateDeviceStatuses(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementDeviceConfigurationsCreateDeviceStatusesRequest {
	return ApiDeviceManagementDeviceConfigurationsCreateDeviceStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfigurationDeviceStatus
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsCreateDeviceStatusesExecute(r ApiDeviceManagementDeviceConfigurationsCreateDeviceStatusesRequest) (MicrosoftGraphDeviceConfigurationDeviceStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfigurationDeviceStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsCreateDeviceStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/deviceStatuses"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfigurationDeviceStatus == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceConfigurationDeviceStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfigurationDeviceStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsCreateUserStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	microsoftGraphDeviceConfigurationUserStatus *MicrosoftGraphDeviceConfigurationUserStatus
}

// New navigation property
func (r ApiDeviceManagementDeviceConfigurationsCreateUserStatusesRequest) MicrosoftGraphDeviceConfigurationUserStatus(microsoftGraphDeviceConfigurationUserStatus MicrosoftGraphDeviceConfigurationUserStatus) ApiDeviceManagementDeviceConfigurationsCreateUserStatusesRequest {
	r.microsoftGraphDeviceConfigurationUserStatus = &microsoftGraphDeviceConfigurationUserStatus
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsCreateUserStatusesRequest) Execute() (MicrosoftGraphDeviceConfigurationUserStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsCreateUserStatusesExecute(r)
}

/*
DeviceManagementDeviceConfigurationsCreateUserStatuses Create new navigation property to userStatuses for deviceManagement

Device configuration installation status by user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementDeviceConfigurationsCreateUserStatusesRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsCreateUserStatuses(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementDeviceConfigurationsCreateUserStatusesRequest {
	return ApiDeviceManagementDeviceConfigurationsCreateUserStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfigurationUserStatus
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsCreateUserStatusesExecute(r ApiDeviceManagementDeviceConfigurationsCreateUserStatusesRequest) (MicrosoftGraphDeviceConfigurationUserStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfigurationUserStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsCreateUserStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/userStatuses"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfigurationUserStatus == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceConfigurationUserStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfigurationUserStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsDeleteAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	deviceConfigurationAssignmentId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceConfigurationsDeleteAssignmentsRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceConfigurationsDeleteAssignmentsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsDeleteAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsDeleteAssignmentsExecute(r)
}

/*
DeviceManagementDeviceConfigurationsDeleteAssignments Delete navigation property assignments for deviceManagement

The list of assignments for the device configuration profile.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @param deviceConfigurationAssignmentId key: id of deviceConfigurationAssignment
 @return ApiDeviceManagementDeviceConfigurationsDeleteAssignmentsRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsDeleteAssignments(ctx _context.Context, deviceConfigurationId string, deviceConfigurationAssignmentId string) ApiDeviceManagementDeviceConfigurationsDeleteAssignmentsRequest {
	return ApiDeviceManagementDeviceConfigurationsDeleteAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
		deviceConfigurationAssignmentId: deviceConfigurationAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsDeleteAssignmentsExecute(r ApiDeviceManagementDeviceConfigurationsDeleteAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsDeleteAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/assignments/{deviceConfigurationAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsDeleteDeviceSettingStateSummariesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	settingStateDeviceSummaryId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceConfigurationsDeleteDeviceSettingStateSummariesRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceConfigurationsDeleteDeviceSettingStateSummariesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsDeleteDeviceSettingStateSummariesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsDeleteDeviceSettingStateSummariesExecute(r)
}

/*
DeviceManagementDeviceConfigurationsDeleteDeviceSettingStateSummaries Delete navigation property deviceSettingStateSummaries for deviceManagement

Device Configuration Setting State Device Summary

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @param settingStateDeviceSummaryId key: id of settingStateDeviceSummary
 @return ApiDeviceManagementDeviceConfigurationsDeleteDeviceSettingStateSummariesRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsDeleteDeviceSettingStateSummaries(ctx _context.Context, deviceConfigurationId string, settingStateDeviceSummaryId string) ApiDeviceManagementDeviceConfigurationsDeleteDeviceSettingStateSummariesRequest {
	return ApiDeviceManagementDeviceConfigurationsDeleteDeviceSettingStateSummariesRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
		settingStateDeviceSummaryId: settingStateDeviceSummaryId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsDeleteDeviceSettingStateSummariesExecute(r ApiDeviceManagementDeviceConfigurationsDeleteDeviceSettingStateSummariesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsDeleteDeviceSettingStateSummaries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/deviceSettingStateSummaries/{settingStateDeviceSummary-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"settingStateDeviceSummary-id"+"}", _neturl.PathEscape(parameterToString(r.settingStateDeviceSummaryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusOverviewRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusOverviewRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusOverviewRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusOverviewRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsDeleteDeviceStatusOverviewExecute(r)
}

/*
DeviceManagementDeviceConfigurationsDeleteDeviceStatusOverview Delete navigation property deviceStatusOverview for deviceManagement

Device Configuration devices status overview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusOverviewRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsDeleteDeviceStatusOverview(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusOverviewRequest {
	return ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusOverviewRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsDeleteDeviceStatusOverviewExecute(r ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusOverviewRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsDeleteDeviceStatusOverview")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/deviceStatusOverview"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	deviceConfigurationDeviceStatusId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusesRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsDeleteDeviceStatusesExecute(r)
}

/*
DeviceManagementDeviceConfigurationsDeleteDeviceStatuses Delete navigation property deviceStatuses for deviceManagement

Device configuration installation status by device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @param deviceConfigurationDeviceStatusId key: id of deviceConfigurationDeviceStatus
 @return ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusesRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsDeleteDeviceStatuses(ctx _context.Context, deviceConfigurationId string, deviceConfigurationDeviceStatusId string) ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusesRequest {
	return ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
		deviceConfigurationDeviceStatusId: deviceConfigurationDeviceStatusId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsDeleteDeviceStatusesExecute(r ApiDeviceManagementDeviceConfigurationsDeleteDeviceStatusesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsDeleteDeviceStatuses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/deviceStatuses/{deviceConfigurationDeviceStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationDeviceStatus-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationDeviceStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsDeleteUserStatusOverviewRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceConfigurationsDeleteUserStatusOverviewRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceConfigurationsDeleteUserStatusOverviewRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsDeleteUserStatusOverviewRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsDeleteUserStatusOverviewExecute(r)
}

/*
DeviceManagementDeviceConfigurationsDeleteUserStatusOverview Delete navigation property userStatusOverview for deviceManagement

Device Configuration users status overview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementDeviceConfigurationsDeleteUserStatusOverviewRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsDeleteUserStatusOverview(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementDeviceConfigurationsDeleteUserStatusOverviewRequest {
	return ApiDeviceManagementDeviceConfigurationsDeleteUserStatusOverviewRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsDeleteUserStatusOverviewExecute(r ApiDeviceManagementDeviceConfigurationsDeleteUserStatusOverviewRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsDeleteUserStatusOverview")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/userStatusOverview"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsDeleteUserStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	deviceConfigurationUserStatusId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceConfigurationsDeleteUserStatusesRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceConfigurationsDeleteUserStatusesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsDeleteUserStatusesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsDeleteUserStatusesExecute(r)
}

/*
DeviceManagementDeviceConfigurationsDeleteUserStatuses Delete navigation property userStatuses for deviceManagement

Device configuration installation status by user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @param deviceConfigurationUserStatusId key: id of deviceConfigurationUserStatus
 @return ApiDeviceManagementDeviceConfigurationsDeleteUserStatusesRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsDeleteUserStatuses(ctx _context.Context, deviceConfigurationId string, deviceConfigurationUserStatusId string) ApiDeviceManagementDeviceConfigurationsDeleteUserStatusesRequest {
	return ApiDeviceManagementDeviceConfigurationsDeleteUserStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
		deviceConfigurationUserStatusId: deviceConfigurationUserStatusId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsDeleteUserStatusesExecute(r ApiDeviceManagementDeviceConfigurationsDeleteUserStatusesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsDeleteUserStatuses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/userStatuses/{deviceConfigurationUserStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationUserStatus-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationUserStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsGetAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	deviceConfigurationAssignmentId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceConfigurationsGetAssignmentsRequest) Select_(select_ []string) ApiDeviceManagementDeviceConfigurationsGetAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceConfigurationsGetAssignmentsRequest) Expand(expand []string) ApiDeviceManagementDeviceConfigurationsGetAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsGetAssignmentsRequest) Execute() (MicrosoftGraphDeviceConfigurationAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsGetAssignmentsExecute(r)
}

/*
DeviceManagementDeviceConfigurationsGetAssignments Get assignments from deviceManagement

The list of assignments for the device configuration profile.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @param deviceConfigurationAssignmentId key: id of deviceConfigurationAssignment
 @return ApiDeviceManagementDeviceConfigurationsGetAssignmentsRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsGetAssignments(ctx _context.Context, deviceConfigurationId string, deviceConfigurationAssignmentId string) ApiDeviceManagementDeviceConfigurationsGetAssignmentsRequest {
	return ApiDeviceManagementDeviceConfigurationsGetAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
		deviceConfigurationAssignmentId: deviceConfigurationAssignmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfigurationAssignment
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsGetAssignmentsExecute(r ApiDeviceManagementDeviceConfigurationsGetAssignmentsRequest) (MicrosoftGraphDeviceConfigurationAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfigurationAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsGetAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/assignments/{deviceConfigurationAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsGetDeviceSettingStateSummariesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	settingStateDeviceSummaryId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceConfigurationsGetDeviceSettingStateSummariesRequest) Select_(select_ []string) ApiDeviceManagementDeviceConfigurationsGetDeviceSettingStateSummariesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceConfigurationsGetDeviceSettingStateSummariesRequest) Expand(expand []string) ApiDeviceManagementDeviceConfigurationsGetDeviceSettingStateSummariesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsGetDeviceSettingStateSummariesRequest) Execute() (MicrosoftGraphSettingStateDeviceSummary, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsGetDeviceSettingStateSummariesExecute(r)
}

/*
DeviceManagementDeviceConfigurationsGetDeviceSettingStateSummaries Get deviceSettingStateSummaries from deviceManagement

Device Configuration Setting State Device Summary

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @param settingStateDeviceSummaryId key: id of settingStateDeviceSummary
 @return ApiDeviceManagementDeviceConfigurationsGetDeviceSettingStateSummariesRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsGetDeviceSettingStateSummaries(ctx _context.Context, deviceConfigurationId string, settingStateDeviceSummaryId string) ApiDeviceManagementDeviceConfigurationsGetDeviceSettingStateSummariesRequest {
	return ApiDeviceManagementDeviceConfigurationsGetDeviceSettingStateSummariesRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
		settingStateDeviceSummaryId: settingStateDeviceSummaryId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphSettingStateDeviceSummary
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsGetDeviceSettingStateSummariesExecute(r ApiDeviceManagementDeviceConfigurationsGetDeviceSettingStateSummariesRequest) (MicrosoftGraphSettingStateDeviceSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphSettingStateDeviceSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsGetDeviceSettingStateSummaries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/deviceSettingStateSummaries/{settingStateDeviceSummary-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"settingStateDeviceSummary-id"+"}", _neturl.PathEscape(parameterToString(r.settingStateDeviceSummaryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsGetDeviceStatusOverviewRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceConfigurationsGetDeviceStatusOverviewRequest) Select_(select_ []string) ApiDeviceManagementDeviceConfigurationsGetDeviceStatusOverviewRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceConfigurationsGetDeviceStatusOverviewRequest) Expand(expand []string) ApiDeviceManagementDeviceConfigurationsGetDeviceStatusOverviewRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsGetDeviceStatusOverviewRequest) Execute() (MicrosoftGraphDeviceConfigurationDeviceOverview, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsGetDeviceStatusOverviewExecute(r)
}

/*
DeviceManagementDeviceConfigurationsGetDeviceStatusOverview Get deviceStatusOverview from deviceManagement

Device Configuration devices status overview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementDeviceConfigurationsGetDeviceStatusOverviewRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsGetDeviceStatusOverview(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementDeviceConfigurationsGetDeviceStatusOverviewRequest {
	return ApiDeviceManagementDeviceConfigurationsGetDeviceStatusOverviewRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfigurationDeviceOverview
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsGetDeviceStatusOverviewExecute(r ApiDeviceManagementDeviceConfigurationsGetDeviceStatusOverviewRequest) (MicrosoftGraphDeviceConfigurationDeviceOverview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfigurationDeviceOverview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsGetDeviceStatusOverview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/deviceStatusOverview"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsGetDeviceStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	deviceConfigurationDeviceStatusId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceConfigurationsGetDeviceStatusesRequest) Select_(select_ []string) ApiDeviceManagementDeviceConfigurationsGetDeviceStatusesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceConfigurationsGetDeviceStatusesRequest) Expand(expand []string) ApiDeviceManagementDeviceConfigurationsGetDeviceStatusesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsGetDeviceStatusesRequest) Execute() (MicrosoftGraphDeviceConfigurationDeviceStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsGetDeviceStatusesExecute(r)
}

/*
DeviceManagementDeviceConfigurationsGetDeviceStatuses Get deviceStatuses from deviceManagement

Device configuration installation status by device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @param deviceConfigurationDeviceStatusId key: id of deviceConfigurationDeviceStatus
 @return ApiDeviceManagementDeviceConfigurationsGetDeviceStatusesRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsGetDeviceStatuses(ctx _context.Context, deviceConfigurationId string, deviceConfigurationDeviceStatusId string) ApiDeviceManagementDeviceConfigurationsGetDeviceStatusesRequest {
	return ApiDeviceManagementDeviceConfigurationsGetDeviceStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
		deviceConfigurationDeviceStatusId: deviceConfigurationDeviceStatusId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfigurationDeviceStatus
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsGetDeviceStatusesExecute(r ApiDeviceManagementDeviceConfigurationsGetDeviceStatusesRequest) (MicrosoftGraphDeviceConfigurationDeviceStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfigurationDeviceStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsGetDeviceStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/deviceStatuses/{deviceConfigurationDeviceStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationDeviceStatus-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationDeviceStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsGetUserStatusOverviewRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceConfigurationsGetUserStatusOverviewRequest) Select_(select_ []string) ApiDeviceManagementDeviceConfigurationsGetUserStatusOverviewRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceConfigurationsGetUserStatusOverviewRequest) Expand(expand []string) ApiDeviceManagementDeviceConfigurationsGetUserStatusOverviewRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsGetUserStatusOverviewRequest) Execute() (MicrosoftGraphDeviceConfigurationUserOverview, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsGetUserStatusOverviewExecute(r)
}

/*
DeviceManagementDeviceConfigurationsGetUserStatusOverview Get userStatusOverview from deviceManagement

Device Configuration users status overview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementDeviceConfigurationsGetUserStatusOverviewRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsGetUserStatusOverview(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementDeviceConfigurationsGetUserStatusOverviewRequest {
	return ApiDeviceManagementDeviceConfigurationsGetUserStatusOverviewRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfigurationUserOverview
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsGetUserStatusOverviewExecute(r ApiDeviceManagementDeviceConfigurationsGetUserStatusOverviewRequest) (MicrosoftGraphDeviceConfigurationUserOverview, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfigurationUserOverview
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsGetUserStatusOverview")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/userStatusOverview"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsGetUserStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	deviceConfigurationUserStatusId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceConfigurationsGetUserStatusesRequest) Select_(select_ []string) ApiDeviceManagementDeviceConfigurationsGetUserStatusesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceConfigurationsGetUserStatusesRequest) Expand(expand []string) ApiDeviceManagementDeviceConfigurationsGetUserStatusesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsGetUserStatusesRequest) Execute() (MicrosoftGraphDeviceConfigurationUserStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsGetUserStatusesExecute(r)
}

/*
DeviceManagementDeviceConfigurationsGetUserStatuses Get userStatuses from deviceManagement

Device configuration installation status by user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @param deviceConfigurationUserStatusId key: id of deviceConfigurationUserStatus
 @return ApiDeviceManagementDeviceConfigurationsGetUserStatusesRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsGetUserStatuses(ctx _context.Context, deviceConfigurationId string, deviceConfigurationUserStatusId string) ApiDeviceManagementDeviceConfigurationsGetUserStatusesRequest {
	return ApiDeviceManagementDeviceConfigurationsGetUserStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
		deviceConfigurationUserStatusId: deviceConfigurationUserStatusId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfigurationUserStatus
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsGetUserStatusesExecute(r ApiDeviceManagementDeviceConfigurationsGetUserStatusesRequest) (MicrosoftGraphDeviceConfigurationUserStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfigurationUserStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsGetUserStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/userStatuses/{deviceConfigurationUserStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationUserStatus-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationUserStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest) Top(top int32) ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest) Skip(skip int32) ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest) Search(search string) ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest) Filter(filter string) ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest) Count(count bool) ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest) Orderby(orderby []string) ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest) Select_(select_ []string) ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest) Expand(expand []string) ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest) Execute() (CollectionOfDeviceConfigurationAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsListAssignmentsExecute(r)
}

/*
DeviceManagementDeviceConfigurationsListAssignments Get assignments from deviceManagement

The list of assignments for the device configuration profile.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsListAssignments(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest {
	return ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceConfigurationAssignment
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsListAssignmentsExecute(r ApiDeviceManagementDeviceConfigurationsListAssignmentsRequest) (CollectionOfDeviceConfigurationAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceConfigurationAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsListAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/assignments"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest) Top(top int32) ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest) Skip(skip int32) ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest) Search(search string) ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest) Filter(filter string) ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest) Count(count bool) ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest) Orderby(orderby []string) ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest) Select_(select_ []string) ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest) Expand(expand []string) ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest) Execute() (CollectionOfSettingStateDeviceSummary, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesExecute(r)
}

/*
DeviceManagementDeviceConfigurationsListDeviceSettingStateSummaries Get deviceSettingStateSummaries from deviceManagement

Device Configuration Setting State Device Summary

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsListDeviceSettingStateSummaries(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest {
	return ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
//  @return CollectionOfSettingStateDeviceSummary
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesExecute(r ApiDeviceManagementDeviceConfigurationsListDeviceSettingStateSummariesRequest) (CollectionOfSettingStateDeviceSummary, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfSettingStateDeviceSummary
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsListDeviceSettingStateSummaries")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/deviceSettingStateSummaries"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest) Top(top int32) ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest) Skip(skip int32) ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest) Search(search string) ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest) Filter(filter string) ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest) Count(count bool) ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest) Orderby(orderby []string) ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest) Select_(select_ []string) ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest) Expand(expand []string) ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest) Execute() (CollectionOfDeviceConfigurationDeviceStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsListDeviceStatusesExecute(r)
}

/*
DeviceManagementDeviceConfigurationsListDeviceStatuses Get deviceStatuses from deviceManagement

Device configuration installation status by device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsListDeviceStatuses(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest {
	return ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceConfigurationDeviceStatus
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsListDeviceStatusesExecute(r ApiDeviceManagementDeviceConfigurationsListDeviceStatusesRequest) (CollectionOfDeviceConfigurationDeviceStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceConfigurationDeviceStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsListDeviceStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/deviceStatuses"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest) Top(top int32) ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest) Skip(skip int32) ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest) Search(search string) ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest) Filter(filter string) ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest) Count(count bool) ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest) Orderby(orderby []string) ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest) Select_(select_ []string) ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest) Expand(expand []string) ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest) Execute() (CollectionOfDeviceConfigurationUserStatus, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsListUserStatusesExecute(r)
}

/*
DeviceManagementDeviceConfigurationsListUserStatuses Get userStatuses from deviceManagement

Device configuration installation status by user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsListUserStatuses(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest {
	return ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceConfigurationUserStatus
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsListUserStatusesExecute(r ApiDeviceManagementDeviceConfigurationsListUserStatusesRequest) (CollectionOfDeviceConfigurationUserStatus, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceConfigurationUserStatus
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsListUserStatuses")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/userStatuses"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsUpdateAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	deviceConfigurationAssignmentId string
	microsoftGraphDeviceConfigurationAssignment *MicrosoftGraphDeviceConfigurationAssignment
}

// New navigation property values
func (r ApiDeviceManagementDeviceConfigurationsUpdateAssignmentsRequest) MicrosoftGraphDeviceConfigurationAssignment(microsoftGraphDeviceConfigurationAssignment MicrosoftGraphDeviceConfigurationAssignment) ApiDeviceManagementDeviceConfigurationsUpdateAssignmentsRequest {
	r.microsoftGraphDeviceConfigurationAssignment = &microsoftGraphDeviceConfigurationAssignment
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsUpdateAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsUpdateAssignmentsExecute(r)
}

/*
DeviceManagementDeviceConfigurationsUpdateAssignments Update the navigation property assignments in deviceManagement

The list of assignments for the device configuration profile.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @param deviceConfigurationAssignmentId key: id of deviceConfigurationAssignment
 @return ApiDeviceManagementDeviceConfigurationsUpdateAssignmentsRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsUpdateAssignments(ctx _context.Context, deviceConfigurationId string, deviceConfigurationAssignmentId string) ApiDeviceManagementDeviceConfigurationsUpdateAssignmentsRequest {
	return ApiDeviceManagementDeviceConfigurationsUpdateAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
		deviceConfigurationAssignmentId: deviceConfigurationAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsUpdateAssignmentsExecute(r ApiDeviceManagementDeviceConfigurationsUpdateAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsUpdateAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/assignments/{deviceConfigurationAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfigurationAssignment == nil {
		return nil, reportError("microsoftGraphDeviceConfigurationAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfigurationAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsUpdateDeviceSettingStateSummariesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	settingStateDeviceSummaryId string
	microsoftGraphSettingStateDeviceSummary *MicrosoftGraphSettingStateDeviceSummary
}

// New navigation property values
func (r ApiDeviceManagementDeviceConfigurationsUpdateDeviceSettingStateSummariesRequest) MicrosoftGraphSettingStateDeviceSummary(microsoftGraphSettingStateDeviceSummary MicrosoftGraphSettingStateDeviceSummary) ApiDeviceManagementDeviceConfigurationsUpdateDeviceSettingStateSummariesRequest {
	r.microsoftGraphSettingStateDeviceSummary = &microsoftGraphSettingStateDeviceSummary
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsUpdateDeviceSettingStateSummariesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsUpdateDeviceSettingStateSummariesExecute(r)
}

/*
DeviceManagementDeviceConfigurationsUpdateDeviceSettingStateSummaries Update the navigation property deviceSettingStateSummaries in deviceManagement

Device Configuration Setting State Device Summary

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @param settingStateDeviceSummaryId key: id of settingStateDeviceSummary
 @return ApiDeviceManagementDeviceConfigurationsUpdateDeviceSettingStateSummariesRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsUpdateDeviceSettingStateSummaries(ctx _context.Context, deviceConfigurationId string, settingStateDeviceSummaryId string) ApiDeviceManagementDeviceConfigurationsUpdateDeviceSettingStateSummariesRequest {
	return ApiDeviceManagementDeviceConfigurationsUpdateDeviceSettingStateSummariesRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
		settingStateDeviceSummaryId: settingStateDeviceSummaryId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsUpdateDeviceSettingStateSummariesExecute(r ApiDeviceManagementDeviceConfigurationsUpdateDeviceSettingStateSummariesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsUpdateDeviceSettingStateSummaries")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/deviceSettingStateSummaries/{settingStateDeviceSummary-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"settingStateDeviceSummary-id"+"}", _neturl.PathEscape(parameterToString(r.settingStateDeviceSummaryId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphSettingStateDeviceSummary == nil {
		return nil, reportError("microsoftGraphSettingStateDeviceSummary is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphSettingStateDeviceSummary
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusOverviewRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	microsoftGraphDeviceConfigurationDeviceOverview *MicrosoftGraphDeviceConfigurationDeviceOverview
}

// New navigation property values
func (r ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusOverviewRequest) MicrosoftGraphDeviceConfigurationDeviceOverview(microsoftGraphDeviceConfigurationDeviceOverview MicrosoftGraphDeviceConfigurationDeviceOverview) ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusOverviewRequest {
	r.microsoftGraphDeviceConfigurationDeviceOverview = &microsoftGraphDeviceConfigurationDeviceOverview
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusOverviewRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsUpdateDeviceStatusOverviewExecute(r)
}

/*
DeviceManagementDeviceConfigurationsUpdateDeviceStatusOverview Update the navigation property deviceStatusOverview in deviceManagement

Device Configuration devices status overview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusOverviewRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsUpdateDeviceStatusOverview(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusOverviewRequest {
	return ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusOverviewRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsUpdateDeviceStatusOverviewExecute(r ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusOverviewRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsUpdateDeviceStatusOverview")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/deviceStatusOverview"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfigurationDeviceOverview == nil {
		return nil, reportError("microsoftGraphDeviceConfigurationDeviceOverview is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfigurationDeviceOverview
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	deviceConfigurationDeviceStatusId string
	microsoftGraphDeviceConfigurationDeviceStatus *MicrosoftGraphDeviceConfigurationDeviceStatus
}

// New navigation property values
func (r ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusesRequest) MicrosoftGraphDeviceConfigurationDeviceStatus(microsoftGraphDeviceConfigurationDeviceStatus MicrosoftGraphDeviceConfigurationDeviceStatus) ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusesRequest {
	r.microsoftGraphDeviceConfigurationDeviceStatus = &microsoftGraphDeviceConfigurationDeviceStatus
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsUpdateDeviceStatusesExecute(r)
}

/*
DeviceManagementDeviceConfigurationsUpdateDeviceStatuses Update the navigation property deviceStatuses in deviceManagement

Device configuration installation status by device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @param deviceConfigurationDeviceStatusId key: id of deviceConfigurationDeviceStatus
 @return ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusesRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsUpdateDeviceStatuses(ctx _context.Context, deviceConfigurationId string, deviceConfigurationDeviceStatusId string) ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusesRequest {
	return ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
		deviceConfigurationDeviceStatusId: deviceConfigurationDeviceStatusId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsUpdateDeviceStatusesExecute(r ApiDeviceManagementDeviceConfigurationsUpdateDeviceStatusesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsUpdateDeviceStatuses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/deviceStatuses/{deviceConfigurationDeviceStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationDeviceStatus-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationDeviceStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfigurationDeviceStatus == nil {
		return nil, reportError("microsoftGraphDeviceConfigurationDeviceStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfigurationDeviceStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsUpdateUserStatusOverviewRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	microsoftGraphDeviceConfigurationUserOverview *MicrosoftGraphDeviceConfigurationUserOverview
}

// New navigation property values
func (r ApiDeviceManagementDeviceConfigurationsUpdateUserStatusOverviewRequest) MicrosoftGraphDeviceConfigurationUserOverview(microsoftGraphDeviceConfigurationUserOverview MicrosoftGraphDeviceConfigurationUserOverview) ApiDeviceManagementDeviceConfigurationsUpdateUserStatusOverviewRequest {
	r.microsoftGraphDeviceConfigurationUserOverview = &microsoftGraphDeviceConfigurationUserOverview
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsUpdateUserStatusOverviewRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsUpdateUserStatusOverviewExecute(r)
}

/*
DeviceManagementDeviceConfigurationsUpdateUserStatusOverview Update the navigation property userStatusOverview in deviceManagement

Device Configuration users status overview

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementDeviceConfigurationsUpdateUserStatusOverviewRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsUpdateUserStatusOverview(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementDeviceConfigurationsUpdateUserStatusOverviewRequest {
	return ApiDeviceManagementDeviceConfigurationsUpdateUserStatusOverviewRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsUpdateUserStatusOverviewExecute(r ApiDeviceManagementDeviceConfigurationsUpdateUserStatusOverviewRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsUpdateUserStatusOverview")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/userStatusOverview"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfigurationUserOverview == nil {
		return nil, reportError("microsoftGraphDeviceConfigurationUserOverview is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfigurationUserOverview
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceConfigurationsUpdateUserStatusesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	deviceConfigurationUserStatusId string
	microsoftGraphDeviceConfigurationUserStatus *MicrosoftGraphDeviceConfigurationUserStatus
}

// New navigation property values
func (r ApiDeviceManagementDeviceConfigurationsUpdateUserStatusesRequest) MicrosoftGraphDeviceConfigurationUserStatus(microsoftGraphDeviceConfigurationUserStatus MicrosoftGraphDeviceConfigurationUserStatus) ApiDeviceManagementDeviceConfigurationsUpdateUserStatusesRequest {
	r.microsoftGraphDeviceConfigurationUserStatus = &microsoftGraphDeviceConfigurationUserStatus
	return r
}

func (r ApiDeviceManagementDeviceConfigurationsUpdateUserStatusesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceConfigurationsUpdateUserStatusesExecute(r)
}

/*
DeviceManagementDeviceConfigurationsUpdateUserStatuses Update the navigation property userStatuses in deviceManagement

Device configuration installation status by user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @param deviceConfigurationUserStatusId key: id of deviceConfigurationUserStatus
 @return ApiDeviceManagementDeviceConfigurationsUpdateUserStatusesRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsUpdateUserStatuses(ctx _context.Context, deviceConfigurationId string, deviceConfigurationUserStatusId string) ApiDeviceManagementDeviceConfigurationsUpdateUserStatusesRequest {
	return ApiDeviceManagementDeviceConfigurationsUpdateUserStatusesRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
		deviceConfigurationUserStatusId: deviceConfigurationUserStatusId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementDeviceConfigurationsUpdateUserStatusesExecute(r ApiDeviceManagementDeviceConfigurationsUpdateUserStatusesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementDeviceConfigurationsUpdateUserStatuses")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}/userStatuses/{deviceConfigurationUserStatus-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationUserStatus-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationUserStatusId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfigurationUserStatus == nil {
		return nil, reportError("microsoftGraphDeviceConfigurationUserStatus is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfigurationUserStatus
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementGetDeviceConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementGetDeviceConfigurationsRequest) Select_(select_ []string) ApiDeviceManagementGetDeviceConfigurationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementGetDeviceConfigurationsRequest) Expand(expand []string) ApiDeviceManagementGetDeviceConfigurationsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementGetDeviceConfigurationsRequest) Execute() (MicrosoftGraphDeviceConfiguration, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementGetDeviceConfigurationsExecute(r)
}

/*
DeviceManagementGetDeviceConfigurations Get deviceConfigurations from deviceManagement

The device configurations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementGetDeviceConfigurationsRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementGetDeviceConfigurations(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementGetDeviceConfigurationsRequest {
	return ApiDeviceManagementGetDeviceConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfiguration
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementGetDeviceConfigurationsExecute(r ApiDeviceManagementGetDeviceConfigurationsRequest) (MicrosoftGraphDeviceConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementGetDeviceConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementListDeviceConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementListDeviceConfigurationsRequest) Top(top int32) ApiDeviceManagementListDeviceConfigurationsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementListDeviceConfigurationsRequest) Skip(skip int32) ApiDeviceManagementListDeviceConfigurationsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementListDeviceConfigurationsRequest) Search(search string) ApiDeviceManagementListDeviceConfigurationsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementListDeviceConfigurationsRequest) Filter(filter string) ApiDeviceManagementListDeviceConfigurationsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementListDeviceConfigurationsRequest) Count(count bool) ApiDeviceManagementListDeviceConfigurationsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementListDeviceConfigurationsRequest) Orderby(orderby []string) ApiDeviceManagementListDeviceConfigurationsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementListDeviceConfigurationsRequest) Select_(select_ []string) ApiDeviceManagementListDeviceConfigurationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementListDeviceConfigurationsRequest) Expand(expand []string) ApiDeviceManagementListDeviceConfigurationsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementListDeviceConfigurationsRequest) Execute() (CollectionOfDeviceConfiguration, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementListDeviceConfigurationsExecute(r)
}

/*
DeviceManagementListDeviceConfigurations Get deviceConfigurations from deviceManagement

The device configurations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementListDeviceConfigurationsRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementListDeviceConfigurations(ctx _context.Context) ApiDeviceManagementListDeviceConfigurationsRequest {
	return ApiDeviceManagementListDeviceConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceConfiguration
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementListDeviceConfigurationsExecute(r ApiDeviceManagementListDeviceConfigurationsRequest) (CollectionOfDeviceConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementListDeviceConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementUpdateDeviceConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceConfigurationApiService
	deviceConfigurationId string
	microsoftGraphDeviceConfiguration *MicrosoftGraphDeviceConfiguration
}

// New navigation property values
func (r ApiDeviceManagementUpdateDeviceConfigurationsRequest) MicrosoftGraphDeviceConfiguration(microsoftGraphDeviceConfiguration MicrosoftGraphDeviceConfiguration) ApiDeviceManagementUpdateDeviceConfigurationsRequest {
	r.microsoftGraphDeviceConfiguration = &microsoftGraphDeviceConfiguration
	return r
}

func (r ApiDeviceManagementUpdateDeviceConfigurationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementUpdateDeviceConfigurationsExecute(r)
}

/*
DeviceManagementUpdateDeviceConfigurations Update the navigation property deviceConfigurations in deviceManagement

The device configurations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceConfigurationId key: id of deviceConfiguration
 @return ApiDeviceManagementUpdateDeviceConfigurationsRequest
*/
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementUpdateDeviceConfigurations(ctx _context.Context, deviceConfigurationId string) ApiDeviceManagementUpdateDeviceConfigurationsRequest {
	return ApiDeviceManagementUpdateDeviceConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		deviceConfigurationId: deviceConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceConfigurationApiService) DeviceManagementUpdateDeviceConfigurationsExecute(r ApiDeviceManagementUpdateDeviceConfigurationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceConfigurationApiService.DeviceManagementUpdateDeviceConfigurations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceConfigurations/{deviceConfiguration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfiguration == nil {
		return nil, reportError("microsoftGraphDeviceConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
