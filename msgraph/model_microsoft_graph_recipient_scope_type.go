/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphRecipientScopeType the model 'MicrosoftGraphRecipientScopeType'
type MicrosoftGraphRecipientScopeType string

// List of microsoft.graph.recipientScopeType
const (
	NONE MicrosoftGraphRecipientScopeType = "none"
	INTERNAL MicrosoftGraphRecipientScopeType = "internal"
	EXTERNAL MicrosoftGraphRecipientScopeType = "external"
	EXTERNAL_PARTNER MicrosoftGraphRecipientScopeType = "externalPartner"
	EXTERNAL_NON_PARTNER MicrosoftGraphRecipientScopeType = "externalNonPartner"
)

// All allowed values of MicrosoftGraphRecipientScopeType enum
var AllowedMicrosoftGraphRecipientScopeTypeEnumValues = []MicrosoftGraphRecipientScopeType{
	"none",
	"internal",
	"external",
	"externalPartner",
	"externalNonPartner",
}

func (v *MicrosoftGraphRecipientScopeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphRecipientScopeType(value)
	for _, existing := range AllowedMicrosoftGraphRecipientScopeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphRecipientScopeType", value)
}

// NewMicrosoftGraphRecipientScopeTypeFromValue returns a pointer to a valid MicrosoftGraphRecipientScopeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphRecipientScopeTypeFromValue(v string) (*MicrosoftGraphRecipientScopeType, error) {
	ev := MicrosoftGraphRecipientScopeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphRecipientScopeType: valid values are %v", v, AllowedMicrosoftGraphRecipientScopeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphRecipientScopeType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphRecipientScopeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.recipientScopeType value
func (v MicrosoftGraphRecipientScopeType) Ptr() *MicrosoftGraphRecipientScopeType {
	return &v
}

type NullableMicrosoftGraphRecipientScopeType struct {
	value *MicrosoftGraphRecipientScopeType
	isSet bool
}

func (v NullableMicrosoftGraphRecipientScopeType) Get() *MicrosoftGraphRecipientScopeType {
	return v.value
}

func (v *NullableMicrosoftGraphRecipientScopeType) Set(val *MicrosoftGraphRecipientScopeType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphRecipientScopeType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphRecipientScopeType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphRecipientScopeType(val *MicrosoftGraphRecipientScopeType) *NullableMicrosoftGraphRecipientScopeType {
	return &NullableMicrosoftGraphRecipientScopeType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphRecipientScopeType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphRecipientScopeType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

