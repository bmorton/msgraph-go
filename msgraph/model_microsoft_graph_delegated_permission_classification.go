/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MicrosoftGraphDelegatedPermissionClassification struct for MicrosoftGraphDelegatedPermissionClassification
type MicrosoftGraphDelegatedPermissionClassification struct {
	// Read-only.
	Id *string `json:"id,omitempty"`
	// The classification value being given. Possible value: low. Does not support $filter.
	Classification AnyOfmicrosoftGraphPermissionClassificationType `json:"classification,omitempty"`
	// The unique identifier (id) for the delegated permission listed in the oauth2PermissionScopes collection of the servicePrincipal. Required on create. Does not support $filter.
	PermissionId NullableString `json:"permissionId,omitempty"`
	// The claim value (value) for the delegated permission listed in the oauth2PermissionScopes collection of the servicePrincipal. Does not support $filter.
	PermissionName NullableString `json:"permissionName,omitempty"`
}

// NewMicrosoftGraphDelegatedPermissionClassification instantiates a new MicrosoftGraphDelegatedPermissionClassification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphDelegatedPermissionClassification() *MicrosoftGraphDelegatedPermissionClassification {
	this := MicrosoftGraphDelegatedPermissionClassification{}
	return &this
}

// NewMicrosoftGraphDelegatedPermissionClassificationWithDefaults instantiates a new MicrosoftGraphDelegatedPermissionClassification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphDelegatedPermissionClassificationWithDefaults() *MicrosoftGraphDelegatedPermissionClassification {
	this := MicrosoftGraphDelegatedPermissionClassification{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MicrosoftGraphDelegatedPermissionClassification) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDelegatedPermissionClassification) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphDelegatedPermissionClassification) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphDelegatedPermissionClassification) SetId(v string) {
	o.Id = &v
}

// GetClassification returns the Classification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphDelegatedPermissionClassification) GetClassification() AnyOfmicrosoftGraphPermissionClassificationType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPermissionClassificationType
		return ret
	}
	return o.Classification
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphDelegatedPermissionClassification) GetClassificationOk() (*AnyOfmicrosoftGraphPermissionClassificationType, bool) {
	if o == nil || o.Classification == nil {
		return nil, false
	}
	return &o.Classification, true
}

// HasClassification returns a boolean if a field has been set.
func (o *MicrosoftGraphDelegatedPermissionClassification) HasClassification() bool {
	if o != nil && o.Classification != nil {
		return true
	}

	return false
}

// SetClassification gets a reference to the given AnyOfmicrosoftGraphPermissionClassificationType and assigns it to the Classification field.
func (o *MicrosoftGraphDelegatedPermissionClassification) SetClassification(v AnyOfmicrosoftGraphPermissionClassificationType) {
	o.Classification = v
}

// GetPermissionId returns the PermissionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphDelegatedPermissionClassification) GetPermissionId() string {
	if o == nil || o.PermissionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.PermissionId.Get()
}

// GetPermissionIdOk returns a tuple with the PermissionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphDelegatedPermissionClassification) GetPermissionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PermissionId.Get(), o.PermissionId.IsSet()
}

// HasPermissionId returns a boolean if a field has been set.
func (o *MicrosoftGraphDelegatedPermissionClassification) HasPermissionId() bool {
	if o != nil && o.PermissionId.IsSet() {
		return true
	}

	return false
}

// SetPermissionId gets a reference to the given NullableString and assigns it to the PermissionId field.
func (o *MicrosoftGraphDelegatedPermissionClassification) SetPermissionId(v string) {
	o.PermissionId.Set(&v)
}
// SetPermissionIdNil sets the value for PermissionId to be an explicit nil
func (o *MicrosoftGraphDelegatedPermissionClassification) SetPermissionIdNil() {
	o.PermissionId.Set(nil)
}

// UnsetPermissionId ensures that no value is present for PermissionId, not even an explicit nil
func (o *MicrosoftGraphDelegatedPermissionClassification) UnsetPermissionId() {
	o.PermissionId.Unset()
}

// GetPermissionName returns the PermissionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphDelegatedPermissionClassification) GetPermissionName() string {
	if o == nil || o.PermissionName.Get() == nil {
		var ret string
		return ret
	}
	return *o.PermissionName.Get()
}

// GetPermissionNameOk returns a tuple with the PermissionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphDelegatedPermissionClassification) GetPermissionNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PermissionName.Get(), o.PermissionName.IsSet()
}

// HasPermissionName returns a boolean if a field has been set.
func (o *MicrosoftGraphDelegatedPermissionClassification) HasPermissionName() bool {
	if o != nil && o.PermissionName.IsSet() {
		return true
	}

	return false
}

// SetPermissionName gets a reference to the given NullableString and assigns it to the PermissionName field.
func (o *MicrosoftGraphDelegatedPermissionClassification) SetPermissionName(v string) {
	o.PermissionName.Set(&v)
}
// SetPermissionNameNil sets the value for PermissionName to be an explicit nil
func (o *MicrosoftGraphDelegatedPermissionClassification) SetPermissionNameNil() {
	o.PermissionName.Set(nil)
}

// UnsetPermissionName ensures that no value is present for PermissionName, not even an explicit nil
func (o *MicrosoftGraphDelegatedPermissionClassification) UnsetPermissionName() {
	o.PermissionName.Unset()
}

func (o MicrosoftGraphDelegatedPermissionClassification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Classification != nil {
		toSerialize["classification"] = o.Classification
	}
	if o.PermissionId.IsSet() {
		toSerialize["permissionId"] = o.PermissionId.Get()
	}
	if o.PermissionName.IsSet() {
		toSerialize["permissionName"] = o.PermissionName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphDelegatedPermissionClassification struct {
	value *MicrosoftGraphDelegatedPermissionClassification
	isSet bool
}

func (v NullableMicrosoftGraphDelegatedPermissionClassification) Get() *MicrosoftGraphDelegatedPermissionClassification {
	return v.value
}

func (v *NullableMicrosoftGraphDelegatedPermissionClassification) Set(val *MicrosoftGraphDelegatedPermissionClassification) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphDelegatedPermissionClassification) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphDelegatedPermissionClassification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphDelegatedPermissionClassification(val *MicrosoftGraphDelegatedPermissionClassification) *NullableMicrosoftGraphDelegatedPermissionClassification {
	return &NullableMicrosoftGraphDelegatedPermissionClassification{value: val, isSet: true}
}

func (v NullableMicrosoftGraphDelegatedPermissionClassification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphDelegatedPermissionClassification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


