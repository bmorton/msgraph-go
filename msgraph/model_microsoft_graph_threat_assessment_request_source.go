/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphThreatAssessmentRequestSource the model 'MicrosoftGraphThreatAssessmentRequestSource'
type MicrosoftGraphThreatAssessmentRequestSource string

// List of microsoft.graph.threatAssessmentRequestSource
const (
	UNDEFINED MicrosoftGraphThreatAssessmentRequestSource = "undefined"
	USER MicrosoftGraphThreatAssessmentRequestSource = "user"
	ADMINISTRATOR MicrosoftGraphThreatAssessmentRequestSource = "administrator"
)

// All allowed values of MicrosoftGraphThreatAssessmentRequestSource enum
var AllowedMicrosoftGraphThreatAssessmentRequestSourceEnumValues = []MicrosoftGraphThreatAssessmentRequestSource{
	"undefined",
	"user",
	"administrator",
}

func (v *MicrosoftGraphThreatAssessmentRequestSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphThreatAssessmentRequestSource(value)
	for _, existing := range AllowedMicrosoftGraphThreatAssessmentRequestSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphThreatAssessmentRequestSource", value)
}

// NewMicrosoftGraphThreatAssessmentRequestSourceFromValue returns a pointer to a valid MicrosoftGraphThreatAssessmentRequestSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphThreatAssessmentRequestSourceFromValue(v string) (*MicrosoftGraphThreatAssessmentRequestSource, error) {
	ev := MicrosoftGraphThreatAssessmentRequestSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphThreatAssessmentRequestSource: valid values are %v", v, AllowedMicrosoftGraphThreatAssessmentRequestSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphThreatAssessmentRequestSource) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphThreatAssessmentRequestSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.threatAssessmentRequestSource value
func (v MicrosoftGraphThreatAssessmentRequestSource) Ptr() *MicrosoftGraphThreatAssessmentRequestSource {
	return &v
}

type NullableMicrosoftGraphThreatAssessmentRequestSource struct {
	value *MicrosoftGraphThreatAssessmentRequestSource
	isSet bool
}

func (v NullableMicrosoftGraphThreatAssessmentRequestSource) Get() *MicrosoftGraphThreatAssessmentRequestSource {
	return v.value
}

func (v *NullableMicrosoftGraphThreatAssessmentRequestSource) Set(val *MicrosoftGraphThreatAssessmentRequestSource) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphThreatAssessmentRequestSource) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphThreatAssessmentRequestSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphThreatAssessmentRequestSource(val *MicrosoftGraphThreatAssessmentRequestSource) *NullableMicrosoftGraphThreatAssessmentRequestSource {
	return &NullableMicrosoftGraphThreatAssessmentRequestSource{value: val, isSet: true}
}

func (v NullableMicrosoftGraphThreatAssessmentRequestSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphThreatAssessmentRequestSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

