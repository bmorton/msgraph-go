/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MicrosoftGraphAssignedLicense struct for MicrosoftGraphAssignedLicense
type MicrosoftGraphAssignedLicense struct {
	// A collection of the unique identifiers for plans that have been disabled.
	DisabledPlans *[]string `json:"disabledPlans,omitempty"`
	// The unique identifier for the SKU.
	SkuId NullableString `json:"skuId,omitempty"`
}

// NewMicrosoftGraphAssignedLicense instantiates a new MicrosoftGraphAssignedLicense object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphAssignedLicense() *MicrosoftGraphAssignedLicense {
	this := MicrosoftGraphAssignedLicense{}
	return &this
}

// NewMicrosoftGraphAssignedLicenseWithDefaults instantiates a new MicrosoftGraphAssignedLicense object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphAssignedLicenseWithDefaults() *MicrosoftGraphAssignedLicense {
	this := MicrosoftGraphAssignedLicense{}
	return &this
}

// GetDisabledPlans returns the DisabledPlans field value if set, zero value otherwise.
func (o *MicrosoftGraphAssignedLicense) GetDisabledPlans() []string {
	if o == nil || o.DisabledPlans == nil {
		var ret []string
		return ret
	}
	return *o.DisabledPlans
}

// GetDisabledPlansOk returns a tuple with the DisabledPlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAssignedLicense) GetDisabledPlansOk() (*[]string, bool) {
	if o == nil || o.DisabledPlans == nil {
		return nil, false
	}
	return o.DisabledPlans, true
}

// HasDisabledPlans returns a boolean if a field has been set.
func (o *MicrosoftGraphAssignedLicense) HasDisabledPlans() bool {
	if o != nil && o.DisabledPlans != nil {
		return true
	}

	return false
}

// SetDisabledPlans gets a reference to the given []string and assigns it to the DisabledPlans field.
func (o *MicrosoftGraphAssignedLicense) SetDisabledPlans(v []string) {
	o.DisabledPlans = &v
}

// GetSkuId returns the SkuId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAssignedLicense) GetSkuId() string {
	if o == nil || o.SkuId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SkuId.Get()
}

// GetSkuIdOk returns a tuple with the SkuId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAssignedLicense) GetSkuIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SkuId.Get(), o.SkuId.IsSet()
}

// HasSkuId returns a boolean if a field has been set.
func (o *MicrosoftGraphAssignedLicense) HasSkuId() bool {
	if o != nil && o.SkuId.IsSet() {
		return true
	}

	return false
}

// SetSkuId gets a reference to the given NullableString and assigns it to the SkuId field.
func (o *MicrosoftGraphAssignedLicense) SetSkuId(v string) {
	o.SkuId.Set(&v)
}
// SetSkuIdNil sets the value for SkuId to be an explicit nil
func (o *MicrosoftGraphAssignedLicense) SetSkuIdNil() {
	o.SkuId.Set(nil)
}

// UnsetSkuId ensures that no value is present for SkuId, not even an explicit nil
func (o *MicrosoftGraphAssignedLicense) UnsetSkuId() {
	o.SkuId.Unset()
}

func (o MicrosoftGraphAssignedLicense) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisabledPlans != nil {
		toSerialize["disabledPlans"] = o.DisabledPlans
	}
	if o.SkuId.IsSet() {
		toSerialize["skuId"] = o.SkuId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphAssignedLicense struct {
	value *MicrosoftGraphAssignedLicense
	isSet bool
}

func (v NullableMicrosoftGraphAssignedLicense) Get() *MicrosoftGraphAssignedLicense {
	return v.value
}

func (v *NullableMicrosoftGraphAssignedLicense) Set(val *MicrosoftGraphAssignedLicense) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphAssignedLicense) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphAssignedLicense) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphAssignedLicense(val *MicrosoftGraphAssignedLicense) *NullableMicrosoftGraphAssignedLicense {
	return &NullableMicrosoftGraphAssignedLicense{value: val, isSet: true}
}

func (v NullableMicrosoftGraphAssignedLicense) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphAssignedLicense) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


