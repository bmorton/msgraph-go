/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// UsersUserTeamworkApiService UsersUserTeamworkApi service
type UsersUserTeamworkApiService service

type ApiUsersDeleteTeamworkRequest struct {
	ctx _context.Context
	ApiService *UsersUserTeamworkApiService
	userId string
	ifMatch *string
}

// ETag
func (r ApiUsersDeleteTeamworkRequest) IfMatch(ifMatch string) ApiUsersDeleteTeamworkRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersDeleteTeamworkRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersDeleteTeamworkExecute(r)
}

/*
UsersDeleteTeamwork Delete navigation property teamwork for users

A container for Microsoft Teams features available for the user. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersDeleteTeamworkRequest
*/
func (a *UsersUserTeamworkApiService) UsersDeleteTeamwork(ctx _context.Context, userId string) ApiUsersDeleteTeamworkRequest {
	return ApiUsersDeleteTeamworkRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
func (a *UsersUserTeamworkApiService) UsersDeleteTeamworkExecute(r ApiUsersDeleteTeamworkRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserTeamworkApiService.UsersDeleteTeamwork")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/teamwork"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersGetTeamworkRequest struct {
	ctx _context.Context
	ApiService *UsersUserTeamworkApiService
	userId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersGetTeamworkRequest) Select_(select_ []string) ApiUsersGetTeamworkRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersGetTeamworkRequest) Expand(expand []string) ApiUsersGetTeamworkRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersGetTeamworkRequest) Execute() (MicrosoftGraphUserTeamwork, *_nethttp.Response, error) {
	return r.ApiService.UsersGetTeamworkExecute(r)
}

/*
UsersGetTeamwork Get teamwork from users

A container for Microsoft Teams features available for the user. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersGetTeamworkRequest
*/
func (a *UsersUserTeamworkApiService) UsersGetTeamwork(ctx _context.Context, userId string) ApiUsersGetTeamworkRequest {
	return ApiUsersGetTeamworkRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphUserTeamwork
func (a *UsersUserTeamworkApiService) UsersGetTeamworkExecute(r ApiUsersGetTeamworkRequest) (MicrosoftGraphUserTeamwork, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphUserTeamwork
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserTeamworkApiService.UsersGetTeamwork")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/teamwork"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersTeamworkCreateInstalledAppsRequest struct {
	ctx _context.Context
	ApiService *UsersUserTeamworkApiService
	userId string
	microsoftGraphUserScopeTeamsAppInstallation *MicrosoftGraphUserScopeTeamsAppInstallation
}

// New navigation property
func (r ApiUsersTeamworkCreateInstalledAppsRequest) MicrosoftGraphUserScopeTeamsAppInstallation(microsoftGraphUserScopeTeamsAppInstallation MicrosoftGraphUserScopeTeamsAppInstallation) ApiUsersTeamworkCreateInstalledAppsRequest {
	r.microsoftGraphUserScopeTeamsAppInstallation = &microsoftGraphUserScopeTeamsAppInstallation
	return r
}

func (r ApiUsersTeamworkCreateInstalledAppsRequest) Execute() (MicrosoftGraphUserScopeTeamsAppInstallation, *_nethttp.Response, error) {
	return r.ApiService.UsersTeamworkCreateInstalledAppsExecute(r)
}

/*
UsersTeamworkCreateInstalledApps Create new navigation property to installedApps for users

The apps installed in the personal scope of this user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersTeamworkCreateInstalledAppsRequest
*/
func (a *UsersUserTeamworkApiService) UsersTeamworkCreateInstalledApps(ctx _context.Context, userId string) ApiUsersTeamworkCreateInstalledAppsRequest {
	return ApiUsersTeamworkCreateInstalledAppsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphUserScopeTeamsAppInstallation
func (a *UsersUserTeamworkApiService) UsersTeamworkCreateInstalledAppsExecute(r ApiUsersTeamworkCreateInstalledAppsRequest) (MicrosoftGraphUserScopeTeamsAppInstallation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphUserScopeTeamsAppInstallation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserTeamworkApiService.UsersTeamworkCreateInstalledApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/teamwork/installedApps"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphUserScopeTeamsAppInstallation == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphUserScopeTeamsAppInstallation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphUserScopeTeamsAppInstallation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersTeamworkDeleteInstalledAppsRequest struct {
	ctx _context.Context
	ApiService *UsersUserTeamworkApiService
	userId string
	userScopeTeamsAppInstallationId string
	ifMatch *string
}

// ETag
func (r ApiUsersTeamworkDeleteInstalledAppsRequest) IfMatch(ifMatch string) ApiUsersTeamworkDeleteInstalledAppsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersTeamworkDeleteInstalledAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersTeamworkDeleteInstalledAppsExecute(r)
}

/*
UsersTeamworkDeleteInstalledApps Delete navigation property installedApps for users

The apps installed in the personal scope of this user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userScopeTeamsAppInstallationId key: id of userScopeTeamsAppInstallation
 @return ApiUsersTeamworkDeleteInstalledAppsRequest
*/
func (a *UsersUserTeamworkApiService) UsersTeamworkDeleteInstalledApps(ctx _context.Context, userId string, userScopeTeamsAppInstallationId string) ApiUsersTeamworkDeleteInstalledAppsRequest {
	return ApiUsersTeamworkDeleteInstalledAppsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userScopeTeamsAppInstallationId: userScopeTeamsAppInstallationId,
	}
}

// Execute executes the request
func (a *UsersUserTeamworkApiService) UsersTeamworkDeleteInstalledAppsExecute(r ApiUsersTeamworkDeleteInstalledAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserTeamworkApiService.UsersTeamworkDeleteInstalledApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/teamwork/installedApps/{userScopeTeamsAppInstallation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userScopeTeamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.userScopeTeamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersTeamworkGetInstalledAppsRequest struct {
	ctx _context.Context
	ApiService *UsersUserTeamworkApiService
	userId string
	userScopeTeamsAppInstallationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersTeamworkGetInstalledAppsRequest) Select_(select_ []string) ApiUsersTeamworkGetInstalledAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersTeamworkGetInstalledAppsRequest) Expand(expand []string) ApiUsersTeamworkGetInstalledAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersTeamworkGetInstalledAppsRequest) Execute() (MicrosoftGraphUserScopeTeamsAppInstallation, *_nethttp.Response, error) {
	return r.ApiService.UsersTeamworkGetInstalledAppsExecute(r)
}

/*
UsersTeamworkGetInstalledApps Get installedApps from users

The apps installed in the personal scope of this user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userScopeTeamsAppInstallationId key: id of userScopeTeamsAppInstallation
 @return ApiUsersTeamworkGetInstalledAppsRequest
*/
func (a *UsersUserTeamworkApiService) UsersTeamworkGetInstalledApps(ctx _context.Context, userId string, userScopeTeamsAppInstallationId string) ApiUsersTeamworkGetInstalledAppsRequest {
	return ApiUsersTeamworkGetInstalledAppsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userScopeTeamsAppInstallationId: userScopeTeamsAppInstallationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphUserScopeTeamsAppInstallation
func (a *UsersUserTeamworkApiService) UsersTeamworkGetInstalledAppsExecute(r ApiUsersTeamworkGetInstalledAppsRequest) (MicrosoftGraphUserScopeTeamsAppInstallation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphUserScopeTeamsAppInstallation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserTeamworkApiService.UsersTeamworkGetInstalledApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/teamwork/installedApps/{userScopeTeamsAppInstallation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userScopeTeamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.userScopeTeamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersTeamworkInstalledAppsDeleteRefChatRequest struct {
	ctx _context.Context
	ApiService *UsersUserTeamworkApiService
	userId string
	userScopeTeamsAppInstallationId string
	ifMatch *string
}

// ETag
func (r ApiUsersTeamworkInstalledAppsDeleteRefChatRequest) IfMatch(ifMatch string) ApiUsersTeamworkInstalledAppsDeleteRefChatRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiUsersTeamworkInstalledAppsDeleteRefChatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersTeamworkInstalledAppsDeleteRefChatExecute(r)
}

/*
UsersTeamworkInstalledAppsDeleteRefChat Delete ref of navigation property chat for users

The chat between the user and Teams app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userScopeTeamsAppInstallationId key: id of userScopeTeamsAppInstallation
 @return ApiUsersTeamworkInstalledAppsDeleteRefChatRequest
*/
func (a *UsersUserTeamworkApiService) UsersTeamworkInstalledAppsDeleteRefChat(ctx _context.Context, userId string, userScopeTeamsAppInstallationId string) ApiUsersTeamworkInstalledAppsDeleteRefChatRequest {
	return ApiUsersTeamworkInstalledAppsDeleteRefChatRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userScopeTeamsAppInstallationId: userScopeTeamsAppInstallationId,
	}
}

// Execute executes the request
func (a *UsersUserTeamworkApiService) UsersTeamworkInstalledAppsDeleteRefChatExecute(r ApiUsersTeamworkInstalledAppsDeleteRefChatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserTeamworkApiService.UsersTeamworkInstalledAppsDeleteRefChat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/teamwork/installedApps/{userScopeTeamsAppInstallation-id}/chat/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userScopeTeamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.userScopeTeamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersTeamworkInstalledAppsGetChatRequest struct {
	ctx _context.Context
	ApiService *UsersUserTeamworkApiService
	userId string
	userScopeTeamsAppInstallationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiUsersTeamworkInstalledAppsGetChatRequest) Select_(select_ []string) ApiUsersTeamworkInstalledAppsGetChatRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersTeamworkInstalledAppsGetChatRequest) Expand(expand []string) ApiUsersTeamworkInstalledAppsGetChatRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersTeamworkInstalledAppsGetChatRequest) Execute() (MicrosoftGraphChat, *_nethttp.Response, error) {
	return r.ApiService.UsersTeamworkInstalledAppsGetChatExecute(r)
}

/*
UsersTeamworkInstalledAppsGetChat Get chat from users

The chat between the user and Teams app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userScopeTeamsAppInstallationId key: id of userScopeTeamsAppInstallation
 @return ApiUsersTeamworkInstalledAppsGetChatRequest
*/
func (a *UsersUserTeamworkApiService) UsersTeamworkInstalledAppsGetChat(ctx _context.Context, userId string, userScopeTeamsAppInstallationId string) ApiUsersTeamworkInstalledAppsGetChatRequest {
	return ApiUsersTeamworkInstalledAppsGetChatRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userScopeTeamsAppInstallationId: userScopeTeamsAppInstallationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphChat
func (a *UsersUserTeamworkApiService) UsersTeamworkInstalledAppsGetChatExecute(r ApiUsersTeamworkInstalledAppsGetChatRequest) (MicrosoftGraphChat, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphChat
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserTeamworkApiService.UsersTeamworkInstalledAppsGetChat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/teamwork/installedApps/{userScopeTeamsAppInstallation-id}/chat"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userScopeTeamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.userScopeTeamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersTeamworkInstalledAppsGetRefChatRequest struct {
	ctx _context.Context
	ApiService *UsersUserTeamworkApiService
	userId string
	userScopeTeamsAppInstallationId string
}


func (r ApiUsersTeamworkInstalledAppsGetRefChatRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.UsersTeamworkInstalledAppsGetRefChatExecute(r)
}

/*
UsersTeamworkInstalledAppsGetRefChat Get ref of chat from users

The chat between the user and Teams app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userScopeTeamsAppInstallationId key: id of userScopeTeamsAppInstallation
 @return ApiUsersTeamworkInstalledAppsGetRefChatRequest
*/
func (a *UsersUserTeamworkApiService) UsersTeamworkInstalledAppsGetRefChat(ctx _context.Context, userId string, userScopeTeamsAppInstallationId string) ApiUsersTeamworkInstalledAppsGetRefChatRequest {
	return ApiUsersTeamworkInstalledAppsGetRefChatRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userScopeTeamsAppInstallationId: userScopeTeamsAppInstallationId,
	}
}

// Execute executes the request
//  @return string
func (a *UsersUserTeamworkApiService) UsersTeamworkInstalledAppsGetRefChatExecute(r ApiUsersTeamworkInstalledAppsGetRefChatRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserTeamworkApiService.UsersTeamworkInstalledAppsGetRefChat")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/teamwork/installedApps/{userScopeTeamsAppInstallation-id}/chat/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userScopeTeamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.userScopeTeamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersTeamworkInstalledAppsUpdateRefChatRequest struct {
	ctx _context.Context
	ApiService *UsersUserTeamworkApiService
	userId string
	userScopeTeamsAppInstallationId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref values
func (r ApiUsersTeamworkInstalledAppsUpdateRefChatRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiUsersTeamworkInstalledAppsUpdateRefChatRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiUsersTeamworkInstalledAppsUpdateRefChatRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersTeamworkInstalledAppsUpdateRefChatExecute(r)
}

/*
UsersTeamworkInstalledAppsUpdateRefChat Update the ref of navigation property chat in users

The chat between the user and Teams app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userScopeTeamsAppInstallationId key: id of userScopeTeamsAppInstallation
 @return ApiUsersTeamworkInstalledAppsUpdateRefChatRequest
*/
func (a *UsersUserTeamworkApiService) UsersTeamworkInstalledAppsUpdateRefChat(ctx _context.Context, userId string, userScopeTeamsAppInstallationId string) ApiUsersTeamworkInstalledAppsUpdateRefChatRequest {
	return ApiUsersTeamworkInstalledAppsUpdateRefChatRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userScopeTeamsAppInstallationId: userScopeTeamsAppInstallationId,
	}
}

// Execute executes the request
func (a *UsersUserTeamworkApiService) UsersTeamworkInstalledAppsUpdateRefChatExecute(r ApiUsersTeamworkInstalledAppsUpdateRefChatRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserTeamworkApiService.UsersTeamworkInstalledAppsUpdateRefChat")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/teamwork/installedApps/{userScopeTeamsAppInstallation-id}/chat/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userScopeTeamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.userScopeTeamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersTeamworkListInstalledAppsRequest struct {
	ctx _context.Context
	ApiService *UsersUserTeamworkApiService
	userId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiUsersTeamworkListInstalledAppsRequest) Top(top int32) ApiUsersTeamworkListInstalledAppsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiUsersTeamworkListInstalledAppsRequest) Skip(skip int32) ApiUsersTeamworkListInstalledAppsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiUsersTeamworkListInstalledAppsRequest) Search(search string) ApiUsersTeamworkListInstalledAppsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiUsersTeamworkListInstalledAppsRequest) Filter(filter string) ApiUsersTeamworkListInstalledAppsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiUsersTeamworkListInstalledAppsRequest) Count(count bool) ApiUsersTeamworkListInstalledAppsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiUsersTeamworkListInstalledAppsRequest) Orderby(orderby []string) ApiUsersTeamworkListInstalledAppsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiUsersTeamworkListInstalledAppsRequest) Select_(select_ []string) ApiUsersTeamworkListInstalledAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiUsersTeamworkListInstalledAppsRequest) Expand(expand []string) ApiUsersTeamworkListInstalledAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiUsersTeamworkListInstalledAppsRequest) Execute() (CollectionOfUserScopeTeamsAppInstallation, *_nethttp.Response, error) {
	return r.ApiService.UsersTeamworkListInstalledAppsExecute(r)
}

/*
UsersTeamworkListInstalledApps Get installedApps from users

The apps installed in the personal scope of this user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersTeamworkListInstalledAppsRequest
*/
func (a *UsersUserTeamworkApiService) UsersTeamworkListInstalledApps(ctx _context.Context, userId string) ApiUsersTeamworkListInstalledAppsRequest {
	return ApiUsersTeamworkListInstalledAppsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
//  @return CollectionOfUserScopeTeamsAppInstallation
func (a *UsersUserTeamworkApiService) UsersTeamworkListInstalledAppsExecute(r ApiUsersTeamworkListInstalledAppsRequest) (CollectionOfUserScopeTeamsAppInstallation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfUserScopeTeamsAppInstallation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserTeamworkApiService.UsersTeamworkListInstalledApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/teamwork/installedApps"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUsersTeamworkUpdateInstalledAppsRequest struct {
	ctx _context.Context
	ApiService *UsersUserTeamworkApiService
	userId string
	userScopeTeamsAppInstallationId string
	microsoftGraphUserScopeTeamsAppInstallation *MicrosoftGraphUserScopeTeamsAppInstallation
}

// New navigation property values
func (r ApiUsersTeamworkUpdateInstalledAppsRequest) MicrosoftGraphUserScopeTeamsAppInstallation(microsoftGraphUserScopeTeamsAppInstallation MicrosoftGraphUserScopeTeamsAppInstallation) ApiUsersTeamworkUpdateInstalledAppsRequest {
	r.microsoftGraphUserScopeTeamsAppInstallation = &microsoftGraphUserScopeTeamsAppInstallation
	return r
}

func (r ApiUsersTeamworkUpdateInstalledAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersTeamworkUpdateInstalledAppsExecute(r)
}

/*
UsersTeamworkUpdateInstalledApps Update the navigation property installedApps in users

The apps installed in the personal scope of this user.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @param userScopeTeamsAppInstallationId key: id of userScopeTeamsAppInstallation
 @return ApiUsersTeamworkUpdateInstalledAppsRequest
*/
func (a *UsersUserTeamworkApiService) UsersTeamworkUpdateInstalledApps(ctx _context.Context, userId string, userScopeTeamsAppInstallationId string) ApiUsersTeamworkUpdateInstalledAppsRequest {
	return ApiUsersTeamworkUpdateInstalledAppsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		userScopeTeamsAppInstallationId: userScopeTeamsAppInstallationId,
	}
}

// Execute executes the request
func (a *UsersUserTeamworkApiService) UsersTeamworkUpdateInstalledAppsExecute(r ApiUsersTeamworkUpdateInstalledAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserTeamworkApiService.UsersTeamworkUpdateInstalledApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/teamwork/installedApps/{userScopeTeamsAppInstallation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"userScopeTeamsAppInstallation-id"+"}", _neturl.PathEscape(parameterToString(r.userScopeTeamsAppInstallationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphUserScopeTeamsAppInstallation == nil {
		return nil, reportError("microsoftGraphUserScopeTeamsAppInstallation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphUserScopeTeamsAppInstallation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUsersUpdateTeamworkRequest struct {
	ctx _context.Context
	ApiService *UsersUserTeamworkApiService
	userId string
	microsoftGraphUserTeamwork *MicrosoftGraphUserTeamwork
}

// New navigation property values
func (r ApiUsersUpdateTeamworkRequest) MicrosoftGraphUserTeamwork(microsoftGraphUserTeamwork MicrosoftGraphUserTeamwork) ApiUsersUpdateTeamworkRequest {
	r.microsoftGraphUserTeamwork = &microsoftGraphUserTeamwork
	return r
}

func (r ApiUsersUpdateTeamworkRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.UsersUpdateTeamworkExecute(r)
}

/*
UsersUpdateTeamwork Update the navigation property teamwork in users

A container for Microsoft Teams features available for the user. Read-only. Nullable.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId key: id of user
 @return ApiUsersUpdateTeamworkRequest
*/
func (a *UsersUserTeamworkApiService) UsersUpdateTeamwork(ctx _context.Context, userId string) ApiUsersUpdateTeamworkRequest {
	return ApiUsersUpdateTeamworkRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
	}
}

// Execute executes the request
func (a *UsersUserTeamworkApiService) UsersUpdateTeamworkExecute(r ApiUsersUpdateTeamworkRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "UsersUserTeamworkApiService.UsersUpdateTeamwork")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/users/{user-id}/teamwork"
	localVarPath = strings.Replace(localVarPath, "{"+"user-id"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphUserTeamwork == nil {
		return nil, reportError("microsoftGraphUserTeamwork is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphUserTeamwork
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
