/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphAgreementAcceptanceState the model 'MicrosoftGraphAgreementAcceptanceState'
type MicrosoftGraphAgreementAcceptanceState string

// List of microsoft.graph.agreementAcceptanceState
const (
	ACCEPTED MicrosoftGraphAgreementAcceptanceState = "accepted"
	DECLINED MicrosoftGraphAgreementAcceptanceState = "declined"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphAgreementAcceptanceState = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphAgreementAcceptanceState enum
var AllowedMicrosoftGraphAgreementAcceptanceStateEnumValues = []MicrosoftGraphAgreementAcceptanceState{
	"accepted",
	"declined",
	"unknownFutureValue",
}

func (v *MicrosoftGraphAgreementAcceptanceState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphAgreementAcceptanceState(value)
	for _, existing := range AllowedMicrosoftGraphAgreementAcceptanceStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphAgreementAcceptanceState", value)
}

// NewMicrosoftGraphAgreementAcceptanceStateFromValue returns a pointer to a valid MicrosoftGraphAgreementAcceptanceState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphAgreementAcceptanceStateFromValue(v string) (*MicrosoftGraphAgreementAcceptanceState, error) {
	ev := MicrosoftGraphAgreementAcceptanceState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphAgreementAcceptanceState: valid values are %v", v, AllowedMicrosoftGraphAgreementAcceptanceStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphAgreementAcceptanceState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphAgreementAcceptanceStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.agreementAcceptanceState value
func (v MicrosoftGraphAgreementAcceptanceState) Ptr() *MicrosoftGraphAgreementAcceptanceState {
	return &v
}

type NullableMicrosoftGraphAgreementAcceptanceState struct {
	value *MicrosoftGraphAgreementAcceptanceState
	isSet bool
}

func (v NullableMicrosoftGraphAgreementAcceptanceState) Get() *MicrosoftGraphAgreementAcceptanceState {
	return v.value
}

func (v *NullableMicrosoftGraphAgreementAcceptanceState) Set(val *MicrosoftGraphAgreementAcceptanceState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphAgreementAcceptanceState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphAgreementAcceptanceState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphAgreementAcceptanceState(val *MicrosoftGraphAgreementAcceptanceState) *NullableMicrosoftGraphAgreementAcceptanceState {
	return &NullableMicrosoftGraphAgreementAcceptanceState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphAgreementAcceptanceState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphAgreementAcceptanceState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

