/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"time"
)

// MicrosoftGraphAlertHistoryState struct for MicrosoftGraphAlertHistoryState
type MicrosoftGraphAlertHistoryState struct {
	// The Application ID of the calling application that submitted an update (PATCH) to the alert. The appId should be extracted from the auth token and not entered manually by the calling application.
	AppId NullableString `json:"appId,omitempty"`
	// UPN of user the alert was assigned to (note: alert.assignedTo only stores the last value/UPN).
	AssignedTo NullableString `json:"assignedTo,omitempty"`
	// Comment entered by signed-in user.
	Comments *[]*string `json:"comments,omitempty"`
	// Analyst feedback on the alert in this update. Possible values are: unknown, truePositive, falsePositive, benignPositive.
	Feedback AnyOfmicrosoftGraphAlertFeedback `json:"feedback,omitempty"`
	// Alert status value (if updated). Possible values are: unknown, newAlert, inProgress, resolved, dismissed.
	Status AnyOfmicrosoftGraphAlertStatus `json:"status,omitempty"`
	// Date and time of the alert update. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	UpdatedDateTime NullableTime `json:"updatedDateTime,omitempty"`
	// UPN of the signed-in user that updated the alert (taken from the bearer token - if in user/delegated auth mode).
	User NullableString `json:"user,omitempty"`
}

// NewMicrosoftGraphAlertHistoryState instantiates a new MicrosoftGraphAlertHistoryState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphAlertHistoryState() *MicrosoftGraphAlertHistoryState {
	this := MicrosoftGraphAlertHistoryState{}
	return &this
}

// NewMicrosoftGraphAlertHistoryStateWithDefaults instantiates a new MicrosoftGraphAlertHistoryState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphAlertHistoryStateWithDefaults() *MicrosoftGraphAlertHistoryState {
	this := MicrosoftGraphAlertHistoryState{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAlertHistoryState) GetAppId() string {
	if o == nil || o.AppId.Get() == nil {
		var ret string
		return ret
	}
	return *o.AppId.Get()
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAlertHistoryState) GetAppIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppId.Get(), o.AppId.IsSet()
}

// HasAppId returns a boolean if a field has been set.
func (o *MicrosoftGraphAlertHistoryState) HasAppId() bool {
	if o != nil && o.AppId.IsSet() {
		return true
	}

	return false
}

// SetAppId gets a reference to the given NullableString and assigns it to the AppId field.
func (o *MicrosoftGraphAlertHistoryState) SetAppId(v string) {
	o.AppId.Set(&v)
}
// SetAppIdNil sets the value for AppId to be an explicit nil
func (o *MicrosoftGraphAlertHistoryState) SetAppIdNil() {
	o.AppId.Set(nil)
}

// UnsetAppId ensures that no value is present for AppId, not even an explicit nil
func (o *MicrosoftGraphAlertHistoryState) UnsetAppId() {
	o.AppId.Unset()
}

// GetAssignedTo returns the AssignedTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAlertHistoryState) GetAssignedTo() string {
	if o == nil || o.AssignedTo.Get() == nil {
		var ret string
		return ret
	}
	return *o.AssignedTo.Get()
}

// GetAssignedToOk returns a tuple with the AssignedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAlertHistoryState) GetAssignedToOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AssignedTo.Get(), o.AssignedTo.IsSet()
}

// HasAssignedTo returns a boolean if a field has been set.
func (o *MicrosoftGraphAlertHistoryState) HasAssignedTo() bool {
	if o != nil && o.AssignedTo.IsSet() {
		return true
	}

	return false
}

// SetAssignedTo gets a reference to the given NullableString and assigns it to the AssignedTo field.
func (o *MicrosoftGraphAlertHistoryState) SetAssignedTo(v string) {
	o.AssignedTo.Set(&v)
}
// SetAssignedToNil sets the value for AssignedTo to be an explicit nil
func (o *MicrosoftGraphAlertHistoryState) SetAssignedToNil() {
	o.AssignedTo.Set(nil)
}

// UnsetAssignedTo ensures that no value is present for AssignedTo, not even an explicit nil
func (o *MicrosoftGraphAlertHistoryState) UnsetAssignedTo() {
	o.AssignedTo.Unset()
}

// GetComments returns the Comments field value if set, zero value otherwise.
func (o *MicrosoftGraphAlertHistoryState) GetComments() []*string {
	if o == nil || o.Comments == nil {
		var ret []*string
		return ret
	}
	return *o.Comments
}

// GetCommentsOk returns a tuple with the Comments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAlertHistoryState) GetCommentsOk() (*[]*string, bool) {
	if o == nil || o.Comments == nil {
		return nil, false
	}
	return o.Comments, true
}

// HasComments returns a boolean if a field has been set.
func (o *MicrosoftGraphAlertHistoryState) HasComments() bool {
	if o != nil && o.Comments != nil {
		return true
	}

	return false
}

// SetComments gets a reference to the given []*string and assigns it to the Comments field.
func (o *MicrosoftGraphAlertHistoryState) SetComments(v []*string) {
	o.Comments = &v
}

// GetFeedback returns the Feedback field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAlertHistoryState) GetFeedback() AnyOfmicrosoftGraphAlertFeedback {
	if o == nil  {
		var ret AnyOfmicrosoftGraphAlertFeedback
		return ret
	}
	return o.Feedback
}

// GetFeedbackOk returns a tuple with the Feedback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAlertHistoryState) GetFeedbackOk() (*AnyOfmicrosoftGraphAlertFeedback, bool) {
	if o == nil || o.Feedback == nil {
		return nil, false
	}
	return &o.Feedback, true
}

// HasFeedback returns a boolean if a field has been set.
func (o *MicrosoftGraphAlertHistoryState) HasFeedback() bool {
	if o != nil && o.Feedback != nil {
		return true
	}

	return false
}

// SetFeedback gets a reference to the given AnyOfmicrosoftGraphAlertFeedback and assigns it to the Feedback field.
func (o *MicrosoftGraphAlertHistoryState) SetFeedback(v AnyOfmicrosoftGraphAlertFeedback) {
	o.Feedback = v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAlertHistoryState) GetStatus() AnyOfmicrosoftGraphAlertStatus {
	if o == nil  {
		var ret AnyOfmicrosoftGraphAlertStatus
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAlertHistoryState) GetStatusOk() (*AnyOfmicrosoftGraphAlertStatus, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return &o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *MicrosoftGraphAlertHistoryState) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AnyOfmicrosoftGraphAlertStatus and assigns it to the Status field.
func (o *MicrosoftGraphAlertHistoryState) SetStatus(v AnyOfmicrosoftGraphAlertStatus) {
	o.Status = v
}

// GetUpdatedDateTime returns the UpdatedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAlertHistoryState) GetUpdatedDateTime() time.Time {
	if o == nil || o.UpdatedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedDateTime.Get()
}

// GetUpdatedDateTimeOk returns a tuple with the UpdatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAlertHistoryState) GetUpdatedDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UpdatedDateTime.Get(), o.UpdatedDateTime.IsSet()
}

// HasUpdatedDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphAlertHistoryState) HasUpdatedDateTime() bool {
	if o != nil && o.UpdatedDateTime.IsSet() {
		return true
	}

	return false
}

// SetUpdatedDateTime gets a reference to the given NullableTime and assigns it to the UpdatedDateTime field.
func (o *MicrosoftGraphAlertHistoryState) SetUpdatedDateTime(v time.Time) {
	o.UpdatedDateTime.Set(&v)
}
// SetUpdatedDateTimeNil sets the value for UpdatedDateTime to be an explicit nil
func (o *MicrosoftGraphAlertHistoryState) SetUpdatedDateTimeNil() {
	o.UpdatedDateTime.Set(nil)
}

// UnsetUpdatedDateTime ensures that no value is present for UpdatedDateTime, not even an explicit nil
func (o *MicrosoftGraphAlertHistoryState) UnsetUpdatedDateTime() {
	o.UpdatedDateTime.Unset()
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAlertHistoryState) GetUser() string {
	if o == nil || o.User.Get() == nil {
		var ret string
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAlertHistoryState) GetUserOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *MicrosoftGraphAlertHistoryState) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableString and assigns it to the User field.
func (o *MicrosoftGraphAlertHistoryState) SetUser(v string) {
	o.User.Set(&v)
}
// SetUserNil sets the value for User to be an explicit nil
func (o *MicrosoftGraphAlertHistoryState) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *MicrosoftGraphAlertHistoryState) UnsetUser() {
	o.User.Unset()
}

func (o MicrosoftGraphAlertHistoryState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppId.IsSet() {
		toSerialize["appId"] = o.AppId.Get()
	}
	if o.AssignedTo.IsSet() {
		toSerialize["assignedTo"] = o.AssignedTo.Get()
	}
	if o.Comments != nil {
		toSerialize["comments"] = o.Comments
	}
	if o.Feedback != nil {
		toSerialize["feedback"] = o.Feedback
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.UpdatedDateTime.IsSet() {
		toSerialize["updatedDateTime"] = o.UpdatedDateTime.Get()
	}
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphAlertHistoryState struct {
	value *MicrosoftGraphAlertHistoryState
	isSet bool
}

func (v NullableMicrosoftGraphAlertHistoryState) Get() *MicrosoftGraphAlertHistoryState {
	return v.value
}

func (v *NullableMicrosoftGraphAlertHistoryState) Set(val *MicrosoftGraphAlertHistoryState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphAlertHistoryState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphAlertHistoryState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphAlertHistoryState(val *MicrosoftGraphAlertHistoryState) *NullableMicrosoftGraphAlertHistoryState {
	return &NullableMicrosoftGraphAlertHistoryState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphAlertHistoryState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphAlertHistoryState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


