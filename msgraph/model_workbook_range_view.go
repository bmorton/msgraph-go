/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// WorkbookRangeView struct for WorkbookRangeView
type WorkbookRangeView struct {
	// Represents the cell addresses
	CellAddresses AnyOfobject `json:"cellAddresses,omitempty"`
	// Returns the number of visible columns. Read-only.
	ColumnCount *int32 `json:"columnCount,omitempty"`
	// Represents the formula in A1-style notation.
	Formulas AnyOfobject `json:"formulas,omitempty"`
	// Represents the formula in A1-style notation, in the user's language and number-formatting locale. For example, the English '=SUM(A1, 1.5)' formula would become '=SUMME(A1; 1,5)' in German.
	FormulasLocal AnyOfobject `json:"formulasLocal,omitempty"`
	// Represents the formula in R1C1-style notation.
	FormulasR1C1 AnyOfobject `json:"formulasR1C1,omitempty"`
	// Index of the range.
	Index *int32 `json:"index,omitempty"`
	// Represents Excel's number format code for the given cell. Read-only.
	NumberFormat AnyOfobject `json:"numberFormat,omitempty"`
	// Returns the number of visible rows. Read-only.
	RowCount *int32 `json:"rowCount,omitempty"`
	// Text values of the specified range. The Text value will not depend on the cell width. The # sign substitution that happens in Excel UI will not affect the text value returned by the API. Read-only.
	Text AnyOfobject `json:"text,omitempty"`
	// Represents the raw values of the specified range view. The data returned could be of type string, number, or a boolean. Cell that contain an error will return the error string.
	Values AnyOfobject `json:"values,omitempty"`
	// Represents the type of data of each cell. Read-only. The possible values are: Unknown, Empty, String, Integer, Double, Boolean, Error.
	ValueTypes AnyOfobject `json:"valueTypes,omitempty"`
	// Represents a collection of range views associated with the range. Read-only. Read-only.
	Rows *[]MicrosoftGraphWorkbookRangeView `json:"rows,omitempty"`
}

// NewWorkbookRangeView instantiates a new WorkbookRangeView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkbookRangeView() *WorkbookRangeView {
	this := WorkbookRangeView{}
	return &this
}

// NewWorkbookRangeViewWithDefaults instantiates a new WorkbookRangeView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkbookRangeViewWithDefaults() *WorkbookRangeView {
	this := WorkbookRangeView{}
	return &this
}

// GetCellAddresses returns the CellAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkbookRangeView) GetCellAddresses() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.CellAddresses
}

// GetCellAddressesOk returns a tuple with the CellAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkbookRangeView) GetCellAddressesOk() (*AnyOfobject, bool) {
	if o == nil || o.CellAddresses == nil {
		return nil, false
	}
	return &o.CellAddresses, true
}

// HasCellAddresses returns a boolean if a field has been set.
func (o *WorkbookRangeView) HasCellAddresses() bool {
	if o != nil && o.CellAddresses != nil {
		return true
	}

	return false
}

// SetCellAddresses gets a reference to the given AnyOfobject and assigns it to the CellAddresses field.
func (o *WorkbookRangeView) SetCellAddresses(v AnyOfobject) {
	o.CellAddresses = v
}

// GetColumnCount returns the ColumnCount field value if set, zero value otherwise.
func (o *WorkbookRangeView) GetColumnCount() int32 {
	if o == nil || o.ColumnCount == nil {
		var ret int32
		return ret
	}
	return *o.ColumnCount
}

// GetColumnCountOk returns a tuple with the ColumnCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkbookRangeView) GetColumnCountOk() (*int32, bool) {
	if o == nil || o.ColumnCount == nil {
		return nil, false
	}
	return o.ColumnCount, true
}

// HasColumnCount returns a boolean if a field has been set.
func (o *WorkbookRangeView) HasColumnCount() bool {
	if o != nil && o.ColumnCount != nil {
		return true
	}

	return false
}

// SetColumnCount gets a reference to the given int32 and assigns it to the ColumnCount field.
func (o *WorkbookRangeView) SetColumnCount(v int32) {
	o.ColumnCount = &v
}

// GetFormulas returns the Formulas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkbookRangeView) GetFormulas() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Formulas
}

// GetFormulasOk returns a tuple with the Formulas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkbookRangeView) GetFormulasOk() (*AnyOfobject, bool) {
	if o == nil || o.Formulas == nil {
		return nil, false
	}
	return &o.Formulas, true
}

// HasFormulas returns a boolean if a field has been set.
func (o *WorkbookRangeView) HasFormulas() bool {
	if o != nil && o.Formulas != nil {
		return true
	}

	return false
}

// SetFormulas gets a reference to the given AnyOfobject and assigns it to the Formulas field.
func (o *WorkbookRangeView) SetFormulas(v AnyOfobject) {
	o.Formulas = v
}

// GetFormulasLocal returns the FormulasLocal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkbookRangeView) GetFormulasLocal() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.FormulasLocal
}

// GetFormulasLocalOk returns a tuple with the FormulasLocal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkbookRangeView) GetFormulasLocalOk() (*AnyOfobject, bool) {
	if o == nil || o.FormulasLocal == nil {
		return nil, false
	}
	return &o.FormulasLocal, true
}

// HasFormulasLocal returns a boolean if a field has been set.
func (o *WorkbookRangeView) HasFormulasLocal() bool {
	if o != nil && o.FormulasLocal != nil {
		return true
	}

	return false
}

// SetFormulasLocal gets a reference to the given AnyOfobject and assigns it to the FormulasLocal field.
func (o *WorkbookRangeView) SetFormulasLocal(v AnyOfobject) {
	o.FormulasLocal = v
}

// GetFormulasR1C1 returns the FormulasR1C1 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkbookRangeView) GetFormulasR1C1() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.FormulasR1C1
}

// GetFormulasR1C1Ok returns a tuple with the FormulasR1C1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkbookRangeView) GetFormulasR1C1Ok() (*AnyOfobject, bool) {
	if o == nil || o.FormulasR1C1 == nil {
		return nil, false
	}
	return &o.FormulasR1C1, true
}

// HasFormulasR1C1 returns a boolean if a field has been set.
func (o *WorkbookRangeView) HasFormulasR1C1() bool {
	if o != nil && o.FormulasR1C1 != nil {
		return true
	}

	return false
}

// SetFormulasR1C1 gets a reference to the given AnyOfobject and assigns it to the FormulasR1C1 field.
func (o *WorkbookRangeView) SetFormulasR1C1(v AnyOfobject) {
	o.FormulasR1C1 = v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *WorkbookRangeView) GetIndex() int32 {
	if o == nil || o.Index == nil {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkbookRangeView) GetIndexOk() (*int32, bool) {
	if o == nil || o.Index == nil {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *WorkbookRangeView) HasIndex() bool {
	if o != nil && o.Index != nil {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *WorkbookRangeView) SetIndex(v int32) {
	o.Index = &v
}

// GetNumberFormat returns the NumberFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkbookRangeView) GetNumberFormat() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.NumberFormat
}

// GetNumberFormatOk returns a tuple with the NumberFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkbookRangeView) GetNumberFormatOk() (*AnyOfobject, bool) {
	if o == nil || o.NumberFormat == nil {
		return nil, false
	}
	return &o.NumberFormat, true
}

// HasNumberFormat returns a boolean if a field has been set.
func (o *WorkbookRangeView) HasNumberFormat() bool {
	if o != nil && o.NumberFormat != nil {
		return true
	}

	return false
}

// SetNumberFormat gets a reference to the given AnyOfobject and assigns it to the NumberFormat field.
func (o *WorkbookRangeView) SetNumberFormat(v AnyOfobject) {
	o.NumberFormat = v
}

// GetRowCount returns the RowCount field value if set, zero value otherwise.
func (o *WorkbookRangeView) GetRowCount() int32 {
	if o == nil || o.RowCount == nil {
		var ret int32
		return ret
	}
	return *o.RowCount
}

// GetRowCountOk returns a tuple with the RowCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkbookRangeView) GetRowCountOk() (*int32, bool) {
	if o == nil || o.RowCount == nil {
		return nil, false
	}
	return o.RowCount, true
}

// HasRowCount returns a boolean if a field has been set.
func (o *WorkbookRangeView) HasRowCount() bool {
	if o != nil && o.RowCount != nil {
		return true
	}

	return false
}

// SetRowCount gets a reference to the given int32 and assigns it to the RowCount field.
func (o *WorkbookRangeView) SetRowCount(v int32) {
	o.RowCount = &v
}

// GetText returns the Text field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkbookRangeView) GetText() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkbookRangeView) GetTextOk() (*AnyOfobject, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return &o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *WorkbookRangeView) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given AnyOfobject and assigns it to the Text field.
func (o *WorkbookRangeView) SetText(v AnyOfobject) {
	o.Text = v
}

// GetValues returns the Values field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkbookRangeView) GetValues() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkbookRangeView) GetValuesOk() (*AnyOfobject, bool) {
	if o == nil || o.Values == nil {
		return nil, false
	}
	return &o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *WorkbookRangeView) HasValues() bool {
	if o != nil && o.Values != nil {
		return true
	}

	return false
}

// SetValues gets a reference to the given AnyOfobject and assigns it to the Values field.
func (o *WorkbookRangeView) SetValues(v AnyOfobject) {
	o.Values = v
}

// GetValueTypes returns the ValueTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkbookRangeView) GetValueTypes() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.ValueTypes
}

// GetValueTypesOk returns a tuple with the ValueTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkbookRangeView) GetValueTypesOk() (*AnyOfobject, bool) {
	if o == nil || o.ValueTypes == nil {
		return nil, false
	}
	return &o.ValueTypes, true
}

// HasValueTypes returns a boolean if a field has been set.
func (o *WorkbookRangeView) HasValueTypes() bool {
	if o != nil && o.ValueTypes != nil {
		return true
	}

	return false
}

// SetValueTypes gets a reference to the given AnyOfobject and assigns it to the ValueTypes field.
func (o *WorkbookRangeView) SetValueTypes(v AnyOfobject) {
	o.ValueTypes = v
}

// GetRows returns the Rows field value if set, zero value otherwise.
func (o *WorkbookRangeView) GetRows() []MicrosoftGraphWorkbookRangeView {
	if o == nil || o.Rows == nil {
		var ret []MicrosoftGraphWorkbookRangeView
		return ret
	}
	return *o.Rows
}

// GetRowsOk returns a tuple with the Rows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkbookRangeView) GetRowsOk() (*[]MicrosoftGraphWorkbookRangeView, bool) {
	if o == nil || o.Rows == nil {
		return nil, false
	}
	return o.Rows, true
}

// HasRows returns a boolean if a field has been set.
func (o *WorkbookRangeView) HasRows() bool {
	if o != nil && o.Rows != nil {
		return true
	}

	return false
}

// SetRows gets a reference to the given []MicrosoftGraphWorkbookRangeView and assigns it to the Rows field.
func (o *WorkbookRangeView) SetRows(v []MicrosoftGraphWorkbookRangeView) {
	o.Rows = &v
}

func (o WorkbookRangeView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CellAddresses != nil {
		toSerialize["cellAddresses"] = o.CellAddresses
	}
	if o.ColumnCount != nil {
		toSerialize["columnCount"] = o.ColumnCount
	}
	if o.Formulas != nil {
		toSerialize["formulas"] = o.Formulas
	}
	if o.FormulasLocal != nil {
		toSerialize["formulasLocal"] = o.FormulasLocal
	}
	if o.FormulasR1C1 != nil {
		toSerialize["formulasR1C1"] = o.FormulasR1C1
	}
	if o.Index != nil {
		toSerialize["index"] = o.Index
	}
	if o.NumberFormat != nil {
		toSerialize["numberFormat"] = o.NumberFormat
	}
	if o.RowCount != nil {
		toSerialize["rowCount"] = o.RowCount
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.Values != nil {
		toSerialize["values"] = o.Values
	}
	if o.ValueTypes != nil {
		toSerialize["valueTypes"] = o.ValueTypes
	}
	if o.Rows != nil {
		toSerialize["rows"] = o.Rows
	}
	return json.Marshal(toSerialize)
}

type NullableWorkbookRangeView struct {
	value *WorkbookRangeView
	isSet bool
}

func (v NullableWorkbookRangeView) Get() *WorkbookRangeView {
	return v.value
}

func (v *NullableWorkbookRangeView) Set(val *WorkbookRangeView) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkbookRangeView) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkbookRangeView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkbookRangeView(val *WorkbookRangeView) *NullableWorkbookRangeView {
	return &NullableWorkbookRangeView{value: val, isSet: true}
}

func (v NullableWorkbookRangeView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkbookRangeView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


