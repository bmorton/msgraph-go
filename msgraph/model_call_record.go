/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// CallRecord struct for CallRecord
type CallRecord struct {
	// UTC time when the last user left the call. The DateTimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	EndDateTime *time.Time `json:"endDateTime,omitempty"`
	// Meeting URL associated to the call. May not be available for a peerToPeer call record type.
	JoinWebUrl NullableString `json:"joinWebUrl,omitempty"`
	// UTC time when the call record was created. The DatetimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`
	// List of all the modalities used in the call. Possible values are: unknown, audio, video, videoBasedScreenSharing, data, screenSharing, unknownFutureValue.
	Modalities *[]AnyOfmicrosoftGraphCallRecordsModality `json:"modalities,omitempty"`
	// The organizing party's identity.
	Organizer AnyOfmicrosoftGraphIdentitySet `json:"organizer,omitempty"`
	// List of distinct identities involved in the call.
	Participants *[]*AnyOfmicrosoftGraphIdentitySet `json:"participants,omitempty"`
	// UTC time when the first user joined the call. The DatetimeOffset type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
	// Indicates the type of the call. Possible values are: unknown, groupCall, peerToPeer, unknownFutureValue.
	Type AnyOfmicrosoftGraphCallRecordsCallType `json:"type,omitempty"`
	// Monotonically increasing version of the call record. Higher version call records with the same id includes additional data compared to the lower version.
	Version *int64 `json:"version,omitempty"`
	// List of sessions involved in the call. Peer-to-peer calls typically only have one session, whereas group calls typically have at least one session per participant. Read-only. Nullable.
	Sessions *[]MicrosoftGraphCallRecordsSession `json:"sessions,omitempty"`
}

// NewCallRecord instantiates a new CallRecord object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCallRecord() *CallRecord {
	this := CallRecord{}
	return &this
}

// NewCallRecordWithDefaults instantiates a new CallRecord object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCallRecordWithDefaults() *CallRecord {
	this := CallRecord{}
	return &this
}

// GetEndDateTime returns the EndDateTime field value if set, zero value otherwise.
func (o *CallRecord) GetEndDateTime() time.Time {
	if o == nil || o.EndDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.EndDateTime
}

// GetEndDateTimeOk returns a tuple with the EndDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecord) GetEndDateTimeOk() (*time.Time, bool) {
	if o == nil || o.EndDateTime == nil {
		return nil, false
	}
	return o.EndDateTime, true
}

// HasEndDateTime returns a boolean if a field has been set.
func (o *CallRecord) HasEndDateTime() bool {
	if o != nil && o.EndDateTime != nil {
		return true
	}

	return false
}

// SetEndDateTime gets a reference to the given time.Time and assigns it to the EndDateTime field.
func (o *CallRecord) SetEndDateTime(v time.Time) {
	o.EndDateTime = &v
}

// GetJoinWebUrl returns the JoinWebUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallRecord) GetJoinWebUrl() string {
	if o == nil || o.JoinWebUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.JoinWebUrl.Get()
}

// GetJoinWebUrlOk returns a tuple with the JoinWebUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallRecord) GetJoinWebUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JoinWebUrl.Get(), o.JoinWebUrl.IsSet()
}

// HasJoinWebUrl returns a boolean if a field has been set.
func (o *CallRecord) HasJoinWebUrl() bool {
	if o != nil && o.JoinWebUrl.IsSet() {
		return true
	}

	return false
}

// SetJoinWebUrl gets a reference to the given NullableString and assigns it to the JoinWebUrl field.
func (o *CallRecord) SetJoinWebUrl(v string) {
	o.JoinWebUrl.Set(&v)
}
// SetJoinWebUrlNil sets the value for JoinWebUrl to be an explicit nil
func (o *CallRecord) SetJoinWebUrlNil() {
	o.JoinWebUrl.Set(nil)
}

// UnsetJoinWebUrl ensures that no value is present for JoinWebUrl, not even an explicit nil
func (o *CallRecord) UnsetJoinWebUrl() {
	o.JoinWebUrl.Unset()
}

// GetLastModifiedDateTime returns the LastModifiedDateTime field value if set, zero value otherwise.
func (o *CallRecord) GetLastModifiedDateTime() time.Time {
	if o == nil || o.LastModifiedDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastModifiedDateTime
}

// GetLastModifiedDateTimeOk returns a tuple with the LastModifiedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecord) GetLastModifiedDateTimeOk() (*time.Time, bool) {
	if o == nil || o.LastModifiedDateTime == nil {
		return nil, false
	}
	return o.LastModifiedDateTime, true
}

// HasLastModifiedDateTime returns a boolean if a field has been set.
func (o *CallRecord) HasLastModifiedDateTime() bool {
	if o != nil && o.LastModifiedDateTime != nil {
		return true
	}

	return false
}

// SetLastModifiedDateTime gets a reference to the given time.Time and assigns it to the LastModifiedDateTime field.
func (o *CallRecord) SetLastModifiedDateTime(v time.Time) {
	o.LastModifiedDateTime = &v
}

// GetModalities returns the Modalities field value if set, zero value otherwise.
func (o *CallRecord) GetModalities() []AnyOfmicrosoftGraphCallRecordsModality {
	if o == nil || o.Modalities == nil {
		var ret []AnyOfmicrosoftGraphCallRecordsModality
		return ret
	}
	return *o.Modalities
}

// GetModalitiesOk returns a tuple with the Modalities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecord) GetModalitiesOk() (*[]AnyOfmicrosoftGraphCallRecordsModality, bool) {
	if o == nil || o.Modalities == nil {
		return nil, false
	}
	return o.Modalities, true
}

// HasModalities returns a boolean if a field has been set.
func (o *CallRecord) HasModalities() bool {
	if o != nil && o.Modalities != nil {
		return true
	}

	return false
}

// SetModalities gets a reference to the given []AnyOfmicrosoftGraphCallRecordsModality and assigns it to the Modalities field.
func (o *CallRecord) SetModalities(v []AnyOfmicrosoftGraphCallRecordsModality) {
	o.Modalities = &v
}

// GetOrganizer returns the Organizer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallRecord) GetOrganizer() AnyOfmicrosoftGraphIdentitySet {
	if o == nil  {
		var ret AnyOfmicrosoftGraphIdentitySet
		return ret
	}
	return o.Organizer
}

// GetOrganizerOk returns a tuple with the Organizer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallRecord) GetOrganizerOk() (*AnyOfmicrosoftGraphIdentitySet, bool) {
	if o == nil || o.Organizer == nil {
		return nil, false
	}
	return &o.Organizer, true
}

// HasOrganizer returns a boolean if a field has been set.
func (o *CallRecord) HasOrganizer() bool {
	if o != nil && o.Organizer != nil {
		return true
	}

	return false
}

// SetOrganizer gets a reference to the given AnyOfmicrosoftGraphIdentitySet and assigns it to the Organizer field.
func (o *CallRecord) SetOrganizer(v AnyOfmicrosoftGraphIdentitySet) {
	o.Organizer = v
}

// GetParticipants returns the Participants field value if set, zero value otherwise.
func (o *CallRecord) GetParticipants() []*AnyOfmicrosoftGraphIdentitySet {
	if o == nil || o.Participants == nil {
		var ret []*AnyOfmicrosoftGraphIdentitySet
		return ret
	}
	return *o.Participants
}

// GetParticipantsOk returns a tuple with the Participants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecord) GetParticipantsOk() (*[]*AnyOfmicrosoftGraphIdentitySet, bool) {
	if o == nil || o.Participants == nil {
		return nil, false
	}
	return o.Participants, true
}

// HasParticipants returns a boolean if a field has been set.
func (o *CallRecord) HasParticipants() bool {
	if o != nil && o.Participants != nil {
		return true
	}

	return false
}

// SetParticipants gets a reference to the given []*AnyOfmicrosoftGraphIdentitySet and assigns it to the Participants field.
func (o *CallRecord) SetParticipants(v []*AnyOfmicrosoftGraphIdentitySet) {
	o.Participants = &v
}

// GetStartDateTime returns the StartDateTime field value if set, zero value otherwise.
func (o *CallRecord) GetStartDateTime() time.Time {
	if o == nil || o.StartDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDateTime
}

// GetStartDateTimeOk returns a tuple with the StartDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecord) GetStartDateTimeOk() (*time.Time, bool) {
	if o == nil || o.StartDateTime == nil {
		return nil, false
	}
	return o.StartDateTime, true
}

// HasStartDateTime returns a boolean if a field has been set.
func (o *CallRecord) HasStartDateTime() bool {
	if o != nil && o.StartDateTime != nil {
		return true
	}

	return false
}

// SetStartDateTime gets a reference to the given time.Time and assigns it to the StartDateTime field.
func (o *CallRecord) SetStartDateTime(v time.Time) {
	o.StartDateTime = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CallRecord) GetType() AnyOfmicrosoftGraphCallRecordsCallType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphCallRecordsCallType
		return ret
	}
	return o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CallRecord) GetTypeOk() (*AnyOfmicrosoftGraphCallRecordsCallType, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return &o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CallRecord) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given AnyOfmicrosoftGraphCallRecordsCallType and assigns it to the Type field.
func (o *CallRecord) SetType(v AnyOfmicrosoftGraphCallRecordsCallType) {
	o.Type = v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *CallRecord) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecord) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *CallRecord) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *CallRecord) SetVersion(v int64) {
	o.Version = &v
}

// GetSessions returns the Sessions field value if set, zero value otherwise.
func (o *CallRecord) GetSessions() []MicrosoftGraphCallRecordsSession {
	if o == nil || o.Sessions == nil {
		var ret []MicrosoftGraphCallRecordsSession
		return ret
	}
	return *o.Sessions
}

// GetSessionsOk returns a tuple with the Sessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CallRecord) GetSessionsOk() (*[]MicrosoftGraphCallRecordsSession, bool) {
	if o == nil || o.Sessions == nil {
		return nil, false
	}
	return o.Sessions, true
}

// HasSessions returns a boolean if a field has been set.
func (o *CallRecord) HasSessions() bool {
	if o != nil && o.Sessions != nil {
		return true
	}

	return false
}

// SetSessions gets a reference to the given []MicrosoftGraphCallRecordsSession and assigns it to the Sessions field.
func (o *CallRecord) SetSessions(v []MicrosoftGraphCallRecordsSession) {
	o.Sessions = &v
}

func (o CallRecord) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EndDateTime != nil {
		toSerialize["endDateTime"] = o.EndDateTime
	}
	if o.JoinWebUrl.IsSet() {
		toSerialize["joinWebUrl"] = o.JoinWebUrl.Get()
	}
	if o.LastModifiedDateTime != nil {
		toSerialize["lastModifiedDateTime"] = o.LastModifiedDateTime
	}
	if o.Modalities != nil {
		toSerialize["modalities"] = o.Modalities
	}
	if o.Organizer != nil {
		toSerialize["organizer"] = o.Organizer
	}
	if o.Participants != nil {
		toSerialize["participants"] = o.Participants
	}
	if o.StartDateTime != nil {
		toSerialize["startDateTime"] = o.StartDateTime
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.Sessions != nil {
		toSerialize["sessions"] = o.Sessions
	}
	return json.Marshal(toSerialize)
}

type NullableCallRecord struct {
	value *CallRecord
	isSet bool
}

func (v NullableCallRecord) Get() *CallRecord {
	return v.value
}

func (v *NullableCallRecord) Set(val *CallRecord) {
	v.value = val
	v.isSet = true
}

func (v NullableCallRecord) IsSet() bool {
	return v.isSet
}

func (v *NullableCallRecord) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCallRecord(val *CallRecord) *NullableCallRecord {
	return &NullableCallRecord{value: val, isSet: true}
}

func (v NullableCallRecord) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCallRecord) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


