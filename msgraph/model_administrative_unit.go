/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// AdministrativeUnit struct for AdministrativeUnit
type AdministrativeUnit struct {
	// An optional description for the administrative unit. Supports $filter (eq, ne, in, startsWith).
	Description NullableString `json:"description,omitempty"`
	// Display name for the administrative unit. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderBy.
	DisplayName NullableString `json:"displayName,omitempty"`
	// Controls whether the administrative unit and its members are hidden or public. Can be set to HiddenMembership or Public. If not set, default behavior is Public. When set to HiddenMembership, only members of the administrative unit can list other members of the administrative unit.
	Visibility NullableString `json:"visibility,omitempty"`
	// Users and groups that are members of this administrative unit. HTTP Methods: GET (list members), POST (add members), DELETE (remove members).
	Members *[]MicrosoftGraphDirectoryObject `json:"members,omitempty"`
	// Scoped-role members of this administrative unit.  HTTP Methods: GET (list scopedRoleMemberships), POST (add scopedRoleMembership), DELETE (remove scopedRoleMembership).
	ScopedRoleMembers *[]MicrosoftGraphScopedRoleMembership `json:"scopedRoleMembers,omitempty"`
	// The collection of open extensions defined for this administrative unit. Nullable.
	Extensions *[]MicrosoftGraphExtension `json:"extensions,omitempty"`
}

// NewAdministrativeUnit instantiates a new AdministrativeUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdministrativeUnit() *AdministrativeUnit {
	this := AdministrativeUnit{}
	return &this
}

// NewAdministrativeUnitWithDefaults instantiates a new AdministrativeUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdministrativeUnitWithDefaults() *AdministrativeUnit {
	this := AdministrativeUnit{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdministrativeUnit) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdministrativeUnit) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *AdministrativeUnit) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *AdministrativeUnit) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *AdministrativeUnit) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *AdministrativeUnit) UnsetDescription() {
	o.Description.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdministrativeUnit) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdministrativeUnit) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *AdministrativeUnit) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *AdministrativeUnit) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *AdministrativeUnit) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *AdministrativeUnit) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetVisibility returns the Visibility field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdministrativeUnit) GetVisibility() string {
	if o == nil || o.Visibility.Get() == nil {
		var ret string
		return ret
	}
	return *o.Visibility.Get()
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdministrativeUnit) GetVisibilityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Visibility.Get(), o.Visibility.IsSet()
}

// HasVisibility returns a boolean if a field has been set.
func (o *AdministrativeUnit) HasVisibility() bool {
	if o != nil && o.Visibility.IsSet() {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given NullableString and assigns it to the Visibility field.
func (o *AdministrativeUnit) SetVisibility(v string) {
	o.Visibility.Set(&v)
}
// SetVisibilityNil sets the value for Visibility to be an explicit nil
func (o *AdministrativeUnit) SetVisibilityNil() {
	o.Visibility.Set(nil)
}

// UnsetVisibility ensures that no value is present for Visibility, not even an explicit nil
func (o *AdministrativeUnit) UnsetVisibility() {
	o.Visibility.Unset()
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *AdministrativeUnit) GetMembers() []MicrosoftGraphDirectoryObject {
	if o == nil || o.Members == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministrativeUnit) GetMembersOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.Members == nil {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *AdministrativeUnit) HasMembers() bool {
	if o != nil && o.Members != nil {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the Members field.
func (o *AdministrativeUnit) SetMembers(v []MicrosoftGraphDirectoryObject) {
	o.Members = &v
}

// GetScopedRoleMembers returns the ScopedRoleMembers field value if set, zero value otherwise.
func (o *AdministrativeUnit) GetScopedRoleMembers() []MicrosoftGraphScopedRoleMembership {
	if o == nil || o.ScopedRoleMembers == nil {
		var ret []MicrosoftGraphScopedRoleMembership
		return ret
	}
	return *o.ScopedRoleMembers
}

// GetScopedRoleMembersOk returns a tuple with the ScopedRoleMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministrativeUnit) GetScopedRoleMembersOk() (*[]MicrosoftGraphScopedRoleMembership, bool) {
	if o == nil || o.ScopedRoleMembers == nil {
		return nil, false
	}
	return o.ScopedRoleMembers, true
}

// HasScopedRoleMembers returns a boolean if a field has been set.
func (o *AdministrativeUnit) HasScopedRoleMembers() bool {
	if o != nil && o.ScopedRoleMembers != nil {
		return true
	}

	return false
}

// SetScopedRoleMembers gets a reference to the given []MicrosoftGraphScopedRoleMembership and assigns it to the ScopedRoleMembers field.
func (o *AdministrativeUnit) SetScopedRoleMembers(v []MicrosoftGraphScopedRoleMembership) {
	o.ScopedRoleMembers = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *AdministrativeUnit) GetExtensions() []MicrosoftGraphExtension {
	if o == nil || o.Extensions == nil {
		var ret []MicrosoftGraphExtension
		return ret
	}
	return *o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdministrativeUnit) GetExtensionsOk() (*[]MicrosoftGraphExtension, bool) {
	if o == nil || o.Extensions == nil {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *AdministrativeUnit) HasExtensions() bool {
	if o != nil && o.Extensions != nil {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []MicrosoftGraphExtension and assigns it to the Extensions field.
func (o *AdministrativeUnit) SetExtensions(v []MicrosoftGraphExtension) {
	o.Extensions = &v
}

func (o AdministrativeUnit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.Visibility.IsSet() {
		toSerialize["visibility"] = o.Visibility.Get()
	}
	if o.Members != nil {
		toSerialize["members"] = o.Members
	}
	if o.ScopedRoleMembers != nil {
		toSerialize["scopedRoleMembers"] = o.ScopedRoleMembers
	}
	if o.Extensions != nil {
		toSerialize["extensions"] = o.Extensions
	}
	return json.Marshal(toSerialize)
}

type NullableAdministrativeUnit struct {
	value *AdministrativeUnit
	isSet bool
}

func (v NullableAdministrativeUnit) Get() *AdministrativeUnit {
	return v.value
}

func (v *NullableAdministrativeUnit) Set(val *AdministrativeUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableAdministrativeUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableAdministrativeUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdministrativeUnit(val *AdministrativeUnit) *NullableAdministrativeUnit {
	return &NullableAdministrativeUnit{value: val, isSet: true}
}

func (v NullableAdministrativeUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdministrativeUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


