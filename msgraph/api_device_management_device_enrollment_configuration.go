/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceManagementDeviceEnrollmentConfigurationApiService DeviceManagementDeviceEnrollmentConfigurationApi service
type DeviceManagementDeviceEnrollmentConfigurationApiService service

type ApiDeviceManagementCreateDeviceEnrollmentConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceEnrollmentConfigurationApiService
	microsoftGraphDeviceEnrollmentConfiguration *MicrosoftGraphDeviceEnrollmentConfiguration
}

// New navigation property
func (r ApiDeviceManagementCreateDeviceEnrollmentConfigurationsRequest) MicrosoftGraphDeviceEnrollmentConfiguration(microsoftGraphDeviceEnrollmentConfiguration MicrosoftGraphDeviceEnrollmentConfiguration) ApiDeviceManagementCreateDeviceEnrollmentConfigurationsRequest {
	r.microsoftGraphDeviceEnrollmentConfiguration = &microsoftGraphDeviceEnrollmentConfiguration
	return r
}

func (r ApiDeviceManagementCreateDeviceEnrollmentConfigurationsRequest) Execute() (MicrosoftGraphDeviceEnrollmentConfiguration, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementCreateDeviceEnrollmentConfigurationsExecute(r)
}

/*
DeviceManagementCreateDeviceEnrollmentConfigurations Create new navigation property to deviceEnrollmentConfigurations for deviceManagement

The list of device enrollment configurations

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementCreateDeviceEnrollmentConfigurationsRequest
*/
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementCreateDeviceEnrollmentConfigurations(ctx _context.Context) ApiDeviceManagementCreateDeviceEnrollmentConfigurationsRequest {
	return ApiDeviceManagementCreateDeviceEnrollmentConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceEnrollmentConfiguration
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementCreateDeviceEnrollmentConfigurationsExecute(r ApiDeviceManagementCreateDeviceEnrollmentConfigurationsRequest) (MicrosoftGraphDeviceEnrollmentConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceEnrollmentConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceEnrollmentConfigurationApiService.DeviceManagementCreateDeviceEnrollmentConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceEnrollmentConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceEnrollmentConfiguration == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceEnrollmentConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceEnrollmentConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeleteDeviceEnrollmentConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceEnrollmentConfigurationApiService
	deviceEnrollmentConfigurationId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeleteDeviceEnrollmentConfigurationsRequest) IfMatch(ifMatch string) ApiDeviceManagementDeleteDeviceEnrollmentConfigurationsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeleteDeviceEnrollmentConfigurationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeleteDeviceEnrollmentConfigurationsExecute(r)
}

/*
DeviceManagementDeleteDeviceEnrollmentConfigurations Delete navigation property deviceEnrollmentConfigurations for deviceManagement

The list of device enrollment configurations

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceEnrollmentConfigurationId key: id of deviceEnrollmentConfiguration
 @return ApiDeviceManagementDeleteDeviceEnrollmentConfigurationsRequest
*/
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementDeleteDeviceEnrollmentConfigurations(ctx _context.Context, deviceEnrollmentConfigurationId string) ApiDeviceManagementDeleteDeviceEnrollmentConfigurationsRequest {
	return ApiDeviceManagementDeleteDeviceEnrollmentConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		deviceEnrollmentConfigurationId: deviceEnrollmentConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementDeleteDeviceEnrollmentConfigurationsExecute(r ApiDeviceManagementDeleteDeviceEnrollmentConfigurationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceEnrollmentConfigurationApiService.DeviceManagementDeleteDeviceEnrollmentConfigurations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceEnrollmentConfigurations/{deviceEnrollmentConfiguration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceEnrollmentConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceEnrollmentConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceEnrollmentConfigurationsCreateAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceEnrollmentConfigurationApiService
	deviceEnrollmentConfigurationId string
	microsoftGraphEnrollmentConfigurationAssignment *MicrosoftGraphEnrollmentConfigurationAssignment
}

// New navigation property
func (r ApiDeviceManagementDeviceEnrollmentConfigurationsCreateAssignmentsRequest) MicrosoftGraphEnrollmentConfigurationAssignment(microsoftGraphEnrollmentConfigurationAssignment MicrosoftGraphEnrollmentConfigurationAssignment) ApiDeviceManagementDeviceEnrollmentConfigurationsCreateAssignmentsRequest {
	r.microsoftGraphEnrollmentConfigurationAssignment = &microsoftGraphEnrollmentConfigurationAssignment
	return r
}

func (r ApiDeviceManagementDeviceEnrollmentConfigurationsCreateAssignmentsRequest) Execute() (MicrosoftGraphEnrollmentConfigurationAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceEnrollmentConfigurationsCreateAssignmentsExecute(r)
}

/*
DeviceManagementDeviceEnrollmentConfigurationsCreateAssignments Create new navigation property to assignments for deviceManagement

The list of group assignments for the device configuration profile

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceEnrollmentConfigurationId key: id of deviceEnrollmentConfiguration
 @return ApiDeviceManagementDeviceEnrollmentConfigurationsCreateAssignmentsRequest
*/
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementDeviceEnrollmentConfigurationsCreateAssignments(ctx _context.Context, deviceEnrollmentConfigurationId string) ApiDeviceManagementDeviceEnrollmentConfigurationsCreateAssignmentsRequest {
	return ApiDeviceManagementDeviceEnrollmentConfigurationsCreateAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		deviceEnrollmentConfigurationId: deviceEnrollmentConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEnrollmentConfigurationAssignment
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementDeviceEnrollmentConfigurationsCreateAssignmentsExecute(r ApiDeviceManagementDeviceEnrollmentConfigurationsCreateAssignmentsRequest) (MicrosoftGraphEnrollmentConfigurationAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEnrollmentConfigurationAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceEnrollmentConfigurationApiService.DeviceManagementDeviceEnrollmentConfigurationsCreateAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceEnrollmentConfigurations/{deviceEnrollmentConfiguration-id}/assignments"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceEnrollmentConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceEnrollmentConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEnrollmentConfigurationAssignment == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphEnrollmentConfigurationAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEnrollmentConfigurationAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceEnrollmentConfigurationsDeleteAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceEnrollmentConfigurationApiService
	deviceEnrollmentConfigurationId string
	enrollmentConfigurationAssignmentId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeviceEnrollmentConfigurationsDeleteAssignmentsRequest) IfMatch(ifMatch string) ApiDeviceManagementDeviceEnrollmentConfigurationsDeleteAssignmentsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeviceEnrollmentConfigurationsDeleteAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceEnrollmentConfigurationsDeleteAssignmentsExecute(r)
}

/*
DeviceManagementDeviceEnrollmentConfigurationsDeleteAssignments Delete navigation property assignments for deviceManagement

The list of group assignments for the device configuration profile

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceEnrollmentConfigurationId key: id of deviceEnrollmentConfiguration
 @param enrollmentConfigurationAssignmentId key: id of enrollmentConfigurationAssignment
 @return ApiDeviceManagementDeviceEnrollmentConfigurationsDeleteAssignmentsRequest
*/
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementDeviceEnrollmentConfigurationsDeleteAssignments(ctx _context.Context, deviceEnrollmentConfigurationId string, enrollmentConfigurationAssignmentId string) ApiDeviceManagementDeviceEnrollmentConfigurationsDeleteAssignmentsRequest {
	return ApiDeviceManagementDeviceEnrollmentConfigurationsDeleteAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		deviceEnrollmentConfigurationId: deviceEnrollmentConfigurationId,
		enrollmentConfigurationAssignmentId: enrollmentConfigurationAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementDeviceEnrollmentConfigurationsDeleteAssignmentsExecute(r ApiDeviceManagementDeviceEnrollmentConfigurationsDeleteAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceEnrollmentConfigurationApiService.DeviceManagementDeviceEnrollmentConfigurationsDeleteAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceEnrollmentConfigurations/{deviceEnrollmentConfiguration-id}/assignments/{enrollmentConfigurationAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceEnrollmentConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceEnrollmentConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"enrollmentConfigurationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.enrollmentConfigurationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceEnrollmentConfigurationsGetAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceEnrollmentConfigurationApiService
	deviceEnrollmentConfigurationId string
	enrollmentConfigurationAssignmentId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementDeviceEnrollmentConfigurationsGetAssignmentsRequest) Select_(select_ []string) ApiDeviceManagementDeviceEnrollmentConfigurationsGetAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceEnrollmentConfigurationsGetAssignmentsRequest) Expand(expand []string) ApiDeviceManagementDeviceEnrollmentConfigurationsGetAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceEnrollmentConfigurationsGetAssignmentsRequest) Execute() (MicrosoftGraphEnrollmentConfigurationAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceEnrollmentConfigurationsGetAssignmentsExecute(r)
}

/*
DeviceManagementDeviceEnrollmentConfigurationsGetAssignments Get assignments from deviceManagement

The list of group assignments for the device configuration profile

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceEnrollmentConfigurationId key: id of deviceEnrollmentConfiguration
 @param enrollmentConfigurationAssignmentId key: id of enrollmentConfigurationAssignment
 @return ApiDeviceManagementDeviceEnrollmentConfigurationsGetAssignmentsRequest
*/
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementDeviceEnrollmentConfigurationsGetAssignments(ctx _context.Context, deviceEnrollmentConfigurationId string, enrollmentConfigurationAssignmentId string) ApiDeviceManagementDeviceEnrollmentConfigurationsGetAssignmentsRequest {
	return ApiDeviceManagementDeviceEnrollmentConfigurationsGetAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		deviceEnrollmentConfigurationId: deviceEnrollmentConfigurationId,
		enrollmentConfigurationAssignmentId: enrollmentConfigurationAssignmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphEnrollmentConfigurationAssignment
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementDeviceEnrollmentConfigurationsGetAssignmentsExecute(r ApiDeviceManagementDeviceEnrollmentConfigurationsGetAssignmentsRequest) (MicrosoftGraphEnrollmentConfigurationAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphEnrollmentConfigurationAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceEnrollmentConfigurationApiService.DeviceManagementDeviceEnrollmentConfigurationsGetAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceEnrollmentConfigurations/{deviceEnrollmentConfiguration-id}/assignments/{enrollmentConfigurationAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceEnrollmentConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceEnrollmentConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"enrollmentConfigurationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.enrollmentConfigurationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceEnrollmentConfigurationApiService
	deviceEnrollmentConfigurationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest) Top(top int32) ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest) Skip(skip int32) ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest) Search(search string) ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest) Filter(filter string) ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest) Count(count bool) ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest) Orderby(orderby []string) ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest) Select_(select_ []string) ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest) Expand(expand []string) ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest) Execute() (CollectionOfEnrollmentConfigurationAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceEnrollmentConfigurationsListAssignmentsExecute(r)
}

/*
DeviceManagementDeviceEnrollmentConfigurationsListAssignments Get assignments from deviceManagement

The list of group assignments for the device configuration profile

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceEnrollmentConfigurationId key: id of deviceEnrollmentConfiguration
 @return ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest
*/
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementDeviceEnrollmentConfigurationsListAssignments(ctx _context.Context, deviceEnrollmentConfigurationId string) ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest {
	return ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		deviceEnrollmentConfigurationId: deviceEnrollmentConfigurationId,
	}
}

// Execute executes the request
//  @return CollectionOfEnrollmentConfigurationAssignment
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementDeviceEnrollmentConfigurationsListAssignmentsExecute(r ApiDeviceManagementDeviceEnrollmentConfigurationsListAssignmentsRequest) (CollectionOfEnrollmentConfigurationAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfEnrollmentConfigurationAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceEnrollmentConfigurationApiService.DeviceManagementDeviceEnrollmentConfigurationsListAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceEnrollmentConfigurations/{deviceEnrollmentConfiguration-id}/assignments"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceEnrollmentConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceEnrollmentConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeviceEnrollmentConfigurationsUpdateAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceEnrollmentConfigurationApiService
	deviceEnrollmentConfigurationId string
	enrollmentConfigurationAssignmentId string
	microsoftGraphEnrollmentConfigurationAssignment *MicrosoftGraphEnrollmentConfigurationAssignment
}

// New navigation property values
func (r ApiDeviceManagementDeviceEnrollmentConfigurationsUpdateAssignmentsRequest) MicrosoftGraphEnrollmentConfigurationAssignment(microsoftGraphEnrollmentConfigurationAssignment MicrosoftGraphEnrollmentConfigurationAssignment) ApiDeviceManagementDeviceEnrollmentConfigurationsUpdateAssignmentsRequest {
	r.microsoftGraphEnrollmentConfigurationAssignment = &microsoftGraphEnrollmentConfigurationAssignment
	return r
}

func (r ApiDeviceManagementDeviceEnrollmentConfigurationsUpdateAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeviceEnrollmentConfigurationsUpdateAssignmentsExecute(r)
}

/*
DeviceManagementDeviceEnrollmentConfigurationsUpdateAssignments Update the navigation property assignments in deviceManagement

The list of group assignments for the device configuration profile

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceEnrollmentConfigurationId key: id of deviceEnrollmentConfiguration
 @param enrollmentConfigurationAssignmentId key: id of enrollmentConfigurationAssignment
 @return ApiDeviceManagementDeviceEnrollmentConfigurationsUpdateAssignmentsRequest
*/
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementDeviceEnrollmentConfigurationsUpdateAssignments(ctx _context.Context, deviceEnrollmentConfigurationId string, enrollmentConfigurationAssignmentId string) ApiDeviceManagementDeviceEnrollmentConfigurationsUpdateAssignmentsRequest {
	return ApiDeviceManagementDeviceEnrollmentConfigurationsUpdateAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		deviceEnrollmentConfigurationId: deviceEnrollmentConfigurationId,
		enrollmentConfigurationAssignmentId: enrollmentConfigurationAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementDeviceEnrollmentConfigurationsUpdateAssignmentsExecute(r ApiDeviceManagementDeviceEnrollmentConfigurationsUpdateAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceEnrollmentConfigurationApiService.DeviceManagementDeviceEnrollmentConfigurationsUpdateAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceEnrollmentConfigurations/{deviceEnrollmentConfiguration-id}/assignments/{enrollmentConfigurationAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceEnrollmentConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceEnrollmentConfigurationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"enrollmentConfigurationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.enrollmentConfigurationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphEnrollmentConfigurationAssignment == nil {
		return nil, reportError("microsoftGraphEnrollmentConfigurationAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphEnrollmentConfigurationAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementGetDeviceEnrollmentConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceEnrollmentConfigurationApiService
	deviceEnrollmentConfigurationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementGetDeviceEnrollmentConfigurationsRequest) Select_(select_ []string) ApiDeviceManagementGetDeviceEnrollmentConfigurationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementGetDeviceEnrollmentConfigurationsRequest) Expand(expand []string) ApiDeviceManagementGetDeviceEnrollmentConfigurationsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementGetDeviceEnrollmentConfigurationsRequest) Execute() (MicrosoftGraphDeviceEnrollmentConfiguration, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementGetDeviceEnrollmentConfigurationsExecute(r)
}

/*
DeviceManagementGetDeviceEnrollmentConfigurations Get deviceEnrollmentConfigurations from deviceManagement

The list of device enrollment configurations

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceEnrollmentConfigurationId key: id of deviceEnrollmentConfiguration
 @return ApiDeviceManagementGetDeviceEnrollmentConfigurationsRequest
*/
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementGetDeviceEnrollmentConfigurations(ctx _context.Context, deviceEnrollmentConfigurationId string) ApiDeviceManagementGetDeviceEnrollmentConfigurationsRequest {
	return ApiDeviceManagementGetDeviceEnrollmentConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		deviceEnrollmentConfigurationId: deviceEnrollmentConfigurationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceEnrollmentConfiguration
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementGetDeviceEnrollmentConfigurationsExecute(r ApiDeviceManagementGetDeviceEnrollmentConfigurationsRequest) (MicrosoftGraphDeviceEnrollmentConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceEnrollmentConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceEnrollmentConfigurationApiService.DeviceManagementGetDeviceEnrollmentConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceEnrollmentConfigurations/{deviceEnrollmentConfiguration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceEnrollmentConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceEnrollmentConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceEnrollmentConfigurationApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest) Top(top int32) ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest) Skip(skip int32) ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest) Search(search string) ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest) Filter(filter string) ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest) Count(count bool) ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest) Orderby(orderby []string) ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest) Select_(select_ []string) ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest) Expand(expand []string) ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest) Execute() (CollectionOfDeviceEnrollmentConfiguration, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementListDeviceEnrollmentConfigurationsExecute(r)
}

/*
DeviceManagementListDeviceEnrollmentConfigurations Get deviceEnrollmentConfigurations from deviceManagement

The list of device enrollment configurations

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest
*/
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementListDeviceEnrollmentConfigurations(ctx _context.Context) ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest {
	return ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceEnrollmentConfiguration
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementListDeviceEnrollmentConfigurationsExecute(r ApiDeviceManagementListDeviceEnrollmentConfigurationsRequest) (CollectionOfDeviceEnrollmentConfiguration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceEnrollmentConfiguration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceEnrollmentConfigurationApiService.DeviceManagementListDeviceEnrollmentConfigurations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceEnrollmentConfigurations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementUpdateDeviceEnrollmentConfigurationsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDeviceEnrollmentConfigurationApiService
	deviceEnrollmentConfigurationId string
	microsoftGraphDeviceEnrollmentConfiguration *MicrosoftGraphDeviceEnrollmentConfiguration
}

// New navigation property values
func (r ApiDeviceManagementUpdateDeviceEnrollmentConfigurationsRequest) MicrosoftGraphDeviceEnrollmentConfiguration(microsoftGraphDeviceEnrollmentConfiguration MicrosoftGraphDeviceEnrollmentConfiguration) ApiDeviceManagementUpdateDeviceEnrollmentConfigurationsRequest {
	r.microsoftGraphDeviceEnrollmentConfiguration = &microsoftGraphDeviceEnrollmentConfiguration
	return r
}

func (r ApiDeviceManagementUpdateDeviceEnrollmentConfigurationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementUpdateDeviceEnrollmentConfigurationsExecute(r)
}

/*
DeviceManagementUpdateDeviceEnrollmentConfigurations Update the navigation property deviceEnrollmentConfigurations in deviceManagement

The list of device enrollment configurations

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param deviceEnrollmentConfigurationId key: id of deviceEnrollmentConfiguration
 @return ApiDeviceManagementUpdateDeviceEnrollmentConfigurationsRequest
*/
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementUpdateDeviceEnrollmentConfigurations(ctx _context.Context, deviceEnrollmentConfigurationId string) ApiDeviceManagementUpdateDeviceEnrollmentConfigurationsRequest {
	return ApiDeviceManagementUpdateDeviceEnrollmentConfigurationsRequest{
		ApiService: a,
		ctx: ctx,
		deviceEnrollmentConfigurationId: deviceEnrollmentConfigurationId,
	}
}

// Execute executes the request
func (a *DeviceManagementDeviceEnrollmentConfigurationApiService) DeviceManagementUpdateDeviceEnrollmentConfigurationsExecute(r ApiDeviceManagementUpdateDeviceEnrollmentConfigurationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDeviceEnrollmentConfigurationApiService.DeviceManagementUpdateDeviceEnrollmentConfigurations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/deviceEnrollmentConfigurations/{deviceEnrollmentConfiguration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"deviceEnrollmentConfiguration-id"+"}", _neturl.PathEscape(parameterToString(r.deviceEnrollmentConfigurationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceEnrollmentConfiguration == nil {
		return nil, reportError("microsoftGraphDeviceEnrollmentConfiguration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceEnrollmentConfiguration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
