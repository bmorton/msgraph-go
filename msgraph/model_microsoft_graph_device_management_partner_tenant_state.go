/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphDeviceManagementPartnerTenantState Partner state of this tenant.
type MicrosoftGraphDeviceManagementPartnerTenantState string

// List of microsoft.graph.deviceManagementPartnerTenantState
const (
	UNKNOWN MicrosoftGraphDeviceManagementPartnerTenantState = "unknown"
	UNAVAILABLE MicrosoftGraphDeviceManagementPartnerTenantState = "unavailable"
	ENABLED MicrosoftGraphDeviceManagementPartnerTenantState = "enabled"
	TERMINATED MicrosoftGraphDeviceManagementPartnerTenantState = "terminated"
	REJECTED MicrosoftGraphDeviceManagementPartnerTenantState = "rejected"
	UNRESPONSIVE MicrosoftGraphDeviceManagementPartnerTenantState = "unresponsive"
)

// All allowed values of MicrosoftGraphDeviceManagementPartnerTenantState enum
var AllowedMicrosoftGraphDeviceManagementPartnerTenantStateEnumValues = []MicrosoftGraphDeviceManagementPartnerTenantState{
	"unknown",
	"unavailable",
	"enabled",
	"terminated",
	"rejected",
	"unresponsive",
}

func (v *MicrosoftGraphDeviceManagementPartnerTenantState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphDeviceManagementPartnerTenantState(value)
	for _, existing := range AllowedMicrosoftGraphDeviceManagementPartnerTenantStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphDeviceManagementPartnerTenantState", value)
}

// NewMicrosoftGraphDeviceManagementPartnerTenantStateFromValue returns a pointer to a valid MicrosoftGraphDeviceManagementPartnerTenantState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphDeviceManagementPartnerTenantStateFromValue(v string) (*MicrosoftGraphDeviceManagementPartnerTenantState, error) {
	ev := MicrosoftGraphDeviceManagementPartnerTenantState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphDeviceManagementPartnerTenantState: valid values are %v", v, AllowedMicrosoftGraphDeviceManagementPartnerTenantStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphDeviceManagementPartnerTenantState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphDeviceManagementPartnerTenantStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.deviceManagementPartnerTenantState value
func (v MicrosoftGraphDeviceManagementPartnerTenantState) Ptr() *MicrosoftGraphDeviceManagementPartnerTenantState {
	return &v
}

type NullableMicrosoftGraphDeviceManagementPartnerTenantState struct {
	value *MicrosoftGraphDeviceManagementPartnerTenantState
	isSet bool
}

func (v NullableMicrosoftGraphDeviceManagementPartnerTenantState) Get() *MicrosoftGraphDeviceManagementPartnerTenantState {
	return v.value
}

func (v *NullableMicrosoftGraphDeviceManagementPartnerTenantState) Set(val *MicrosoftGraphDeviceManagementPartnerTenantState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphDeviceManagementPartnerTenantState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphDeviceManagementPartnerTenantState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphDeviceManagementPartnerTenantState(val *MicrosoftGraphDeviceManagementPartnerTenantState) *NullableMicrosoftGraphDeviceManagementPartnerTenantState {
	return &NullableMicrosoftGraphDeviceManagementPartnerTenantState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphDeviceManagementPartnerTenantState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphDeviceManagementPartnerTenantState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

