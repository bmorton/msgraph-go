/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// MicrosoftGraphHashes struct for MicrosoftGraphHashes
type MicrosoftGraphHashes struct {
	// The CRC32 value of the file in little endian (if available). Read-only.
	Crc32Hash NullableString `json:"crc32Hash,omitempty"`
	// A proprietary hash of the file that can be used to determine if the contents of the file have changed (if available). Read-only.
	QuickXorHash NullableString `json:"quickXorHash,omitempty"`
	// SHA1 hash for the contents of the file (if available). Read-only.
	Sha1Hash NullableString `json:"sha1Hash,omitempty"`
	// SHA256 hash for the contents of the file (if available). Read-only.
	Sha256Hash NullableString `json:"sha256Hash,omitempty"`
}

// NewMicrosoftGraphHashes instantiates a new MicrosoftGraphHashes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphHashes() *MicrosoftGraphHashes {
	this := MicrosoftGraphHashes{}
	return &this
}

// NewMicrosoftGraphHashesWithDefaults instantiates a new MicrosoftGraphHashes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphHashesWithDefaults() *MicrosoftGraphHashes {
	this := MicrosoftGraphHashes{}
	return &this
}

// GetCrc32Hash returns the Crc32Hash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphHashes) GetCrc32Hash() string {
	if o == nil || o.Crc32Hash.Get() == nil {
		var ret string
		return ret
	}
	return *o.Crc32Hash.Get()
}

// GetCrc32HashOk returns a tuple with the Crc32Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphHashes) GetCrc32HashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Crc32Hash.Get(), o.Crc32Hash.IsSet()
}

// HasCrc32Hash returns a boolean if a field has been set.
func (o *MicrosoftGraphHashes) HasCrc32Hash() bool {
	if o != nil && o.Crc32Hash.IsSet() {
		return true
	}

	return false
}

// SetCrc32Hash gets a reference to the given NullableString and assigns it to the Crc32Hash field.
func (o *MicrosoftGraphHashes) SetCrc32Hash(v string) {
	o.Crc32Hash.Set(&v)
}
// SetCrc32HashNil sets the value for Crc32Hash to be an explicit nil
func (o *MicrosoftGraphHashes) SetCrc32HashNil() {
	o.Crc32Hash.Set(nil)
}

// UnsetCrc32Hash ensures that no value is present for Crc32Hash, not even an explicit nil
func (o *MicrosoftGraphHashes) UnsetCrc32Hash() {
	o.Crc32Hash.Unset()
}

// GetQuickXorHash returns the QuickXorHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphHashes) GetQuickXorHash() string {
	if o == nil || o.QuickXorHash.Get() == nil {
		var ret string
		return ret
	}
	return *o.QuickXorHash.Get()
}

// GetQuickXorHashOk returns a tuple with the QuickXorHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphHashes) GetQuickXorHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.QuickXorHash.Get(), o.QuickXorHash.IsSet()
}

// HasQuickXorHash returns a boolean if a field has been set.
func (o *MicrosoftGraphHashes) HasQuickXorHash() bool {
	if o != nil && o.QuickXorHash.IsSet() {
		return true
	}

	return false
}

// SetQuickXorHash gets a reference to the given NullableString and assigns it to the QuickXorHash field.
func (o *MicrosoftGraphHashes) SetQuickXorHash(v string) {
	o.QuickXorHash.Set(&v)
}
// SetQuickXorHashNil sets the value for QuickXorHash to be an explicit nil
func (o *MicrosoftGraphHashes) SetQuickXorHashNil() {
	o.QuickXorHash.Set(nil)
}

// UnsetQuickXorHash ensures that no value is present for QuickXorHash, not even an explicit nil
func (o *MicrosoftGraphHashes) UnsetQuickXorHash() {
	o.QuickXorHash.Unset()
}

// GetSha1Hash returns the Sha1Hash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphHashes) GetSha1Hash() string {
	if o == nil || o.Sha1Hash.Get() == nil {
		var ret string
		return ret
	}
	return *o.Sha1Hash.Get()
}

// GetSha1HashOk returns a tuple with the Sha1Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphHashes) GetSha1HashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Sha1Hash.Get(), o.Sha1Hash.IsSet()
}

// HasSha1Hash returns a boolean if a field has been set.
func (o *MicrosoftGraphHashes) HasSha1Hash() bool {
	if o != nil && o.Sha1Hash.IsSet() {
		return true
	}

	return false
}

// SetSha1Hash gets a reference to the given NullableString and assigns it to the Sha1Hash field.
func (o *MicrosoftGraphHashes) SetSha1Hash(v string) {
	o.Sha1Hash.Set(&v)
}
// SetSha1HashNil sets the value for Sha1Hash to be an explicit nil
func (o *MicrosoftGraphHashes) SetSha1HashNil() {
	o.Sha1Hash.Set(nil)
}

// UnsetSha1Hash ensures that no value is present for Sha1Hash, not even an explicit nil
func (o *MicrosoftGraphHashes) UnsetSha1Hash() {
	o.Sha1Hash.Unset()
}

// GetSha256Hash returns the Sha256Hash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphHashes) GetSha256Hash() string {
	if o == nil || o.Sha256Hash.Get() == nil {
		var ret string
		return ret
	}
	return *o.Sha256Hash.Get()
}

// GetSha256HashOk returns a tuple with the Sha256Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphHashes) GetSha256HashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Sha256Hash.Get(), o.Sha256Hash.IsSet()
}

// HasSha256Hash returns a boolean if a field has been set.
func (o *MicrosoftGraphHashes) HasSha256Hash() bool {
	if o != nil && o.Sha256Hash.IsSet() {
		return true
	}

	return false
}

// SetSha256Hash gets a reference to the given NullableString and assigns it to the Sha256Hash field.
func (o *MicrosoftGraphHashes) SetSha256Hash(v string) {
	o.Sha256Hash.Set(&v)
}
// SetSha256HashNil sets the value for Sha256Hash to be an explicit nil
func (o *MicrosoftGraphHashes) SetSha256HashNil() {
	o.Sha256Hash.Set(nil)
}

// UnsetSha256Hash ensures that no value is present for Sha256Hash, not even an explicit nil
func (o *MicrosoftGraphHashes) UnsetSha256Hash() {
	o.Sha256Hash.Unset()
}

func (o MicrosoftGraphHashes) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Crc32Hash.IsSet() {
		toSerialize["crc32Hash"] = o.Crc32Hash.Get()
	}
	if o.QuickXorHash.IsSet() {
		toSerialize["quickXorHash"] = o.QuickXorHash.Get()
	}
	if o.Sha1Hash.IsSet() {
		toSerialize["sha1Hash"] = o.Sha1Hash.Get()
	}
	if o.Sha256Hash.IsSet() {
		toSerialize["sha256Hash"] = o.Sha256Hash.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphHashes struct {
	value *MicrosoftGraphHashes
	isSet bool
}

func (v NullableMicrosoftGraphHashes) Get() *MicrosoftGraphHashes {
	return v.value
}

func (v *NullableMicrosoftGraphHashes) Set(val *MicrosoftGraphHashes) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphHashes) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphHashes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphHashes(val *MicrosoftGraphHashes) *NullableMicrosoftGraphHashes {
	return &NullableMicrosoftGraphHashes{value: val, isSet: true}
}

func (v NullableMicrosoftGraphHashes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphHashes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


