/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphRegistryHive the model 'MicrosoftGraphRegistryHive'
type MicrosoftGraphRegistryHive string

// List of microsoft.graph.registryHive
const (
	UNKNOWN MicrosoftGraphRegistryHive = "unknown"
	CURRENT_CONFIG MicrosoftGraphRegistryHive = "currentConfig"
	CURRENT_USER MicrosoftGraphRegistryHive = "currentUser"
	LOCAL_MACHINE_SAM MicrosoftGraphRegistryHive = "localMachineSam"
	LOCAL_MACHINE_SECURITY MicrosoftGraphRegistryHive = "localMachineSecurity"
	LOCAL_MACHINE_SOFTWARE MicrosoftGraphRegistryHive = "localMachineSoftware"
	LOCAL_MACHINE_SYSTEM MicrosoftGraphRegistryHive = "localMachineSystem"
	USERS_DEFAULT MicrosoftGraphRegistryHive = "usersDefault"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphRegistryHive = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphRegistryHive enum
var AllowedMicrosoftGraphRegistryHiveEnumValues = []MicrosoftGraphRegistryHive{
	"unknown",
	"currentConfig",
	"currentUser",
	"localMachineSam",
	"localMachineSecurity",
	"localMachineSoftware",
	"localMachineSystem",
	"usersDefault",
	"unknownFutureValue",
}

func (v *MicrosoftGraphRegistryHive) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphRegistryHive(value)
	for _, existing := range AllowedMicrosoftGraphRegistryHiveEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphRegistryHive", value)
}

// NewMicrosoftGraphRegistryHiveFromValue returns a pointer to a valid MicrosoftGraphRegistryHive
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphRegistryHiveFromValue(v string) (*MicrosoftGraphRegistryHive, error) {
	ev := MicrosoftGraphRegistryHive(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphRegistryHive: valid values are %v", v, AllowedMicrosoftGraphRegistryHiveEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphRegistryHive) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphRegistryHiveEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.registryHive value
func (v MicrosoftGraphRegistryHive) Ptr() *MicrosoftGraphRegistryHive {
	return &v
}

type NullableMicrosoftGraphRegistryHive struct {
	value *MicrosoftGraphRegistryHive
	isSet bool
}

func (v NullableMicrosoftGraphRegistryHive) Get() *MicrosoftGraphRegistryHive {
	return v.value
}

func (v *NullableMicrosoftGraphRegistryHive) Set(val *MicrosoftGraphRegistryHive) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphRegistryHive) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphRegistryHive) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphRegistryHive(val *MicrosoftGraphRegistryHive) *NullableMicrosoftGraphRegistryHive {
	return &NullableMicrosoftGraphRegistryHive{value: val, isSet: true}
}

func (v NullableMicrosoftGraphRegistryHive) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphRegistryHive) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

