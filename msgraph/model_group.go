/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// Group struct for Group
type Group struct {
	// The list of sensitivity label pairs (label ID, label name) associated with a Microsoft 365 group. Returned only on $select. Read-only.
	AssignedLabels *[]*AnyOfmicrosoftGraphAssignedLabel `json:"assignedLabels,omitempty"`
	// The licenses that are assigned to the group. Returned only on $select. Supports $filter (eq).Read-only.
	AssignedLicenses *[]*AnyOfmicrosoftGraphAssignedLicense `json:"assignedLicenses,omitempty"`
	// Describes a classification for the group (such as low, medium or high business impact). Valid values for this property are defined by creating a ClassificationList setting value, based on the template definition.Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith).
	Classification NullableString `json:"classification,omitempty"`
	// Timestamp of when the group was created. The value cannot be modified and is automatically populated when the group is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, not, ge, le, in). Read-only.
	CreatedDateTime NullableTime `json:"createdDateTime,omitempty"`
	// An optional description for the group. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith) and $search.
	Description NullableString `json:"description,omitempty"`
	// The display name for the group. This property is required when a group is created and cannot be cleared during updates. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderBy.
	DisplayName NullableString `json:"displayName,omitempty"`
	// Timestamp of when the group is set to expire. The value cannot be modified and is automatically populated when the group is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, not, ge, le, in). Read-only.
	ExpirationDateTime NullableTime `json:"expirationDateTime,omitempty"`
	// Specifies the group type and its membership.  If the collection contains Unified, the group is a Microsoft 365 group; otherwise, it's either a security group or distribution group. For details, see groups overview.If the collection includes DynamicMembership, the group has dynamic membership; otherwise, membership is static.  Returned by default. Supports $filter (eq, not).
	GroupTypes *[]string `json:"groupTypes,omitempty"`
	// Indicates whether there are members in this group that have license errors from its group-based license assignment. This property is never returned on a GET operation. You can use it as a $filter argument to get groups that have members with license errors (that is, filter for this property being true). See an example. Supports $filter (eq).
	HasMembersWithLicenseErrors NullableBool `json:"hasMembersWithLicenseErrors,omitempty"`
	// Indicates whether this group can be assigned to an Azure Active Directory role or not. Optional. This property can only be set while creating the group and is immutable. If set to true, the securityEnabled property must also be set to true and the group cannot be a dynamic group (that is, groupTypes cannot contain DynamicMembership). Only callers in Global administrator and Privileged role administrator roles can set this property. The caller must be assigned the RoleManagement.ReadWrite.Directory permission to set this property or update the membership of such groups. For more, see Using a group to manage Azure AD role assignmentsReturned by default. Supports $filter (eq, ne, not).
	IsAssignableToRole NullableBool `json:"isAssignableToRole,omitempty"`
	// Indicates status of the group license assignment to all members of the group. Default value is false. Read-only. Possible values: QueuedForProcessing, ProcessingInProgress, and ProcessingComplete.Returned only on $select. Read-only.
	LicenseProcessingState AnyOfmicrosoftGraphLicenseProcessingState `json:"licenseProcessingState,omitempty"`
	// The SMTP address for the group, for example, 'serviceadmins@contoso.onmicrosoft.com'. Returned by default. Read-only. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	Mail NullableString `json:"mail,omitempty"`
	// Specifies whether the group is mail-enabled. Required. Returned by default. Supports $filter (eq, ne, not).
	MailEnabled NullableBool `json:"mailEnabled,omitempty"`
	// The mail alias for the group, unique in the organization. Maximum length is 64 characters. This property can contain only characters in the ASCII character set 0 - 127 except the following: @ () / [] ' ; : . <> , SPACE. Required. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	MailNickname NullableString `json:"mailNickname,omitempty"`
	// The rule that determines members for this group if the group is a dynamic group (groupTypes contains DynamicMembership). For more information about the syntax of the membership rule, see Membership Rules syntax. Returned by default. Supports $filter (eq, ne, not, ge, le, startsWith).
	MembershipRule NullableString `json:"membershipRule,omitempty"`
	// Indicates whether the dynamic membership processing is on or paused. Possible values are On or Paused. Returned by default. Supports $filter (eq, ne, not, in).
	MembershipRuleProcessingState NullableString `json:"membershipRuleProcessingState,omitempty"`
	// Contains the on-premises domain FQDN, also called dnsDomainName synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect.Returned by default. Read-only.
	OnPremisesDomainName NullableString `json:"onPremisesDomainName,omitempty"`
	// Indicates the last time at which the group was synced with the on-premises directory.The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Read-only. Supports $filter (eq, ne, not, ge, le, in).
	OnPremisesLastSyncDateTime NullableTime `json:"onPremisesLastSyncDateTime,omitempty"`
	// Contains the on-premises netBios name synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect.Returned by default. Read-only.
	OnPremisesNetBiosName NullableString `json:"onPremisesNetBiosName,omitempty"`
	// Errors when using Microsoft synchronization product during provisioning. Returned by default. Supports $filter (eq, not).
	OnPremisesProvisioningErrors *[]*AnyOfmicrosoftGraphOnPremisesProvisioningError `json:"onPremisesProvisioningErrors,omitempty"`
	// Contains the on-premises SAM account name synchronized from the on-premises directory. The property is only populated for customers who are synchronizing their on-premises directory to Azure Active Directory via Azure AD Connect.Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith). Read-only.
	OnPremisesSamAccountName NullableString `json:"onPremisesSamAccountName,omitempty"`
	// Contains the on-premises security identifier (SID) for the group that was synchronized from on-premises to the cloud. Returned by default. Supports $filter on null values. Read-only.
	OnPremisesSecurityIdentifier NullableString `json:"onPremisesSecurityIdentifier,omitempty"`
	// true if this group is synced from an on-premises directory; false if this group was originally synced from an on-premises directory but is no longer synced; null if this object has never been synced from an on-premises directory (default). Returned by default. Read-only. Supports $filter (eq, ne, not, in, and eq on null values).
	OnPremisesSyncEnabled NullableBool `json:"onPremisesSyncEnabled,omitempty"`
	// The preferred data location for the Microsoft 365 group. By default, the group inherits the group creator's preferred data location. To set this property, the calling user must be assigned one of the following Azure AD roles:  Global Administrator  User Account Administrator Directory Writer  Exchange Administrator  SharePoint Administrator  For more information about this property, see  OneDrive Online Multi-Geo. Nullable. Returned by default.
	PreferredDataLocation NullableString `json:"preferredDataLocation,omitempty"`
	// The preferred language for a Microsoft 365 group. Should follow ISO 639-1 Code; for example en-US. Returned by default. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values).
	PreferredLanguage NullableString `json:"preferredLanguage,omitempty"`
	// Email addresses for the group that direct to the same group mailbox. For example: ['SMTP: bob@contoso.com', 'smtp: bob@sales.contoso.com']. The any operator is required to filter expressions on multi-valued properties. Returned by default. Read-only. Not nullable. Supports $filter (eq, not, ge, le, startsWith).
	ProxyAddresses *[]string `json:"proxyAddresses,omitempty"`
	// Timestamp of when the group was last renewed. This cannot be modified directly and is only updated via the renew service action. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Returned by default. Supports $filter (eq, ne, not, ge, le, in). Read-only.
	RenewedDateTime NullableTime `json:"renewedDateTime,omitempty"`
	// Specifies whether the group is a security group. Required. Returned by default. Supports $filter (eq, ne, not, in).
	SecurityEnabled NullableBool `json:"securityEnabled,omitempty"`
	// Security identifier of the group, used in Windows scenarios. Returned by default.
	SecurityIdentifier NullableString `json:"securityIdentifier,omitempty"`
	// Specifies a Microsoft 365 group's color theme. Possible values are Teal, Purple, Green, Blue, Pink, Orange or Red. Returned by default.
	Theme NullableString `json:"theme,omitempty"`
	// Specifies the group join policy and group content visibility for groups. Possible values are: Private, Public, or Hiddenmembership. Hiddenmembership can be set only for Microsoft 365 groups, when the groups are created. It can't be updated later. Other values of visibility can be updated after group creation. If visibility value is not specified during group creation on Microsoft Graph, a security group is created as Private by default and Microsoft 365 group is Public. Groups assignable to roles are always Private. See group visibility options to learn more. Returned by default. Nullable.
	Visibility NullableString `json:"visibility,omitempty"`
	// Indicates if people external to the organization can send messages to the group. Default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
	AllowExternalSenders NullableBool `json:"allowExternalSenders,omitempty"`
	// Indicates if new members added to the group will be auto-subscribed to receive email notifications. You can set this property in a PATCH request for the group; do not set it in the initial POST request that creates the group. Default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
	AutoSubscribeNewMembers NullableBool `json:"autoSubscribeNewMembers,omitempty"`
	// True if the group is not displayed in certain parts of the Outlook UI: the Address Book, address lists for selecting message recipients, and the Browse Groups dialog for searching groups; otherwise, false. Default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
	HideFromAddressLists NullableBool `json:"hideFromAddressLists,omitempty"`
	// True if the group is not displayed in Outlook clients, such as Outlook for Windows and Outlook on the web; otherwise, false. Default value is false. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
	HideFromOutlookClients NullableBool `json:"hideFromOutlookClients,omitempty"`
	// Indicates whether the signed-in user is subscribed to receive email conversations. Default value is true. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
	IsSubscribedByMail NullableBool `json:"isSubscribedByMail,omitempty"`
	// Count of conversations that have received new posts since the signed-in user last visited the group. Returned only on $select. Supported only on the Get group API (GET /groups/{ID}).
	UnseenCount NullableInt32 `json:"unseenCount,omitempty"`
	IsArchived NullableBool `json:"isArchived,omitempty"`
	// Represents the app roles a group has been granted for an application. Supports $expand.
	AppRoleAssignments *[]MicrosoftGraphAppRoleAssignment `json:"appRoleAssignments,omitempty"`
	// The user (or application) that created the group. NOTE: This is not set if the user is an administrator. Read-only.
	CreatedOnBehalfOf AnyOfmicrosoftGraphDirectoryObject `json:"createdOnBehalfOf,omitempty"`
	// Groups that this group is a member of. HTTP Methods: GET (supported for all groups). Read-only. Nullable. Supports $expand.
	MemberOf *[]MicrosoftGraphDirectoryObject `json:"memberOf,omitempty"`
	// Users and groups that are members of this group. HTTP Methods: GET (supported for all groups), POST (supported for Microsoft 365 groups, security groups and mail-enabled security groups), DELETE (supported for Microsoft 365 groups and security groups). Nullable. Supports $expand.
	Members *[]MicrosoftGraphDirectoryObject `json:"members,omitempty"`
	// A list of group members with license errors from this group-based license assignment. Read-only.
	MembersWithLicenseErrors *[]MicrosoftGraphDirectoryObject `json:"membersWithLicenseErrors,omitempty"`
	// The owners of the group. The owners are a set of non-admin users who are allowed to modify this object. Limited to 100 owners. Nullable. If this property is not specified when creating a Microsoft 365 group, the calling user is automatically assigned as the group owner. Supports $expand.
	Owners *[]MicrosoftGraphDirectoryObject `json:"owners,omitempty"`
	// The permission that has been granted for a group to a specific application. Supports $expand.
	PermissionGrants *[]MicrosoftGraphResourceSpecificPermissionGrant `json:"permissionGrants,omitempty"`
	// Read-only. Nullable.
	Settings *[]MicrosoftGraphGroupSetting `json:"settings,omitempty"`
	TransitiveMemberOf *[]MicrosoftGraphDirectoryObject `json:"transitiveMemberOf,omitempty"`
	TransitiveMembers *[]MicrosoftGraphDirectoryObject `json:"transitiveMembers,omitempty"`
	// The list of users or groups that are allowed to create post's or calendar events in this group. If this list is non-empty then only users or groups listed here are allowed to post.
	AcceptedSenders *[]MicrosoftGraphDirectoryObject `json:"acceptedSenders,omitempty"`
	// The group's calendar. Read-only.
	Calendar AnyOfmicrosoftGraphCalendar `json:"calendar,omitempty"`
	// The calendar view for the calendar. Read-only.
	CalendarView *[]MicrosoftGraphEvent `json:"calendarView,omitempty"`
	// The group's conversations.
	Conversations *[]MicrosoftGraphConversation `json:"conversations,omitempty"`
	// The group's calendar events.
	Events *[]MicrosoftGraphEvent `json:"events,omitempty"`
	// The group's profile photo
	Photo AnyOfmicrosoftGraphProfilePhoto `json:"photo,omitempty"`
	// The profile photos owned by the group. Read-only. Nullable.
	Photos *[]MicrosoftGraphProfilePhoto `json:"photos,omitempty"`
	// The list of users or groups that are not allowed to create posts or calendar events in this group. Nullable
	RejectedSenders *[]MicrosoftGraphDirectoryObject `json:"rejectedSenders,omitempty"`
	// The group's conversation threads. Nullable.
	Threads *[]MicrosoftGraphConversationThread `json:"threads,omitempty"`
	// The group's default drive. Read-only.
	Drive AnyOfmicrosoftGraphDrive `json:"drive,omitempty"`
	// The group's drives. Read-only.
	Drives *[]MicrosoftGraphDrive `json:"drives,omitempty"`
	// The list of SharePoint sites in this group. Access the default site with /sites/root.
	Sites *[]MicrosoftGraphSite `json:"sites,omitempty"`
	// The collection of open extensions defined for the group. Read-only. Nullable.
	Extensions *[]MicrosoftGraphExtension `json:"extensions,omitempty"`
	// The collection of lifecycle policies for this group. Read-only. Nullable.
	GroupLifecyclePolicies *[]MicrosoftGraphGroupLifecyclePolicy `json:"groupLifecyclePolicies,omitempty"`
	// Entry-point to Planner resource that might exist for a Unified Group.
	Planner AnyOfmicrosoftGraphPlannerGroup `json:"planner,omitempty"`
	// Read-only.
	Onenote AnyOfmicrosoftGraphOnenote `json:"onenote,omitempty"`
	Team AnyOfmicrosoftGraphTeam `json:"team,omitempty"`
}

// NewGroup instantiates a new Group object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroup() *Group {
	this := Group{}
	return &this
}

// NewGroupWithDefaults instantiates a new Group object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupWithDefaults() *Group {
	this := Group{}
	return &this
}

// GetAssignedLabels returns the AssignedLabels field value if set, zero value otherwise.
func (o *Group) GetAssignedLabels() []*AnyOfmicrosoftGraphAssignedLabel {
	if o == nil || o.AssignedLabels == nil {
		var ret []*AnyOfmicrosoftGraphAssignedLabel
		return ret
	}
	return *o.AssignedLabels
}

// GetAssignedLabelsOk returns a tuple with the AssignedLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetAssignedLabelsOk() (*[]*AnyOfmicrosoftGraphAssignedLabel, bool) {
	if o == nil || o.AssignedLabels == nil {
		return nil, false
	}
	return o.AssignedLabels, true
}

// HasAssignedLabels returns a boolean if a field has been set.
func (o *Group) HasAssignedLabels() bool {
	if o != nil && o.AssignedLabels != nil {
		return true
	}

	return false
}

// SetAssignedLabels gets a reference to the given []*AnyOfmicrosoftGraphAssignedLabel and assigns it to the AssignedLabels field.
func (o *Group) SetAssignedLabels(v []*AnyOfmicrosoftGraphAssignedLabel) {
	o.AssignedLabels = &v
}

// GetAssignedLicenses returns the AssignedLicenses field value if set, zero value otherwise.
func (o *Group) GetAssignedLicenses() []*AnyOfmicrosoftGraphAssignedLicense {
	if o == nil || o.AssignedLicenses == nil {
		var ret []*AnyOfmicrosoftGraphAssignedLicense
		return ret
	}
	return *o.AssignedLicenses
}

// GetAssignedLicensesOk returns a tuple with the AssignedLicenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetAssignedLicensesOk() (*[]*AnyOfmicrosoftGraphAssignedLicense, bool) {
	if o == nil || o.AssignedLicenses == nil {
		return nil, false
	}
	return o.AssignedLicenses, true
}

// HasAssignedLicenses returns a boolean if a field has been set.
func (o *Group) HasAssignedLicenses() bool {
	if o != nil && o.AssignedLicenses != nil {
		return true
	}

	return false
}

// SetAssignedLicenses gets a reference to the given []*AnyOfmicrosoftGraphAssignedLicense and assigns it to the AssignedLicenses field.
func (o *Group) SetAssignedLicenses(v []*AnyOfmicrosoftGraphAssignedLicense) {
	o.AssignedLicenses = &v
}

// GetClassification returns the Classification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetClassification() string {
	if o == nil || o.Classification.Get() == nil {
		var ret string
		return ret
	}
	return *o.Classification.Get()
}

// GetClassificationOk returns a tuple with the Classification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetClassificationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Classification.Get(), o.Classification.IsSet()
}

// HasClassification returns a boolean if a field has been set.
func (o *Group) HasClassification() bool {
	if o != nil && o.Classification.IsSet() {
		return true
	}

	return false
}

// SetClassification gets a reference to the given NullableString and assigns it to the Classification field.
func (o *Group) SetClassification(v string) {
	o.Classification.Set(&v)
}
// SetClassificationNil sets the value for Classification to be an explicit nil
func (o *Group) SetClassificationNil() {
	o.Classification.Set(nil)
}

// UnsetClassification ensures that no value is present for Classification, not even an explicit nil
func (o *Group) UnsetClassification() {
	o.Classification.Unset()
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetCreatedDateTime() time.Time {
	if o == nil || o.CreatedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime.Get()
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedDateTime.Get(), o.CreatedDateTime.IsSet()
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *Group) HasCreatedDateTime() bool {
	if o != nil && o.CreatedDateTime.IsSet() {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given NullableTime and assigns it to the CreatedDateTime field.
func (o *Group) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime.Set(&v)
}
// SetCreatedDateTimeNil sets the value for CreatedDateTime to be an explicit nil
func (o *Group) SetCreatedDateTimeNil() {
	o.CreatedDateTime.Set(nil)
}

// UnsetCreatedDateTime ensures that no value is present for CreatedDateTime, not even an explicit nil
func (o *Group) UnsetCreatedDateTime() {
	o.CreatedDateTime.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Group) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Group) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Group) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Group) UnsetDescription() {
	o.Description.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Group) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *Group) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *Group) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *Group) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetExpirationDateTime returns the ExpirationDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetExpirationDateTime() time.Time {
	if o == nil || o.ExpirationDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDateTime.Get()
}

// GetExpirationDateTimeOk returns a tuple with the ExpirationDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetExpirationDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpirationDateTime.Get(), o.ExpirationDateTime.IsSet()
}

// HasExpirationDateTime returns a boolean if a field has been set.
func (o *Group) HasExpirationDateTime() bool {
	if o != nil && o.ExpirationDateTime.IsSet() {
		return true
	}

	return false
}

// SetExpirationDateTime gets a reference to the given NullableTime and assigns it to the ExpirationDateTime field.
func (o *Group) SetExpirationDateTime(v time.Time) {
	o.ExpirationDateTime.Set(&v)
}
// SetExpirationDateTimeNil sets the value for ExpirationDateTime to be an explicit nil
func (o *Group) SetExpirationDateTimeNil() {
	o.ExpirationDateTime.Set(nil)
}

// UnsetExpirationDateTime ensures that no value is present for ExpirationDateTime, not even an explicit nil
func (o *Group) UnsetExpirationDateTime() {
	o.ExpirationDateTime.Unset()
}

// GetGroupTypes returns the GroupTypes field value if set, zero value otherwise.
func (o *Group) GetGroupTypes() []string {
	if o == nil || o.GroupTypes == nil {
		var ret []string
		return ret
	}
	return *o.GroupTypes
}

// GetGroupTypesOk returns a tuple with the GroupTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetGroupTypesOk() (*[]string, bool) {
	if o == nil || o.GroupTypes == nil {
		return nil, false
	}
	return o.GroupTypes, true
}

// HasGroupTypes returns a boolean if a field has been set.
func (o *Group) HasGroupTypes() bool {
	if o != nil && o.GroupTypes != nil {
		return true
	}

	return false
}

// SetGroupTypes gets a reference to the given []string and assigns it to the GroupTypes field.
func (o *Group) SetGroupTypes(v []string) {
	o.GroupTypes = &v
}

// GetHasMembersWithLicenseErrors returns the HasMembersWithLicenseErrors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetHasMembersWithLicenseErrors() bool {
	if o == nil || o.HasMembersWithLicenseErrors.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HasMembersWithLicenseErrors.Get()
}

// GetHasMembersWithLicenseErrorsOk returns a tuple with the HasMembersWithLicenseErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetHasMembersWithLicenseErrorsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HasMembersWithLicenseErrors.Get(), o.HasMembersWithLicenseErrors.IsSet()
}

// HasHasMembersWithLicenseErrors returns a boolean if a field has been set.
func (o *Group) HasHasMembersWithLicenseErrors() bool {
	if o != nil && o.HasMembersWithLicenseErrors.IsSet() {
		return true
	}

	return false
}

// SetHasMembersWithLicenseErrors gets a reference to the given NullableBool and assigns it to the HasMembersWithLicenseErrors field.
func (o *Group) SetHasMembersWithLicenseErrors(v bool) {
	o.HasMembersWithLicenseErrors.Set(&v)
}
// SetHasMembersWithLicenseErrorsNil sets the value for HasMembersWithLicenseErrors to be an explicit nil
func (o *Group) SetHasMembersWithLicenseErrorsNil() {
	o.HasMembersWithLicenseErrors.Set(nil)
}

// UnsetHasMembersWithLicenseErrors ensures that no value is present for HasMembersWithLicenseErrors, not even an explicit nil
func (o *Group) UnsetHasMembersWithLicenseErrors() {
	o.HasMembersWithLicenseErrors.Unset()
}

// GetIsAssignableToRole returns the IsAssignableToRole field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetIsAssignableToRole() bool {
	if o == nil || o.IsAssignableToRole.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsAssignableToRole.Get()
}

// GetIsAssignableToRoleOk returns a tuple with the IsAssignableToRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetIsAssignableToRoleOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsAssignableToRole.Get(), o.IsAssignableToRole.IsSet()
}

// HasIsAssignableToRole returns a boolean if a field has been set.
func (o *Group) HasIsAssignableToRole() bool {
	if o != nil && o.IsAssignableToRole.IsSet() {
		return true
	}

	return false
}

// SetIsAssignableToRole gets a reference to the given NullableBool and assigns it to the IsAssignableToRole field.
func (o *Group) SetIsAssignableToRole(v bool) {
	o.IsAssignableToRole.Set(&v)
}
// SetIsAssignableToRoleNil sets the value for IsAssignableToRole to be an explicit nil
func (o *Group) SetIsAssignableToRoleNil() {
	o.IsAssignableToRole.Set(nil)
}

// UnsetIsAssignableToRole ensures that no value is present for IsAssignableToRole, not even an explicit nil
func (o *Group) UnsetIsAssignableToRole() {
	o.IsAssignableToRole.Unset()
}

// GetLicenseProcessingState returns the LicenseProcessingState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetLicenseProcessingState() AnyOfmicrosoftGraphLicenseProcessingState {
	if o == nil  {
		var ret AnyOfmicrosoftGraphLicenseProcessingState
		return ret
	}
	return o.LicenseProcessingState
}

// GetLicenseProcessingStateOk returns a tuple with the LicenseProcessingState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetLicenseProcessingStateOk() (*AnyOfmicrosoftGraphLicenseProcessingState, bool) {
	if o == nil || o.LicenseProcessingState == nil {
		return nil, false
	}
	return &o.LicenseProcessingState, true
}

// HasLicenseProcessingState returns a boolean if a field has been set.
func (o *Group) HasLicenseProcessingState() bool {
	if o != nil && o.LicenseProcessingState != nil {
		return true
	}

	return false
}

// SetLicenseProcessingState gets a reference to the given AnyOfmicrosoftGraphLicenseProcessingState and assigns it to the LicenseProcessingState field.
func (o *Group) SetLicenseProcessingState(v AnyOfmicrosoftGraphLicenseProcessingState) {
	o.LicenseProcessingState = v
}

// GetMail returns the Mail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetMail() string {
	if o == nil || o.Mail.Get() == nil {
		var ret string
		return ret
	}
	return *o.Mail.Get()
}

// GetMailOk returns a tuple with the Mail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetMailOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mail.Get(), o.Mail.IsSet()
}

// HasMail returns a boolean if a field has been set.
func (o *Group) HasMail() bool {
	if o != nil && o.Mail.IsSet() {
		return true
	}

	return false
}

// SetMail gets a reference to the given NullableString and assigns it to the Mail field.
func (o *Group) SetMail(v string) {
	o.Mail.Set(&v)
}
// SetMailNil sets the value for Mail to be an explicit nil
func (o *Group) SetMailNil() {
	o.Mail.Set(nil)
}

// UnsetMail ensures that no value is present for Mail, not even an explicit nil
func (o *Group) UnsetMail() {
	o.Mail.Unset()
}

// GetMailEnabled returns the MailEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetMailEnabled() bool {
	if o == nil || o.MailEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.MailEnabled.Get()
}

// GetMailEnabledOk returns a tuple with the MailEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetMailEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MailEnabled.Get(), o.MailEnabled.IsSet()
}

// HasMailEnabled returns a boolean if a field has been set.
func (o *Group) HasMailEnabled() bool {
	if o != nil && o.MailEnabled.IsSet() {
		return true
	}

	return false
}

// SetMailEnabled gets a reference to the given NullableBool and assigns it to the MailEnabled field.
func (o *Group) SetMailEnabled(v bool) {
	o.MailEnabled.Set(&v)
}
// SetMailEnabledNil sets the value for MailEnabled to be an explicit nil
func (o *Group) SetMailEnabledNil() {
	o.MailEnabled.Set(nil)
}

// UnsetMailEnabled ensures that no value is present for MailEnabled, not even an explicit nil
func (o *Group) UnsetMailEnabled() {
	o.MailEnabled.Unset()
}

// GetMailNickname returns the MailNickname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetMailNickname() string {
	if o == nil || o.MailNickname.Get() == nil {
		var ret string
		return ret
	}
	return *o.MailNickname.Get()
}

// GetMailNicknameOk returns a tuple with the MailNickname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetMailNicknameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MailNickname.Get(), o.MailNickname.IsSet()
}

// HasMailNickname returns a boolean if a field has been set.
func (o *Group) HasMailNickname() bool {
	if o != nil && o.MailNickname.IsSet() {
		return true
	}

	return false
}

// SetMailNickname gets a reference to the given NullableString and assigns it to the MailNickname field.
func (o *Group) SetMailNickname(v string) {
	o.MailNickname.Set(&v)
}
// SetMailNicknameNil sets the value for MailNickname to be an explicit nil
func (o *Group) SetMailNicknameNil() {
	o.MailNickname.Set(nil)
}

// UnsetMailNickname ensures that no value is present for MailNickname, not even an explicit nil
func (o *Group) UnsetMailNickname() {
	o.MailNickname.Unset()
}

// GetMembershipRule returns the MembershipRule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetMembershipRule() string {
	if o == nil || o.MembershipRule.Get() == nil {
		var ret string
		return ret
	}
	return *o.MembershipRule.Get()
}

// GetMembershipRuleOk returns a tuple with the MembershipRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetMembershipRuleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MembershipRule.Get(), o.MembershipRule.IsSet()
}

// HasMembershipRule returns a boolean if a field has been set.
func (o *Group) HasMembershipRule() bool {
	if o != nil && o.MembershipRule.IsSet() {
		return true
	}

	return false
}

// SetMembershipRule gets a reference to the given NullableString and assigns it to the MembershipRule field.
func (o *Group) SetMembershipRule(v string) {
	o.MembershipRule.Set(&v)
}
// SetMembershipRuleNil sets the value for MembershipRule to be an explicit nil
func (o *Group) SetMembershipRuleNil() {
	o.MembershipRule.Set(nil)
}

// UnsetMembershipRule ensures that no value is present for MembershipRule, not even an explicit nil
func (o *Group) UnsetMembershipRule() {
	o.MembershipRule.Unset()
}

// GetMembershipRuleProcessingState returns the MembershipRuleProcessingState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetMembershipRuleProcessingState() string {
	if o == nil || o.MembershipRuleProcessingState.Get() == nil {
		var ret string
		return ret
	}
	return *o.MembershipRuleProcessingState.Get()
}

// GetMembershipRuleProcessingStateOk returns a tuple with the MembershipRuleProcessingState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetMembershipRuleProcessingStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MembershipRuleProcessingState.Get(), o.MembershipRuleProcessingState.IsSet()
}

// HasMembershipRuleProcessingState returns a boolean if a field has been set.
func (o *Group) HasMembershipRuleProcessingState() bool {
	if o != nil && o.MembershipRuleProcessingState.IsSet() {
		return true
	}

	return false
}

// SetMembershipRuleProcessingState gets a reference to the given NullableString and assigns it to the MembershipRuleProcessingState field.
func (o *Group) SetMembershipRuleProcessingState(v string) {
	o.MembershipRuleProcessingState.Set(&v)
}
// SetMembershipRuleProcessingStateNil sets the value for MembershipRuleProcessingState to be an explicit nil
func (o *Group) SetMembershipRuleProcessingStateNil() {
	o.MembershipRuleProcessingState.Set(nil)
}

// UnsetMembershipRuleProcessingState ensures that no value is present for MembershipRuleProcessingState, not even an explicit nil
func (o *Group) UnsetMembershipRuleProcessingState() {
	o.MembershipRuleProcessingState.Unset()
}

// GetOnPremisesDomainName returns the OnPremisesDomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetOnPremisesDomainName() string {
	if o == nil || o.OnPremisesDomainName.Get() == nil {
		var ret string
		return ret
	}
	return *o.OnPremisesDomainName.Get()
}

// GetOnPremisesDomainNameOk returns a tuple with the OnPremisesDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetOnPremisesDomainNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesDomainName.Get(), o.OnPremisesDomainName.IsSet()
}

// HasOnPremisesDomainName returns a boolean if a field has been set.
func (o *Group) HasOnPremisesDomainName() bool {
	if o != nil && o.OnPremisesDomainName.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesDomainName gets a reference to the given NullableString and assigns it to the OnPremisesDomainName field.
func (o *Group) SetOnPremisesDomainName(v string) {
	o.OnPremisesDomainName.Set(&v)
}
// SetOnPremisesDomainNameNil sets the value for OnPremisesDomainName to be an explicit nil
func (o *Group) SetOnPremisesDomainNameNil() {
	o.OnPremisesDomainName.Set(nil)
}

// UnsetOnPremisesDomainName ensures that no value is present for OnPremisesDomainName, not even an explicit nil
func (o *Group) UnsetOnPremisesDomainName() {
	o.OnPremisesDomainName.Unset()
}

// GetOnPremisesLastSyncDateTime returns the OnPremisesLastSyncDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetOnPremisesLastSyncDateTime() time.Time {
	if o == nil || o.OnPremisesLastSyncDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.OnPremisesLastSyncDateTime.Get()
}

// GetOnPremisesLastSyncDateTimeOk returns a tuple with the OnPremisesLastSyncDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetOnPremisesLastSyncDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesLastSyncDateTime.Get(), o.OnPremisesLastSyncDateTime.IsSet()
}

// HasOnPremisesLastSyncDateTime returns a boolean if a field has been set.
func (o *Group) HasOnPremisesLastSyncDateTime() bool {
	if o != nil && o.OnPremisesLastSyncDateTime.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesLastSyncDateTime gets a reference to the given NullableTime and assigns it to the OnPremisesLastSyncDateTime field.
func (o *Group) SetOnPremisesLastSyncDateTime(v time.Time) {
	o.OnPremisesLastSyncDateTime.Set(&v)
}
// SetOnPremisesLastSyncDateTimeNil sets the value for OnPremisesLastSyncDateTime to be an explicit nil
func (o *Group) SetOnPremisesLastSyncDateTimeNil() {
	o.OnPremisesLastSyncDateTime.Set(nil)
}

// UnsetOnPremisesLastSyncDateTime ensures that no value is present for OnPremisesLastSyncDateTime, not even an explicit nil
func (o *Group) UnsetOnPremisesLastSyncDateTime() {
	o.OnPremisesLastSyncDateTime.Unset()
}

// GetOnPremisesNetBiosName returns the OnPremisesNetBiosName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetOnPremisesNetBiosName() string {
	if o == nil || o.OnPremisesNetBiosName.Get() == nil {
		var ret string
		return ret
	}
	return *o.OnPremisesNetBiosName.Get()
}

// GetOnPremisesNetBiosNameOk returns a tuple with the OnPremisesNetBiosName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetOnPremisesNetBiosNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesNetBiosName.Get(), o.OnPremisesNetBiosName.IsSet()
}

// HasOnPremisesNetBiosName returns a boolean if a field has been set.
func (o *Group) HasOnPremisesNetBiosName() bool {
	if o != nil && o.OnPremisesNetBiosName.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesNetBiosName gets a reference to the given NullableString and assigns it to the OnPremisesNetBiosName field.
func (o *Group) SetOnPremisesNetBiosName(v string) {
	o.OnPremisesNetBiosName.Set(&v)
}
// SetOnPremisesNetBiosNameNil sets the value for OnPremisesNetBiosName to be an explicit nil
func (o *Group) SetOnPremisesNetBiosNameNil() {
	o.OnPremisesNetBiosName.Set(nil)
}

// UnsetOnPremisesNetBiosName ensures that no value is present for OnPremisesNetBiosName, not even an explicit nil
func (o *Group) UnsetOnPremisesNetBiosName() {
	o.OnPremisesNetBiosName.Unset()
}

// GetOnPremisesProvisioningErrors returns the OnPremisesProvisioningErrors field value if set, zero value otherwise.
func (o *Group) GetOnPremisesProvisioningErrors() []*AnyOfmicrosoftGraphOnPremisesProvisioningError {
	if o == nil || o.OnPremisesProvisioningErrors == nil {
		var ret []*AnyOfmicrosoftGraphOnPremisesProvisioningError
		return ret
	}
	return *o.OnPremisesProvisioningErrors
}

// GetOnPremisesProvisioningErrorsOk returns a tuple with the OnPremisesProvisioningErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetOnPremisesProvisioningErrorsOk() (*[]*AnyOfmicrosoftGraphOnPremisesProvisioningError, bool) {
	if o == nil || o.OnPremisesProvisioningErrors == nil {
		return nil, false
	}
	return o.OnPremisesProvisioningErrors, true
}

// HasOnPremisesProvisioningErrors returns a boolean if a field has been set.
func (o *Group) HasOnPremisesProvisioningErrors() bool {
	if o != nil && o.OnPremisesProvisioningErrors != nil {
		return true
	}

	return false
}

// SetOnPremisesProvisioningErrors gets a reference to the given []*AnyOfmicrosoftGraphOnPremisesProvisioningError and assigns it to the OnPremisesProvisioningErrors field.
func (o *Group) SetOnPremisesProvisioningErrors(v []*AnyOfmicrosoftGraphOnPremisesProvisioningError) {
	o.OnPremisesProvisioningErrors = &v
}

// GetOnPremisesSamAccountName returns the OnPremisesSamAccountName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetOnPremisesSamAccountName() string {
	if o == nil || o.OnPremisesSamAccountName.Get() == nil {
		var ret string
		return ret
	}
	return *o.OnPremisesSamAccountName.Get()
}

// GetOnPremisesSamAccountNameOk returns a tuple with the OnPremisesSamAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetOnPremisesSamAccountNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesSamAccountName.Get(), o.OnPremisesSamAccountName.IsSet()
}

// HasOnPremisesSamAccountName returns a boolean if a field has been set.
func (o *Group) HasOnPremisesSamAccountName() bool {
	if o != nil && o.OnPremisesSamAccountName.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesSamAccountName gets a reference to the given NullableString and assigns it to the OnPremisesSamAccountName field.
func (o *Group) SetOnPremisesSamAccountName(v string) {
	o.OnPremisesSamAccountName.Set(&v)
}
// SetOnPremisesSamAccountNameNil sets the value for OnPremisesSamAccountName to be an explicit nil
func (o *Group) SetOnPremisesSamAccountNameNil() {
	o.OnPremisesSamAccountName.Set(nil)
}

// UnsetOnPremisesSamAccountName ensures that no value is present for OnPremisesSamAccountName, not even an explicit nil
func (o *Group) UnsetOnPremisesSamAccountName() {
	o.OnPremisesSamAccountName.Unset()
}

// GetOnPremisesSecurityIdentifier returns the OnPremisesSecurityIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetOnPremisesSecurityIdentifier() string {
	if o == nil || o.OnPremisesSecurityIdentifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.OnPremisesSecurityIdentifier.Get()
}

// GetOnPremisesSecurityIdentifierOk returns a tuple with the OnPremisesSecurityIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetOnPremisesSecurityIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesSecurityIdentifier.Get(), o.OnPremisesSecurityIdentifier.IsSet()
}

// HasOnPremisesSecurityIdentifier returns a boolean if a field has been set.
func (o *Group) HasOnPremisesSecurityIdentifier() bool {
	if o != nil && o.OnPremisesSecurityIdentifier.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesSecurityIdentifier gets a reference to the given NullableString and assigns it to the OnPremisesSecurityIdentifier field.
func (o *Group) SetOnPremisesSecurityIdentifier(v string) {
	o.OnPremisesSecurityIdentifier.Set(&v)
}
// SetOnPremisesSecurityIdentifierNil sets the value for OnPremisesSecurityIdentifier to be an explicit nil
func (o *Group) SetOnPremisesSecurityIdentifierNil() {
	o.OnPremisesSecurityIdentifier.Set(nil)
}

// UnsetOnPremisesSecurityIdentifier ensures that no value is present for OnPremisesSecurityIdentifier, not even an explicit nil
func (o *Group) UnsetOnPremisesSecurityIdentifier() {
	o.OnPremisesSecurityIdentifier.Unset()
}

// GetOnPremisesSyncEnabled returns the OnPremisesSyncEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetOnPremisesSyncEnabled() bool {
	if o == nil || o.OnPremisesSyncEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OnPremisesSyncEnabled.Get()
}

// GetOnPremisesSyncEnabledOk returns a tuple with the OnPremisesSyncEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetOnPremisesSyncEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnPremisesSyncEnabled.Get(), o.OnPremisesSyncEnabled.IsSet()
}

// HasOnPremisesSyncEnabled returns a boolean if a field has been set.
func (o *Group) HasOnPremisesSyncEnabled() bool {
	if o != nil && o.OnPremisesSyncEnabled.IsSet() {
		return true
	}

	return false
}

// SetOnPremisesSyncEnabled gets a reference to the given NullableBool and assigns it to the OnPremisesSyncEnabled field.
func (o *Group) SetOnPremisesSyncEnabled(v bool) {
	o.OnPremisesSyncEnabled.Set(&v)
}
// SetOnPremisesSyncEnabledNil sets the value for OnPremisesSyncEnabled to be an explicit nil
func (o *Group) SetOnPremisesSyncEnabledNil() {
	o.OnPremisesSyncEnabled.Set(nil)
}

// UnsetOnPremisesSyncEnabled ensures that no value is present for OnPremisesSyncEnabled, not even an explicit nil
func (o *Group) UnsetOnPremisesSyncEnabled() {
	o.OnPremisesSyncEnabled.Unset()
}

// GetPreferredDataLocation returns the PreferredDataLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetPreferredDataLocation() string {
	if o == nil || o.PreferredDataLocation.Get() == nil {
		var ret string
		return ret
	}
	return *o.PreferredDataLocation.Get()
}

// GetPreferredDataLocationOk returns a tuple with the PreferredDataLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetPreferredDataLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreferredDataLocation.Get(), o.PreferredDataLocation.IsSet()
}

// HasPreferredDataLocation returns a boolean if a field has been set.
func (o *Group) HasPreferredDataLocation() bool {
	if o != nil && o.PreferredDataLocation.IsSet() {
		return true
	}

	return false
}

// SetPreferredDataLocation gets a reference to the given NullableString and assigns it to the PreferredDataLocation field.
func (o *Group) SetPreferredDataLocation(v string) {
	o.PreferredDataLocation.Set(&v)
}
// SetPreferredDataLocationNil sets the value for PreferredDataLocation to be an explicit nil
func (o *Group) SetPreferredDataLocationNil() {
	o.PreferredDataLocation.Set(nil)
}

// UnsetPreferredDataLocation ensures that no value is present for PreferredDataLocation, not even an explicit nil
func (o *Group) UnsetPreferredDataLocation() {
	o.PreferredDataLocation.Unset()
}

// GetPreferredLanguage returns the PreferredLanguage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetPreferredLanguage() string {
	if o == nil || o.PreferredLanguage.Get() == nil {
		var ret string
		return ret
	}
	return *o.PreferredLanguage.Get()
}

// GetPreferredLanguageOk returns a tuple with the PreferredLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetPreferredLanguageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreferredLanguage.Get(), o.PreferredLanguage.IsSet()
}

// HasPreferredLanguage returns a boolean if a field has been set.
func (o *Group) HasPreferredLanguage() bool {
	if o != nil && o.PreferredLanguage.IsSet() {
		return true
	}

	return false
}

// SetPreferredLanguage gets a reference to the given NullableString and assigns it to the PreferredLanguage field.
func (o *Group) SetPreferredLanguage(v string) {
	o.PreferredLanguage.Set(&v)
}
// SetPreferredLanguageNil sets the value for PreferredLanguage to be an explicit nil
func (o *Group) SetPreferredLanguageNil() {
	o.PreferredLanguage.Set(nil)
}

// UnsetPreferredLanguage ensures that no value is present for PreferredLanguage, not even an explicit nil
func (o *Group) UnsetPreferredLanguage() {
	o.PreferredLanguage.Unset()
}

// GetProxyAddresses returns the ProxyAddresses field value if set, zero value otherwise.
func (o *Group) GetProxyAddresses() []string {
	if o == nil || o.ProxyAddresses == nil {
		var ret []string
		return ret
	}
	return *o.ProxyAddresses
}

// GetProxyAddressesOk returns a tuple with the ProxyAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetProxyAddressesOk() (*[]string, bool) {
	if o == nil || o.ProxyAddresses == nil {
		return nil, false
	}
	return o.ProxyAddresses, true
}

// HasProxyAddresses returns a boolean if a field has been set.
func (o *Group) HasProxyAddresses() bool {
	if o != nil && o.ProxyAddresses != nil {
		return true
	}

	return false
}

// SetProxyAddresses gets a reference to the given []string and assigns it to the ProxyAddresses field.
func (o *Group) SetProxyAddresses(v []string) {
	o.ProxyAddresses = &v
}

// GetRenewedDateTime returns the RenewedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetRenewedDateTime() time.Time {
	if o == nil || o.RenewedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.RenewedDateTime.Get()
}

// GetRenewedDateTimeOk returns a tuple with the RenewedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetRenewedDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RenewedDateTime.Get(), o.RenewedDateTime.IsSet()
}

// HasRenewedDateTime returns a boolean if a field has been set.
func (o *Group) HasRenewedDateTime() bool {
	if o != nil && o.RenewedDateTime.IsSet() {
		return true
	}

	return false
}

// SetRenewedDateTime gets a reference to the given NullableTime and assigns it to the RenewedDateTime field.
func (o *Group) SetRenewedDateTime(v time.Time) {
	o.RenewedDateTime.Set(&v)
}
// SetRenewedDateTimeNil sets the value for RenewedDateTime to be an explicit nil
func (o *Group) SetRenewedDateTimeNil() {
	o.RenewedDateTime.Set(nil)
}

// UnsetRenewedDateTime ensures that no value is present for RenewedDateTime, not even an explicit nil
func (o *Group) UnsetRenewedDateTime() {
	o.RenewedDateTime.Unset()
}

// GetSecurityEnabled returns the SecurityEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetSecurityEnabled() bool {
	if o == nil || o.SecurityEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SecurityEnabled.Get()
}

// GetSecurityEnabledOk returns a tuple with the SecurityEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetSecurityEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecurityEnabled.Get(), o.SecurityEnabled.IsSet()
}

// HasSecurityEnabled returns a boolean if a field has been set.
func (o *Group) HasSecurityEnabled() bool {
	if o != nil && o.SecurityEnabled.IsSet() {
		return true
	}

	return false
}

// SetSecurityEnabled gets a reference to the given NullableBool and assigns it to the SecurityEnabled field.
func (o *Group) SetSecurityEnabled(v bool) {
	o.SecurityEnabled.Set(&v)
}
// SetSecurityEnabledNil sets the value for SecurityEnabled to be an explicit nil
func (o *Group) SetSecurityEnabledNil() {
	o.SecurityEnabled.Set(nil)
}

// UnsetSecurityEnabled ensures that no value is present for SecurityEnabled, not even an explicit nil
func (o *Group) UnsetSecurityEnabled() {
	o.SecurityEnabled.Unset()
}

// GetSecurityIdentifier returns the SecurityIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetSecurityIdentifier() string {
	if o == nil || o.SecurityIdentifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecurityIdentifier.Get()
}

// GetSecurityIdentifierOk returns a tuple with the SecurityIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetSecurityIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecurityIdentifier.Get(), o.SecurityIdentifier.IsSet()
}

// HasSecurityIdentifier returns a boolean if a field has been set.
func (o *Group) HasSecurityIdentifier() bool {
	if o != nil && o.SecurityIdentifier.IsSet() {
		return true
	}

	return false
}

// SetSecurityIdentifier gets a reference to the given NullableString and assigns it to the SecurityIdentifier field.
func (o *Group) SetSecurityIdentifier(v string) {
	o.SecurityIdentifier.Set(&v)
}
// SetSecurityIdentifierNil sets the value for SecurityIdentifier to be an explicit nil
func (o *Group) SetSecurityIdentifierNil() {
	o.SecurityIdentifier.Set(nil)
}

// UnsetSecurityIdentifier ensures that no value is present for SecurityIdentifier, not even an explicit nil
func (o *Group) UnsetSecurityIdentifier() {
	o.SecurityIdentifier.Unset()
}

// GetTheme returns the Theme field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetTheme() string {
	if o == nil || o.Theme.Get() == nil {
		var ret string
		return ret
	}
	return *o.Theme.Get()
}

// GetThemeOk returns a tuple with the Theme field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetThemeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Theme.Get(), o.Theme.IsSet()
}

// HasTheme returns a boolean if a field has been set.
func (o *Group) HasTheme() bool {
	if o != nil && o.Theme.IsSet() {
		return true
	}

	return false
}

// SetTheme gets a reference to the given NullableString and assigns it to the Theme field.
func (o *Group) SetTheme(v string) {
	o.Theme.Set(&v)
}
// SetThemeNil sets the value for Theme to be an explicit nil
func (o *Group) SetThemeNil() {
	o.Theme.Set(nil)
}

// UnsetTheme ensures that no value is present for Theme, not even an explicit nil
func (o *Group) UnsetTheme() {
	o.Theme.Unset()
}

// GetVisibility returns the Visibility field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetVisibility() string {
	if o == nil || o.Visibility.Get() == nil {
		var ret string
		return ret
	}
	return *o.Visibility.Get()
}

// GetVisibilityOk returns a tuple with the Visibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetVisibilityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Visibility.Get(), o.Visibility.IsSet()
}

// HasVisibility returns a boolean if a field has been set.
func (o *Group) HasVisibility() bool {
	if o != nil && o.Visibility.IsSet() {
		return true
	}

	return false
}

// SetVisibility gets a reference to the given NullableString and assigns it to the Visibility field.
func (o *Group) SetVisibility(v string) {
	o.Visibility.Set(&v)
}
// SetVisibilityNil sets the value for Visibility to be an explicit nil
func (o *Group) SetVisibilityNil() {
	o.Visibility.Set(nil)
}

// UnsetVisibility ensures that no value is present for Visibility, not even an explicit nil
func (o *Group) UnsetVisibility() {
	o.Visibility.Unset()
}

// GetAllowExternalSenders returns the AllowExternalSenders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetAllowExternalSenders() bool {
	if o == nil || o.AllowExternalSenders.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AllowExternalSenders.Get()
}

// GetAllowExternalSendersOk returns a tuple with the AllowExternalSenders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetAllowExternalSendersOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AllowExternalSenders.Get(), o.AllowExternalSenders.IsSet()
}

// HasAllowExternalSenders returns a boolean if a field has been set.
func (o *Group) HasAllowExternalSenders() bool {
	if o != nil && o.AllowExternalSenders.IsSet() {
		return true
	}

	return false
}

// SetAllowExternalSenders gets a reference to the given NullableBool and assigns it to the AllowExternalSenders field.
func (o *Group) SetAllowExternalSenders(v bool) {
	o.AllowExternalSenders.Set(&v)
}
// SetAllowExternalSendersNil sets the value for AllowExternalSenders to be an explicit nil
func (o *Group) SetAllowExternalSendersNil() {
	o.AllowExternalSenders.Set(nil)
}

// UnsetAllowExternalSenders ensures that no value is present for AllowExternalSenders, not even an explicit nil
func (o *Group) UnsetAllowExternalSenders() {
	o.AllowExternalSenders.Unset()
}

// GetAutoSubscribeNewMembers returns the AutoSubscribeNewMembers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetAutoSubscribeNewMembers() bool {
	if o == nil || o.AutoSubscribeNewMembers.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AutoSubscribeNewMembers.Get()
}

// GetAutoSubscribeNewMembersOk returns a tuple with the AutoSubscribeNewMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetAutoSubscribeNewMembersOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AutoSubscribeNewMembers.Get(), o.AutoSubscribeNewMembers.IsSet()
}

// HasAutoSubscribeNewMembers returns a boolean if a field has been set.
func (o *Group) HasAutoSubscribeNewMembers() bool {
	if o != nil && o.AutoSubscribeNewMembers.IsSet() {
		return true
	}

	return false
}

// SetAutoSubscribeNewMembers gets a reference to the given NullableBool and assigns it to the AutoSubscribeNewMembers field.
func (o *Group) SetAutoSubscribeNewMembers(v bool) {
	o.AutoSubscribeNewMembers.Set(&v)
}
// SetAutoSubscribeNewMembersNil sets the value for AutoSubscribeNewMembers to be an explicit nil
func (o *Group) SetAutoSubscribeNewMembersNil() {
	o.AutoSubscribeNewMembers.Set(nil)
}

// UnsetAutoSubscribeNewMembers ensures that no value is present for AutoSubscribeNewMembers, not even an explicit nil
func (o *Group) UnsetAutoSubscribeNewMembers() {
	o.AutoSubscribeNewMembers.Unset()
}

// GetHideFromAddressLists returns the HideFromAddressLists field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetHideFromAddressLists() bool {
	if o == nil || o.HideFromAddressLists.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HideFromAddressLists.Get()
}

// GetHideFromAddressListsOk returns a tuple with the HideFromAddressLists field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetHideFromAddressListsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HideFromAddressLists.Get(), o.HideFromAddressLists.IsSet()
}

// HasHideFromAddressLists returns a boolean if a field has been set.
func (o *Group) HasHideFromAddressLists() bool {
	if o != nil && o.HideFromAddressLists.IsSet() {
		return true
	}

	return false
}

// SetHideFromAddressLists gets a reference to the given NullableBool and assigns it to the HideFromAddressLists field.
func (o *Group) SetHideFromAddressLists(v bool) {
	o.HideFromAddressLists.Set(&v)
}
// SetHideFromAddressListsNil sets the value for HideFromAddressLists to be an explicit nil
func (o *Group) SetHideFromAddressListsNil() {
	o.HideFromAddressLists.Set(nil)
}

// UnsetHideFromAddressLists ensures that no value is present for HideFromAddressLists, not even an explicit nil
func (o *Group) UnsetHideFromAddressLists() {
	o.HideFromAddressLists.Unset()
}

// GetHideFromOutlookClients returns the HideFromOutlookClients field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetHideFromOutlookClients() bool {
	if o == nil || o.HideFromOutlookClients.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HideFromOutlookClients.Get()
}

// GetHideFromOutlookClientsOk returns a tuple with the HideFromOutlookClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetHideFromOutlookClientsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HideFromOutlookClients.Get(), o.HideFromOutlookClients.IsSet()
}

// HasHideFromOutlookClients returns a boolean if a field has been set.
func (o *Group) HasHideFromOutlookClients() bool {
	if o != nil && o.HideFromOutlookClients.IsSet() {
		return true
	}

	return false
}

// SetHideFromOutlookClients gets a reference to the given NullableBool and assigns it to the HideFromOutlookClients field.
func (o *Group) SetHideFromOutlookClients(v bool) {
	o.HideFromOutlookClients.Set(&v)
}
// SetHideFromOutlookClientsNil sets the value for HideFromOutlookClients to be an explicit nil
func (o *Group) SetHideFromOutlookClientsNil() {
	o.HideFromOutlookClients.Set(nil)
}

// UnsetHideFromOutlookClients ensures that no value is present for HideFromOutlookClients, not even an explicit nil
func (o *Group) UnsetHideFromOutlookClients() {
	o.HideFromOutlookClients.Unset()
}

// GetIsSubscribedByMail returns the IsSubscribedByMail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetIsSubscribedByMail() bool {
	if o == nil || o.IsSubscribedByMail.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSubscribedByMail.Get()
}

// GetIsSubscribedByMailOk returns a tuple with the IsSubscribedByMail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetIsSubscribedByMailOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSubscribedByMail.Get(), o.IsSubscribedByMail.IsSet()
}

// HasIsSubscribedByMail returns a boolean if a field has been set.
func (o *Group) HasIsSubscribedByMail() bool {
	if o != nil && o.IsSubscribedByMail.IsSet() {
		return true
	}

	return false
}

// SetIsSubscribedByMail gets a reference to the given NullableBool and assigns it to the IsSubscribedByMail field.
func (o *Group) SetIsSubscribedByMail(v bool) {
	o.IsSubscribedByMail.Set(&v)
}
// SetIsSubscribedByMailNil sets the value for IsSubscribedByMail to be an explicit nil
func (o *Group) SetIsSubscribedByMailNil() {
	o.IsSubscribedByMail.Set(nil)
}

// UnsetIsSubscribedByMail ensures that no value is present for IsSubscribedByMail, not even an explicit nil
func (o *Group) UnsetIsSubscribedByMail() {
	o.IsSubscribedByMail.Unset()
}

// GetUnseenCount returns the UnseenCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetUnseenCount() int32 {
	if o == nil || o.UnseenCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.UnseenCount.Get()
}

// GetUnseenCountOk returns a tuple with the UnseenCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetUnseenCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnseenCount.Get(), o.UnseenCount.IsSet()
}

// HasUnseenCount returns a boolean if a field has been set.
func (o *Group) HasUnseenCount() bool {
	if o != nil && o.UnseenCount.IsSet() {
		return true
	}

	return false
}

// SetUnseenCount gets a reference to the given NullableInt32 and assigns it to the UnseenCount field.
func (o *Group) SetUnseenCount(v int32) {
	o.UnseenCount.Set(&v)
}
// SetUnseenCountNil sets the value for UnseenCount to be an explicit nil
func (o *Group) SetUnseenCountNil() {
	o.UnseenCount.Set(nil)
}

// UnsetUnseenCount ensures that no value is present for UnseenCount, not even an explicit nil
func (o *Group) UnsetUnseenCount() {
	o.UnseenCount.Unset()
}

// GetIsArchived returns the IsArchived field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetIsArchived() bool {
	if o == nil || o.IsArchived.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsArchived.Get()
}

// GetIsArchivedOk returns a tuple with the IsArchived field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetIsArchivedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsArchived.Get(), o.IsArchived.IsSet()
}

// HasIsArchived returns a boolean if a field has been set.
func (o *Group) HasIsArchived() bool {
	if o != nil && o.IsArchived.IsSet() {
		return true
	}

	return false
}

// SetIsArchived gets a reference to the given NullableBool and assigns it to the IsArchived field.
func (o *Group) SetIsArchived(v bool) {
	o.IsArchived.Set(&v)
}
// SetIsArchivedNil sets the value for IsArchived to be an explicit nil
func (o *Group) SetIsArchivedNil() {
	o.IsArchived.Set(nil)
}

// UnsetIsArchived ensures that no value is present for IsArchived, not even an explicit nil
func (o *Group) UnsetIsArchived() {
	o.IsArchived.Unset()
}

// GetAppRoleAssignments returns the AppRoleAssignments field value if set, zero value otherwise.
func (o *Group) GetAppRoleAssignments() []MicrosoftGraphAppRoleAssignment {
	if o == nil || o.AppRoleAssignments == nil {
		var ret []MicrosoftGraphAppRoleAssignment
		return ret
	}
	return *o.AppRoleAssignments
}

// GetAppRoleAssignmentsOk returns a tuple with the AppRoleAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetAppRoleAssignmentsOk() (*[]MicrosoftGraphAppRoleAssignment, bool) {
	if o == nil || o.AppRoleAssignments == nil {
		return nil, false
	}
	return o.AppRoleAssignments, true
}

// HasAppRoleAssignments returns a boolean if a field has been set.
func (o *Group) HasAppRoleAssignments() bool {
	if o != nil && o.AppRoleAssignments != nil {
		return true
	}

	return false
}

// SetAppRoleAssignments gets a reference to the given []MicrosoftGraphAppRoleAssignment and assigns it to the AppRoleAssignments field.
func (o *Group) SetAppRoleAssignments(v []MicrosoftGraphAppRoleAssignment) {
	o.AppRoleAssignments = &v
}

// GetCreatedOnBehalfOf returns the CreatedOnBehalfOf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetCreatedOnBehalfOf() AnyOfmicrosoftGraphDirectoryObject {
	if o == nil  {
		var ret AnyOfmicrosoftGraphDirectoryObject
		return ret
	}
	return o.CreatedOnBehalfOf
}

// GetCreatedOnBehalfOfOk returns a tuple with the CreatedOnBehalfOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetCreatedOnBehalfOfOk() (*AnyOfmicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.CreatedOnBehalfOf == nil {
		return nil, false
	}
	return &o.CreatedOnBehalfOf, true
}

// HasCreatedOnBehalfOf returns a boolean if a field has been set.
func (o *Group) HasCreatedOnBehalfOf() bool {
	if o != nil && o.CreatedOnBehalfOf != nil {
		return true
	}

	return false
}

// SetCreatedOnBehalfOf gets a reference to the given AnyOfmicrosoftGraphDirectoryObject and assigns it to the CreatedOnBehalfOf field.
func (o *Group) SetCreatedOnBehalfOf(v AnyOfmicrosoftGraphDirectoryObject) {
	o.CreatedOnBehalfOf = v
}

// GetMemberOf returns the MemberOf field value if set, zero value otherwise.
func (o *Group) GetMemberOf() []MicrosoftGraphDirectoryObject {
	if o == nil || o.MemberOf == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.MemberOf
}

// GetMemberOfOk returns a tuple with the MemberOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetMemberOfOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.MemberOf == nil {
		return nil, false
	}
	return o.MemberOf, true
}

// HasMemberOf returns a boolean if a field has been set.
func (o *Group) HasMemberOf() bool {
	if o != nil && o.MemberOf != nil {
		return true
	}

	return false
}

// SetMemberOf gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the MemberOf field.
func (o *Group) SetMemberOf(v []MicrosoftGraphDirectoryObject) {
	o.MemberOf = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *Group) GetMembers() []MicrosoftGraphDirectoryObject {
	if o == nil || o.Members == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetMembersOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.Members == nil {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *Group) HasMembers() bool {
	if o != nil && o.Members != nil {
		return true
	}

	return false
}

// SetMembers gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the Members field.
func (o *Group) SetMembers(v []MicrosoftGraphDirectoryObject) {
	o.Members = &v
}

// GetMembersWithLicenseErrors returns the MembersWithLicenseErrors field value if set, zero value otherwise.
func (o *Group) GetMembersWithLicenseErrors() []MicrosoftGraphDirectoryObject {
	if o == nil || o.MembersWithLicenseErrors == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.MembersWithLicenseErrors
}

// GetMembersWithLicenseErrorsOk returns a tuple with the MembersWithLicenseErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetMembersWithLicenseErrorsOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.MembersWithLicenseErrors == nil {
		return nil, false
	}
	return o.MembersWithLicenseErrors, true
}

// HasMembersWithLicenseErrors returns a boolean if a field has been set.
func (o *Group) HasMembersWithLicenseErrors() bool {
	if o != nil && o.MembersWithLicenseErrors != nil {
		return true
	}

	return false
}

// SetMembersWithLicenseErrors gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the MembersWithLicenseErrors field.
func (o *Group) SetMembersWithLicenseErrors(v []MicrosoftGraphDirectoryObject) {
	o.MembersWithLicenseErrors = &v
}

// GetOwners returns the Owners field value if set, zero value otherwise.
func (o *Group) GetOwners() []MicrosoftGraphDirectoryObject {
	if o == nil || o.Owners == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.Owners
}

// GetOwnersOk returns a tuple with the Owners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetOwnersOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.Owners == nil {
		return nil, false
	}
	return o.Owners, true
}

// HasOwners returns a boolean if a field has been set.
func (o *Group) HasOwners() bool {
	if o != nil && o.Owners != nil {
		return true
	}

	return false
}

// SetOwners gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the Owners field.
func (o *Group) SetOwners(v []MicrosoftGraphDirectoryObject) {
	o.Owners = &v
}

// GetPermissionGrants returns the PermissionGrants field value if set, zero value otherwise.
func (o *Group) GetPermissionGrants() []MicrosoftGraphResourceSpecificPermissionGrant {
	if o == nil || o.PermissionGrants == nil {
		var ret []MicrosoftGraphResourceSpecificPermissionGrant
		return ret
	}
	return *o.PermissionGrants
}

// GetPermissionGrantsOk returns a tuple with the PermissionGrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetPermissionGrantsOk() (*[]MicrosoftGraphResourceSpecificPermissionGrant, bool) {
	if o == nil || o.PermissionGrants == nil {
		return nil, false
	}
	return o.PermissionGrants, true
}

// HasPermissionGrants returns a boolean if a field has been set.
func (o *Group) HasPermissionGrants() bool {
	if o != nil && o.PermissionGrants != nil {
		return true
	}

	return false
}

// SetPermissionGrants gets a reference to the given []MicrosoftGraphResourceSpecificPermissionGrant and assigns it to the PermissionGrants field.
func (o *Group) SetPermissionGrants(v []MicrosoftGraphResourceSpecificPermissionGrant) {
	o.PermissionGrants = &v
}

// GetSettings returns the Settings field value if set, zero value otherwise.
func (o *Group) GetSettings() []MicrosoftGraphGroupSetting {
	if o == nil || o.Settings == nil {
		var ret []MicrosoftGraphGroupSetting
		return ret
	}
	return *o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetSettingsOk() (*[]MicrosoftGraphGroupSetting, bool) {
	if o == nil || o.Settings == nil {
		return nil, false
	}
	return o.Settings, true
}

// HasSettings returns a boolean if a field has been set.
func (o *Group) HasSettings() bool {
	if o != nil && o.Settings != nil {
		return true
	}

	return false
}

// SetSettings gets a reference to the given []MicrosoftGraphGroupSetting and assigns it to the Settings field.
func (o *Group) SetSettings(v []MicrosoftGraphGroupSetting) {
	o.Settings = &v
}

// GetTransitiveMemberOf returns the TransitiveMemberOf field value if set, zero value otherwise.
func (o *Group) GetTransitiveMemberOf() []MicrosoftGraphDirectoryObject {
	if o == nil || o.TransitiveMemberOf == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.TransitiveMemberOf
}

// GetTransitiveMemberOfOk returns a tuple with the TransitiveMemberOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetTransitiveMemberOfOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.TransitiveMemberOf == nil {
		return nil, false
	}
	return o.TransitiveMemberOf, true
}

// HasTransitiveMemberOf returns a boolean if a field has been set.
func (o *Group) HasTransitiveMemberOf() bool {
	if o != nil && o.TransitiveMemberOf != nil {
		return true
	}

	return false
}

// SetTransitiveMemberOf gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the TransitiveMemberOf field.
func (o *Group) SetTransitiveMemberOf(v []MicrosoftGraphDirectoryObject) {
	o.TransitiveMemberOf = &v
}

// GetTransitiveMembers returns the TransitiveMembers field value if set, zero value otherwise.
func (o *Group) GetTransitiveMembers() []MicrosoftGraphDirectoryObject {
	if o == nil || o.TransitiveMembers == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.TransitiveMembers
}

// GetTransitiveMembersOk returns a tuple with the TransitiveMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetTransitiveMembersOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.TransitiveMembers == nil {
		return nil, false
	}
	return o.TransitiveMembers, true
}

// HasTransitiveMembers returns a boolean if a field has been set.
func (o *Group) HasTransitiveMembers() bool {
	if o != nil && o.TransitiveMembers != nil {
		return true
	}

	return false
}

// SetTransitiveMembers gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the TransitiveMembers field.
func (o *Group) SetTransitiveMembers(v []MicrosoftGraphDirectoryObject) {
	o.TransitiveMembers = &v
}

// GetAcceptedSenders returns the AcceptedSenders field value if set, zero value otherwise.
func (o *Group) GetAcceptedSenders() []MicrosoftGraphDirectoryObject {
	if o == nil || o.AcceptedSenders == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.AcceptedSenders
}

// GetAcceptedSendersOk returns a tuple with the AcceptedSenders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetAcceptedSendersOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.AcceptedSenders == nil {
		return nil, false
	}
	return o.AcceptedSenders, true
}

// HasAcceptedSenders returns a boolean if a field has been set.
func (o *Group) HasAcceptedSenders() bool {
	if o != nil && o.AcceptedSenders != nil {
		return true
	}

	return false
}

// SetAcceptedSenders gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the AcceptedSenders field.
func (o *Group) SetAcceptedSenders(v []MicrosoftGraphDirectoryObject) {
	o.AcceptedSenders = &v
}

// GetCalendar returns the Calendar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetCalendar() AnyOfmicrosoftGraphCalendar {
	if o == nil  {
		var ret AnyOfmicrosoftGraphCalendar
		return ret
	}
	return o.Calendar
}

// GetCalendarOk returns a tuple with the Calendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetCalendarOk() (*AnyOfmicrosoftGraphCalendar, bool) {
	if o == nil || o.Calendar == nil {
		return nil, false
	}
	return &o.Calendar, true
}

// HasCalendar returns a boolean if a field has been set.
func (o *Group) HasCalendar() bool {
	if o != nil && o.Calendar != nil {
		return true
	}

	return false
}

// SetCalendar gets a reference to the given AnyOfmicrosoftGraphCalendar and assigns it to the Calendar field.
func (o *Group) SetCalendar(v AnyOfmicrosoftGraphCalendar) {
	o.Calendar = v
}

// GetCalendarView returns the CalendarView field value if set, zero value otherwise.
func (o *Group) GetCalendarView() []MicrosoftGraphEvent {
	if o == nil || o.CalendarView == nil {
		var ret []MicrosoftGraphEvent
		return ret
	}
	return *o.CalendarView
}

// GetCalendarViewOk returns a tuple with the CalendarView field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetCalendarViewOk() (*[]MicrosoftGraphEvent, bool) {
	if o == nil || o.CalendarView == nil {
		return nil, false
	}
	return o.CalendarView, true
}

// HasCalendarView returns a boolean if a field has been set.
func (o *Group) HasCalendarView() bool {
	if o != nil && o.CalendarView != nil {
		return true
	}

	return false
}

// SetCalendarView gets a reference to the given []MicrosoftGraphEvent and assigns it to the CalendarView field.
func (o *Group) SetCalendarView(v []MicrosoftGraphEvent) {
	o.CalendarView = &v
}

// GetConversations returns the Conversations field value if set, zero value otherwise.
func (o *Group) GetConversations() []MicrosoftGraphConversation {
	if o == nil || o.Conversations == nil {
		var ret []MicrosoftGraphConversation
		return ret
	}
	return *o.Conversations
}

// GetConversationsOk returns a tuple with the Conversations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetConversationsOk() (*[]MicrosoftGraphConversation, bool) {
	if o == nil || o.Conversations == nil {
		return nil, false
	}
	return o.Conversations, true
}

// HasConversations returns a boolean if a field has been set.
func (o *Group) HasConversations() bool {
	if o != nil && o.Conversations != nil {
		return true
	}

	return false
}

// SetConversations gets a reference to the given []MicrosoftGraphConversation and assigns it to the Conversations field.
func (o *Group) SetConversations(v []MicrosoftGraphConversation) {
	o.Conversations = &v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *Group) GetEvents() []MicrosoftGraphEvent {
	if o == nil || o.Events == nil {
		var ret []MicrosoftGraphEvent
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetEventsOk() (*[]MicrosoftGraphEvent, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *Group) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []MicrosoftGraphEvent and assigns it to the Events field.
func (o *Group) SetEvents(v []MicrosoftGraphEvent) {
	o.Events = &v
}

// GetPhoto returns the Photo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetPhoto() AnyOfmicrosoftGraphProfilePhoto {
	if o == nil  {
		var ret AnyOfmicrosoftGraphProfilePhoto
		return ret
	}
	return o.Photo
}

// GetPhotoOk returns a tuple with the Photo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetPhotoOk() (*AnyOfmicrosoftGraphProfilePhoto, bool) {
	if o == nil || o.Photo == nil {
		return nil, false
	}
	return &o.Photo, true
}

// HasPhoto returns a boolean if a field has been set.
func (o *Group) HasPhoto() bool {
	if o != nil && o.Photo != nil {
		return true
	}

	return false
}

// SetPhoto gets a reference to the given AnyOfmicrosoftGraphProfilePhoto and assigns it to the Photo field.
func (o *Group) SetPhoto(v AnyOfmicrosoftGraphProfilePhoto) {
	o.Photo = v
}

// GetPhotos returns the Photos field value if set, zero value otherwise.
func (o *Group) GetPhotos() []MicrosoftGraphProfilePhoto {
	if o == nil || o.Photos == nil {
		var ret []MicrosoftGraphProfilePhoto
		return ret
	}
	return *o.Photos
}

// GetPhotosOk returns a tuple with the Photos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetPhotosOk() (*[]MicrosoftGraphProfilePhoto, bool) {
	if o == nil || o.Photos == nil {
		return nil, false
	}
	return o.Photos, true
}

// HasPhotos returns a boolean if a field has been set.
func (o *Group) HasPhotos() bool {
	if o != nil && o.Photos != nil {
		return true
	}

	return false
}

// SetPhotos gets a reference to the given []MicrosoftGraphProfilePhoto and assigns it to the Photos field.
func (o *Group) SetPhotos(v []MicrosoftGraphProfilePhoto) {
	o.Photos = &v
}

// GetRejectedSenders returns the RejectedSenders field value if set, zero value otherwise.
func (o *Group) GetRejectedSenders() []MicrosoftGraphDirectoryObject {
	if o == nil || o.RejectedSenders == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.RejectedSenders
}

// GetRejectedSendersOk returns a tuple with the RejectedSenders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetRejectedSendersOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.RejectedSenders == nil {
		return nil, false
	}
	return o.RejectedSenders, true
}

// HasRejectedSenders returns a boolean if a field has been set.
func (o *Group) HasRejectedSenders() bool {
	if o != nil && o.RejectedSenders != nil {
		return true
	}

	return false
}

// SetRejectedSenders gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the RejectedSenders field.
func (o *Group) SetRejectedSenders(v []MicrosoftGraphDirectoryObject) {
	o.RejectedSenders = &v
}

// GetThreads returns the Threads field value if set, zero value otherwise.
func (o *Group) GetThreads() []MicrosoftGraphConversationThread {
	if o == nil || o.Threads == nil {
		var ret []MicrosoftGraphConversationThread
		return ret
	}
	return *o.Threads
}

// GetThreadsOk returns a tuple with the Threads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetThreadsOk() (*[]MicrosoftGraphConversationThread, bool) {
	if o == nil || o.Threads == nil {
		return nil, false
	}
	return o.Threads, true
}

// HasThreads returns a boolean if a field has been set.
func (o *Group) HasThreads() bool {
	if o != nil && o.Threads != nil {
		return true
	}

	return false
}

// SetThreads gets a reference to the given []MicrosoftGraphConversationThread and assigns it to the Threads field.
func (o *Group) SetThreads(v []MicrosoftGraphConversationThread) {
	o.Threads = &v
}

// GetDrive returns the Drive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetDrive() AnyOfmicrosoftGraphDrive {
	if o == nil  {
		var ret AnyOfmicrosoftGraphDrive
		return ret
	}
	return o.Drive
}

// GetDriveOk returns a tuple with the Drive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetDriveOk() (*AnyOfmicrosoftGraphDrive, bool) {
	if o == nil || o.Drive == nil {
		return nil, false
	}
	return &o.Drive, true
}

// HasDrive returns a boolean if a field has been set.
func (o *Group) HasDrive() bool {
	if o != nil && o.Drive != nil {
		return true
	}

	return false
}

// SetDrive gets a reference to the given AnyOfmicrosoftGraphDrive and assigns it to the Drive field.
func (o *Group) SetDrive(v AnyOfmicrosoftGraphDrive) {
	o.Drive = v
}

// GetDrives returns the Drives field value if set, zero value otherwise.
func (o *Group) GetDrives() []MicrosoftGraphDrive {
	if o == nil || o.Drives == nil {
		var ret []MicrosoftGraphDrive
		return ret
	}
	return *o.Drives
}

// GetDrivesOk returns a tuple with the Drives field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetDrivesOk() (*[]MicrosoftGraphDrive, bool) {
	if o == nil || o.Drives == nil {
		return nil, false
	}
	return o.Drives, true
}

// HasDrives returns a boolean if a field has been set.
func (o *Group) HasDrives() bool {
	if o != nil && o.Drives != nil {
		return true
	}

	return false
}

// SetDrives gets a reference to the given []MicrosoftGraphDrive and assigns it to the Drives field.
func (o *Group) SetDrives(v []MicrosoftGraphDrive) {
	o.Drives = &v
}

// GetSites returns the Sites field value if set, zero value otherwise.
func (o *Group) GetSites() []MicrosoftGraphSite {
	if o == nil || o.Sites == nil {
		var ret []MicrosoftGraphSite
		return ret
	}
	return *o.Sites
}

// GetSitesOk returns a tuple with the Sites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetSitesOk() (*[]MicrosoftGraphSite, bool) {
	if o == nil || o.Sites == nil {
		return nil, false
	}
	return o.Sites, true
}

// HasSites returns a boolean if a field has been set.
func (o *Group) HasSites() bool {
	if o != nil && o.Sites != nil {
		return true
	}

	return false
}

// SetSites gets a reference to the given []MicrosoftGraphSite and assigns it to the Sites field.
func (o *Group) SetSites(v []MicrosoftGraphSite) {
	o.Sites = &v
}

// GetExtensions returns the Extensions field value if set, zero value otherwise.
func (o *Group) GetExtensions() []MicrosoftGraphExtension {
	if o == nil || o.Extensions == nil {
		var ret []MicrosoftGraphExtension
		return ret
	}
	return *o.Extensions
}

// GetExtensionsOk returns a tuple with the Extensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetExtensionsOk() (*[]MicrosoftGraphExtension, bool) {
	if o == nil || o.Extensions == nil {
		return nil, false
	}
	return o.Extensions, true
}

// HasExtensions returns a boolean if a field has been set.
func (o *Group) HasExtensions() bool {
	if o != nil && o.Extensions != nil {
		return true
	}

	return false
}

// SetExtensions gets a reference to the given []MicrosoftGraphExtension and assigns it to the Extensions field.
func (o *Group) SetExtensions(v []MicrosoftGraphExtension) {
	o.Extensions = &v
}

// GetGroupLifecyclePolicies returns the GroupLifecyclePolicies field value if set, zero value otherwise.
func (o *Group) GetGroupLifecyclePolicies() []MicrosoftGraphGroupLifecyclePolicy {
	if o == nil || o.GroupLifecyclePolicies == nil {
		var ret []MicrosoftGraphGroupLifecyclePolicy
		return ret
	}
	return *o.GroupLifecyclePolicies
}

// GetGroupLifecyclePoliciesOk returns a tuple with the GroupLifecyclePolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Group) GetGroupLifecyclePoliciesOk() (*[]MicrosoftGraphGroupLifecyclePolicy, bool) {
	if o == nil || o.GroupLifecyclePolicies == nil {
		return nil, false
	}
	return o.GroupLifecyclePolicies, true
}

// HasGroupLifecyclePolicies returns a boolean if a field has been set.
func (o *Group) HasGroupLifecyclePolicies() bool {
	if o != nil && o.GroupLifecyclePolicies != nil {
		return true
	}

	return false
}

// SetGroupLifecyclePolicies gets a reference to the given []MicrosoftGraphGroupLifecyclePolicy and assigns it to the GroupLifecyclePolicies field.
func (o *Group) SetGroupLifecyclePolicies(v []MicrosoftGraphGroupLifecyclePolicy) {
	o.GroupLifecyclePolicies = &v
}

// GetPlanner returns the Planner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetPlanner() AnyOfmicrosoftGraphPlannerGroup {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPlannerGroup
		return ret
	}
	return o.Planner
}

// GetPlannerOk returns a tuple with the Planner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetPlannerOk() (*AnyOfmicrosoftGraphPlannerGroup, bool) {
	if o == nil || o.Planner == nil {
		return nil, false
	}
	return &o.Planner, true
}

// HasPlanner returns a boolean if a field has been set.
func (o *Group) HasPlanner() bool {
	if o != nil && o.Planner != nil {
		return true
	}

	return false
}

// SetPlanner gets a reference to the given AnyOfmicrosoftGraphPlannerGroup and assigns it to the Planner field.
func (o *Group) SetPlanner(v AnyOfmicrosoftGraphPlannerGroup) {
	o.Planner = v
}

// GetOnenote returns the Onenote field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetOnenote() AnyOfmicrosoftGraphOnenote {
	if o == nil  {
		var ret AnyOfmicrosoftGraphOnenote
		return ret
	}
	return o.Onenote
}

// GetOnenoteOk returns a tuple with the Onenote field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetOnenoteOk() (*AnyOfmicrosoftGraphOnenote, bool) {
	if o == nil || o.Onenote == nil {
		return nil, false
	}
	return &o.Onenote, true
}

// HasOnenote returns a boolean if a field has been set.
func (o *Group) HasOnenote() bool {
	if o != nil && o.Onenote != nil {
		return true
	}

	return false
}

// SetOnenote gets a reference to the given AnyOfmicrosoftGraphOnenote and assigns it to the Onenote field.
func (o *Group) SetOnenote(v AnyOfmicrosoftGraphOnenote) {
	o.Onenote = v
}

// GetTeam returns the Team field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Group) GetTeam() AnyOfmicrosoftGraphTeam {
	if o == nil  {
		var ret AnyOfmicrosoftGraphTeam
		return ret
	}
	return o.Team
}

// GetTeamOk returns a tuple with the Team field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Group) GetTeamOk() (*AnyOfmicrosoftGraphTeam, bool) {
	if o == nil || o.Team == nil {
		return nil, false
	}
	return &o.Team, true
}

// HasTeam returns a boolean if a field has been set.
func (o *Group) HasTeam() bool {
	if o != nil && o.Team != nil {
		return true
	}

	return false
}

// SetTeam gets a reference to the given AnyOfmicrosoftGraphTeam and assigns it to the Team field.
func (o *Group) SetTeam(v AnyOfmicrosoftGraphTeam) {
	o.Team = v
}

func (o Group) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AssignedLabels != nil {
		toSerialize["assignedLabels"] = o.AssignedLabels
	}
	if o.AssignedLicenses != nil {
		toSerialize["assignedLicenses"] = o.AssignedLicenses
	}
	if o.Classification.IsSet() {
		toSerialize["classification"] = o.Classification.Get()
	}
	if o.CreatedDateTime.IsSet() {
		toSerialize["createdDateTime"] = o.CreatedDateTime.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.ExpirationDateTime.IsSet() {
		toSerialize["expirationDateTime"] = o.ExpirationDateTime.Get()
	}
	if o.GroupTypes != nil {
		toSerialize["groupTypes"] = o.GroupTypes
	}
	if o.HasMembersWithLicenseErrors.IsSet() {
		toSerialize["hasMembersWithLicenseErrors"] = o.HasMembersWithLicenseErrors.Get()
	}
	if o.IsAssignableToRole.IsSet() {
		toSerialize["isAssignableToRole"] = o.IsAssignableToRole.Get()
	}
	if o.LicenseProcessingState != nil {
		toSerialize["licenseProcessingState"] = o.LicenseProcessingState
	}
	if o.Mail.IsSet() {
		toSerialize["mail"] = o.Mail.Get()
	}
	if o.MailEnabled.IsSet() {
		toSerialize["mailEnabled"] = o.MailEnabled.Get()
	}
	if o.MailNickname.IsSet() {
		toSerialize["mailNickname"] = o.MailNickname.Get()
	}
	if o.MembershipRule.IsSet() {
		toSerialize["membershipRule"] = o.MembershipRule.Get()
	}
	if o.MembershipRuleProcessingState.IsSet() {
		toSerialize["membershipRuleProcessingState"] = o.MembershipRuleProcessingState.Get()
	}
	if o.OnPremisesDomainName.IsSet() {
		toSerialize["onPremisesDomainName"] = o.OnPremisesDomainName.Get()
	}
	if o.OnPremisesLastSyncDateTime.IsSet() {
		toSerialize["onPremisesLastSyncDateTime"] = o.OnPremisesLastSyncDateTime.Get()
	}
	if o.OnPremisesNetBiosName.IsSet() {
		toSerialize["onPremisesNetBiosName"] = o.OnPremisesNetBiosName.Get()
	}
	if o.OnPremisesProvisioningErrors != nil {
		toSerialize["onPremisesProvisioningErrors"] = o.OnPremisesProvisioningErrors
	}
	if o.OnPremisesSamAccountName.IsSet() {
		toSerialize["onPremisesSamAccountName"] = o.OnPremisesSamAccountName.Get()
	}
	if o.OnPremisesSecurityIdentifier.IsSet() {
		toSerialize["onPremisesSecurityIdentifier"] = o.OnPremisesSecurityIdentifier.Get()
	}
	if o.OnPremisesSyncEnabled.IsSet() {
		toSerialize["onPremisesSyncEnabled"] = o.OnPremisesSyncEnabled.Get()
	}
	if o.PreferredDataLocation.IsSet() {
		toSerialize["preferredDataLocation"] = o.PreferredDataLocation.Get()
	}
	if o.PreferredLanguage.IsSet() {
		toSerialize["preferredLanguage"] = o.PreferredLanguage.Get()
	}
	if o.ProxyAddresses != nil {
		toSerialize["proxyAddresses"] = o.ProxyAddresses
	}
	if o.RenewedDateTime.IsSet() {
		toSerialize["renewedDateTime"] = o.RenewedDateTime.Get()
	}
	if o.SecurityEnabled.IsSet() {
		toSerialize["securityEnabled"] = o.SecurityEnabled.Get()
	}
	if o.SecurityIdentifier.IsSet() {
		toSerialize["securityIdentifier"] = o.SecurityIdentifier.Get()
	}
	if o.Theme.IsSet() {
		toSerialize["theme"] = o.Theme.Get()
	}
	if o.Visibility.IsSet() {
		toSerialize["visibility"] = o.Visibility.Get()
	}
	if o.AllowExternalSenders.IsSet() {
		toSerialize["allowExternalSenders"] = o.AllowExternalSenders.Get()
	}
	if o.AutoSubscribeNewMembers.IsSet() {
		toSerialize["autoSubscribeNewMembers"] = o.AutoSubscribeNewMembers.Get()
	}
	if o.HideFromAddressLists.IsSet() {
		toSerialize["hideFromAddressLists"] = o.HideFromAddressLists.Get()
	}
	if o.HideFromOutlookClients.IsSet() {
		toSerialize["hideFromOutlookClients"] = o.HideFromOutlookClients.Get()
	}
	if o.IsSubscribedByMail.IsSet() {
		toSerialize["isSubscribedByMail"] = o.IsSubscribedByMail.Get()
	}
	if o.UnseenCount.IsSet() {
		toSerialize["unseenCount"] = o.UnseenCount.Get()
	}
	if o.IsArchived.IsSet() {
		toSerialize["isArchived"] = o.IsArchived.Get()
	}
	if o.AppRoleAssignments != nil {
		toSerialize["appRoleAssignments"] = o.AppRoleAssignments
	}
	if o.CreatedOnBehalfOf != nil {
		toSerialize["createdOnBehalfOf"] = o.CreatedOnBehalfOf
	}
	if o.MemberOf != nil {
		toSerialize["memberOf"] = o.MemberOf
	}
	if o.Members != nil {
		toSerialize["members"] = o.Members
	}
	if o.MembersWithLicenseErrors != nil {
		toSerialize["membersWithLicenseErrors"] = o.MembersWithLicenseErrors
	}
	if o.Owners != nil {
		toSerialize["owners"] = o.Owners
	}
	if o.PermissionGrants != nil {
		toSerialize["permissionGrants"] = o.PermissionGrants
	}
	if o.Settings != nil {
		toSerialize["settings"] = o.Settings
	}
	if o.TransitiveMemberOf != nil {
		toSerialize["transitiveMemberOf"] = o.TransitiveMemberOf
	}
	if o.TransitiveMembers != nil {
		toSerialize["transitiveMembers"] = o.TransitiveMembers
	}
	if o.AcceptedSenders != nil {
		toSerialize["acceptedSenders"] = o.AcceptedSenders
	}
	if o.Calendar != nil {
		toSerialize["calendar"] = o.Calendar
	}
	if o.CalendarView != nil {
		toSerialize["calendarView"] = o.CalendarView
	}
	if o.Conversations != nil {
		toSerialize["conversations"] = o.Conversations
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.Photo != nil {
		toSerialize["photo"] = o.Photo
	}
	if o.Photos != nil {
		toSerialize["photos"] = o.Photos
	}
	if o.RejectedSenders != nil {
		toSerialize["rejectedSenders"] = o.RejectedSenders
	}
	if o.Threads != nil {
		toSerialize["threads"] = o.Threads
	}
	if o.Drive != nil {
		toSerialize["drive"] = o.Drive
	}
	if o.Drives != nil {
		toSerialize["drives"] = o.Drives
	}
	if o.Sites != nil {
		toSerialize["sites"] = o.Sites
	}
	if o.Extensions != nil {
		toSerialize["extensions"] = o.Extensions
	}
	if o.GroupLifecyclePolicies != nil {
		toSerialize["groupLifecyclePolicies"] = o.GroupLifecyclePolicies
	}
	if o.Planner != nil {
		toSerialize["planner"] = o.Planner
	}
	if o.Onenote != nil {
		toSerialize["onenote"] = o.Onenote
	}
	if o.Team != nil {
		toSerialize["team"] = o.Team
	}
	return json.Marshal(toSerialize)
}

type NullableGroup struct {
	value *Group
	isSet bool
}

func (v NullableGroup) Get() *Group {
	return v.value
}

func (v *NullableGroup) Set(val *Group) {
	v.value = val
	v.isSet = true
}

func (v NullableGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroup(val *Group) *NullableGroup {
	return &NullableGroup{value: val, isSet: true}
}

func (v NullableGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


