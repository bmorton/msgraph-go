/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AgreementsAgreementFileLocalizationApiService AgreementsAgreementFileLocalizationApi service
type AgreementsAgreementFileLocalizationApiService service

type ApiAgreementsCreateFilesRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileLocalizationApiService
	agreementId string
	microsoftGraphAgreementFileLocalization *MicrosoftGraphAgreementFileLocalization
}

// New navigation property
func (r ApiAgreementsCreateFilesRequest) MicrosoftGraphAgreementFileLocalization(microsoftGraphAgreementFileLocalization MicrosoftGraphAgreementFileLocalization) ApiAgreementsCreateFilesRequest {
	r.microsoftGraphAgreementFileLocalization = &microsoftGraphAgreementFileLocalization
	return r
}

func (r ApiAgreementsCreateFilesRequest) Execute() (MicrosoftGraphAgreementFileLocalization, *_nethttp.Response, error) {
	return r.ApiService.AgreementsCreateFilesExecute(r)
}

/*
AgreementsCreateFiles Create new navigation property to files for agreements

PDFs linked to this agreement. This property is in the process of being deprecated. Use the  file property instead.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @return ApiAgreementsCreateFilesRequest
*/
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsCreateFiles(ctx _context.Context, agreementId string) ApiAgreementsCreateFilesRequest {
	return ApiAgreementsCreateFilesRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAgreementFileLocalization
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsCreateFilesExecute(r ApiAgreementsCreateFilesRequest) (MicrosoftGraphAgreementFileLocalization, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAgreementFileLocalization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileLocalizationApiService.AgreementsCreateFiles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAgreementFileLocalization == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAgreementFileLocalization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAgreementFileLocalization
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsDeleteFilesRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileLocalizationApiService
	agreementId string
	agreementFileLocalizationId string
	ifMatch *string
}

// ETag
func (r ApiAgreementsDeleteFilesRequest) IfMatch(ifMatch string) ApiAgreementsDeleteFilesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiAgreementsDeleteFilesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AgreementsDeleteFilesExecute(r)
}

/*
AgreementsDeleteFiles Delete navigation property files for agreements

PDFs linked to this agreement. This property is in the process of being deprecated. Use the  file property instead.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @return ApiAgreementsDeleteFilesRequest
*/
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsDeleteFiles(ctx _context.Context, agreementId string, agreementFileLocalizationId string) ApiAgreementsDeleteFilesRequest {
	return ApiAgreementsDeleteFilesRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
	}
}

// Execute executes the request
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsDeleteFilesExecute(r ApiAgreementsDeleteFilesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileLocalizationApiService.AgreementsDeleteFiles")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/files/{agreementFileLocalization-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAgreementsFilesCreateVersionsRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileLocalizationApiService
	agreementId string
	agreementFileLocalizationId string
	microsoftGraphAgreementFileVersion *MicrosoftGraphAgreementFileVersion
}

// New navigation property
func (r ApiAgreementsFilesCreateVersionsRequest) MicrosoftGraphAgreementFileVersion(microsoftGraphAgreementFileVersion MicrosoftGraphAgreementFileVersion) ApiAgreementsFilesCreateVersionsRequest {
	r.microsoftGraphAgreementFileVersion = &microsoftGraphAgreementFileVersion
	return r
}

func (r ApiAgreementsFilesCreateVersionsRequest) Execute() (MicrosoftGraphAgreementFileVersion, *_nethttp.Response, error) {
	return r.ApiService.AgreementsFilesCreateVersionsExecute(r)
}

/*
AgreementsFilesCreateVersions Create new navigation property to versions for agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @return ApiAgreementsFilesCreateVersionsRequest
*/
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsFilesCreateVersions(ctx _context.Context, agreementId string, agreementFileLocalizationId string) ApiAgreementsFilesCreateVersionsRequest {
	return ApiAgreementsFilesCreateVersionsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAgreementFileVersion
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsFilesCreateVersionsExecute(r ApiAgreementsFilesCreateVersionsRequest) (MicrosoftGraphAgreementFileVersion, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAgreementFileVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileLocalizationApiService.AgreementsFilesCreateVersions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/files/{agreementFileLocalization-id}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAgreementFileVersion == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAgreementFileVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAgreementFileVersion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsFilesDeleteVersionsRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileLocalizationApiService
	agreementId string
	agreementFileLocalizationId string
	agreementFileVersionId string
	ifMatch *string
}

// ETag
func (r ApiAgreementsFilesDeleteVersionsRequest) IfMatch(ifMatch string) ApiAgreementsFilesDeleteVersionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiAgreementsFilesDeleteVersionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AgreementsFilesDeleteVersionsExecute(r)
}

/*
AgreementsFilesDeleteVersions Delete navigation property versions for agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @param agreementFileVersionId key: id of agreementFileVersion
 @return ApiAgreementsFilesDeleteVersionsRequest
*/
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsFilesDeleteVersions(ctx _context.Context, agreementId string, agreementFileLocalizationId string, agreementFileVersionId string) ApiAgreementsFilesDeleteVersionsRequest {
	return ApiAgreementsFilesDeleteVersionsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
		agreementFileVersionId: agreementFileVersionId,
	}
}

// Execute executes the request
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsFilesDeleteVersionsExecute(r ApiAgreementsFilesDeleteVersionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileLocalizationApiService.AgreementsFilesDeleteVersions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/files/{agreementFileLocalization-id}/versions/{agreementFileVersion-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileVersion-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAgreementsFilesGetVersionsRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileLocalizationApiService
	agreementId string
	agreementFileLocalizationId string
	agreementFileVersionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiAgreementsFilesGetVersionsRequest) Select_(select_ []string) ApiAgreementsFilesGetVersionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAgreementsFilesGetVersionsRequest) Expand(expand []string) ApiAgreementsFilesGetVersionsRequest {
	r.expand = &expand
	return r
}

func (r ApiAgreementsFilesGetVersionsRequest) Execute() (MicrosoftGraphAgreementFileVersion, *_nethttp.Response, error) {
	return r.ApiService.AgreementsFilesGetVersionsExecute(r)
}

/*
AgreementsFilesGetVersions Get versions from agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @param agreementFileVersionId key: id of agreementFileVersion
 @return ApiAgreementsFilesGetVersionsRequest
*/
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsFilesGetVersions(ctx _context.Context, agreementId string, agreementFileLocalizationId string, agreementFileVersionId string) ApiAgreementsFilesGetVersionsRequest {
	return ApiAgreementsFilesGetVersionsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
		agreementFileVersionId: agreementFileVersionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAgreementFileVersion
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsFilesGetVersionsExecute(r ApiAgreementsFilesGetVersionsRequest) (MicrosoftGraphAgreementFileVersion, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAgreementFileVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileLocalizationApiService.AgreementsFilesGetVersions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/files/{agreementFileLocalization-id}/versions/{agreementFileVersion-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileVersion-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsFilesListVersionsRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileLocalizationApiService
	agreementId string
	agreementFileLocalizationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiAgreementsFilesListVersionsRequest) Top(top int32) ApiAgreementsFilesListVersionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiAgreementsFilesListVersionsRequest) Skip(skip int32) ApiAgreementsFilesListVersionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiAgreementsFilesListVersionsRequest) Search(search string) ApiAgreementsFilesListVersionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiAgreementsFilesListVersionsRequest) Filter(filter string) ApiAgreementsFilesListVersionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiAgreementsFilesListVersionsRequest) Count(count bool) ApiAgreementsFilesListVersionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiAgreementsFilesListVersionsRequest) Orderby(orderby []string) ApiAgreementsFilesListVersionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiAgreementsFilesListVersionsRequest) Select_(select_ []string) ApiAgreementsFilesListVersionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAgreementsFilesListVersionsRequest) Expand(expand []string) ApiAgreementsFilesListVersionsRequest {
	r.expand = &expand
	return r
}

func (r ApiAgreementsFilesListVersionsRequest) Execute() (CollectionOfAgreementFileVersion, *_nethttp.Response, error) {
	return r.ApiService.AgreementsFilesListVersionsExecute(r)
}

/*
AgreementsFilesListVersions Get versions from agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @return ApiAgreementsFilesListVersionsRequest
*/
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsFilesListVersions(ctx _context.Context, agreementId string, agreementFileLocalizationId string) ApiAgreementsFilesListVersionsRequest {
	return ApiAgreementsFilesListVersionsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
	}
}

// Execute executes the request
//  @return CollectionOfAgreementFileVersion
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsFilesListVersionsExecute(r ApiAgreementsFilesListVersionsRequest) (CollectionOfAgreementFileVersion, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAgreementFileVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileLocalizationApiService.AgreementsFilesListVersions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/files/{agreementFileLocalization-id}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsFilesUpdateVersionsRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileLocalizationApiService
	agreementId string
	agreementFileLocalizationId string
	agreementFileVersionId string
	microsoftGraphAgreementFileVersion *MicrosoftGraphAgreementFileVersion
}

// New navigation property values
func (r ApiAgreementsFilesUpdateVersionsRequest) MicrosoftGraphAgreementFileVersion(microsoftGraphAgreementFileVersion MicrosoftGraphAgreementFileVersion) ApiAgreementsFilesUpdateVersionsRequest {
	r.microsoftGraphAgreementFileVersion = &microsoftGraphAgreementFileVersion
	return r
}

func (r ApiAgreementsFilesUpdateVersionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AgreementsFilesUpdateVersionsExecute(r)
}

/*
AgreementsFilesUpdateVersions Update the navigation property versions in agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @param agreementFileVersionId key: id of agreementFileVersion
 @return ApiAgreementsFilesUpdateVersionsRequest
*/
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsFilesUpdateVersions(ctx _context.Context, agreementId string, agreementFileLocalizationId string, agreementFileVersionId string) ApiAgreementsFilesUpdateVersionsRequest {
	return ApiAgreementsFilesUpdateVersionsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
		agreementFileVersionId: agreementFileVersionId,
	}
}

// Execute executes the request
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsFilesUpdateVersionsExecute(r ApiAgreementsFilesUpdateVersionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileLocalizationApiService.AgreementsFilesUpdateVersions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/files/{agreementFileLocalization-id}/versions/{agreementFileVersion-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileVersion-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAgreementFileVersion == nil {
		return nil, reportError("microsoftGraphAgreementFileVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAgreementFileVersion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAgreementsGetFilesRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileLocalizationApiService
	agreementId string
	agreementFileLocalizationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiAgreementsGetFilesRequest) Select_(select_ []string) ApiAgreementsGetFilesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAgreementsGetFilesRequest) Expand(expand []string) ApiAgreementsGetFilesRequest {
	r.expand = &expand
	return r
}

func (r ApiAgreementsGetFilesRequest) Execute() (MicrosoftGraphAgreementFileLocalization, *_nethttp.Response, error) {
	return r.ApiService.AgreementsGetFilesExecute(r)
}

/*
AgreementsGetFiles Get files from agreements

PDFs linked to this agreement. This property is in the process of being deprecated. Use the  file property instead.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @return ApiAgreementsGetFilesRequest
*/
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsGetFiles(ctx _context.Context, agreementId string, agreementFileLocalizationId string) ApiAgreementsGetFilesRequest {
	return ApiAgreementsGetFilesRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAgreementFileLocalization
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsGetFilesExecute(r ApiAgreementsGetFilesRequest) (MicrosoftGraphAgreementFileLocalization, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAgreementFileLocalization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileLocalizationApiService.AgreementsGetFiles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/files/{agreementFileLocalization-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsListFilesRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileLocalizationApiService
	agreementId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiAgreementsListFilesRequest) Top(top int32) ApiAgreementsListFilesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiAgreementsListFilesRequest) Skip(skip int32) ApiAgreementsListFilesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiAgreementsListFilesRequest) Search(search string) ApiAgreementsListFilesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiAgreementsListFilesRequest) Filter(filter string) ApiAgreementsListFilesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiAgreementsListFilesRequest) Count(count bool) ApiAgreementsListFilesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiAgreementsListFilesRequest) Orderby(orderby []string) ApiAgreementsListFilesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiAgreementsListFilesRequest) Select_(select_ []string) ApiAgreementsListFilesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAgreementsListFilesRequest) Expand(expand []string) ApiAgreementsListFilesRequest {
	r.expand = &expand
	return r
}

func (r ApiAgreementsListFilesRequest) Execute() (CollectionOfAgreementFileLocalization, *_nethttp.Response, error) {
	return r.ApiService.AgreementsListFilesExecute(r)
}

/*
AgreementsListFiles Get files from agreements

PDFs linked to this agreement. This property is in the process of being deprecated. Use the  file property instead.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @return ApiAgreementsListFilesRequest
*/
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsListFiles(ctx _context.Context, agreementId string) ApiAgreementsListFilesRequest {
	return ApiAgreementsListFilesRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
	}
}

// Execute executes the request
//  @return CollectionOfAgreementFileLocalization
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsListFilesExecute(r ApiAgreementsListFilesRequest) (CollectionOfAgreementFileLocalization, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAgreementFileLocalization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileLocalizationApiService.AgreementsListFiles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/files"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsUpdateFilesRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileLocalizationApiService
	agreementId string
	agreementFileLocalizationId string
	microsoftGraphAgreementFileLocalization *MicrosoftGraphAgreementFileLocalization
}

// New navigation property values
func (r ApiAgreementsUpdateFilesRequest) MicrosoftGraphAgreementFileLocalization(microsoftGraphAgreementFileLocalization MicrosoftGraphAgreementFileLocalization) ApiAgreementsUpdateFilesRequest {
	r.microsoftGraphAgreementFileLocalization = &microsoftGraphAgreementFileLocalization
	return r
}

func (r ApiAgreementsUpdateFilesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AgreementsUpdateFilesExecute(r)
}

/*
AgreementsUpdateFiles Update the navigation property files in agreements

PDFs linked to this agreement. This property is in the process of being deprecated. Use the  file property instead.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @return ApiAgreementsUpdateFilesRequest
*/
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsUpdateFiles(ctx _context.Context, agreementId string, agreementFileLocalizationId string) ApiAgreementsUpdateFilesRequest {
	return ApiAgreementsUpdateFilesRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
	}
}

// Execute executes the request
func (a *AgreementsAgreementFileLocalizationApiService) AgreementsUpdateFilesExecute(r ApiAgreementsUpdateFilesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileLocalizationApiService.AgreementsUpdateFiles")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/files/{agreementFileLocalization-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAgreementFileLocalization == nil {
		return nil, reportError("microsoftGraphAgreementFileLocalization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAgreementFileLocalization
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
