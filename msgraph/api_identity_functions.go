/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// IdentityFunctionsApiService IdentityFunctionsApi service
type IdentityFunctionsApiService service

type ApiIdentityB2xUserFlowsB2xIdentityUserFlowUserAttributeAssignmentsGetOrderRequest struct {
	ctx _context.Context
	ApiService *IdentityFunctionsApiService
	b2xIdentityUserFlowId string
}


func (r ApiIdentityB2xUserFlowsB2xIdentityUserFlowUserAttributeAssignmentsGetOrderRequest) Execute() (AnyOfmicrosoftGraphAssignmentOrder, *_nethttp.Response, error) {
	return r.ApiService.IdentityB2xUserFlowsB2xIdentityUserFlowUserAttributeAssignmentsGetOrderExecute(r)
}

/*
IdentityB2xUserFlowsB2xIdentityUserFlowUserAttributeAssignmentsGetOrder Invoke function getOrder

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param b2xIdentityUserFlowId key: id of b2xIdentityUserFlow
 @return ApiIdentityB2xUserFlowsB2xIdentityUserFlowUserAttributeAssignmentsGetOrderRequest
*/
func (a *IdentityFunctionsApiService) IdentityB2xUserFlowsB2xIdentityUserFlowUserAttributeAssignmentsGetOrder(ctx _context.Context, b2xIdentityUserFlowId string) ApiIdentityB2xUserFlowsB2xIdentityUserFlowUserAttributeAssignmentsGetOrderRequest {
	return ApiIdentityB2xUserFlowsB2xIdentityUserFlowUserAttributeAssignmentsGetOrderRequest{
		ApiService: a,
		ctx: ctx,
		b2xIdentityUserFlowId: b2xIdentityUserFlowId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphAssignmentOrder
func (a *IdentityFunctionsApiService) IdentityB2xUserFlowsB2xIdentityUserFlowUserAttributeAssignmentsGetOrderExecute(r ApiIdentityB2xUserFlowsB2xIdentityUserFlowUserAttributeAssignmentsGetOrderRequest) (AnyOfmicrosoftGraphAssignmentOrder, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphAssignmentOrder
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityFunctionsApiService.IdentityB2xUserFlowsB2xIdentityUserFlowUserAttributeAssignmentsGetOrder")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identity/b2xUserFlows/{b2xIdentityUserFlow-id}/userAttributeAssignments/microsoft.graph.getOrder()"
	localVarPath = strings.Replace(localVarPath, "{"+"b2xIdentityUserFlow-id"+"}", _neturl.PathEscape(parameterToString(r.b2xIdentityUserFlowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityB2xUserFlowsB2xIdentityUserFlowUserFlowIdentityProvidersAvailableProviderTypesRequest struct {
	ctx _context.Context
	ApiService *IdentityFunctionsApiService
	b2xIdentityUserFlowId string
}


func (r ApiIdentityB2xUserFlowsB2xIdentityUserFlowUserFlowIdentityProvidersAvailableProviderTypesRequest) Execute() ([]*string, *_nethttp.Response, error) {
	return r.ApiService.IdentityB2xUserFlowsB2xIdentityUserFlowUserFlowIdentityProvidersAvailableProviderTypesExecute(r)
}

/*
IdentityB2xUserFlowsB2xIdentityUserFlowUserFlowIdentityProvidersAvailableProviderTypes Invoke function availableProviderTypes

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param b2xIdentityUserFlowId key: id of b2xIdentityUserFlow
 @return ApiIdentityB2xUserFlowsB2xIdentityUserFlowUserFlowIdentityProvidersAvailableProviderTypesRequest
*/
func (a *IdentityFunctionsApiService) IdentityB2xUserFlowsB2xIdentityUserFlowUserFlowIdentityProvidersAvailableProviderTypes(ctx _context.Context, b2xIdentityUserFlowId string) ApiIdentityB2xUserFlowsB2xIdentityUserFlowUserFlowIdentityProvidersAvailableProviderTypesRequest {
	return ApiIdentityB2xUserFlowsB2xIdentityUserFlowUserFlowIdentityProvidersAvailableProviderTypesRequest{
		ApiService: a,
		ctx: ctx,
		b2xIdentityUserFlowId: b2xIdentityUserFlowId,
	}
}

// Execute executes the request
//  @return []*string
func (a *IdentityFunctionsApiService) IdentityB2xUserFlowsB2xIdentityUserFlowUserFlowIdentityProvidersAvailableProviderTypesExecute(r ApiIdentityB2xUserFlowsB2xIdentityUserFlowUserFlowIdentityProvidersAvailableProviderTypesRequest) ([]*string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityFunctionsApiService.IdentityB2xUserFlowsB2xIdentityUserFlowUserFlowIdentityProvidersAvailableProviderTypes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identity/b2xUserFlows/{b2xIdentityUserFlow-id}/userFlowIdentityProviders/microsoft.graph.availableProviderTypes()"
	localVarPath = strings.Replace(localVarPath, "{"+"b2xIdentityUserFlow-id"+"}", _neturl.PathEscape(parameterToString(r.b2xIdentityUserFlowId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityIdentityProvidersAvailableProviderTypesRequest struct {
	ctx _context.Context
	ApiService *IdentityFunctionsApiService
}


func (r ApiIdentityIdentityProvidersAvailableProviderTypesRequest) Execute() ([]*string, *_nethttp.Response, error) {
	return r.ApiService.IdentityIdentityProvidersAvailableProviderTypesExecute(r)
}

/*
IdentityIdentityProvidersAvailableProviderTypes Invoke function availableProviderTypes

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIdentityIdentityProvidersAvailableProviderTypesRequest
*/
func (a *IdentityFunctionsApiService) IdentityIdentityProvidersAvailableProviderTypes(ctx _context.Context) ApiIdentityIdentityProvidersAvailableProviderTypesRequest {
	return ApiIdentityIdentityProvidersAvailableProviderTypesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []*string
func (a *IdentityFunctionsApiService) IdentityIdentityProvidersAvailableProviderTypesExecute(r ApiIdentityIdentityProvidersAvailableProviderTypesRequest) ([]*string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityFunctionsApiService.IdentityIdentityProvidersAvailableProviderTypes")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identity/identityProviders/microsoft.graph.availableProviderTypes()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
