/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"time"
)

// MicrosoftGraphShared struct for MicrosoftGraphShared
type MicrosoftGraphShared struct {
	// The identity of the owner of the shared item. Read-only.
	Owner AnyOfmicrosoftGraphIdentitySet `json:"owner,omitempty"`
	// Indicates the scope of how the item is shared: anonymous, organization, or users. Read-only.
	Scope NullableString `json:"scope,omitempty"`
	// The identity of the user who shared the item. Read-only.
	SharedBy AnyOfmicrosoftGraphIdentitySet `json:"sharedBy,omitempty"`
	// The UTC date and time when the item was shared. Read-only.
	SharedDateTime NullableTime `json:"sharedDateTime,omitempty"`
}

// NewMicrosoftGraphShared instantiates a new MicrosoftGraphShared object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphShared() *MicrosoftGraphShared {
	this := MicrosoftGraphShared{}
	return &this
}

// NewMicrosoftGraphSharedWithDefaults instantiates a new MicrosoftGraphShared object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphSharedWithDefaults() *MicrosoftGraphShared {
	this := MicrosoftGraphShared{}
	return &this
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphShared) GetOwner() AnyOfmicrosoftGraphIdentitySet {
	if o == nil  {
		var ret AnyOfmicrosoftGraphIdentitySet
		return ret
	}
	return o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphShared) GetOwnerOk() (*AnyOfmicrosoftGraphIdentitySet, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return &o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *MicrosoftGraphShared) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given AnyOfmicrosoftGraphIdentitySet and assigns it to the Owner field.
func (o *MicrosoftGraphShared) SetOwner(v AnyOfmicrosoftGraphIdentitySet) {
	o.Owner = v
}

// GetScope returns the Scope field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphShared) GetScope() string {
	if o == nil || o.Scope.Get() == nil {
		var ret string
		return ret
	}
	return *o.Scope.Get()
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphShared) GetScopeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Scope.Get(), o.Scope.IsSet()
}

// HasScope returns a boolean if a field has been set.
func (o *MicrosoftGraphShared) HasScope() bool {
	if o != nil && o.Scope.IsSet() {
		return true
	}

	return false
}

// SetScope gets a reference to the given NullableString and assigns it to the Scope field.
func (o *MicrosoftGraphShared) SetScope(v string) {
	o.Scope.Set(&v)
}
// SetScopeNil sets the value for Scope to be an explicit nil
func (o *MicrosoftGraphShared) SetScopeNil() {
	o.Scope.Set(nil)
}

// UnsetScope ensures that no value is present for Scope, not even an explicit nil
func (o *MicrosoftGraphShared) UnsetScope() {
	o.Scope.Unset()
}

// GetSharedBy returns the SharedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphShared) GetSharedBy() AnyOfmicrosoftGraphIdentitySet {
	if o == nil  {
		var ret AnyOfmicrosoftGraphIdentitySet
		return ret
	}
	return o.SharedBy
}

// GetSharedByOk returns a tuple with the SharedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphShared) GetSharedByOk() (*AnyOfmicrosoftGraphIdentitySet, bool) {
	if o == nil || o.SharedBy == nil {
		return nil, false
	}
	return &o.SharedBy, true
}

// HasSharedBy returns a boolean if a field has been set.
func (o *MicrosoftGraphShared) HasSharedBy() bool {
	if o != nil && o.SharedBy != nil {
		return true
	}

	return false
}

// SetSharedBy gets a reference to the given AnyOfmicrosoftGraphIdentitySet and assigns it to the SharedBy field.
func (o *MicrosoftGraphShared) SetSharedBy(v AnyOfmicrosoftGraphIdentitySet) {
	o.SharedBy = v
}

// GetSharedDateTime returns the SharedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphShared) GetSharedDateTime() time.Time {
	if o == nil || o.SharedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.SharedDateTime.Get()
}

// GetSharedDateTimeOk returns a tuple with the SharedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphShared) GetSharedDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SharedDateTime.Get(), o.SharedDateTime.IsSet()
}

// HasSharedDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphShared) HasSharedDateTime() bool {
	if o != nil && o.SharedDateTime.IsSet() {
		return true
	}

	return false
}

// SetSharedDateTime gets a reference to the given NullableTime and assigns it to the SharedDateTime field.
func (o *MicrosoftGraphShared) SetSharedDateTime(v time.Time) {
	o.SharedDateTime.Set(&v)
}
// SetSharedDateTimeNil sets the value for SharedDateTime to be an explicit nil
func (o *MicrosoftGraphShared) SetSharedDateTimeNil() {
	o.SharedDateTime.Set(nil)
}

// UnsetSharedDateTime ensures that no value is present for SharedDateTime, not even an explicit nil
func (o *MicrosoftGraphShared) UnsetSharedDateTime() {
	o.SharedDateTime.Unset()
}

func (o MicrosoftGraphShared) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if o.Scope.IsSet() {
		toSerialize["scope"] = o.Scope.Get()
	}
	if o.SharedBy != nil {
		toSerialize["sharedBy"] = o.SharedBy
	}
	if o.SharedDateTime.IsSet() {
		toSerialize["sharedDateTime"] = o.SharedDateTime.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphShared struct {
	value *MicrosoftGraphShared
	isSet bool
}

func (v NullableMicrosoftGraphShared) Get() *MicrosoftGraphShared {
	return v.value
}

func (v *NullableMicrosoftGraphShared) Set(val *MicrosoftGraphShared) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphShared) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphShared) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphShared(val *MicrosoftGraphShared) *NullableMicrosoftGraphShared {
	return &NullableMicrosoftGraphShared{value: val, isSet: true}
}

func (v NullableMicrosoftGraphShared) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphShared) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


