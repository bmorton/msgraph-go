/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceManagementManagedDeviceApiService DeviceManagementManagedDeviceApi service
type DeviceManagementManagedDeviceApiService service

type ApiDeviceManagementCreateManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	microsoftGraphManagedDevice *MicrosoftGraphManagedDevice
}

// New navigation property
func (r ApiDeviceManagementCreateManagedDevicesRequest) MicrosoftGraphManagedDevice(microsoftGraphManagedDevice MicrosoftGraphManagedDevice) ApiDeviceManagementCreateManagedDevicesRequest {
	r.microsoftGraphManagedDevice = &microsoftGraphManagedDevice
	return r
}

func (r ApiDeviceManagementCreateManagedDevicesRequest) Execute() (MicrosoftGraphManagedDevice, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementCreateManagedDevicesExecute(r)
}

/*
DeviceManagementCreateManagedDevices Create new navigation property to managedDevices for deviceManagement

The list of managed devices.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementCreateManagedDevicesRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementCreateManagedDevices(ctx _context.Context) ApiDeviceManagementCreateManagedDevicesRequest {
	return ApiDeviceManagementCreateManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDevice
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementCreateManagedDevicesExecute(r ApiDeviceManagementCreateManagedDevicesRequest) (MicrosoftGraphManagedDevice, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementCreateManagedDevices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDevice == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedDevice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDevice
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeleteManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeleteManagedDevicesRequest) IfMatch(ifMatch string) ApiDeviceManagementDeleteManagedDevicesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeleteManagedDevicesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeleteManagedDevicesExecute(r)
}

/*
DeviceManagementDeleteManagedDevices Delete navigation property managedDevices for deviceManagement

The list of managed devices.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiDeviceManagementDeleteManagedDevicesRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementDeleteManagedDevices(ctx _context.Context, managedDeviceId string) ApiDeviceManagementDeleteManagedDevicesRequest {
	return ApiDeviceManagementDeleteManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementDeleteManagedDevicesExecute(r ApiDeviceManagementDeleteManagedDevicesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementDeleteManagedDevices")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementGetManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementGetManagedDevicesRequest) Select_(select_ []string) ApiDeviceManagementGetManagedDevicesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementGetManagedDevicesRequest) Expand(expand []string) ApiDeviceManagementGetManagedDevicesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementGetManagedDevicesRequest) Execute() (MicrosoftGraphManagedDevice, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementGetManagedDevicesExecute(r)
}

/*
DeviceManagementGetManagedDevices Get managedDevices from deviceManagement

The list of managed devices.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiDeviceManagementGetManagedDevicesRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementGetManagedDevices(ctx _context.Context, managedDeviceId string) ApiDeviceManagementGetManagedDevicesRequest {
	return ApiDeviceManagementGetManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedDevice
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementGetManagedDevicesExecute(r ApiDeviceManagementGetManagedDevicesRequest) (MicrosoftGraphManagedDevice, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementGetManagedDevices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementListManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementListManagedDevicesRequest) Top(top int32) ApiDeviceManagementListManagedDevicesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementListManagedDevicesRequest) Skip(skip int32) ApiDeviceManagementListManagedDevicesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementListManagedDevicesRequest) Search(search string) ApiDeviceManagementListManagedDevicesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementListManagedDevicesRequest) Filter(filter string) ApiDeviceManagementListManagedDevicesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementListManagedDevicesRequest) Count(count bool) ApiDeviceManagementListManagedDevicesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementListManagedDevicesRequest) Orderby(orderby []string) ApiDeviceManagementListManagedDevicesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementListManagedDevicesRequest) Select_(select_ []string) ApiDeviceManagementListManagedDevicesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementListManagedDevicesRequest) Expand(expand []string) ApiDeviceManagementListManagedDevicesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementListManagedDevicesRequest) Execute() (CollectionOfManagedDevice, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementListManagedDevicesExecute(r)
}

/*
DeviceManagementListManagedDevices Get managedDevices from deviceManagement

The list of managed devices.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementListManagedDevicesRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementListManagedDevices(ctx _context.Context) ApiDeviceManagementListManagedDevicesRequest {
	return ApiDeviceManagementListManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfManagedDevice
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementListManagedDevicesExecute(r ApiDeviceManagementListManagedDevicesRequest) (CollectionOfManagedDevice, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementListManagedDevices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementManagedDevicesCreateDeviceCompliancePolicyStatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	microsoftGraphDeviceCompliancePolicyState *MicrosoftGraphDeviceCompliancePolicyState
}

// New navigation property
func (r ApiDeviceManagementManagedDevicesCreateDeviceCompliancePolicyStatesRequest) MicrosoftGraphDeviceCompliancePolicyState(microsoftGraphDeviceCompliancePolicyState MicrosoftGraphDeviceCompliancePolicyState) ApiDeviceManagementManagedDevicesCreateDeviceCompliancePolicyStatesRequest {
	r.microsoftGraphDeviceCompliancePolicyState = &microsoftGraphDeviceCompliancePolicyState
	return r
}

func (r ApiDeviceManagementManagedDevicesCreateDeviceCompliancePolicyStatesRequest) Execute() (MicrosoftGraphDeviceCompliancePolicyState, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementManagedDevicesCreateDeviceCompliancePolicyStatesExecute(r)
}

/*
DeviceManagementManagedDevicesCreateDeviceCompliancePolicyStates Create new navigation property to deviceCompliancePolicyStates for deviceManagement

Device compliance policy states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiDeviceManagementManagedDevicesCreateDeviceCompliancePolicyStatesRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesCreateDeviceCompliancePolicyStates(ctx _context.Context, managedDeviceId string) ApiDeviceManagementManagedDevicesCreateDeviceCompliancePolicyStatesRequest {
	return ApiDeviceManagementManagedDevicesCreateDeviceCompliancePolicyStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceCompliancePolicyState
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesCreateDeviceCompliancePolicyStatesExecute(r ApiDeviceManagementManagedDevicesCreateDeviceCompliancePolicyStatesRequest) (MicrosoftGraphDeviceCompliancePolicyState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceCompliancePolicyState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementManagedDevicesCreateDeviceCompliancePolicyStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}/deviceCompliancePolicyStates"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceCompliancePolicyState == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceCompliancePolicyState is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceCompliancePolicyState
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementManagedDevicesCreateDeviceConfigurationStatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	microsoftGraphDeviceConfigurationState *MicrosoftGraphDeviceConfigurationState
}

// New navigation property
func (r ApiDeviceManagementManagedDevicesCreateDeviceConfigurationStatesRequest) MicrosoftGraphDeviceConfigurationState(microsoftGraphDeviceConfigurationState MicrosoftGraphDeviceConfigurationState) ApiDeviceManagementManagedDevicesCreateDeviceConfigurationStatesRequest {
	r.microsoftGraphDeviceConfigurationState = &microsoftGraphDeviceConfigurationState
	return r
}

func (r ApiDeviceManagementManagedDevicesCreateDeviceConfigurationStatesRequest) Execute() (MicrosoftGraphDeviceConfigurationState, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementManagedDevicesCreateDeviceConfigurationStatesExecute(r)
}

/*
DeviceManagementManagedDevicesCreateDeviceConfigurationStates Create new navigation property to deviceConfigurationStates for deviceManagement

Device configuration states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiDeviceManagementManagedDevicesCreateDeviceConfigurationStatesRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesCreateDeviceConfigurationStates(ctx _context.Context, managedDeviceId string) ApiDeviceManagementManagedDevicesCreateDeviceConfigurationStatesRequest {
	return ApiDeviceManagementManagedDevicesCreateDeviceConfigurationStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfigurationState
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesCreateDeviceConfigurationStatesExecute(r ApiDeviceManagementManagedDevicesCreateDeviceConfigurationStatesRequest) (MicrosoftGraphDeviceConfigurationState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfigurationState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementManagedDevicesCreateDeviceConfigurationStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}/deviceConfigurationStates"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfigurationState == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDeviceConfigurationState is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfigurationState
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementManagedDevicesDeleteDeviceCategoryRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementManagedDevicesDeleteDeviceCategoryRequest) IfMatch(ifMatch string) ApiDeviceManagementManagedDevicesDeleteDeviceCategoryRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementManagedDevicesDeleteDeviceCategoryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementManagedDevicesDeleteDeviceCategoryExecute(r)
}

/*
DeviceManagementManagedDevicesDeleteDeviceCategory Delete navigation property deviceCategory for deviceManagement

Device category

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiDeviceManagementManagedDevicesDeleteDeviceCategoryRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesDeleteDeviceCategory(ctx _context.Context, managedDeviceId string) ApiDeviceManagementManagedDevicesDeleteDeviceCategoryRequest {
	return ApiDeviceManagementManagedDevicesDeleteDeviceCategoryRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesDeleteDeviceCategoryExecute(r ApiDeviceManagementManagedDevicesDeleteDeviceCategoryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementManagedDevicesDeleteDeviceCategory")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}/deviceCategory"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementManagedDevicesDeleteDeviceCompliancePolicyStatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	deviceCompliancePolicyStateId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementManagedDevicesDeleteDeviceCompliancePolicyStatesRequest) IfMatch(ifMatch string) ApiDeviceManagementManagedDevicesDeleteDeviceCompliancePolicyStatesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementManagedDevicesDeleteDeviceCompliancePolicyStatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementManagedDevicesDeleteDeviceCompliancePolicyStatesExecute(r)
}

/*
DeviceManagementManagedDevicesDeleteDeviceCompliancePolicyStates Delete navigation property deviceCompliancePolicyStates for deviceManagement

Device compliance policy states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @param deviceCompliancePolicyStateId key: id of deviceCompliancePolicyState
 @return ApiDeviceManagementManagedDevicesDeleteDeviceCompliancePolicyStatesRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesDeleteDeviceCompliancePolicyStates(ctx _context.Context, managedDeviceId string, deviceCompliancePolicyStateId string) ApiDeviceManagementManagedDevicesDeleteDeviceCompliancePolicyStatesRequest {
	return ApiDeviceManagementManagedDevicesDeleteDeviceCompliancePolicyStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
		deviceCompliancePolicyStateId: deviceCompliancePolicyStateId,
	}
}

// Execute executes the request
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesDeleteDeviceCompliancePolicyStatesExecute(r ApiDeviceManagementManagedDevicesDeleteDeviceCompliancePolicyStatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementManagedDevicesDeleteDeviceCompliancePolicyStates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}/deviceCompliancePolicyStates/{deviceCompliancePolicyState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicyState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementManagedDevicesDeleteDeviceConfigurationStatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	deviceConfigurationStateId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementManagedDevicesDeleteDeviceConfigurationStatesRequest) IfMatch(ifMatch string) ApiDeviceManagementManagedDevicesDeleteDeviceConfigurationStatesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementManagedDevicesDeleteDeviceConfigurationStatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementManagedDevicesDeleteDeviceConfigurationStatesExecute(r)
}

/*
DeviceManagementManagedDevicesDeleteDeviceConfigurationStates Delete navigation property deviceConfigurationStates for deviceManagement

Device configuration states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @param deviceConfigurationStateId key: id of deviceConfigurationState
 @return ApiDeviceManagementManagedDevicesDeleteDeviceConfigurationStatesRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesDeleteDeviceConfigurationStates(ctx _context.Context, managedDeviceId string, deviceConfigurationStateId string) ApiDeviceManagementManagedDevicesDeleteDeviceConfigurationStatesRequest {
	return ApiDeviceManagementManagedDevicesDeleteDeviceConfigurationStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
		deviceConfigurationStateId: deviceConfigurationStateId,
	}
}

// Execute executes the request
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesDeleteDeviceConfigurationStatesExecute(r ApiDeviceManagementManagedDevicesDeleteDeviceConfigurationStatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementManagedDevicesDeleteDeviceConfigurationStates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}/deviceConfigurationStates/{deviceConfigurationState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementManagedDevicesGetDeviceCategoryRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementManagedDevicesGetDeviceCategoryRequest) Select_(select_ []string) ApiDeviceManagementManagedDevicesGetDeviceCategoryRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementManagedDevicesGetDeviceCategoryRequest) Expand(expand []string) ApiDeviceManagementManagedDevicesGetDeviceCategoryRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementManagedDevicesGetDeviceCategoryRequest) Execute() (MicrosoftGraphDeviceCategory, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementManagedDevicesGetDeviceCategoryExecute(r)
}

/*
DeviceManagementManagedDevicesGetDeviceCategory Get deviceCategory from deviceManagement

Device category

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiDeviceManagementManagedDevicesGetDeviceCategoryRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesGetDeviceCategory(ctx _context.Context, managedDeviceId string) ApiDeviceManagementManagedDevicesGetDeviceCategoryRequest {
	return ApiDeviceManagementManagedDevicesGetDeviceCategoryRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceCategory
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesGetDeviceCategoryExecute(r ApiDeviceManagementManagedDevicesGetDeviceCategoryRequest) (MicrosoftGraphDeviceCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementManagedDevicesGetDeviceCategory")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}/deviceCategory"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementManagedDevicesGetDeviceCompliancePolicyStatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	deviceCompliancePolicyStateId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementManagedDevicesGetDeviceCompliancePolicyStatesRequest) Select_(select_ []string) ApiDeviceManagementManagedDevicesGetDeviceCompliancePolicyStatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementManagedDevicesGetDeviceCompliancePolicyStatesRequest) Expand(expand []string) ApiDeviceManagementManagedDevicesGetDeviceCompliancePolicyStatesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementManagedDevicesGetDeviceCompliancePolicyStatesRequest) Execute() (MicrosoftGraphDeviceCompliancePolicyState, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementManagedDevicesGetDeviceCompliancePolicyStatesExecute(r)
}

/*
DeviceManagementManagedDevicesGetDeviceCompliancePolicyStates Get deviceCompliancePolicyStates from deviceManagement

Device compliance policy states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @param deviceCompliancePolicyStateId key: id of deviceCompliancePolicyState
 @return ApiDeviceManagementManagedDevicesGetDeviceCompliancePolicyStatesRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesGetDeviceCompliancePolicyStates(ctx _context.Context, managedDeviceId string, deviceCompliancePolicyStateId string) ApiDeviceManagementManagedDevicesGetDeviceCompliancePolicyStatesRequest {
	return ApiDeviceManagementManagedDevicesGetDeviceCompliancePolicyStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
		deviceCompliancePolicyStateId: deviceCompliancePolicyStateId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceCompliancePolicyState
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesGetDeviceCompliancePolicyStatesExecute(r ApiDeviceManagementManagedDevicesGetDeviceCompliancePolicyStatesRequest) (MicrosoftGraphDeviceCompliancePolicyState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceCompliancePolicyState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementManagedDevicesGetDeviceCompliancePolicyStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}/deviceCompliancePolicyStates/{deviceCompliancePolicyState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicyState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementManagedDevicesGetDeviceConfigurationStatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	deviceConfigurationStateId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementManagedDevicesGetDeviceConfigurationStatesRequest) Select_(select_ []string) ApiDeviceManagementManagedDevicesGetDeviceConfigurationStatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementManagedDevicesGetDeviceConfigurationStatesRequest) Expand(expand []string) ApiDeviceManagementManagedDevicesGetDeviceConfigurationStatesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementManagedDevicesGetDeviceConfigurationStatesRequest) Execute() (MicrosoftGraphDeviceConfigurationState, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementManagedDevicesGetDeviceConfigurationStatesExecute(r)
}

/*
DeviceManagementManagedDevicesGetDeviceConfigurationStates Get deviceConfigurationStates from deviceManagement

Device configuration states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @param deviceConfigurationStateId key: id of deviceConfigurationState
 @return ApiDeviceManagementManagedDevicesGetDeviceConfigurationStatesRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesGetDeviceConfigurationStates(ctx _context.Context, managedDeviceId string, deviceConfigurationStateId string) ApiDeviceManagementManagedDevicesGetDeviceConfigurationStatesRequest {
	return ApiDeviceManagementManagedDevicesGetDeviceConfigurationStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
		deviceConfigurationStateId: deviceConfigurationStateId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDeviceConfigurationState
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesGetDeviceConfigurationStatesExecute(r ApiDeviceManagementManagedDevicesGetDeviceConfigurationStatesRequest) (MicrosoftGraphDeviceConfigurationState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDeviceConfigurationState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementManagedDevicesGetDeviceConfigurationStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}/deviceConfigurationStates/{deviceConfigurationState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest) Top(top int32) ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest) Skip(skip int32) ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest) Search(search string) ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest) Filter(filter string) ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest) Count(count bool) ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest) Orderby(orderby []string) ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest) Select_(select_ []string) ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest) Expand(expand []string) ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest) Execute() (CollectionOfDeviceCompliancePolicyState, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementManagedDevicesListDeviceCompliancePolicyStatesExecute(r)
}

/*
DeviceManagementManagedDevicesListDeviceCompliancePolicyStates Get deviceCompliancePolicyStates from deviceManagement

Device compliance policy states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesListDeviceCompliancePolicyStates(ctx _context.Context, managedDeviceId string) ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest {
	return ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceCompliancePolicyState
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesListDeviceCompliancePolicyStatesExecute(r ApiDeviceManagementManagedDevicesListDeviceCompliancePolicyStatesRequest) (CollectionOfDeviceCompliancePolicyState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceCompliancePolicyState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementManagedDevicesListDeviceCompliancePolicyStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}/deviceCompliancePolicyStates"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest) Top(top int32) ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest) Skip(skip int32) ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest) Search(search string) ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest) Filter(filter string) ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest) Count(count bool) ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest) Orderby(orderby []string) ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest) Select_(select_ []string) ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest) Expand(expand []string) ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest) Execute() (CollectionOfDeviceConfigurationState, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementManagedDevicesListDeviceConfigurationStatesExecute(r)
}

/*
DeviceManagementManagedDevicesListDeviceConfigurationStates Get deviceConfigurationStates from deviceManagement

Device configuration states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesListDeviceConfigurationStates(ctx _context.Context, managedDeviceId string) ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest {
	return ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
//  @return CollectionOfDeviceConfigurationState
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesListDeviceConfigurationStatesExecute(r ApiDeviceManagementManagedDevicesListDeviceConfigurationStatesRequest) (CollectionOfDeviceConfigurationState, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDeviceConfigurationState
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementManagedDevicesListDeviceConfigurationStates")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}/deviceConfigurationStates"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementManagedDevicesUpdateDeviceCategoryRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	microsoftGraphDeviceCategory *MicrosoftGraphDeviceCategory
}

// New navigation property values
func (r ApiDeviceManagementManagedDevicesUpdateDeviceCategoryRequest) MicrosoftGraphDeviceCategory(microsoftGraphDeviceCategory MicrosoftGraphDeviceCategory) ApiDeviceManagementManagedDevicesUpdateDeviceCategoryRequest {
	r.microsoftGraphDeviceCategory = &microsoftGraphDeviceCategory
	return r
}

func (r ApiDeviceManagementManagedDevicesUpdateDeviceCategoryRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementManagedDevicesUpdateDeviceCategoryExecute(r)
}

/*
DeviceManagementManagedDevicesUpdateDeviceCategory Update the navigation property deviceCategory in deviceManagement

Device category

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiDeviceManagementManagedDevicesUpdateDeviceCategoryRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesUpdateDeviceCategory(ctx _context.Context, managedDeviceId string) ApiDeviceManagementManagedDevicesUpdateDeviceCategoryRequest {
	return ApiDeviceManagementManagedDevicesUpdateDeviceCategoryRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesUpdateDeviceCategoryExecute(r ApiDeviceManagementManagedDevicesUpdateDeviceCategoryRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementManagedDevicesUpdateDeviceCategory")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}/deviceCategory"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceCategory == nil {
		return nil, reportError("microsoftGraphDeviceCategory is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceCategory
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementManagedDevicesUpdateDeviceCompliancePolicyStatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	deviceCompliancePolicyStateId string
	microsoftGraphDeviceCompliancePolicyState *MicrosoftGraphDeviceCompliancePolicyState
}

// New navigation property values
func (r ApiDeviceManagementManagedDevicesUpdateDeviceCompliancePolicyStatesRequest) MicrosoftGraphDeviceCompliancePolicyState(microsoftGraphDeviceCompliancePolicyState MicrosoftGraphDeviceCompliancePolicyState) ApiDeviceManagementManagedDevicesUpdateDeviceCompliancePolicyStatesRequest {
	r.microsoftGraphDeviceCompliancePolicyState = &microsoftGraphDeviceCompliancePolicyState
	return r
}

func (r ApiDeviceManagementManagedDevicesUpdateDeviceCompliancePolicyStatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementManagedDevicesUpdateDeviceCompliancePolicyStatesExecute(r)
}

/*
DeviceManagementManagedDevicesUpdateDeviceCompliancePolicyStates Update the navigation property deviceCompliancePolicyStates in deviceManagement

Device compliance policy states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @param deviceCompliancePolicyStateId key: id of deviceCompliancePolicyState
 @return ApiDeviceManagementManagedDevicesUpdateDeviceCompliancePolicyStatesRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesUpdateDeviceCompliancePolicyStates(ctx _context.Context, managedDeviceId string, deviceCompliancePolicyStateId string) ApiDeviceManagementManagedDevicesUpdateDeviceCompliancePolicyStatesRequest {
	return ApiDeviceManagementManagedDevicesUpdateDeviceCompliancePolicyStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
		deviceCompliancePolicyStateId: deviceCompliancePolicyStateId,
	}
}

// Execute executes the request
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesUpdateDeviceCompliancePolicyStatesExecute(r ApiDeviceManagementManagedDevicesUpdateDeviceCompliancePolicyStatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementManagedDevicesUpdateDeviceCompliancePolicyStates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}/deviceCompliancePolicyStates/{deviceCompliancePolicyState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceCompliancePolicyState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceCompliancePolicyStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceCompliancePolicyState == nil {
		return nil, reportError("microsoftGraphDeviceCompliancePolicyState is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceCompliancePolicyState
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementManagedDevicesUpdateDeviceConfigurationStatesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	deviceConfigurationStateId string
	microsoftGraphDeviceConfigurationState *MicrosoftGraphDeviceConfigurationState
}

// New navigation property values
func (r ApiDeviceManagementManagedDevicesUpdateDeviceConfigurationStatesRequest) MicrosoftGraphDeviceConfigurationState(microsoftGraphDeviceConfigurationState MicrosoftGraphDeviceConfigurationState) ApiDeviceManagementManagedDevicesUpdateDeviceConfigurationStatesRequest {
	r.microsoftGraphDeviceConfigurationState = &microsoftGraphDeviceConfigurationState
	return r
}

func (r ApiDeviceManagementManagedDevicesUpdateDeviceConfigurationStatesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementManagedDevicesUpdateDeviceConfigurationStatesExecute(r)
}

/*
DeviceManagementManagedDevicesUpdateDeviceConfigurationStates Update the navigation property deviceConfigurationStates in deviceManagement

Device configuration states for this device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @param deviceConfigurationStateId key: id of deviceConfigurationState
 @return ApiDeviceManagementManagedDevicesUpdateDeviceConfigurationStatesRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesUpdateDeviceConfigurationStates(ctx _context.Context, managedDeviceId string, deviceConfigurationStateId string) ApiDeviceManagementManagedDevicesUpdateDeviceConfigurationStatesRequest {
	return ApiDeviceManagementManagedDevicesUpdateDeviceConfigurationStatesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
		deviceConfigurationStateId: deviceConfigurationStateId,
	}
}

// Execute executes the request
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementManagedDevicesUpdateDeviceConfigurationStatesExecute(r ApiDeviceManagementManagedDevicesUpdateDeviceConfigurationStatesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementManagedDevicesUpdateDeviceConfigurationStates")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}/deviceConfigurationStates/{deviceConfigurationState-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"deviceConfigurationState-id"+"}", _neturl.PathEscape(parameterToString(r.deviceConfigurationStateId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDeviceConfigurationState == nil {
		return nil, reportError("microsoftGraphDeviceConfigurationState is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDeviceConfigurationState
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementUpdateManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementManagedDeviceApiService
	managedDeviceId string
	microsoftGraphManagedDevice *MicrosoftGraphManagedDevice
}

// New navigation property values
func (r ApiDeviceManagementUpdateManagedDevicesRequest) MicrosoftGraphManagedDevice(microsoftGraphManagedDevice MicrosoftGraphManagedDevice) ApiDeviceManagementUpdateManagedDevicesRequest {
	r.microsoftGraphManagedDevice = &microsoftGraphManagedDevice
	return r
}

func (r ApiDeviceManagementUpdateManagedDevicesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementUpdateManagedDevicesExecute(r)
}

/*
DeviceManagementUpdateManagedDevices Update the navigation property managedDevices in deviceManagement

The list of managed devices.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedDeviceId key: id of managedDevice
 @return ApiDeviceManagementUpdateManagedDevicesRequest
*/
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementUpdateManagedDevices(ctx _context.Context, managedDeviceId string) ApiDeviceManagementUpdateManagedDevicesRequest {
	return ApiDeviceManagementUpdateManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
		managedDeviceId: managedDeviceId,
	}
}

// Execute executes the request
func (a *DeviceManagementManagedDeviceApiService) DeviceManagementUpdateManagedDevicesExecute(r ApiDeviceManagementUpdateManagedDevicesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementManagedDeviceApiService.DeviceManagementUpdateManagedDevices")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/managedDevices/{managedDevice-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedDevice-id"+"}", _neturl.PathEscape(parameterToString(r.managedDeviceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedDevice == nil {
		return nil, reportError("microsoftGraphManagedDevice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedDevice
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
