/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"time"
)

// MicrosoftGraphAccessPackageAssignment struct for MicrosoftGraphAccessPackageAssignment
type MicrosoftGraphAccessPackageAssignment struct {
	// Read-only.
	Id *string `json:"id,omitempty"`
	// The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
	ExpiredDateTime NullableTime `json:"expiredDateTime,omitempty"`
	// When the access assignment is to be in place. Read-only.
	Schedule AnyOfmicrosoftGraphEntitlementManagementSchedule `json:"schedule,omitempty"`
	// The state of the access package assignment. The possible values are: delivering, partiallyDelivered, delivered, expired, deliveryFailed, unknownFutureValue. Read-only.
	State AnyOfmicrosoftGraphAccessPackageAssignmentState `json:"state,omitempty"`
	// More information about the assignment lifecycle.  Possible values include Delivering, Delivered, NearExpiry1DayNotificationTriggered, or ExpiredNotificationTriggered.  Read-only.
	Status NullableString `json:"status,omitempty"`
	// Read-only. Nullable.
	AccessPackage AnyOfmicrosoftGraphAccessPackage `json:"accessPackage,omitempty"`
	// The subject of the access package assignment. Read-only. Nullable.
	Target AnyOfmicrosoftGraphAccessPackageSubject `json:"target,omitempty"`
}

// NewMicrosoftGraphAccessPackageAssignment instantiates a new MicrosoftGraphAccessPackageAssignment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphAccessPackageAssignment() *MicrosoftGraphAccessPackageAssignment {
	this := MicrosoftGraphAccessPackageAssignment{}
	return &this
}

// NewMicrosoftGraphAccessPackageAssignmentWithDefaults instantiates a new MicrosoftGraphAccessPackageAssignment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphAccessPackageAssignmentWithDefaults() *MicrosoftGraphAccessPackageAssignment {
	this := MicrosoftGraphAccessPackageAssignment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MicrosoftGraphAccessPackageAssignment) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphAccessPackageAssignment) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessPackageAssignment) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphAccessPackageAssignment) SetId(v string) {
	o.Id = &v
}

// GetExpiredDateTime returns the ExpiredDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAccessPackageAssignment) GetExpiredDateTime() time.Time {
	if o == nil || o.ExpiredDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ExpiredDateTime.Get()
}

// GetExpiredDateTimeOk returns a tuple with the ExpiredDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAccessPackageAssignment) GetExpiredDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiredDateTime.Get(), o.ExpiredDateTime.IsSet()
}

// HasExpiredDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessPackageAssignment) HasExpiredDateTime() bool {
	if o != nil && o.ExpiredDateTime.IsSet() {
		return true
	}

	return false
}

// SetExpiredDateTime gets a reference to the given NullableTime and assigns it to the ExpiredDateTime field.
func (o *MicrosoftGraphAccessPackageAssignment) SetExpiredDateTime(v time.Time) {
	o.ExpiredDateTime.Set(&v)
}
// SetExpiredDateTimeNil sets the value for ExpiredDateTime to be an explicit nil
func (o *MicrosoftGraphAccessPackageAssignment) SetExpiredDateTimeNil() {
	o.ExpiredDateTime.Set(nil)
}

// UnsetExpiredDateTime ensures that no value is present for ExpiredDateTime, not even an explicit nil
func (o *MicrosoftGraphAccessPackageAssignment) UnsetExpiredDateTime() {
	o.ExpiredDateTime.Unset()
}

// GetSchedule returns the Schedule field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAccessPackageAssignment) GetSchedule() AnyOfmicrosoftGraphEntitlementManagementSchedule {
	if o == nil  {
		var ret AnyOfmicrosoftGraphEntitlementManagementSchedule
		return ret
	}
	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAccessPackageAssignment) GetScheduleOk() (*AnyOfmicrosoftGraphEntitlementManagementSchedule, bool) {
	if o == nil || o.Schedule == nil {
		return nil, false
	}
	return &o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessPackageAssignment) HasSchedule() bool {
	if o != nil && o.Schedule != nil {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given AnyOfmicrosoftGraphEntitlementManagementSchedule and assigns it to the Schedule field.
func (o *MicrosoftGraphAccessPackageAssignment) SetSchedule(v AnyOfmicrosoftGraphEntitlementManagementSchedule) {
	o.Schedule = v
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAccessPackageAssignment) GetState() AnyOfmicrosoftGraphAccessPackageAssignmentState {
	if o == nil  {
		var ret AnyOfmicrosoftGraphAccessPackageAssignmentState
		return ret
	}
	return o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAccessPackageAssignment) GetStateOk() (*AnyOfmicrosoftGraphAccessPackageAssignmentState, bool) {
	if o == nil || o.State == nil {
		return nil, false
	}
	return &o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessPackageAssignment) HasState() bool {
	if o != nil && o.State != nil {
		return true
	}

	return false
}

// SetState gets a reference to the given AnyOfmicrosoftGraphAccessPackageAssignmentState and assigns it to the State field.
func (o *MicrosoftGraphAccessPackageAssignment) SetState(v AnyOfmicrosoftGraphAccessPackageAssignmentState) {
	o.State = v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAccessPackageAssignment) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAccessPackageAssignment) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessPackageAssignment) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *MicrosoftGraphAccessPackageAssignment) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *MicrosoftGraphAccessPackageAssignment) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *MicrosoftGraphAccessPackageAssignment) UnsetStatus() {
	o.Status.Unset()
}

// GetAccessPackage returns the AccessPackage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAccessPackageAssignment) GetAccessPackage() AnyOfmicrosoftGraphAccessPackage {
	if o == nil  {
		var ret AnyOfmicrosoftGraphAccessPackage
		return ret
	}
	return o.AccessPackage
}

// GetAccessPackageOk returns a tuple with the AccessPackage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAccessPackageAssignment) GetAccessPackageOk() (*AnyOfmicrosoftGraphAccessPackage, bool) {
	if o == nil || o.AccessPackage == nil {
		return nil, false
	}
	return &o.AccessPackage, true
}

// HasAccessPackage returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessPackageAssignment) HasAccessPackage() bool {
	if o != nil && o.AccessPackage != nil {
		return true
	}

	return false
}

// SetAccessPackage gets a reference to the given AnyOfmicrosoftGraphAccessPackage and assigns it to the AccessPackage field.
func (o *MicrosoftGraphAccessPackageAssignment) SetAccessPackage(v AnyOfmicrosoftGraphAccessPackage) {
	o.AccessPackage = v
}

// GetTarget returns the Target field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphAccessPackageAssignment) GetTarget() AnyOfmicrosoftGraphAccessPackageSubject {
	if o == nil  {
		var ret AnyOfmicrosoftGraphAccessPackageSubject
		return ret
	}
	return o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphAccessPackageAssignment) GetTargetOk() (*AnyOfmicrosoftGraphAccessPackageSubject, bool) {
	if o == nil || o.Target == nil {
		return nil, false
	}
	return &o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *MicrosoftGraphAccessPackageAssignment) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given AnyOfmicrosoftGraphAccessPackageSubject and assigns it to the Target field.
func (o *MicrosoftGraphAccessPackageAssignment) SetTarget(v AnyOfmicrosoftGraphAccessPackageSubject) {
	o.Target = v
}

func (o MicrosoftGraphAccessPackageAssignment) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ExpiredDateTime.IsSet() {
		toSerialize["expiredDateTime"] = o.ExpiredDateTime.Get()
	}
	if o.Schedule != nil {
		toSerialize["schedule"] = o.Schedule
	}
	if o.State != nil {
		toSerialize["state"] = o.State
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.AccessPackage != nil {
		toSerialize["accessPackage"] = o.AccessPackage
	}
	if o.Target != nil {
		toSerialize["target"] = o.Target
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphAccessPackageAssignment struct {
	value *MicrosoftGraphAccessPackageAssignment
	isSet bool
}

func (v NullableMicrosoftGraphAccessPackageAssignment) Get() *MicrosoftGraphAccessPackageAssignment {
	return v.value
}

func (v *NullableMicrosoftGraphAccessPackageAssignment) Set(val *MicrosoftGraphAccessPackageAssignment) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphAccessPackageAssignment) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphAccessPackageAssignment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphAccessPackageAssignment(val *MicrosoftGraphAccessPackageAssignment) *NullableMicrosoftGraphAccessPackageAssignment {
	return &NullableMicrosoftGraphAccessPackageAssignment{value: val, isSet: true}
}

func (v NullableMicrosoftGraphAccessPackageAssignment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphAccessPackageAssignment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


