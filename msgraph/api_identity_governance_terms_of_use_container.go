/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// IdentityGovernanceTermsOfUseContainerApiService IdentityGovernanceTermsOfUseContainerApi service
type IdentityGovernanceTermsOfUseContainerApiService service

type ApiIdentityGovernanceDeleteTermsOfUseRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceTermsOfUseContainerApiService
	ifMatch *string
}

// ETag
func (r ApiIdentityGovernanceDeleteTermsOfUseRequest) IfMatch(ifMatch string) ApiIdentityGovernanceDeleteTermsOfUseRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiIdentityGovernanceDeleteTermsOfUseRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceDeleteTermsOfUseExecute(r)
}

/*
IdentityGovernanceDeleteTermsOfUse Delete navigation property termsOfUse for identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIdentityGovernanceDeleteTermsOfUseRequest
*/
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceDeleteTermsOfUse(ctx _context.Context) ApiIdentityGovernanceDeleteTermsOfUseRequest {
	return ApiIdentityGovernanceDeleteTermsOfUseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceDeleteTermsOfUseExecute(r ApiIdentityGovernanceDeleteTermsOfUseRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceTermsOfUseContainerApiService.IdentityGovernanceDeleteTermsOfUse")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/termsOfUse"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIdentityGovernanceGetTermsOfUseRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceTermsOfUseContainerApiService
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiIdentityGovernanceGetTermsOfUseRequest) Select_(select_ []string) ApiIdentityGovernanceGetTermsOfUseRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiIdentityGovernanceGetTermsOfUseRequest) Expand(expand []string) ApiIdentityGovernanceGetTermsOfUseRequest {
	r.expand = &expand
	return r
}

func (r ApiIdentityGovernanceGetTermsOfUseRequest) Execute() (MicrosoftGraphTermsOfUseContainer, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceGetTermsOfUseExecute(r)
}

/*
IdentityGovernanceGetTermsOfUse Get termsOfUse from identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIdentityGovernanceGetTermsOfUseRequest
*/
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceGetTermsOfUse(ctx _context.Context) ApiIdentityGovernanceGetTermsOfUseRequest {
	return ApiIdentityGovernanceGetTermsOfUseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphTermsOfUseContainer
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceGetTermsOfUseExecute(r ApiIdentityGovernanceGetTermsOfUseRequest) (MicrosoftGraphTermsOfUseContainer, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphTermsOfUseContainer
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceTermsOfUseContainerApiService.IdentityGovernanceGetTermsOfUse")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/termsOfUse"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceTermsOfUseCreateAgreementAcceptancesRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceTermsOfUseContainerApiService
	microsoftGraphAgreementAcceptance *MicrosoftGraphAgreementAcceptance
}

// New navigation property
func (r ApiIdentityGovernanceTermsOfUseCreateAgreementAcceptancesRequest) MicrosoftGraphAgreementAcceptance(microsoftGraphAgreementAcceptance MicrosoftGraphAgreementAcceptance) ApiIdentityGovernanceTermsOfUseCreateAgreementAcceptancesRequest {
	r.microsoftGraphAgreementAcceptance = &microsoftGraphAgreementAcceptance
	return r
}

func (r ApiIdentityGovernanceTermsOfUseCreateAgreementAcceptancesRequest) Execute() (MicrosoftGraphAgreementAcceptance, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceTermsOfUseCreateAgreementAcceptancesExecute(r)
}

/*
IdentityGovernanceTermsOfUseCreateAgreementAcceptances Create new navigation property to agreementAcceptances for identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIdentityGovernanceTermsOfUseCreateAgreementAcceptancesRequest
*/
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseCreateAgreementAcceptances(ctx _context.Context) ApiIdentityGovernanceTermsOfUseCreateAgreementAcceptancesRequest {
	return ApiIdentityGovernanceTermsOfUseCreateAgreementAcceptancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAgreementAcceptance
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseCreateAgreementAcceptancesExecute(r ApiIdentityGovernanceTermsOfUseCreateAgreementAcceptancesRequest) (MicrosoftGraphAgreementAcceptance, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAgreementAcceptance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceTermsOfUseContainerApiService.IdentityGovernanceTermsOfUseCreateAgreementAcceptances")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/termsOfUse/agreementAcceptances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAgreementAcceptance == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAgreementAcceptance is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAgreementAcceptance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceTermsOfUseCreateAgreementsRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceTermsOfUseContainerApiService
	microsoftGraphAgreement *MicrosoftGraphAgreement
}

// New navigation property
func (r ApiIdentityGovernanceTermsOfUseCreateAgreementsRequest) MicrosoftGraphAgreement(microsoftGraphAgreement MicrosoftGraphAgreement) ApiIdentityGovernanceTermsOfUseCreateAgreementsRequest {
	r.microsoftGraphAgreement = &microsoftGraphAgreement
	return r
}

func (r ApiIdentityGovernanceTermsOfUseCreateAgreementsRequest) Execute() (MicrosoftGraphAgreement, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceTermsOfUseCreateAgreementsExecute(r)
}

/*
IdentityGovernanceTermsOfUseCreateAgreements Create new navigation property to agreements for identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIdentityGovernanceTermsOfUseCreateAgreementsRequest
*/
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseCreateAgreements(ctx _context.Context) ApiIdentityGovernanceTermsOfUseCreateAgreementsRequest {
	return ApiIdentityGovernanceTermsOfUseCreateAgreementsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAgreement
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseCreateAgreementsExecute(r ApiIdentityGovernanceTermsOfUseCreateAgreementsRequest) (MicrosoftGraphAgreement, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAgreement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceTermsOfUseContainerApiService.IdentityGovernanceTermsOfUseCreateAgreements")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/termsOfUse/agreements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAgreement == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAgreement is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAgreement
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceTermsOfUseDeleteAgreementAcceptancesRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceTermsOfUseContainerApiService
	agreementAcceptanceId string
	ifMatch *string
}

// ETag
func (r ApiIdentityGovernanceTermsOfUseDeleteAgreementAcceptancesRequest) IfMatch(ifMatch string) ApiIdentityGovernanceTermsOfUseDeleteAgreementAcceptancesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiIdentityGovernanceTermsOfUseDeleteAgreementAcceptancesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceTermsOfUseDeleteAgreementAcceptancesExecute(r)
}

/*
IdentityGovernanceTermsOfUseDeleteAgreementAcceptances Delete navigation property agreementAcceptances for identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementAcceptanceId key: id of agreementAcceptance
 @return ApiIdentityGovernanceTermsOfUseDeleteAgreementAcceptancesRequest
*/
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseDeleteAgreementAcceptances(ctx _context.Context, agreementAcceptanceId string) ApiIdentityGovernanceTermsOfUseDeleteAgreementAcceptancesRequest {
	return ApiIdentityGovernanceTermsOfUseDeleteAgreementAcceptancesRequest{
		ApiService: a,
		ctx: ctx,
		agreementAcceptanceId: agreementAcceptanceId,
	}
}

// Execute executes the request
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseDeleteAgreementAcceptancesExecute(r ApiIdentityGovernanceTermsOfUseDeleteAgreementAcceptancesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceTermsOfUseContainerApiService.IdentityGovernanceTermsOfUseDeleteAgreementAcceptances")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/termsOfUse/agreementAcceptances/{agreementAcceptance-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreementAcceptance-id"+"}", _neturl.PathEscape(parameterToString(r.agreementAcceptanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIdentityGovernanceTermsOfUseDeleteAgreementsRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceTermsOfUseContainerApiService
	agreementId string
	ifMatch *string
}

// ETag
func (r ApiIdentityGovernanceTermsOfUseDeleteAgreementsRequest) IfMatch(ifMatch string) ApiIdentityGovernanceTermsOfUseDeleteAgreementsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiIdentityGovernanceTermsOfUseDeleteAgreementsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceTermsOfUseDeleteAgreementsExecute(r)
}

/*
IdentityGovernanceTermsOfUseDeleteAgreements Delete navigation property agreements for identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @return ApiIdentityGovernanceTermsOfUseDeleteAgreementsRequest
*/
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseDeleteAgreements(ctx _context.Context, agreementId string) ApiIdentityGovernanceTermsOfUseDeleteAgreementsRequest {
	return ApiIdentityGovernanceTermsOfUseDeleteAgreementsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
	}
}

// Execute executes the request
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseDeleteAgreementsExecute(r ApiIdentityGovernanceTermsOfUseDeleteAgreementsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceTermsOfUseContainerApiService.IdentityGovernanceTermsOfUseDeleteAgreements")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/termsOfUse/agreements/{agreement-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIdentityGovernanceTermsOfUseGetAgreementAcceptancesRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceTermsOfUseContainerApiService
	agreementAcceptanceId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiIdentityGovernanceTermsOfUseGetAgreementAcceptancesRequest) Select_(select_ []string) ApiIdentityGovernanceTermsOfUseGetAgreementAcceptancesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiIdentityGovernanceTermsOfUseGetAgreementAcceptancesRequest) Expand(expand []string) ApiIdentityGovernanceTermsOfUseGetAgreementAcceptancesRequest {
	r.expand = &expand
	return r
}

func (r ApiIdentityGovernanceTermsOfUseGetAgreementAcceptancesRequest) Execute() (MicrosoftGraphAgreementAcceptance, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceTermsOfUseGetAgreementAcceptancesExecute(r)
}

/*
IdentityGovernanceTermsOfUseGetAgreementAcceptances Get agreementAcceptances from identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementAcceptanceId key: id of agreementAcceptance
 @return ApiIdentityGovernanceTermsOfUseGetAgreementAcceptancesRequest
*/
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseGetAgreementAcceptances(ctx _context.Context, agreementAcceptanceId string) ApiIdentityGovernanceTermsOfUseGetAgreementAcceptancesRequest {
	return ApiIdentityGovernanceTermsOfUseGetAgreementAcceptancesRequest{
		ApiService: a,
		ctx: ctx,
		agreementAcceptanceId: agreementAcceptanceId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAgreementAcceptance
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseGetAgreementAcceptancesExecute(r ApiIdentityGovernanceTermsOfUseGetAgreementAcceptancesRequest) (MicrosoftGraphAgreementAcceptance, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAgreementAcceptance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceTermsOfUseContainerApiService.IdentityGovernanceTermsOfUseGetAgreementAcceptances")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/termsOfUse/agreementAcceptances/{agreementAcceptance-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreementAcceptance-id"+"}", _neturl.PathEscape(parameterToString(r.agreementAcceptanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceTermsOfUseGetAgreementsRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceTermsOfUseContainerApiService
	agreementId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiIdentityGovernanceTermsOfUseGetAgreementsRequest) Select_(select_ []string) ApiIdentityGovernanceTermsOfUseGetAgreementsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiIdentityGovernanceTermsOfUseGetAgreementsRequest) Expand(expand []string) ApiIdentityGovernanceTermsOfUseGetAgreementsRequest {
	r.expand = &expand
	return r
}

func (r ApiIdentityGovernanceTermsOfUseGetAgreementsRequest) Execute() (MicrosoftGraphAgreement, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceTermsOfUseGetAgreementsExecute(r)
}

/*
IdentityGovernanceTermsOfUseGetAgreements Get agreements from identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @return ApiIdentityGovernanceTermsOfUseGetAgreementsRequest
*/
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseGetAgreements(ctx _context.Context, agreementId string) ApiIdentityGovernanceTermsOfUseGetAgreementsRequest {
	return ApiIdentityGovernanceTermsOfUseGetAgreementsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAgreement
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseGetAgreementsExecute(r ApiIdentityGovernanceTermsOfUseGetAgreementsRequest) (MicrosoftGraphAgreement, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAgreement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceTermsOfUseContainerApiService.IdentityGovernanceTermsOfUseGetAgreements")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/termsOfUse/agreements/{agreement-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceTermsOfUseContainerApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest) Top(top int32) ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest) Skip(skip int32) ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest) Search(search string) ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest) Filter(filter string) ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest) Count(count bool) ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest) Orderby(orderby []string) ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest) Select_(select_ []string) ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest) Expand(expand []string) ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest {
	r.expand = &expand
	return r
}

func (r ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest) Execute() (CollectionOfAgreementAcceptance, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceTermsOfUseListAgreementAcceptancesExecute(r)
}

/*
IdentityGovernanceTermsOfUseListAgreementAcceptances Get agreementAcceptances from identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest
*/
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseListAgreementAcceptances(ctx _context.Context) ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest {
	return ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfAgreementAcceptance
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseListAgreementAcceptancesExecute(r ApiIdentityGovernanceTermsOfUseListAgreementAcceptancesRequest) (CollectionOfAgreementAcceptance, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAgreementAcceptance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceTermsOfUseContainerApiService.IdentityGovernanceTermsOfUseListAgreementAcceptances")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/termsOfUse/agreementAcceptances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceTermsOfUseListAgreementsRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceTermsOfUseContainerApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiIdentityGovernanceTermsOfUseListAgreementsRequest) Top(top int32) ApiIdentityGovernanceTermsOfUseListAgreementsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiIdentityGovernanceTermsOfUseListAgreementsRequest) Skip(skip int32) ApiIdentityGovernanceTermsOfUseListAgreementsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiIdentityGovernanceTermsOfUseListAgreementsRequest) Search(search string) ApiIdentityGovernanceTermsOfUseListAgreementsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiIdentityGovernanceTermsOfUseListAgreementsRequest) Filter(filter string) ApiIdentityGovernanceTermsOfUseListAgreementsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiIdentityGovernanceTermsOfUseListAgreementsRequest) Count(count bool) ApiIdentityGovernanceTermsOfUseListAgreementsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiIdentityGovernanceTermsOfUseListAgreementsRequest) Orderby(orderby []string) ApiIdentityGovernanceTermsOfUseListAgreementsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiIdentityGovernanceTermsOfUseListAgreementsRequest) Select_(select_ []string) ApiIdentityGovernanceTermsOfUseListAgreementsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiIdentityGovernanceTermsOfUseListAgreementsRequest) Expand(expand []string) ApiIdentityGovernanceTermsOfUseListAgreementsRequest {
	r.expand = &expand
	return r
}

func (r ApiIdentityGovernanceTermsOfUseListAgreementsRequest) Execute() (CollectionOfAgreement, *_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceTermsOfUseListAgreementsExecute(r)
}

/*
IdentityGovernanceTermsOfUseListAgreements Get agreements from identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIdentityGovernanceTermsOfUseListAgreementsRequest
*/
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseListAgreements(ctx _context.Context) ApiIdentityGovernanceTermsOfUseListAgreementsRequest {
	return ApiIdentityGovernanceTermsOfUseListAgreementsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfAgreement
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseListAgreementsExecute(r ApiIdentityGovernanceTermsOfUseListAgreementsRequest) (CollectionOfAgreement, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAgreement
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceTermsOfUseContainerApiService.IdentityGovernanceTermsOfUseListAgreements")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/termsOfUse/agreements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiIdentityGovernanceTermsOfUseUpdateAgreementAcceptancesRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceTermsOfUseContainerApiService
	agreementAcceptanceId string
	microsoftGraphAgreementAcceptance *MicrosoftGraphAgreementAcceptance
}

// New navigation property values
func (r ApiIdentityGovernanceTermsOfUseUpdateAgreementAcceptancesRequest) MicrosoftGraphAgreementAcceptance(microsoftGraphAgreementAcceptance MicrosoftGraphAgreementAcceptance) ApiIdentityGovernanceTermsOfUseUpdateAgreementAcceptancesRequest {
	r.microsoftGraphAgreementAcceptance = &microsoftGraphAgreementAcceptance
	return r
}

func (r ApiIdentityGovernanceTermsOfUseUpdateAgreementAcceptancesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceTermsOfUseUpdateAgreementAcceptancesExecute(r)
}

/*
IdentityGovernanceTermsOfUseUpdateAgreementAcceptances Update the navigation property agreementAcceptances in identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementAcceptanceId key: id of agreementAcceptance
 @return ApiIdentityGovernanceTermsOfUseUpdateAgreementAcceptancesRequest
*/
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseUpdateAgreementAcceptances(ctx _context.Context, agreementAcceptanceId string) ApiIdentityGovernanceTermsOfUseUpdateAgreementAcceptancesRequest {
	return ApiIdentityGovernanceTermsOfUseUpdateAgreementAcceptancesRequest{
		ApiService: a,
		ctx: ctx,
		agreementAcceptanceId: agreementAcceptanceId,
	}
}

// Execute executes the request
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseUpdateAgreementAcceptancesExecute(r ApiIdentityGovernanceTermsOfUseUpdateAgreementAcceptancesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceTermsOfUseContainerApiService.IdentityGovernanceTermsOfUseUpdateAgreementAcceptances")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/termsOfUse/agreementAcceptances/{agreementAcceptance-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreementAcceptance-id"+"}", _neturl.PathEscape(parameterToString(r.agreementAcceptanceId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAgreementAcceptance == nil {
		return nil, reportError("microsoftGraphAgreementAcceptance is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAgreementAcceptance
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIdentityGovernanceTermsOfUseUpdateAgreementsRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceTermsOfUseContainerApiService
	agreementId string
	microsoftGraphAgreement *MicrosoftGraphAgreement
}

// New navigation property values
func (r ApiIdentityGovernanceTermsOfUseUpdateAgreementsRequest) MicrosoftGraphAgreement(microsoftGraphAgreement MicrosoftGraphAgreement) ApiIdentityGovernanceTermsOfUseUpdateAgreementsRequest {
	r.microsoftGraphAgreement = &microsoftGraphAgreement
	return r
}

func (r ApiIdentityGovernanceTermsOfUseUpdateAgreementsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceTermsOfUseUpdateAgreementsExecute(r)
}

/*
IdentityGovernanceTermsOfUseUpdateAgreements Update the navigation property agreements in identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @return ApiIdentityGovernanceTermsOfUseUpdateAgreementsRequest
*/
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseUpdateAgreements(ctx _context.Context, agreementId string) ApiIdentityGovernanceTermsOfUseUpdateAgreementsRequest {
	return ApiIdentityGovernanceTermsOfUseUpdateAgreementsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
	}
}

// Execute executes the request
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceTermsOfUseUpdateAgreementsExecute(r ApiIdentityGovernanceTermsOfUseUpdateAgreementsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceTermsOfUseContainerApiService.IdentityGovernanceTermsOfUseUpdateAgreements")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/termsOfUse/agreements/{agreement-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAgreement == nil {
		return nil, reportError("microsoftGraphAgreement is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAgreement
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiIdentityGovernanceUpdateTermsOfUseRequest struct {
	ctx _context.Context
	ApiService *IdentityGovernanceTermsOfUseContainerApiService
	microsoftGraphTermsOfUseContainer *MicrosoftGraphTermsOfUseContainer
}

// New navigation property values
func (r ApiIdentityGovernanceUpdateTermsOfUseRequest) MicrosoftGraphTermsOfUseContainer(microsoftGraphTermsOfUseContainer MicrosoftGraphTermsOfUseContainer) ApiIdentityGovernanceUpdateTermsOfUseRequest {
	r.microsoftGraphTermsOfUseContainer = &microsoftGraphTermsOfUseContainer
	return r
}

func (r ApiIdentityGovernanceUpdateTermsOfUseRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.IdentityGovernanceUpdateTermsOfUseExecute(r)
}

/*
IdentityGovernanceUpdateTermsOfUse Update the navigation property termsOfUse in identityGovernance

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiIdentityGovernanceUpdateTermsOfUseRequest
*/
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceUpdateTermsOfUse(ctx _context.Context) ApiIdentityGovernanceUpdateTermsOfUseRequest {
	return ApiIdentityGovernanceUpdateTermsOfUseRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *IdentityGovernanceTermsOfUseContainerApiService) IdentityGovernanceUpdateTermsOfUseExecute(r ApiIdentityGovernanceUpdateTermsOfUseRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IdentityGovernanceTermsOfUseContainerApiService.IdentityGovernanceUpdateTermsOfUse")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/identityGovernance/termsOfUse"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphTermsOfUseContainer == nil {
		return nil, reportError("microsoftGraphTermsOfUseContainer is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphTermsOfUseContainer
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
