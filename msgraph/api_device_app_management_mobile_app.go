/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceAppManagementMobileAppApiService DeviceAppManagementMobileAppApi service
type DeviceAppManagementMobileAppApiService service

type ApiDeviceAppManagementCreateMobileAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementMobileAppApiService
	microsoftGraphMobileApp *MicrosoftGraphMobileApp
}

// New navigation property
func (r ApiDeviceAppManagementCreateMobileAppsRequest) MicrosoftGraphMobileApp(microsoftGraphMobileApp MicrosoftGraphMobileApp) ApiDeviceAppManagementCreateMobileAppsRequest {
	r.microsoftGraphMobileApp = &microsoftGraphMobileApp
	return r
}

func (r ApiDeviceAppManagementCreateMobileAppsRequest) Execute() (MicrosoftGraphMobileApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementCreateMobileAppsExecute(r)
}

/*
DeviceAppManagementCreateMobileApps Create new navigation property to mobileApps for deviceAppManagement

The mobile apps.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementCreateMobileAppsRequest
*/
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementCreateMobileApps(ctx _context.Context) ApiDeviceAppManagementCreateMobileAppsRequest {
	return ApiDeviceAppManagementCreateMobileAppsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMobileApp
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementCreateMobileAppsExecute(r ApiDeviceAppManagementCreateMobileAppsRequest) (MicrosoftGraphMobileApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMobileApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementMobileAppApiService.DeviceAppManagementCreateMobileApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileApps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMobileApp == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphMobileApp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMobileApp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDeleteMobileAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementMobileAppApiService
	mobileAppId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementDeleteMobileAppsRequest) IfMatch(ifMatch string) ApiDeviceAppManagementDeleteMobileAppsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementDeleteMobileAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDeleteMobileAppsExecute(r)
}

/*
DeviceAppManagementDeleteMobileApps Delete navigation property mobileApps for deviceAppManagement

The mobile apps.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mobileAppId key: id of mobileApp
 @return ApiDeviceAppManagementDeleteMobileAppsRequest
*/
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementDeleteMobileApps(ctx _context.Context, mobileAppId string) ApiDeviceAppManagementDeleteMobileAppsRequest {
	return ApiDeviceAppManagementDeleteMobileAppsRequest{
		ApiService: a,
		ctx: ctx,
		mobileAppId: mobileAppId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementDeleteMobileAppsExecute(r ApiDeviceAppManagementDeleteMobileAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementMobileAppApiService.DeviceAppManagementDeleteMobileApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileApps/{mobileApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"mobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.mobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementGetMobileAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementMobileAppApiService
	mobileAppId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementGetMobileAppsRequest) Select_(select_ []string) ApiDeviceAppManagementGetMobileAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementGetMobileAppsRequest) Expand(expand []string) ApiDeviceAppManagementGetMobileAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementGetMobileAppsRequest) Execute() (MicrosoftGraphMobileApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementGetMobileAppsExecute(r)
}

/*
DeviceAppManagementGetMobileApps Get mobileApps from deviceAppManagement

The mobile apps.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mobileAppId key: id of mobileApp
 @return ApiDeviceAppManagementGetMobileAppsRequest
*/
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementGetMobileApps(ctx _context.Context, mobileAppId string) ApiDeviceAppManagementGetMobileAppsRequest {
	return ApiDeviceAppManagementGetMobileAppsRequest{
		ApiService: a,
		ctx: ctx,
		mobileAppId: mobileAppId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMobileApp
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementGetMobileAppsExecute(r ApiDeviceAppManagementGetMobileAppsRequest) (MicrosoftGraphMobileApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMobileApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementMobileAppApiService.DeviceAppManagementGetMobileApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileApps/{mobileApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"mobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.mobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementListMobileAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementMobileAppApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementListMobileAppsRequest) Top(top int32) ApiDeviceAppManagementListMobileAppsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementListMobileAppsRequest) Skip(skip int32) ApiDeviceAppManagementListMobileAppsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementListMobileAppsRequest) Search(search string) ApiDeviceAppManagementListMobileAppsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementListMobileAppsRequest) Filter(filter string) ApiDeviceAppManagementListMobileAppsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementListMobileAppsRequest) Count(count bool) ApiDeviceAppManagementListMobileAppsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementListMobileAppsRequest) Orderby(orderby []string) ApiDeviceAppManagementListMobileAppsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementListMobileAppsRequest) Select_(select_ []string) ApiDeviceAppManagementListMobileAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementListMobileAppsRequest) Expand(expand []string) ApiDeviceAppManagementListMobileAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementListMobileAppsRequest) Execute() (CollectionOfMobileApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementListMobileAppsExecute(r)
}

/*
DeviceAppManagementListMobileApps Get mobileApps from deviceAppManagement

The mobile apps.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementListMobileAppsRequest
*/
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementListMobileApps(ctx _context.Context) ApiDeviceAppManagementListMobileAppsRequest {
	return ApiDeviceAppManagementListMobileAppsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfMobileApp
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementListMobileAppsExecute(r ApiDeviceAppManagementListMobileAppsRequest) (CollectionOfMobileApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfMobileApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementMobileAppApiService.DeviceAppManagementListMobileApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileApps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppsCreateAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementMobileAppApiService
	mobileAppId string
	microsoftGraphMobileAppAssignment *MicrosoftGraphMobileAppAssignment
}

// New navigation property
func (r ApiDeviceAppManagementMobileAppsCreateAssignmentsRequest) MicrosoftGraphMobileAppAssignment(microsoftGraphMobileAppAssignment MicrosoftGraphMobileAppAssignment) ApiDeviceAppManagementMobileAppsCreateAssignmentsRequest {
	r.microsoftGraphMobileAppAssignment = &microsoftGraphMobileAppAssignment
	return r
}

func (r ApiDeviceAppManagementMobileAppsCreateAssignmentsRequest) Execute() (MicrosoftGraphMobileAppAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppsCreateAssignmentsExecute(r)
}

/*
DeviceAppManagementMobileAppsCreateAssignments Create new navigation property to assignments for deviceAppManagement

The list of group assignments for this mobile app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mobileAppId key: id of mobileApp
 @return ApiDeviceAppManagementMobileAppsCreateAssignmentsRequest
*/
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsCreateAssignments(ctx _context.Context, mobileAppId string) ApiDeviceAppManagementMobileAppsCreateAssignmentsRequest {
	return ApiDeviceAppManagementMobileAppsCreateAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		mobileAppId: mobileAppId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMobileAppAssignment
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsCreateAssignmentsExecute(r ApiDeviceAppManagementMobileAppsCreateAssignmentsRequest) (MicrosoftGraphMobileAppAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMobileAppAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementMobileAppApiService.DeviceAppManagementMobileAppsCreateAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileApps/{mobileApp-id}/assignments"
	localVarPath = strings.Replace(localVarPath, "{"+"mobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.mobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMobileAppAssignment == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphMobileAppAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMobileAppAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppsCreateRefCategoriesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementMobileAppApiService
	mobileAppId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref value
func (r ApiDeviceAppManagementMobileAppsCreateRefCategoriesRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiDeviceAppManagementMobileAppsCreateRefCategoriesRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiDeviceAppManagementMobileAppsCreateRefCategoriesRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppsCreateRefCategoriesExecute(r)
}

/*
DeviceAppManagementMobileAppsCreateRefCategories Create new navigation property ref to categories for deviceAppManagement

The list of categories for this app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mobileAppId key: id of mobileApp
 @return ApiDeviceAppManagementMobileAppsCreateRefCategoriesRequest
*/
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsCreateRefCategories(ctx _context.Context, mobileAppId string) ApiDeviceAppManagementMobileAppsCreateRefCategoriesRequest {
	return ApiDeviceAppManagementMobileAppsCreateRefCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		mobileAppId: mobileAppId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsCreateRefCategoriesExecute(r ApiDeviceAppManagementMobileAppsCreateRefCategoriesRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementMobileAppApiService.DeviceAppManagementMobileAppsCreateRefCategories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileApps/{mobileApp-id}/categories/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"mobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.mobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppsDeleteAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementMobileAppApiService
	mobileAppId string
	mobileAppAssignmentId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementMobileAppsDeleteAssignmentsRequest) IfMatch(ifMatch string) ApiDeviceAppManagementMobileAppsDeleteAssignmentsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementMobileAppsDeleteAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppsDeleteAssignmentsExecute(r)
}

/*
DeviceAppManagementMobileAppsDeleteAssignments Delete navigation property assignments for deviceAppManagement

The list of group assignments for this mobile app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mobileAppId key: id of mobileApp
 @param mobileAppAssignmentId key: id of mobileAppAssignment
 @return ApiDeviceAppManagementMobileAppsDeleteAssignmentsRequest
*/
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsDeleteAssignments(ctx _context.Context, mobileAppId string, mobileAppAssignmentId string) ApiDeviceAppManagementMobileAppsDeleteAssignmentsRequest {
	return ApiDeviceAppManagementMobileAppsDeleteAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		mobileAppId: mobileAppId,
		mobileAppAssignmentId: mobileAppAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsDeleteAssignmentsExecute(r ApiDeviceAppManagementMobileAppsDeleteAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementMobileAppApiService.DeviceAppManagementMobileAppsDeleteAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileApps/{mobileApp-id}/assignments/{mobileAppAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"mobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.mobileAppId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mobileAppAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.mobileAppAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppsGetAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementMobileAppApiService
	mobileAppId string
	mobileAppAssignmentId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementMobileAppsGetAssignmentsRequest) Select_(select_ []string) ApiDeviceAppManagementMobileAppsGetAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementMobileAppsGetAssignmentsRequest) Expand(expand []string) ApiDeviceAppManagementMobileAppsGetAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementMobileAppsGetAssignmentsRequest) Execute() (MicrosoftGraphMobileAppAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppsGetAssignmentsExecute(r)
}

/*
DeviceAppManagementMobileAppsGetAssignments Get assignments from deviceAppManagement

The list of group assignments for this mobile app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mobileAppId key: id of mobileApp
 @param mobileAppAssignmentId key: id of mobileAppAssignment
 @return ApiDeviceAppManagementMobileAppsGetAssignmentsRequest
*/
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsGetAssignments(ctx _context.Context, mobileAppId string, mobileAppAssignmentId string) ApiDeviceAppManagementMobileAppsGetAssignmentsRequest {
	return ApiDeviceAppManagementMobileAppsGetAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		mobileAppId: mobileAppId,
		mobileAppAssignmentId: mobileAppAssignmentId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphMobileAppAssignment
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsGetAssignmentsExecute(r ApiDeviceAppManagementMobileAppsGetAssignmentsRequest) (MicrosoftGraphMobileAppAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphMobileAppAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementMobileAppApiService.DeviceAppManagementMobileAppsGetAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileApps/{mobileApp-id}/assignments/{mobileAppAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"mobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.mobileAppId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mobileAppAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.mobileAppAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppsListAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementMobileAppApiService
	mobileAppId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementMobileAppsListAssignmentsRequest) Top(top int32) ApiDeviceAppManagementMobileAppsListAssignmentsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementMobileAppsListAssignmentsRequest) Skip(skip int32) ApiDeviceAppManagementMobileAppsListAssignmentsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementMobileAppsListAssignmentsRequest) Search(search string) ApiDeviceAppManagementMobileAppsListAssignmentsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementMobileAppsListAssignmentsRequest) Filter(filter string) ApiDeviceAppManagementMobileAppsListAssignmentsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementMobileAppsListAssignmentsRequest) Count(count bool) ApiDeviceAppManagementMobileAppsListAssignmentsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementMobileAppsListAssignmentsRequest) Orderby(orderby []string) ApiDeviceAppManagementMobileAppsListAssignmentsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementMobileAppsListAssignmentsRequest) Select_(select_ []string) ApiDeviceAppManagementMobileAppsListAssignmentsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementMobileAppsListAssignmentsRequest) Expand(expand []string) ApiDeviceAppManagementMobileAppsListAssignmentsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementMobileAppsListAssignmentsRequest) Execute() (CollectionOfMobileAppAssignment, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppsListAssignmentsExecute(r)
}

/*
DeviceAppManagementMobileAppsListAssignments Get assignments from deviceAppManagement

The list of group assignments for this mobile app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mobileAppId key: id of mobileApp
 @return ApiDeviceAppManagementMobileAppsListAssignmentsRequest
*/
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsListAssignments(ctx _context.Context, mobileAppId string) ApiDeviceAppManagementMobileAppsListAssignmentsRequest {
	return ApiDeviceAppManagementMobileAppsListAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		mobileAppId: mobileAppId,
	}
}

// Execute executes the request
//  @return CollectionOfMobileAppAssignment
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsListAssignmentsExecute(r ApiDeviceAppManagementMobileAppsListAssignmentsRequest) (CollectionOfMobileAppAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfMobileAppAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementMobileAppApiService.DeviceAppManagementMobileAppsListAssignments")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileApps/{mobileApp-id}/assignments"
	localVarPath = strings.Replace(localVarPath, "{"+"mobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.mobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppsListCategoriesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementMobileAppApiService
	mobileAppId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementMobileAppsListCategoriesRequest) Top(top int32) ApiDeviceAppManagementMobileAppsListCategoriesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementMobileAppsListCategoriesRequest) Skip(skip int32) ApiDeviceAppManagementMobileAppsListCategoriesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementMobileAppsListCategoriesRequest) Search(search string) ApiDeviceAppManagementMobileAppsListCategoriesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementMobileAppsListCategoriesRequest) Filter(filter string) ApiDeviceAppManagementMobileAppsListCategoriesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementMobileAppsListCategoriesRequest) Count(count bool) ApiDeviceAppManagementMobileAppsListCategoriesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementMobileAppsListCategoriesRequest) Orderby(orderby []string) ApiDeviceAppManagementMobileAppsListCategoriesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementMobileAppsListCategoriesRequest) Select_(select_ []string) ApiDeviceAppManagementMobileAppsListCategoriesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementMobileAppsListCategoriesRequest) Expand(expand []string) ApiDeviceAppManagementMobileAppsListCategoriesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementMobileAppsListCategoriesRequest) Execute() (CollectionOfMobileAppCategory, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppsListCategoriesExecute(r)
}

/*
DeviceAppManagementMobileAppsListCategories Get categories from deviceAppManagement

The list of categories for this app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mobileAppId key: id of mobileApp
 @return ApiDeviceAppManagementMobileAppsListCategoriesRequest
*/
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsListCategories(ctx _context.Context, mobileAppId string) ApiDeviceAppManagementMobileAppsListCategoriesRequest {
	return ApiDeviceAppManagementMobileAppsListCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		mobileAppId: mobileAppId,
	}
}

// Execute executes the request
//  @return CollectionOfMobileAppCategory
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsListCategoriesExecute(r ApiDeviceAppManagementMobileAppsListCategoriesRequest) (CollectionOfMobileAppCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfMobileAppCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementMobileAppApiService.DeviceAppManagementMobileAppsListCategories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileApps/{mobileApp-id}/categories"
	localVarPath = strings.Replace(localVarPath, "{"+"mobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.mobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppsListRefCategoriesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementMobileAppApiService
	mobileAppId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementMobileAppsListRefCategoriesRequest) Top(top int32) ApiDeviceAppManagementMobileAppsListRefCategoriesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementMobileAppsListRefCategoriesRequest) Skip(skip int32) ApiDeviceAppManagementMobileAppsListRefCategoriesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementMobileAppsListRefCategoriesRequest) Search(search string) ApiDeviceAppManagementMobileAppsListRefCategoriesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementMobileAppsListRefCategoriesRequest) Filter(filter string) ApiDeviceAppManagementMobileAppsListRefCategoriesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementMobileAppsListRefCategoriesRequest) Count(count bool) ApiDeviceAppManagementMobileAppsListRefCategoriesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementMobileAppsListRefCategoriesRequest) Orderby(orderby []string) ApiDeviceAppManagementMobileAppsListRefCategoriesRequest {
	r.orderby = &orderby
	return r
}

func (r ApiDeviceAppManagementMobileAppsListRefCategoriesRequest) Execute() (CollectionOfLinksOfMobileAppCategory, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppsListRefCategoriesExecute(r)
}

/*
DeviceAppManagementMobileAppsListRefCategories Get ref of categories from deviceAppManagement

The list of categories for this app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mobileAppId key: id of mobileApp
 @return ApiDeviceAppManagementMobileAppsListRefCategoriesRequest
*/
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsListRefCategories(ctx _context.Context, mobileAppId string) ApiDeviceAppManagementMobileAppsListRefCategoriesRequest {
	return ApiDeviceAppManagementMobileAppsListRefCategoriesRequest{
		ApiService: a,
		ctx: ctx,
		mobileAppId: mobileAppId,
	}
}

// Execute executes the request
//  @return CollectionOfLinksOfMobileAppCategory
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsListRefCategoriesExecute(r ApiDeviceAppManagementMobileAppsListRefCategoriesRequest) (CollectionOfLinksOfMobileAppCategory, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfLinksOfMobileAppCategory
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementMobileAppApiService.DeviceAppManagementMobileAppsListRefCategories")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileApps/{mobileApp-id}/categories/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"mobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.mobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementMobileAppsUpdateAssignmentsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementMobileAppApiService
	mobileAppId string
	mobileAppAssignmentId string
	microsoftGraphMobileAppAssignment *MicrosoftGraphMobileAppAssignment
}

// New navigation property values
func (r ApiDeviceAppManagementMobileAppsUpdateAssignmentsRequest) MicrosoftGraphMobileAppAssignment(microsoftGraphMobileAppAssignment MicrosoftGraphMobileAppAssignment) ApiDeviceAppManagementMobileAppsUpdateAssignmentsRequest {
	r.microsoftGraphMobileAppAssignment = &microsoftGraphMobileAppAssignment
	return r
}

func (r ApiDeviceAppManagementMobileAppsUpdateAssignmentsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementMobileAppsUpdateAssignmentsExecute(r)
}

/*
DeviceAppManagementMobileAppsUpdateAssignments Update the navigation property assignments in deviceAppManagement

The list of group assignments for this mobile app.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mobileAppId key: id of mobileApp
 @param mobileAppAssignmentId key: id of mobileAppAssignment
 @return ApiDeviceAppManagementMobileAppsUpdateAssignmentsRequest
*/
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsUpdateAssignments(ctx _context.Context, mobileAppId string, mobileAppAssignmentId string) ApiDeviceAppManagementMobileAppsUpdateAssignmentsRequest {
	return ApiDeviceAppManagementMobileAppsUpdateAssignmentsRequest{
		ApiService: a,
		ctx: ctx,
		mobileAppId: mobileAppId,
		mobileAppAssignmentId: mobileAppAssignmentId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementMobileAppsUpdateAssignmentsExecute(r ApiDeviceAppManagementMobileAppsUpdateAssignmentsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementMobileAppApiService.DeviceAppManagementMobileAppsUpdateAssignments")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileApps/{mobileApp-id}/assignments/{mobileAppAssignment-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"mobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.mobileAppId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"mobileAppAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.mobileAppAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMobileAppAssignment == nil {
		return nil, reportError("microsoftGraphMobileAppAssignment is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMobileAppAssignment
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementUpdateMobileAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementMobileAppApiService
	mobileAppId string
	microsoftGraphMobileApp *MicrosoftGraphMobileApp
}

// New navigation property values
func (r ApiDeviceAppManagementUpdateMobileAppsRequest) MicrosoftGraphMobileApp(microsoftGraphMobileApp MicrosoftGraphMobileApp) ApiDeviceAppManagementUpdateMobileAppsRequest {
	r.microsoftGraphMobileApp = &microsoftGraphMobileApp
	return r
}

func (r ApiDeviceAppManagementUpdateMobileAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementUpdateMobileAppsExecute(r)
}

/*
DeviceAppManagementUpdateMobileApps Update the navigation property mobileApps in deviceAppManagement

The mobile apps.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param mobileAppId key: id of mobileApp
 @return ApiDeviceAppManagementUpdateMobileAppsRequest
*/
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementUpdateMobileApps(ctx _context.Context, mobileAppId string) ApiDeviceAppManagementUpdateMobileAppsRequest {
	return ApiDeviceAppManagementUpdateMobileAppsRequest{
		ApiService: a,
		ctx: ctx,
		mobileAppId: mobileAppId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementMobileAppApiService) DeviceAppManagementUpdateMobileAppsExecute(r ApiDeviceAppManagementUpdateMobileAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementMobileAppApiService.DeviceAppManagementUpdateMobileApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/mobileApps/{mobileApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"mobileApp-id"+"}", _neturl.PathEscape(parameterToString(r.mobileAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphMobileApp == nil {
		return nil, reportError("microsoftGraphMobileApp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphMobileApp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
