/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceManagementDetectedAppApiService DeviceManagementDetectedAppApi service
type DeviceManagementDetectedAppApiService service

type ApiDeviceManagementCreateDetectedAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDetectedAppApiService
	microsoftGraphDetectedApp *MicrosoftGraphDetectedApp
}

// New navigation property
func (r ApiDeviceManagementCreateDetectedAppsRequest) MicrosoftGraphDetectedApp(microsoftGraphDetectedApp MicrosoftGraphDetectedApp) ApiDeviceManagementCreateDetectedAppsRequest {
	r.microsoftGraphDetectedApp = &microsoftGraphDetectedApp
	return r
}

func (r ApiDeviceManagementCreateDetectedAppsRequest) Execute() (MicrosoftGraphDetectedApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementCreateDetectedAppsExecute(r)
}

/*
DeviceManagementCreateDetectedApps Create new navigation property to detectedApps for deviceManagement

The list of detected apps associated with a device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementCreateDetectedAppsRequest
*/
func (a *DeviceManagementDetectedAppApiService) DeviceManagementCreateDetectedApps(ctx _context.Context) ApiDeviceManagementCreateDetectedAppsRequest {
	return ApiDeviceManagementCreateDetectedAppsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDetectedApp
func (a *DeviceManagementDetectedAppApiService) DeviceManagementCreateDetectedAppsExecute(r ApiDeviceManagementCreateDetectedAppsRequest) (MicrosoftGraphDetectedApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDetectedApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDetectedAppApiService.DeviceManagementCreateDetectedApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/detectedApps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDetectedApp == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphDetectedApp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDetectedApp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDeleteDetectedAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDetectedAppApiService
	detectedAppId string
	ifMatch *string
}

// ETag
func (r ApiDeviceManagementDeleteDetectedAppsRequest) IfMatch(ifMatch string) ApiDeviceManagementDeleteDetectedAppsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceManagementDeleteDetectedAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDeleteDetectedAppsExecute(r)
}

/*
DeviceManagementDeleteDetectedApps Delete navigation property detectedApps for deviceManagement

The list of detected apps associated with a device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param detectedAppId key: id of detectedApp
 @return ApiDeviceManagementDeleteDetectedAppsRequest
*/
func (a *DeviceManagementDetectedAppApiService) DeviceManagementDeleteDetectedApps(ctx _context.Context, detectedAppId string) ApiDeviceManagementDeleteDetectedAppsRequest {
	return ApiDeviceManagementDeleteDetectedAppsRequest{
		ApiService: a,
		ctx: ctx,
		detectedAppId: detectedAppId,
	}
}

// Execute executes the request
func (a *DeviceManagementDetectedAppApiService) DeviceManagementDeleteDetectedAppsExecute(r ApiDeviceManagementDeleteDetectedAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDetectedAppApiService.DeviceManagementDeleteDetectedApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/detectedApps/{detectedApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"detectedApp-id"+"}", _neturl.PathEscape(parameterToString(r.detectedAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceManagementDetectedAppsCreateRefManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDetectedAppApiService
	detectedAppId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref value
func (r ApiDeviceManagementDetectedAppsCreateRefManagedDevicesRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiDeviceManagementDetectedAppsCreateRefManagedDevicesRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiDeviceManagementDetectedAppsCreateRefManagedDevicesRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDetectedAppsCreateRefManagedDevicesExecute(r)
}

/*
DeviceManagementDetectedAppsCreateRefManagedDevices Create new navigation property ref to managedDevices for deviceManagement

The devices that have the discovered application installed

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param detectedAppId key: id of detectedApp
 @return ApiDeviceManagementDetectedAppsCreateRefManagedDevicesRequest
*/
func (a *DeviceManagementDetectedAppApiService) DeviceManagementDetectedAppsCreateRefManagedDevices(ctx _context.Context, detectedAppId string) ApiDeviceManagementDetectedAppsCreateRefManagedDevicesRequest {
	return ApiDeviceManagementDetectedAppsCreateRefManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
		detectedAppId: detectedAppId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *DeviceManagementDetectedAppApiService) DeviceManagementDetectedAppsCreateRefManagedDevicesExecute(r ApiDeviceManagementDetectedAppsCreateRefManagedDevicesRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDetectedAppApiService.DeviceManagementDetectedAppsCreateRefManagedDevices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/detectedApps/{detectedApp-id}/managedDevices/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"detectedApp-id"+"}", _neturl.PathEscape(parameterToString(r.detectedAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDetectedAppsListManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDetectedAppApiService
	detectedAppId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementDetectedAppsListManagedDevicesRequest) Top(top int32) ApiDeviceManagementDetectedAppsListManagedDevicesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementDetectedAppsListManagedDevicesRequest) Skip(skip int32) ApiDeviceManagementDetectedAppsListManagedDevicesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementDetectedAppsListManagedDevicesRequest) Search(search string) ApiDeviceManagementDetectedAppsListManagedDevicesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementDetectedAppsListManagedDevicesRequest) Filter(filter string) ApiDeviceManagementDetectedAppsListManagedDevicesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementDetectedAppsListManagedDevicesRequest) Count(count bool) ApiDeviceManagementDetectedAppsListManagedDevicesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementDetectedAppsListManagedDevicesRequest) Orderby(orderby []string) ApiDeviceManagementDetectedAppsListManagedDevicesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementDetectedAppsListManagedDevicesRequest) Select_(select_ []string) ApiDeviceManagementDetectedAppsListManagedDevicesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementDetectedAppsListManagedDevicesRequest) Expand(expand []string) ApiDeviceManagementDetectedAppsListManagedDevicesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementDetectedAppsListManagedDevicesRequest) Execute() (CollectionOfManagedDevice, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDetectedAppsListManagedDevicesExecute(r)
}

/*
DeviceManagementDetectedAppsListManagedDevices Get managedDevices from deviceManagement

The devices that have the discovered application installed

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param detectedAppId key: id of detectedApp
 @return ApiDeviceManagementDetectedAppsListManagedDevicesRequest
*/
func (a *DeviceManagementDetectedAppApiService) DeviceManagementDetectedAppsListManagedDevices(ctx _context.Context, detectedAppId string) ApiDeviceManagementDetectedAppsListManagedDevicesRequest {
	return ApiDeviceManagementDetectedAppsListManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
		detectedAppId: detectedAppId,
	}
}

// Execute executes the request
//  @return CollectionOfManagedDevice
func (a *DeviceManagementDetectedAppApiService) DeviceManagementDetectedAppsListManagedDevicesExecute(r ApiDeviceManagementDetectedAppsListManagedDevicesRequest) (CollectionOfManagedDevice, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDetectedAppApiService.DeviceManagementDetectedAppsListManagedDevices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/detectedApps/{detectedApp-id}/managedDevices"
	localVarPath = strings.Replace(localVarPath, "{"+"detectedApp-id"+"}", _neturl.PathEscape(parameterToString(r.detectedAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDetectedAppApiService
	detectedAppId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
}

// Show only the first n items
func (r ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest) Top(top int32) ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest) Skip(skip int32) ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest) Search(search string) ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest) Filter(filter string) ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest) Count(count bool) ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest) Orderby(orderby []string) ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest {
	r.orderby = &orderby
	return r
}

func (r ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest) Execute() (CollectionOfLinksOfManagedDevice, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementDetectedAppsListRefManagedDevicesExecute(r)
}

/*
DeviceManagementDetectedAppsListRefManagedDevices Get ref of managedDevices from deviceManagement

The devices that have the discovered application installed

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param detectedAppId key: id of detectedApp
 @return ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest
*/
func (a *DeviceManagementDetectedAppApiService) DeviceManagementDetectedAppsListRefManagedDevices(ctx _context.Context, detectedAppId string) ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest {
	return ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest{
		ApiService: a,
		ctx: ctx,
		detectedAppId: detectedAppId,
	}
}

// Execute executes the request
//  @return CollectionOfLinksOfManagedDevice
func (a *DeviceManagementDetectedAppApiService) DeviceManagementDetectedAppsListRefManagedDevicesExecute(r ApiDeviceManagementDetectedAppsListRefManagedDevicesRequest) (CollectionOfLinksOfManagedDevice, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfLinksOfManagedDevice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDetectedAppApiService.DeviceManagementDetectedAppsListRefManagedDevices")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/detectedApps/{detectedApp-id}/managedDevices/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"detectedApp-id"+"}", _neturl.PathEscape(parameterToString(r.detectedAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementGetDetectedAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDetectedAppApiService
	detectedAppId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceManagementGetDetectedAppsRequest) Select_(select_ []string) ApiDeviceManagementGetDetectedAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementGetDetectedAppsRequest) Expand(expand []string) ApiDeviceManagementGetDetectedAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementGetDetectedAppsRequest) Execute() (MicrosoftGraphDetectedApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementGetDetectedAppsExecute(r)
}

/*
DeviceManagementGetDetectedApps Get detectedApps from deviceManagement

The list of detected apps associated with a device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param detectedAppId key: id of detectedApp
 @return ApiDeviceManagementGetDetectedAppsRequest
*/
func (a *DeviceManagementDetectedAppApiService) DeviceManagementGetDetectedApps(ctx _context.Context, detectedAppId string) ApiDeviceManagementGetDetectedAppsRequest {
	return ApiDeviceManagementGetDetectedAppsRequest{
		ApiService: a,
		ctx: ctx,
		detectedAppId: detectedAppId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDetectedApp
func (a *DeviceManagementDetectedAppApiService) DeviceManagementGetDetectedAppsExecute(r ApiDeviceManagementGetDetectedAppsRequest) (MicrosoftGraphDetectedApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDetectedApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDetectedAppApiService.DeviceManagementGetDetectedApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/detectedApps/{detectedApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"detectedApp-id"+"}", _neturl.PathEscape(parameterToString(r.detectedAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementListDetectedAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDetectedAppApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceManagementListDetectedAppsRequest) Top(top int32) ApiDeviceManagementListDetectedAppsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceManagementListDetectedAppsRequest) Skip(skip int32) ApiDeviceManagementListDetectedAppsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceManagementListDetectedAppsRequest) Search(search string) ApiDeviceManagementListDetectedAppsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceManagementListDetectedAppsRequest) Filter(filter string) ApiDeviceManagementListDetectedAppsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceManagementListDetectedAppsRequest) Count(count bool) ApiDeviceManagementListDetectedAppsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceManagementListDetectedAppsRequest) Orderby(orderby []string) ApiDeviceManagementListDetectedAppsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceManagementListDetectedAppsRequest) Select_(select_ []string) ApiDeviceManagementListDetectedAppsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceManagementListDetectedAppsRequest) Expand(expand []string) ApiDeviceManagementListDetectedAppsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceManagementListDetectedAppsRequest) Execute() (CollectionOfDetectedApp, *_nethttp.Response, error) {
	return r.ApiService.DeviceManagementListDetectedAppsExecute(r)
}

/*
DeviceManagementListDetectedApps Get detectedApps from deviceManagement

The list of detected apps associated with a device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceManagementListDetectedAppsRequest
*/
func (a *DeviceManagementDetectedAppApiService) DeviceManagementListDetectedApps(ctx _context.Context) ApiDeviceManagementListDetectedAppsRequest {
	return ApiDeviceManagementListDetectedAppsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfDetectedApp
func (a *DeviceManagementDetectedAppApiService) DeviceManagementListDetectedAppsExecute(r ApiDeviceManagementListDetectedAppsRequest) (CollectionOfDetectedApp, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDetectedApp
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDetectedAppApiService.DeviceManagementListDetectedApps")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/detectedApps"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceManagementUpdateDetectedAppsRequest struct {
	ctx _context.Context
	ApiService *DeviceManagementDetectedAppApiService
	detectedAppId string
	microsoftGraphDetectedApp *MicrosoftGraphDetectedApp
}

// New navigation property values
func (r ApiDeviceManagementUpdateDetectedAppsRequest) MicrosoftGraphDetectedApp(microsoftGraphDetectedApp MicrosoftGraphDetectedApp) ApiDeviceManagementUpdateDetectedAppsRequest {
	r.microsoftGraphDetectedApp = &microsoftGraphDetectedApp
	return r
}

func (r ApiDeviceManagementUpdateDetectedAppsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceManagementUpdateDetectedAppsExecute(r)
}

/*
DeviceManagementUpdateDetectedApps Update the navigation property detectedApps in deviceManagement

The list of detected apps associated with a device.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param detectedAppId key: id of detectedApp
 @return ApiDeviceManagementUpdateDetectedAppsRequest
*/
func (a *DeviceManagementDetectedAppApiService) DeviceManagementUpdateDetectedApps(ctx _context.Context, detectedAppId string) ApiDeviceManagementUpdateDetectedAppsRequest {
	return ApiDeviceManagementUpdateDetectedAppsRequest{
		ApiService: a,
		ctx: ctx,
		detectedAppId: detectedAppId,
	}
}

// Execute executes the request
func (a *DeviceManagementDetectedAppApiService) DeviceManagementUpdateDetectedAppsExecute(r ApiDeviceManagementUpdateDetectedAppsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceManagementDetectedAppApiService.DeviceManagementUpdateDetectedApps")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceManagement/detectedApps/{detectedApp-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"detectedApp-id"+"}", _neturl.PathEscape(parameterToString(r.detectedAppId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphDetectedApp == nil {
		return nil, reportError("microsoftGraphDetectedApp is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphDetectedApp
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
