/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// MicrosoftGraphPatternedRecurrence struct for MicrosoftGraphPatternedRecurrence
type MicrosoftGraphPatternedRecurrence struct {
	// The frequency of an event. Do not specify for a one-time access review.
	Pattern AnyOfmicrosoftGraphRecurrencePattern `json:"pattern,omitempty"`
	// The duration of an event.
	Range AnyOfmicrosoftGraphRecurrenceRange `json:"range,omitempty"`
}

// NewMicrosoftGraphPatternedRecurrence instantiates a new MicrosoftGraphPatternedRecurrence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphPatternedRecurrence() *MicrosoftGraphPatternedRecurrence {
	this := MicrosoftGraphPatternedRecurrence{}
	return &this
}

// NewMicrosoftGraphPatternedRecurrenceWithDefaults instantiates a new MicrosoftGraphPatternedRecurrence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphPatternedRecurrenceWithDefaults() *MicrosoftGraphPatternedRecurrence {
	this := MicrosoftGraphPatternedRecurrence{}
	return &this
}

// GetPattern returns the Pattern field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPatternedRecurrence) GetPattern() AnyOfmicrosoftGraphRecurrencePattern {
	if o == nil  {
		var ret AnyOfmicrosoftGraphRecurrencePattern
		return ret
	}
	return o.Pattern
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPatternedRecurrence) GetPatternOk() (*AnyOfmicrosoftGraphRecurrencePattern, bool) {
	if o == nil || o.Pattern == nil {
		return nil, false
	}
	return &o.Pattern, true
}

// HasPattern returns a boolean if a field has been set.
func (o *MicrosoftGraphPatternedRecurrence) HasPattern() bool {
	if o != nil && o.Pattern != nil {
		return true
	}

	return false
}

// SetPattern gets a reference to the given AnyOfmicrosoftGraphRecurrencePattern and assigns it to the Pattern field.
func (o *MicrosoftGraphPatternedRecurrence) SetPattern(v AnyOfmicrosoftGraphRecurrencePattern) {
	o.Pattern = v
}

// GetRange returns the Range field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPatternedRecurrence) GetRange() AnyOfmicrosoftGraphRecurrenceRange {
	if o == nil  {
		var ret AnyOfmicrosoftGraphRecurrenceRange
		return ret
	}
	return o.Range
}

// GetRangeOk returns a tuple with the Range field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPatternedRecurrence) GetRangeOk() (*AnyOfmicrosoftGraphRecurrenceRange, bool) {
	if o == nil || o.Range == nil {
		return nil, false
	}
	return &o.Range, true
}

// HasRange returns a boolean if a field has been set.
func (o *MicrosoftGraphPatternedRecurrence) HasRange() bool {
	if o != nil && o.Range != nil {
		return true
	}

	return false
}

// SetRange gets a reference to the given AnyOfmicrosoftGraphRecurrenceRange and assigns it to the Range field.
func (o *MicrosoftGraphPatternedRecurrence) SetRange(v AnyOfmicrosoftGraphRecurrenceRange) {
	o.Range = v
}

func (o MicrosoftGraphPatternedRecurrence) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Pattern != nil {
		toSerialize["pattern"] = o.Pattern
	}
	if o.Range != nil {
		toSerialize["range"] = o.Range
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphPatternedRecurrence struct {
	value *MicrosoftGraphPatternedRecurrence
	isSet bool
}

func (v NullableMicrosoftGraphPatternedRecurrence) Get() *MicrosoftGraphPatternedRecurrence {
	return v.value
}

func (v *NullableMicrosoftGraphPatternedRecurrence) Set(val *MicrosoftGraphPatternedRecurrence) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPatternedRecurrence) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPatternedRecurrence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPatternedRecurrence(val *MicrosoftGraphPatternedRecurrence) *NullableMicrosoftGraphPatternedRecurrence {
	return &NullableMicrosoftGraphPatternedRecurrence{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPatternedRecurrence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPatternedRecurrence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


