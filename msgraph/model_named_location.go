/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"time"
)

// NamedLocation struct for NamedLocation
type NamedLocation struct {
	// The Timestamp type represents creation date and time of the location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	CreatedDateTime NullableTime `json:"createdDateTime,omitempty"`
	// Human-readable name of the location.
	DisplayName *string `json:"displayName,omitempty"`
	// The Timestamp type represents last modified date and time of the location using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z. Read-only.
	ModifiedDateTime NullableTime `json:"modifiedDateTime,omitempty"`
}

// NewNamedLocation instantiates a new NamedLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamedLocation() *NamedLocation {
	this := NamedLocation{}
	return &this
}

// NewNamedLocationWithDefaults instantiates a new NamedLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamedLocationWithDefaults() *NamedLocation {
	this := NamedLocation{}
	return &this
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NamedLocation) GetCreatedDateTime() time.Time {
	if o == nil || o.CreatedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime.Get()
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NamedLocation) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedDateTime.Get(), o.CreatedDateTime.IsSet()
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *NamedLocation) HasCreatedDateTime() bool {
	if o != nil && o.CreatedDateTime.IsSet() {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given NullableTime and assigns it to the CreatedDateTime field.
func (o *NamedLocation) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime.Set(&v)
}
// SetCreatedDateTimeNil sets the value for CreatedDateTime to be an explicit nil
func (o *NamedLocation) SetCreatedDateTimeNil() {
	o.CreatedDateTime.Set(nil)
}

// UnsetCreatedDateTime ensures that no value is present for CreatedDateTime, not even an explicit nil
func (o *NamedLocation) UnsetCreatedDateTime() {
	o.CreatedDateTime.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *NamedLocation) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamedLocation) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *NamedLocation) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *NamedLocation) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetModifiedDateTime returns the ModifiedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NamedLocation) GetModifiedDateTime() time.Time {
	if o == nil || o.ModifiedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.ModifiedDateTime.Get()
}

// GetModifiedDateTimeOk returns a tuple with the ModifiedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NamedLocation) GetModifiedDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ModifiedDateTime.Get(), o.ModifiedDateTime.IsSet()
}

// HasModifiedDateTime returns a boolean if a field has been set.
func (o *NamedLocation) HasModifiedDateTime() bool {
	if o != nil && o.ModifiedDateTime.IsSet() {
		return true
	}

	return false
}

// SetModifiedDateTime gets a reference to the given NullableTime and assigns it to the ModifiedDateTime field.
func (o *NamedLocation) SetModifiedDateTime(v time.Time) {
	o.ModifiedDateTime.Set(&v)
}
// SetModifiedDateTimeNil sets the value for ModifiedDateTime to be an explicit nil
func (o *NamedLocation) SetModifiedDateTimeNil() {
	o.ModifiedDateTime.Set(nil)
}

// UnsetModifiedDateTime ensures that no value is present for ModifiedDateTime, not even an explicit nil
func (o *NamedLocation) UnsetModifiedDateTime() {
	o.ModifiedDateTime.Unset()
}

func (o NamedLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedDateTime.IsSet() {
		toSerialize["createdDateTime"] = o.CreatedDateTime.Get()
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.ModifiedDateTime.IsSet() {
		toSerialize["modifiedDateTime"] = o.ModifiedDateTime.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNamedLocation struct {
	value *NamedLocation
	isSet bool
}

func (v NullableNamedLocation) Get() *NamedLocation {
	return v.value
}

func (v *NullableNamedLocation) Set(val *NamedLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableNamedLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableNamedLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamedLocation(val *NamedLocation) *NullableNamedLocation {
	return &NullableNamedLocation{value: val, isSet: true}
}

func (v NullableNamedLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamedLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


