/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"time"
)

// ConversationMember struct for ConversationMember
type ConversationMember struct {
	// The display name of the user.
	DisplayName NullableString `json:"displayName,omitempty"`
	// The roles for that user.
	Roles *[]*string `json:"roles,omitempty"`
	// The timestamp denoting how far back a conversation's history is shared with the conversation member. This property is settable only for members of a chat.
	VisibleHistoryStartDateTime NullableTime `json:"visibleHistoryStartDateTime,omitempty"`
}

// NewConversationMember instantiates a new ConversationMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConversationMember() *ConversationMember {
	this := ConversationMember{}
	return &this
}

// NewConversationMemberWithDefaults instantiates a new ConversationMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConversationMemberWithDefaults() *ConversationMember {
	this := ConversationMember{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversationMember) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversationMember) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ConversationMember) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *ConversationMember) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *ConversationMember) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *ConversationMember) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *ConversationMember) GetRoles() []*string {
	if o == nil || o.Roles == nil {
		var ret []*string
		return ret
	}
	return *o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConversationMember) GetRolesOk() (*[]*string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *ConversationMember) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []*string and assigns it to the Roles field.
func (o *ConversationMember) SetRoles(v []*string) {
	o.Roles = &v
}

// GetVisibleHistoryStartDateTime returns the VisibleHistoryStartDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConversationMember) GetVisibleHistoryStartDateTime() time.Time {
	if o == nil || o.VisibleHistoryStartDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.VisibleHistoryStartDateTime.Get()
}

// GetVisibleHistoryStartDateTimeOk returns a tuple with the VisibleHistoryStartDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConversationMember) GetVisibleHistoryStartDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VisibleHistoryStartDateTime.Get(), o.VisibleHistoryStartDateTime.IsSet()
}

// HasVisibleHistoryStartDateTime returns a boolean if a field has been set.
func (o *ConversationMember) HasVisibleHistoryStartDateTime() bool {
	if o != nil && o.VisibleHistoryStartDateTime.IsSet() {
		return true
	}

	return false
}

// SetVisibleHistoryStartDateTime gets a reference to the given NullableTime and assigns it to the VisibleHistoryStartDateTime field.
func (o *ConversationMember) SetVisibleHistoryStartDateTime(v time.Time) {
	o.VisibleHistoryStartDateTime.Set(&v)
}
// SetVisibleHistoryStartDateTimeNil sets the value for VisibleHistoryStartDateTime to be an explicit nil
func (o *ConversationMember) SetVisibleHistoryStartDateTimeNil() {
	o.VisibleHistoryStartDateTime.Set(nil)
}

// UnsetVisibleHistoryStartDateTime ensures that no value is present for VisibleHistoryStartDateTime, not even an explicit nil
func (o *ConversationMember) UnsetVisibleHistoryStartDateTime() {
	o.VisibleHistoryStartDateTime.Unset()
}

func (o ConversationMember) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.VisibleHistoryStartDateTime.IsSet() {
		toSerialize["visibleHistoryStartDateTime"] = o.VisibleHistoryStartDateTime.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableConversationMember struct {
	value *ConversationMember
	isSet bool
}

func (v NullableConversationMember) Get() *ConversationMember {
	return v.value
}

func (v *NullableConversationMember) Set(val *ConversationMember) {
	v.value = val
	v.isSet = true
}

func (v NullableConversationMember) IsSet() bool {
	return v.isSet
}

func (v *NullableConversationMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConversationMember(val *ConversationMember) *NullableConversationMember {
	return &NullableConversationMember{value: val, isSet: true}
}

func (v NullableConversationMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConversationMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


