/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// AgreementsAgreementFileApiService AgreementsAgreementFileApi service
type AgreementsAgreementFileApiService service

type ApiAgreementsDeleteFileRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileApiService
	agreementId string
	ifMatch *string
}

// ETag
func (r ApiAgreementsDeleteFileRequest) IfMatch(ifMatch string) ApiAgreementsDeleteFileRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiAgreementsDeleteFileRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AgreementsDeleteFileExecute(r)
}

/*
AgreementsDeleteFile Delete navigation property file for agreements

Default PDF linked to this agreement.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @return ApiAgreementsDeleteFileRequest
*/
func (a *AgreementsAgreementFileApiService) AgreementsDeleteFile(ctx _context.Context, agreementId string) ApiAgreementsDeleteFileRequest {
	return ApiAgreementsDeleteFileRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
	}
}

// Execute executes the request
func (a *AgreementsAgreementFileApiService) AgreementsDeleteFileExecute(r ApiAgreementsDeleteFileRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileApiService.AgreementsDeleteFile")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/file"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAgreementsFileCreateLocalizationsRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileApiService
	agreementId string
	microsoftGraphAgreementFileLocalization *MicrosoftGraphAgreementFileLocalization
}

// New navigation property
func (r ApiAgreementsFileCreateLocalizationsRequest) MicrosoftGraphAgreementFileLocalization(microsoftGraphAgreementFileLocalization MicrosoftGraphAgreementFileLocalization) ApiAgreementsFileCreateLocalizationsRequest {
	r.microsoftGraphAgreementFileLocalization = &microsoftGraphAgreementFileLocalization
	return r
}

func (r ApiAgreementsFileCreateLocalizationsRequest) Execute() (MicrosoftGraphAgreementFileLocalization, *_nethttp.Response, error) {
	return r.ApiService.AgreementsFileCreateLocalizationsExecute(r)
}

/*
AgreementsFileCreateLocalizations Create new navigation property to localizations for agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @return ApiAgreementsFileCreateLocalizationsRequest
*/
func (a *AgreementsAgreementFileApiService) AgreementsFileCreateLocalizations(ctx _context.Context, agreementId string) ApiAgreementsFileCreateLocalizationsRequest {
	return ApiAgreementsFileCreateLocalizationsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAgreementFileLocalization
func (a *AgreementsAgreementFileApiService) AgreementsFileCreateLocalizationsExecute(r ApiAgreementsFileCreateLocalizationsRequest) (MicrosoftGraphAgreementFileLocalization, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAgreementFileLocalization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileApiService.AgreementsFileCreateLocalizations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/file/localizations"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAgreementFileLocalization == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAgreementFileLocalization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAgreementFileLocalization
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsFileDeleteLocalizationsRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileApiService
	agreementId string
	agreementFileLocalizationId string
	ifMatch *string
}

// ETag
func (r ApiAgreementsFileDeleteLocalizationsRequest) IfMatch(ifMatch string) ApiAgreementsFileDeleteLocalizationsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiAgreementsFileDeleteLocalizationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AgreementsFileDeleteLocalizationsExecute(r)
}

/*
AgreementsFileDeleteLocalizations Delete navigation property localizations for agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @return ApiAgreementsFileDeleteLocalizationsRequest
*/
func (a *AgreementsAgreementFileApiService) AgreementsFileDeleteLocalizations(ctx _context.Context, agreementId string, agreementFileLocalizationId string) ApiAgreementsFileDeleteLocalizationsRequest {
	return ApiAgreementsFileDeleteLocalizationsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
	}
}

// Execute executes the request
func (a *AgreementsAgreementFileApiService) AgreementsFileDeleteLocalizationsExecute(r ApiAgreementsFileDeleteLocalizationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileApiService.AgreementsFileDeleteLocalizations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/file/localizations/{agreementFileLocalization-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAgreementsFileGetLocalizationsRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileApiService
	agreementId string
	agreementFileLocalizationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiAgreementsFileGetLocalizationsRequest) Select_(select_ []string) ApiAgreementsFileGetLocalizationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAgreementsFileGetLocalizationsRequest) Expand(expand []string) ApiAgreementsFileGetLocalizationsRequest {
	r.expand = &expand
	return r
}

func (r ApiAgreementsFileGetLocalizationsRequest) Execute() (MicrosoftGraphAgreementFileLocalization, *_nethttp.Response, error) {
	return r.ApiService.AgreementsFileGetLocalizationsExecute(r)
}

/*
AgreementsFileGetLocalizations Get localizations from agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @return ApiAgreementsFileGetLocalizationsRequest
*/
func (a *AgreementsAgreementFileApiService) AgreementsFileGetLocalizations(ctx _context.Context, agreementId string, agreementFileLocalizationId string) ApiAgreementsFileGetLocalizationsRequest {
	return ApiAgreementsFileGetLocalizationsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAgreementFileLocalization
func (a *AgreementsAgreementFileApiService) AgreementsFileGetLocalizationsExecute(r ApiAgreementsFileGetLocalizationsRequest) (MicrosoftGraphAgreementFileLocalization, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAgreementFileLocalization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileApiService.AgreementsFileGetLocalizations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/file/localizations/{agreementFileLocalization-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsFileListLocalizationsRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileApiService
	agreementId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiAgreementsFileListLocalizationsRequest) Top(top int32) ApiAgreementsFileListLocalizationsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiAgreementsFileListLocalizationsRequest) Skip(skip int32) ApiAgreementsFileListLocalizationsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiAgreementsFileListLocalizationsRequest) Search(search string) ApiAgreementsFileListLocalizationsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiAgreementsFileListLocalizationsRequest) Filter(filter string) ApiAgreementsFileListLocalizationsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiAgreementsFileListLocalizationsRequest) Count(count bool) ApiAgreementsFileListLocalizationsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiAgreementsFileListLocalizationsRequest) Orderby(orderby []string) ApiAgreementsFileListLocalizationsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiAgreementsFileListLocalizationsRequest) Select_(select_ []string) ApiAgreementsFileListLocalizationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAgreementsFileListLocalizationsRequest) Expand(expand []string) ApiAgreementsFileListLocalizationsRequest {
	r.expand = &expand
	return r
}

func (r ApiAgreementsFileListLocalizationsRequest) Execute() (CollectionOfAgreementFileLocalization, *_nethttp.Response, error) {
	return r.ApiService.AgreementsFileListLocalizationsExecute(r)
}

/*
AgreementsFileListLocalizations Get localizations from agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @return ApiAgreementsFileListLocalizationsRequest
*/
func (a *AgreementsAgreementFileApiService) AgreementsFileListLocalizations(ctx _context.Context, agreementId string) ApiAgreementsFileListLocalizationsRequest {
	return ApiAgreementsFileListLocalizationsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
	}
}

// Execute executes the request
//  @return CollectionOfAgreementFileLocalization
func (a *AgreementsAgreementFileApiService) AgreementsFileListLocalizationsExecute(r ApiAgreementsFileListLocalizationsRequest) (CollectionOfAgreementFileLocalization, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAgreementFileLocalization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileApiService.AgreementsFileListLocalizations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/file/localizations"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsFileLocalizationsCreateVersionsRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileApiService
	agreementId string
	agreementFileLocalizationId string
	microsoftGraphAgreementFileVersion *MicrosoftGraphAgreementFileVersion
}

// New navigation property
func (r ApiAgreementsFileLocalizationsCreateVersionsRequest) MicrosoftGraphAgreementFileVersion(microsoftGraphAgreementFileVersion MicrosoftGraphAgreementFileVersion) ApiAgreementsFileLocalizationsCreateVersionsRequest {
	r.microsoftGraphAgreementFileVersion = &microsoftGraphAgreementFileVersion
	return r
}

func (r ApiAgreementsFileLocalizationsCreateVersionsRequest) Execute() (MicrosoftGraphAgreementFileVersion, *_nethttp.Response, error) {
	return r.ApiService.AgreementsFileLocalizationsCreateVersionsExecute(r)
}

/*
AgreementsFileLocalizationsCreateVersions Create new navigation property to versions for agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @return ApiAgreementsFileLocalizationsCreateVersionsRequest
*/
func (a *AgreementsAgreementFileApiService) AgreementsFileLocalizationsCreateVersions(ctx _context.Context, agreementId string, agreementFileLocalizationId string) ApiAgreementsFileLocalizationsCreateVersionsRequest {
	return ApiAgreementsFileLocalizationsCreateVersionsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAgreementFileVersion
func (a *AgreementsAgreementFileApiService) AgreementsFileLocalizationsCreateVersionsExecute(r ApiAgreementsFileLocalizationsCreateVersionsRequest) (MicrosoftGraphAgreementFileVersion, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAgreementFileVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileApiService.AgreementsFileLocalizationsCreateVersions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/file/localizations/{agreementFileLocalization-id}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAgreementFileVersion == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphAgreementFileVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAgreementFileVersion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsFileLocalizationsDeleteVersionsRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileApiService
	agreementId string
	agreementFileLocalizationId string
	agreementFileVersionId string
	ifMatch *string
}

// ETag
func (r ApiAgreementsFileLocalizationsDeleteVersionsRequest) IfMatch(ifMatch string) ApiAgreementsFileLocalizationsDeleteVersionsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiAgreementsFileLocalizationsDeleteVersionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AgreementsFileLocalizationsDeleteVersionsExecute(r)
}

/*
AgreementsFileLocalizationsDeleteVersions Delete navigation property versions for agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @param agreementFileVersionId key: id of agreementFileVersion
 @return ApiAgreementsFileLocalizationsDeleteVersionsRequest
*/
func (a *AgreementsAgreementFileApiService) AgreementsFileLocalizationsDeleteVersions(ctx _context.Context, agreementId string, agreementFileLocalizationId string, agreementFileVersionId string) ApiAgreementsFileLocalizationsDeleteVersionsRequest {
	return ApiAgreementsFileLocalizationsDeleteVersionsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
		agreementFileVersionId: agreementFileVersionId,
	}
}

// Execute executes the request
func (a *AgreementsAgreementFileApiService) AgreementsFileLocalizationsDeleteVersionsExecute(r ApiAgreementsFileLocalizationsDeleteVersionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileApiService.AgreementsFileLocalizationsDeleteVersions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/file/localizations/{agreementFileLocalization-id}/versions/{agreementFileVersion-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileVersion-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAgreementsFileLocalizationsGetVersionsRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileApiService
	agreementId string
	agreementFileLocalizationId string
	agreementFileVersionId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiAgreementsFileLocalizationsGetVersionsRequest) Select_(select_ []string) ApiAgreementsFileLocalizationsGetVersionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAgreementsFileLocalizationsGetVersionsRequest) Expand(expand []string) ApiAgreementsFileLocalizationsGetVersionsRequest {
	r.expand = &expand
	return r
}

func (r ApiAgreementsFileLocalizationsGetVersionsRequest) Execute() (MicrosoftGraphAgreementFileVersion, *_nethttp.Response, error) {
	return r.ApiService.AgreementsFileLocalizationsGetVersionsExecute(r)
}

/*
AgreementsFileLocalizationsGetVersions Get versions from agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @param agreementFileVersionId key: id of agreementFileVersion
 @return ApiAgreementsFileLocalizationsGetVersionsRequest
*/
func (a *AgreementsAgreementFileApiService) AgreementsFileLocalizationsGetVersions(ctx _context.Context, agreementId string, agreementFileLocalizationId string, agreementFileVersionId string) ApiAgreementsFileLocalizationsGetVersionsRequest {
	return ApiAgreementsFileLocalizationsGetVersionsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
		agreementFileVersionId: agreementFileVersionId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAgreementFileVersion
func (a *AgreementsAgreementFileApiService) AgreementsFileLocalizationsGetVersionsExecute(r ApiAgreementsFileLocalizationsGetVersionsRequest) (MicrosoftGraphAgreementFileVersion, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAgreementFileVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileApiService.AgreementsFileLocalizationsGetVersions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/file/localizations/{agreementFileLocalization-id}/versions/{agreementFileVersion-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileVersion-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsFileLocalizationsListVersionsRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileApiService
	agreementId string
	agreementFileLocalizationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiAgreementsFileLocalizationsListVersionsRequest) Top(top int32) ApiAgreementsFileLocalizationsListVersionsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiAgreementsFileLocalizationsListVersionsRequest) Skip(skip int32) ApiAgreementsFileLocalizationsListVersionsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiAgreementsFileLocalizationsListVersionsRequest) Search(search string) ApiAgreementsFileLocalizationsListVersionsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiAgreementsFileLocalizationsListVersionsRequest) Filter(filter string) ApiAgreementsFileLocalizationsListVersionsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiAgreementsFileLocalizationsListVersionsRequest) Count(count bool) ApiAgreementsFileLocalizationsListVersionsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiAgreementsFileLocalizationsListVersionsRequest) Orderby(orderby []string) ApiAgreementsFileLocalizationsListVersionsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiAgreementsFileLocalizationsListVersionsRequest) Select_(select_ []string) ApiAgreementsFileLocalizationsListVersionsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAgreementsFileLocalizationsListVersionsRequest) Expand(expand []string) ApiAgreementsFileLocalizationsListVersionsRequest {
	r.expand = &expand
	return r
}

func (r ApiAgreementsFileLocalizationsListVersionsRequest) Execute() (CollectionOfAgreementFileVersion, *_nethttp.Response, error) {
	return r.ApiService.AgreementsFileLocalizationsListVersionsExecute(r)
}

/*
AgreementsFileLocalizationsListVersions Get versions from agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @return ApiAgreementsFileLocalizationsListVersionsRequest
*/
func (a *AgreementsAgreementFileApiService) AgreementsFileLocalizationsListVersions(ctx _context.Context, agreementId string, agreementFileLocalizationId string) ApiAgreementsFileLocalizationsListVersionsRequest {
	return ApiAgreementsFileLocalizationsListVersionsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
	}
}

// Execute executes the request
//  @return CollectionOfAgreementFileVersion
func (a *AgreementsAgreementFileApiService) AgreementsFileLocalizationsListVersionsExecute(r ApiAgreementsFileLocalizationsListVersionsRequest) (CollectionOfAgreementFileVersion, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfAgreementFileVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileApiService.AgreementsFileLocalizationsListVersions")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/file/localizations/{agreementFileLocalization-id}/versions"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsFileLocalizationsUpdateVersionsRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileApiService
	agreementId string
	agreementFileLocalizationId string
	agreementFileVersionId string
	microsoftGraphAgreementFileVersion *MicrosoftGraphAgreementFileVersion
}

// New navigation property values
func (r ApiAgreementsFileLocalizationsUpdateVersionsRequest) MicrosoftGraphAgreementFileVersion(microsoftGraphAgreementFileVersion MicrosoftGraphAgreementFileVersion) ApiAgreementsFileLocalizationsUpdateVersionsRequest {
	r.microsoftGraphAgreementFileVersion = &microsoftGraphAgreementFileVersion
	return r
}

func (r ApiAgreementsFileLocalizationsUpdateVersionsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AgreementsFileLocalizationsUpdateVersionsExecute(r)
}

/*
AgreementsFileLocalizationsUpdateVersions Update the navigation property versions in agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @param agreementFileVersionId key: id of agreementFileVersion
 @return ApiAgreementsFileLocalizationsUpdateVersionsRequest
*/
func (a *AgreementsAgreementFileApiService) AgreementsFileLocalizationsUpdateVersions(ctx _context.Context, agreementId string, agreementFileLocalizationId string, agreementFileVersionId string) ApiAgreementsFileLocalizationsUpdateVersionsRequest {
	return ApiAgreementsFileLocalizationsUpdateVersionsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
		agreementFileVersionId: agreementFileVersionId,
	}
}

// Execute executes the request
func (a *AgreementsAgreementFileApiService) AgreementsFileLocalizationsUpdateVersionsExecute(r ApiAgreementsFileLocalizationsUpdateVersionsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileApiService.AgreementsFileLocalizationsUpdateVersions")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/file/localizations/{agreementFileLocalization-id}/versions/{agreementFileVersion-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileVersion-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileVersionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAgreementFileVersion == nil {
		return nil, reportError("microsoftGraphAgreementFileVersion is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAgreementFileVersion
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAgreementsFileUpdateLocalizationsRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileApiService
	agreementId string
	agreementFileLocalizationId string
	microsoftGraphAgreementFileLocalization *MicrosoftGraphAgreementFileLocalization
}

// New navigation property values
func (r ApiAgreementsFileUpdateLocalizationsRequest) MicrosoftGraphAgreementFileLocalization(microsoftGraphAgreementFileLocalization MicrosoftGraphAgreementFileLocalization) ApiAgreementsFileUpdateLocalizationsRequest {
	r.microsoftGraphAgreementFileLocalization = &microsoftGraphAgreementFileLocalization
	return r
}

func (r ApiAgreementsFileUpdateLocalizationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AgreementsFileUpdateLocalizationsExecute(r)
}

/*
AgreementsFileUpdateLocalizations Update the navigation property localizations in agreements

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @param agreementFileLocalizationId key: id of agreementFileLocalization
 @return ApiAgreementsFileUpdateLocalizationsRequest
*/
func (a *AgreementsAgreementFileApiService) AgreementsFileUpdateLocalizations(ctx _context.Context, agreementId string, agreementFileLocalizationId string) ApiAgreementsFileUpdateLocalizationsRequest {
	return ApiAgreementsFileUpdateLocalizationsRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
		agreementFileLocalizationId: agreementFileLocalizationId,
	}
}

// Execute executes the request
func (a *AgreementsAgreementFileApiService) AgreementsFileUpdateLocalizationsExecute(r ApiAgreementsFileUpdateLocalizationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileApiService.AgreementsFileUpdateLocalizations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/file/localizations/{agreementFileLocalization-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"agreementFileLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.agreementFileLocalizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAgreementFileLocalization == nil {
		return nil, reportError("microsoftGraphAgreementFileLocalization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAgreementFileLocalization
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiAgreementsGetFileRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileApiService
	agreementId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiAgreementsGetFileRequest) Select_(select_ []string) ApiAgreementsGetFileRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiAgreementsGetFileRequest) Expand(expand []string) ApiAgreementsGetFileRequest {
	r.expand = &expand
	return r
}

func (r ApiAgreementsGetFileRequest) Execute() (MicrosoftGraphAgreementFile, *_nethttp.Response, error) {
	return r.ApiService.AgreementsGetFileExecute(r)
}

/*
AgreementsGetFile Get file from agreements

Default PDF linked to this agreement.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @return ApiAgreementsGetFileRequest
*/
func (a *AgreementsAgreementFileApiService) AgreementsGetFile(ctx _context.Context, agreementId string) ApiAgreementsGetFileRequest {
	return ApiAgreementsGetFileRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphAgreementFile
func (a *AgreementsAgreementFileApiService) AgreementsGetFileExecute(r ApiAgreementsGetFileRequest) (MicrosoftGraphAgreementFile, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphAgreementFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileApiService.AgreementsGetFile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/file"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiAgreementsUpdateFileRequest struct {
	ctx _context.Context
	ApiService *AgreementsAgreementFileApiService
	agreementId string
	microsoftGraphAgreementFile *MicrosoftGraphAgreementFile
}

// New navigation property values
func (r ApiAgreementsUpdateFileRequest) MicrosoftGraphAgreementFile(microsoftGraphAgreementFile MicrosoftGraphAgreementFile) ApiAgreementsUpdateFileRequest {
	r.microsoftGraphAgreementFile = &microsoftGraphAgreementFile
	return r
}

func (r ApiAgreementsUpdateFileRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.AgreementsUpdateFileExecute(r)
}

/*
AgreementsUpdateFile Update the navigation property file in agreements

Default PDF linked to this agreement.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param agreementId key: id of agreement
 @return ApiAgreementsUpdateFileRequest
*/
func (a *AgreementsAgreementFileApiService) AgreementsUpdateFile(ctx _context.Context, agreementId string) ApiAgreementsUpdateFileRequest {
	return ApiAgreementsUpdateFileRequest{
		ApiService: a,
		ctx: ctx,
		agreementId: agreementId,
	}
}

// Execute executes the request
func (a *AgreementsAgreementFileApiService) AgreementsUpdateFileExecute(r ApiAgreementsUpdateFileRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AgreementsAgreementFileApiService.AgreementsUpdateFile")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/agreements/{agreement-id}/file"
	localVarPath = strings.Replace(localVarPath, "{"+"agreement-id"+"}", _neturl.PathEscape(parameterToString(r.agreementId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphAgreementFile == nil {
		return nil, reportError("microsoftGraphAgreementFile is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphAgreementFile
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
