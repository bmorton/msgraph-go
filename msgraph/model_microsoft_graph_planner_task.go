/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"time"
)

// MicrosoftGraphPlannerTask struct for MicrosoftGraphPlannerTask
type MicrosoftGraphPlannerTask struct {
	// Read-only.
	Id *string `json:"id,omitempty"`
	// Number of checklist items with value set to false, representing incomplete items.
	ActiveChecklistItemCount NullableInt32 `json:"activeChecklistItemCount,omitempty"`
	// The categories to which the task has been applied. See applied Categories for possible values.
	AppliedCategories AnyOfobject `json:"appliedCategories,omitempty"`
	// Hint used to order items of this type in a list view. The format is defined as outlined here.
	AssigneePriority NullableString `json:"assigneePriority,omitempty"`
	// The set of assignees the task is assigned to.
	Assignments AnyOfobject `json:"assignments,omitempty"`
	// Bucket ID to which the task belongs. The bucket needs to be in the plan that the task is in. It is 28 characters long and case-sensitive. Format validation is done on the service.
	BucketId NullableString `json:"bucketId,omitempty"`
	// Number of checklist items that are present on the task.
	ChecklistItemCount NullableInt32 `json:"checklistItemCount,omitempty"`
	// Identity of the user that completed the task.
	CompletedBy AnyOfmicrosoftGraphIdentitySet `json:"completedBy,omitempty"`
	// Read-only. Date and time at which the 'percentComplete' of the task is set to '100'. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CompletedDateTime NullableTime `json:"completedDateTime,omitempty"`
	// Thread ID of the conversation on the task. This is the ID of the conversation thread object created in the group.
	ConversationThreadId NullableString `json:"conversationThreadId,omitempty"`
	// Identity of the user that created the task.
	CreatedBy AnyOfmicrosoftGraphIdentitySet `json:"createdBy,omitempty"`
	// Read-only. Date and time at which the task is created. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	CreatedDateTime NullableTime `json:"createdDateTime,omitempty"`
	// Date and time at which the task is due. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	DueDateTime NullableTime `json:"dueDateTime,omitempty"`
	// Read-only. Value is true if the details object of the task has a non-empty description and false otherwise.
	HasDescription NullableBool `json:"hasDescription,omitempty"`
	// Hint used to order items of this type in a list view. The format is defined as outlined here.
	OrderHint NullableString `json:"orderHint,omitempty"`
	// Percentage of task completion. When set to 100, the task is considered completed.
	PercentComplete NullableInt32 `json:"percentComplete,omitempty"`
	// Plan ID to which the task belongs.
	PlanId NullableString `json:"planId,omitempty"`
	// This sets the type of preview that shows up on the task. The possible values are: automatic, noPreview, checklist, description, reference.
	PreviewType AnyOfmicrosoftGraphPlannerPreviewType `json:"previewType,omitempty"`
	// Number of external references that exist on the task.
	ReferenceCount NullableInt32 `json:"referenceCount,omitempty"`
	// Date and time at which the task starts. The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z
	StartDateTime NullableTime `json:"startDateTime,omitempty"`
	// Title of the task.
	Title *string `json:"title,omitempty"`
	// Read-only. Nullable. Used to render the task correctly in the task board view when grouped by assignedTo.
	AssignedToTaskBoardFormat AnyOfmicrosoftGraphPlannerAssignedToTaskBoardTaskFormat `json:"assignedToTaskBoardFormat,omitempty"`
	// Read-only. Nullable. Used to render the task correctly in the task board view when grouped by bucket.
	BucketTaskBoardFormat AnyOfmicrosoftGraphPlannerBucketTaskBoardTaskFormat `json:"bucketTaskBoardFormat,omitempty"`
	// Read-only. Nullable. Additional details about the task.
	Details AnyOfmicrosoftGraphPlannerTaskDetails `json:"details,omitempty"`
	// Read-only. Nullable. Used to render the task correctly in the task board view when grouped by progress.
	ProgressTaskBoardFormat AnyOfmicrosoftGraphPlannerProgressTaskBoardTaskFormat `json:"progressTaskBoardFormat,omitempty"`
}

// NewMicrosoftGraphPlannerTask instantiates a new MicrosoftGraphPlannerTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphPlannerTask() *MicrosoftGraphPlannerTask {
	this := MicrosoftGraphPlannerTask{}
	return &this
}

// NewMicrosoftGraphPlannerTaskWithDefaults instantiates a new MicrosoftGraphPlannerTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphPlannerTaskWithDefaults() *MicrosoftGraphPlannerTask {
	this := MicrosoftGraphPlannerTask{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MicrosoftGraphPlannerTask) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPlannerTask) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphPlannerTask) SetId(v string) {
	o.Id = &v
}

// GetActiveChecklistItemCount returns the ActiveChecklistItemCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetActiveChecklistItemCount() int32 {
	if o == nil || o.ActiveChecklistItemCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ActiveChecklistItemCount.Get()
}

// GetActiveChecklistItemCountOk returns a tuple with the ActiveChecklistItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetActiveChecklistItemCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ActiveChecklistItemCount.Get(), o.ActiveChecklistItemCount.IsSet()
}

// HasActiveChecklistItemCount returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasActiveChecklistItemCount() bool {
	if o != nil && o.ActiveChecklistItemCount.IsSet() {
		return true
	}

	return false
}

// SetActiveChecklistItemCount gets a reference to the given NullableInt32 and assigns it to the ActiveChecklistItemCount field.
func (o *MicrosoftGraphPlannerTask) SetActiveChecklistItemCount(v int32) {
	o.ActiveChecklistItemCount.Set(&v)
}
// SetActiveChecklistItemCountNil sets the value for ActiveChecklistItemCount to be an explicit nil
func (o *MicrosoftGraphPlannerTask) SetActiveChecklistItemCountNil() {
	o.ActiveChecklistItemCount.Set(nil)
}

// UnsetActiveChecklistItemCount ensures that no value is present for ActiveChecklistItemCount, not even an explicit nil
func (o *MicrosoftGraphPlannerTask) UnsetActiveChecklistItemCount() {
	o.ActiveChecklistItemCount.Unset()
}

// GetAppliedCategories returns the AppliedCategories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetAppliedCategories() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.AppliedCategories
}

// GetAppliedCategoriesOk returns a tuple with the AppliedCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetAppliedCategoriesOk() (*AnyOfobject, bool) {
	if o == nil || o.AppliedCategories == nil {
		return nil, false
	}
	return &o.AppliedCategories, true
}

// HasAppliedCategories returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasAppliedCategories() bool {
	if o != nil && o.AppliedCategories != nil {
		return true
	}

	return false
}

// SetAppliedCategories gets a reference to the given AnyOfobject and assigns it to the AppliedCategories field.
func (o *MicrosoftGraphPlannerTask) SetAppliedCategories(v AnyOfobject) {
	o.AppliedCategories = v
}

// GetAssigneePriority returns the AssigneePriority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetAssigneePriority() string {
	if o == nil || o.AssigneePriority.Get() == nil {
		var ret string
		return ret
	}
	return *o.AssigneePriority.Get()
}

// GetAssigneePriorityOk returns a tuple with the AssigneePriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetAssigneePriorityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AssigneePriority.Get(), o.AssigneePriority.IsSet()
}

// HasAssigneePriority returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasAssigneePriority() bool {
	if o != nil && o.AssigneePriority.IsSet() {
		return true
	}

	return false
}

// SetAssigneePriority gets a reference to the given NullableString and assigns it to the AssigneePriority field.
func (o *MicrosoftGraphPlannerTask) SetAssigneePriority(v string) {
	o.AssigneePriority.Set(&v)
}
// SetAssigneePriorityNil sets the value for AssigneePriority to be an explicit nil
func (o *MicrosoftGraphPlannerTask) SetAssigneePriorityNil() {
	o.AssigneePriority.Set(nil)
}

// UnsetAssigneePriority ensures that no value is present for AssigneePriority, not even an explicit nil
func (o *MicrosoftGraphPlannerTask) UnsetAssigneePriority() {
	o.AssigneePriority.Unset()
}

// GetAssignments returns the Assignments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetAssignments() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Assignments
}

// GetAssignmentsOk returns a tuple with the Assignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetAssignmentsOk() (*AnyOfobject, bool) {
	if o == nil || o.Assignments == nil {
		return nil, false
	}
	return &o.Assignments, true
}

// HasAssignments returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasAssignments() bool {
	if o != nil && o.Assignments != nil {
		return true
	}

	return false
}

// SetAssignments gets a reference to the given AnyOfobject and assigns it to the Assignments field.
func (o *MicrosoftGraphPlannerTask) SetAssignments(v AnyOfobject) {
	o.Assignments = v
}

// GetBucketId returns the BucketId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetBucketId() string {
	if o == nil || o.BucketId.Get() == nil {
		var ret string
		return ret
	}
	return *o.BucketId.Get()
}

// GetBucketIdOk returns a tuple with the BucketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetBucketIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BucketId.Get(), o.BucketId.IsSet()
}

// HasBucketId returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasBucketId() bool {
	if o != nil && o.BucketId.IsSet() {
		return true
	}

	return false
}

// SetBucketId gets a reference to the given NullableString and assigns it to the BucketId field.
func (o *MicrosoftGraphPlannerTask) SetBucketId(v string) {
	o.BucketId.Set(&v)
}
// SetBucketIdNil sets the value for BucketId to be an explicit nil
func (o *MicrosoftGraphPlannerTask) SetBucketIdNil() {
	o.BucketId.Set(nil)
}

// UnsetBucketId ensures that no value is present for BucketId, not even an explicit nil
func (o *MicrosoftGraphPlannerTask) UnsetBucketId() {
	o.BucketId.Unset()
}

// GetChecklistItemCount returns the ChecklistItemCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetChecklistItemCount() int32 {
	if o == nil || o.ChecklistItemCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ChecklistItemCount.Get()
}

// GetChecklistItemCountOk returns a tuple with the ChecklistItemCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetChecklistItemCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ChecklistItemCount.Get(), o.ChecklistItemCount.IsSet()
}

// HasChecklistItemCount returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasChecklistItemCount() bool {
	if o != nil && o.ChecklistItemCount.IsSet() {
		return true
	}

	return false
}

// SetChecklistItemCount gets a reference to the given NullableInt32 and assigns it to the ChecklistItemCount field.
func (o *MicrosoftGraphPlannerTask) SetChecklistItemCount(v int32) {
	o.ChecklistItemCount.Set(&v)
}
// SetChecklistItemCountNil sets the value for ChecklistItemCount to be an explicit nil
func (o *MicrosoftGraphPlannerTask) SetChecklistItemCountNil() {
	o.ChecklistItemCount.Set(nil)
}

// UnsetChecklistItemCount ensures that no value is present for ChecklistItemCount, not even an explicit nil
func (o *MicrosoftGraphPlannerTask) UnsetChecklistItemCount() {
	o.ChecklistItemCount.Unset()
}

// GetCompletedBy returns the CompletedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetCompletedBy() AnyOfmicrosoftGraphIdentitySet {
	if o == nil  {
		var ret AnyOfmicrosoftGraphIdentitySet
		return ret
	}
	return o.CompletedBy
}

// GetCompletedByOk returns a tuple with the CompletedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetCompletedByOk() (*AnyOfmicrosoftGraphIdentitySet, bool) {
	if o == nil || o.CompletedBy == nil {
		return nil, false
	}
	return &o.CompletedBy, true
}

// HasCompletedBy returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasCompletedBy() bool {
	if o != nil && o.CompletedBy != nil {
		return true
	}

	return false
}

// SetCompletedBy gets a reference to the given AnyOfmicrosoftGraphIdentitySet and assigns it to the CompletedBy field.
func (o *MicrosoftGraphPlannerTask) SetCompletedBy(v AnyOfmicrosoftGraphIdentitySet) {
	o.CompletedBy = v
}

// GetCompletedDateTime returns the CompletedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetCompletedDateTime() time.Time {
	if o == nil || o.CompletedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CompletedDateTime.Get()
}

// GetCompletedDateTimeOk returns a tuple with the CompletedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetCompletedDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CompletedDateTime.Get(), o.CompletedDateTime.IsSet()
}

// HasCompletedDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasCompletedDateTime() bool {
	if o != nil && o.CompletedDateTime.IsSet() {
		return true
	}

	return false
}

// SetCompletedDateTime gets a reference to the given NullableTime and assigns it to the CompletedDateTime field.
func (o *MicrosoftGraphPlannerTask) SetCompletedDateTime(v time.Time) {
	o.CompletedDateTime.Set(&v)
}
// SetCompletedDateTimeNil sets the value for CompletedDateTime to be an explicit nil
func (o *MicrosoftGraphPlannerTask) SetCompletedDateTimeNil() {
	o.CompletedDateTime.Set(nil)
}

// UnsetCompletedDateTime ensures that no value is present for CompletedDateTime, not even an explicit nil
func (o *MicrosoftGraphPlannerTask) UnsetCompletedDateTime() {
	o.CompletedDateTime.Unset()
}

// GetConversationThreadId returns the ConversationThreadId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetConversationThreadId() string {
	if o == nil || o.ConversationThreadId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConversationThreadId.Get()
}

// GetConversationThreadIdOk returns a tuple with the ConversationThreadId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetConversationThreadIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConversationThreadId.Get(), o.ConversationThreadId.IsSet()
}

// HasConversationThreadId returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasConversationThreadId() bool {
	if o != nil && o.ConversationThreadId.IsSet() {
		return true
	}

	return false
}

// SetConversationThreadId gets a reference to the given NullableString and assigns it to the ConversationThreadId field.
func (o *MicrosoftGraphPlannerTask) SetConversationThreadId(v string) {
	o.ConversationThreadId.Set(&v)
}
// SetConversationThreadIdNil sets the value for ConversationThreadId to be an explicit nil
func (o *MicrosoftGraphPlannerTask) SetConversationThreadIdNil() {
	o.ConversationThreadId.Set(nil)
}

// UnsetConversationThreadId ensures that no value is present for ConversationThreadId, not even an explicit nil
func (o *MicrosoftGraphPlannerTask) UnsetConversationThreadId() {
	o.ConversationThreadId.Unset()
}

// GetCreatedBy returns the CreatedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetCreatedBy() AnyOfmicrosoftGraphIdentitySet {
	if o == nil  {
		var ret AnyOfmicrosoftGraphIdentitySet
		return ret
	}
	return o.CreatedBy
}

// GetCreatedByOk returns a tuple with the CreatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetCreatedByOk() (*AnyOfmicrosoftGraphIdentitySet, bool) {
	if o == nil || o.CreatedBy == nil {
		return nil, false
	}
	return &o.CreatedBy, true
}

// HasCreatedBy returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasCreatedBy() bool {
	if o != nil && o.CreatedBy != nil {
		return true
	}

	return false
}

// SetCreatedBy gets a reference to the given AnyOfmicrosoftGraphIdentitySet and assigns it to the CreatedBy field.
func (o *MicrosoftGraphPlannerTask) SetCreatedBy(v AnyOfmicrosoftGraphIdentitySet) {
	o.CreatedBy = v
}

// GetCreatedDateTime returns the CreatedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetCreatedDateTime() time.Time {
	if o == nil || o.CreatedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedDateTime.Get()
}

// GetCreatedDateTimeOk returns a tuple with the CreatedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetCreatedDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedDateTime.Get(), o.CreatedDateTime.IsSet()
}

// HasCreatedDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasCreatedDateTime() bool {
	if o != nil && o.CreatedDateTime.IsSet() {
		return true
	}

	return false
}

// SetCreatedDateTime gets a reference to the given NullableTime and assigns it to the CreatedDateTime field.
func (o *MicrosoftGraphPlannerTask) SetCreatedDateTime(v time.Time) {
	o.CreatedDateTime.Set(&v)
}
// SetCreatedDateTimeNil sets the value for CreatedDateTime to be an explicit nil
func (o *MicrosoftGraphPlannerTask) SetCreatedDateTimeNil() {
	o.CreatedDateTime.Set(nil)
}

// UnsetCreatedDateTime ensures that no value is present for CreatedDateTime, not even an explicit nil
func (o *MicrosoftGraphPlannerTask) UnsetCreatedDateTime() {
	o.CreatedDateTime.Unset()
}

// GetDueDateTime returns the DueDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetDueDateTime() time.Time {
	if o == nil || o.DueDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.DueDateTime.Get()
}

// GetDueDateTimeOk returns a tuple with the DueDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetDueDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DueDateTime.Get(), o.DueDateTime.IsSet()
}

// HasDueDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasDueDateTime() bool {
	if o != nil && o.DueDateTime.IsSet() {
		return true
	}

	return false
}

// SetDueDateTime gets a reference to the given NullableTime and assigns it to the DueDateTime field.
func (o *MicrosoftGraphPlannerTask) SetDueDateTime(v time.Time) {
	o.DueDateTime.Set(&v)
}
// SetDueDateTimeNil sets the value for DueDateTime to be an explicit nil
func (o *MicrosoftGraphPlannerTask) SetDueDateTimeNil() {
	o.DueDateTime.Set(nil)
}

// UnsetDueDateTime ensures that no value is present for DueDateTime, not even an explicit nil
func (o *MicrosoftGraphPlannerTask) UnsetDueDateTime() {
	o.DueDateTime.Unset()
}

// GetHasDescription returns the HasDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetHasDescription() bool {
	if o == nil || o.HasDescription.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HasDescription.Get()
}

// GetHasDescriptionOk returns a tuple with the HasDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetHasDescriptionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HasDescription.Get(), o.HasDescription.IsSet()
}

// HasHasDescription returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasHasDescription() bool {
	if o != nil && o.HasDescription.IsSet() {
		return true
	}

	return false
}

// SetHasDescription gets a reference to the given NullableBool and assigns it to the HasDescription field.
func (o *MicrosoftGraphPlannerTask) SetHasDescription(v bool) {
	o.HasDescription.Set(&v)
}
// SetHasDescriptionNil sets the value for HasDescription to be an explicit nil
func (o *MicrosoftGraphPlannerTask) SetHasDescriptionNil() {
	o.HasDescription.Set(nil)
}

// UnsetHasDescription ensures that no value is present for HasDescription, not even an explicit nil
func (o *MicrosoftGraphPlannerTask) UnsetHasDescription() {
	o.HasDescription.Unset()
}

// GetOrderHint returns the OrderHint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetOrderHint() string {
	if o == nil || o.OrderHint.Get() == nil {
		var ret string
		return ret
	}
	return *o.OrderHint.Get()
}

// GetOrderHintOk returns a tuple with the OrderHint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetOrderHintOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OrderHint.Get(), o.OrderHint.IsSet()
}

// HasOrderHint returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasOrderHint() bool {
	if o != nil && o.OrderHint.IsSet() {
		return true
	}

	return false
}

// SetOrderHint gets a reference to the given NullableString and assigns it to the OrderHint field.
func (o *MicrosoftGraphPlannerTask) SetOrderHint(v string) {
	o.OrderHint.Set(&v)
}
// SetOrderHintNil sets the value for OrderHint to be an explicit nil
func (o *MicrosoftGraphPlannerTask) SetOrderHintNil() {
	o.OrderHint.Set(nil)
}

// UnsetOrderHint ensures that no value is present for OrderHint, not even an explicit nil
func (o *MicrosoftGraphPlannerTask) UnsetOrderHint() {
	o.OrderHint.Unset()
}

// GetPercentComplete returns the PercentComplete field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetPercentComplete() int32 {
	if o == nil || o.PercentComplete.Get() == nil {
		var ret int32
		return ret
	}
	return *o.PercentComplete.Get()
}

// GetPercentCompleteOk returns a tuple with the PercentComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetPercentCompleteOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PercentComplete.Get(), o.PercentComplete.IsSet()
}

// HasPercentComplete returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasPercentComplete() bool {
	if o != nil && o.PercentComplete.IsSet() {
		return true
	}

	return false
}

// SetPercentComplete gets a reference to the given NullableInt32 and assigns it to the PercentComplete field.
func (o *MicrosoftGraphPlannerTask) SetPercentComplete(v int32) {
	o.PercentComplete.Set(&v)
}
// SetPercentCompleteNil sets the value for PercentComplete to be an explicit nil
func (o *MicrosoftGraphPlannerTask) SetPercentCompleteNil() {
	o.PercentComplete.Set(nil)
}

// UnsetPercentComplete ensures that no value is present for PercentComplete, not even an explicit nil
func (o *MicrosoftGraphPlannerTask) UnsetPercentComplete() {
	o.PercentComplete.Unset()
}

// GetPlanId returns the PlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetPlanId() string {
	if o == nil || o.PlanId.Get() == nil {
		var ret string
		return ret
	}
	return *o.PlanId.Get()
}

// GetPlanIdOk returns a tuple with the PlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetPlanIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PlanId.Get(), o.PlanId.IsSet()
}

// HasPlanId returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasPlanId() bool {
	if o != nil && o.PlanId.IsSet() {
		return true
	}

	return false
}

// SetPlanId gets a reference to the given NullableString and assigns it to the PlanId field.
func (o *MicrosoftGraphPlannerTask) SetPlanId(v string) {
	o.PlanId.Set(&v)
}
// SetPlanIdNil sets the value for PlanId to be an explicit nil
func (o *MicrosoftGraphPlannerTask) SetPlanIdNil() {
	o.PlanId.Set(nil)
}

// UnsetPlanId ensures that no value is present for PlanId, not even an explicit nil
func (o *MicrosoftGraphPlannerTask) UnsetPlanId() {
	o.PlanId.Unset()
}

// GetPreviewType returns the PreviewType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetPreviewType() AnyOfmicrosoftGraphPlannerPreviewType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPlannerPreviewType
		return ret
	}
	return o.PreviewType
}

// GetPreviewTypeOk returns a tuple with the PreviewType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetPreviewTypeOk() (*AnyOfmicrosoftGraphPlannerPreviewType, bool) {
	if o == nil || o.PreviewType == nil {
		return nil, false
	}
	return &o.PreviewType, true
}

// HasPreviewType returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasPreviewType() bool {
	if o != nil && o.PreviewType != nil {
		return true
	}

	return false
}

// SetPreviewType gets a reference to the given AnyOfmicrosoftGraphPlannerPreviewType and assigns it to the PreviewType field.
func (o *MicrosoftGraphPlannerTask) SetPreviewType(v AnyOfmicrosoftGraphPlannerPreviewType) {
	o.PreviewType = v
}

// GetReferenceCount returns the ReferenceCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetReferenceCount() int32 {
	if o == nil || o.ReferenceCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ReferenceCount.Get()
}

// GetReferenceCountOk returns a tuple with the ReferenceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetReferenceCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReferenceCount.Get(), o.ReferenceCount.IsSet()
}

// HasReferenceCount returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasReferenceCount() bool {
	if o != nil && o.ReferenceCount.IsSet() {
		return true
	}

	return false
}

// SetReferenceCount gets a reference to the given NullableInt32 and assigns it to the ReferenceCount field.
func (o *MicrosoftGraphPlannerTask) SetReferenceCount(v int32) {
	o.ReferenceCount.Set(&v)
}
// SetReferenceCountNil sets the value for ReferenceCount to be an explicit nil
func (o *MicrosoftGraphPlannerTask) SetReferenceCountNil() {
	o.ReferenceCount.Set(nil)
}

// UnsetReferenceCount ensures that no value is present for ReferenceCount, not even an explicit nil
func (o *MicrosoftGraphPlannerTask) UnsetReferenceCount() {
	o.ReferenceCount.Unset()
}

// GetStartDateTime returns the StartDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetStartDateTime() time.Time {
	if o == nil || o.StartDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDateTime.Get()
}

// GetStartDateTimeOk returns a tuple with the StartDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetStartDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartDateTime.Get(), o.StartDateTime.IsSet()
}

// HasStartDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasStartDateTime() bool {
	if o != nil && o.StartDateTime.IsSet() {
		return true
	}

	return false
}

// SetStartDateTime gets a reference to the given NullableTime and assigns it to the StartDateTime field.
func (o *MicrosoftGraphPlannerTask) SetStartDateTime(v time.Time) {
	o.StartDateTime.Set(&v)
}
// SetStartDateTimeNil sets the value for StartDateTime to be an explicit nil
func (o *MicrosoftGraphPlannerTask) SetStartDateTimeNil() {
	o.StartDateTime.Set(nil)
}

// UnsetStartDateTime ensures that no value is present for StartDateTime, not even an explicit nil
func (o *MicrosoftGraphPlannerTask) UnsetStartDateTime() {
	o.StartDateTime.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *MicrosoftGraphPlannerTask) GetTitle() string {
	if o == nil || o.Title == nil {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphPlannerTask) GetTitleOk() (*string, bool) {
	if o == nil || o.Title == nil {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasTitle() bool {
	if o != nil && o.Title != nil {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *MicrosoftGraphPlannerTask) SetTitle(v string) {
	o.Title = &v
}

// GetAssignedToTaskBoardFormat returns the AssignedToTaskBoardFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetAssignedToTaskBoardFormat() AnyOfmicrosoftGraphPlannerAssignedToTaskBoardTaskFormat {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPlannerAssignedToTaskBoardTaskFormat
		return ret
	}
	return o.AssignedToTaskBoardFormat
}

// GetAssignedToTaskBoardFormatOk returns a tuple with the AssignedToTaskBoardFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetAssignedToTaskBoardFormatOk() (*AnyOfmicrosoftGraphPlannerAssignedToTaskBoardTaskFormat, bool) {
	if o == nil || o.AssignedToTaskBoardFormat == nil {
		return nil, false
	}
	return &o.AssignedToTaskBoardFormat, true
}

// HasAssignedToTaskBoardFormat returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasAssignedToTaskBoardFormat() bool {
	if o != nil && o.AssignedToTaskBoardFormat != nil {
		return true
	}

	return false
}

// SetAssignedToTaskBoardFormat gets a reference to the given AnyOfmicrosoftGraphPlannerAssignedToTaskBoardTaskFormat and assigns it to the AssignedToTaskBoardFormat field.
func (o *MicrosoftGraphPlannerTask) SetAssignedToTaskBoardFormat(v AnyOfmicrosoftGraphPlannerAssignedToTaskBoardTaskFormat) {
	o.AssignedToTaskBoardFormat = v
}

// GetBucketTaskBoardFormat returns the BucketTaskBoardFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetBucketTaskBoardFormat() AnyOfmicrosoftGraphPlannerBucketTaskBoardTaskFormat {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPlannerBucketTaskBoardTaskFormat
		return ret
	}
	return o.BucketTaskBoardFormat
}

// GetBucketTaskBoardFormatOk returns a tuple with the BucketTaskBoardFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetBucketTaskBoardFormatOk() (*AnyOfmicrosoftGraphPlannerBucketTaskBoardTaskFormat, bool) {
	if o == nil || o.BucketTaskBoardFormat == nil {
		return nil, false
	}
	return &o.BucketTaskBoardFormat, true
}

// HasBucketTaskBoardFormat returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasBucketTaskBoardFormat() bool {
	if o != nil && o.BucketTaskBoardFormat != nil {
		return true
	}

	return false
}

// SetBucketTaskBoardFormat gets a reference to the given AnyOfmicrosoftGraphPlannerBucketTaskBoardTaskFormat and assigns it to the BucketTaskBoardFormat field.
func (o *MicrosoftGraphPlannerTask) SetBucketTaskBoardFormat(v AnyOfmicrosoftGraphPlannerBucketTaskBoardTaskFormat) {
	o.BucketTaskBoardFormat = v
}

// GetDetails returns the Details field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetDetails() AnyOfmicrosoftGraphPlannerTaskDetails {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPlannerTaskDetails
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetDetailsOk() (*AnyOfmicrosoftGraphPlannerTaskDetails, bool) {
	if o == nil || o.Details == nil {
		return nil, false
	}
	return &o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasDetails() bool {
	if o != nil && o.Details != nil {
		return true
	}

	return false
}

// SetDetails gets a reference to the given AnyOfmicrosoftGraphPlannerTaskDetails and assigns it to the Details field.
func (o *MicrosoftGraphPlannerTask) SetDetails(v AnyOfmicrosoftGraphPlannerTaskDetails) {
	o.Details = v
}

// GetProgressTaskBoardFormat returns the ProgressTaskBoardFormat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphPlannerTask) GetProgressTaskBoardFormat() AnyOfmicrosoftGraphPlannerProgressTaskBoardTaskFormat {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPlannerProgressTaskBoardTaskFormat
		return ret
	}
	return o.ProgressTaskBoardFormat
}

// GetProgressTaskBoardFormatOk returns a tuple with the ProgressTaskBoardFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphPlannerTask) GetProgressTaskBoardFormatOk() (*AnyOfmicrosoftGraphPlannerProgressTaskBoardTaskFormat, bool) {
	if o == nil || o.ProgressTaskBoardFormat == nil {
		return nil, false
	}
	return &o.ProgressTaskBoardFormat, true
}

// HasProgressTaskBoardFormat returns a boolean if a field has been set.
func (o *MicrosoftGraphPlannerTask) HasProgressTaskBoardFormat() bool {
	if o != nil && o.ProgressTaskBoardFormat != nil {
		return true
	}

	return false
}

// SetProgressTaskBoardFormat gets a reference to the given AnyOfmicrosoftGraphPlannerProgressTaskBoardTaskFormat and assigns it to the ProgressTaskBoardFormat field.
func (o *MicrosoftGraphPlannerTask) SetProgressTaskBoardFormat(v AnyOfmicrosoftGraphPlannerProgressTaskBoardTaskFormat) {
	o.ProgressTaskBoardFormat = v
}

func (o MicrosoftGraphPlannerTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ActiveChecklistItemCount.IsSet() {
		toSerialize["activeChecklistItemCount"] = o.ActiveChecklistItemCount.Get()
	}
	if o.AppliedCategories != nil {
		toSerialize["appliedCategories"] = o.AppliedCategories
	}
	if o.AssigneePriority.IsSet() {
		toSerialize["assigneePriority"] = o.AssigneePriority.Get()
	}
	if o.Assignments != nil {
		toSerialize["assignments"] = o.Assignments
	}
	if o.BucketId.IsSet() {
		toSerialize["bucketId"] = o.BucketId.Get()
	}
	if o.ChecklistItemCount.IsSet() {
		toSerialize["checklistItemCount"] = o.ChecklistItemCount.Get()
	}
	if o.CompletedBy != nil {
		toSerialize["completedBy"] = o.CompletedBy
	}
	if o.CompletedDateTime.IsSet() {
		toSerialize["completedDateTime"] = o.CompletedDateTime.Get()
	}
	if o.ConversationThreadId.IsSet() {
		toSerialize["conversationThreadId"] = o.ConversationThreadId.Get()
	}
	if o.CreatedBy != nil {
		toSerialize["createdBy"] = o.CreatedBy
	}
	if o.CreatedDateTime.IsSet() {
		toSerialize["createdDateTime"] = o.CreatedDateTime.Get()
	}
	if o.DueDateTime.IsSet() {
		toSerialize["dueDateTime"] = o.DueDateTime.Get()
	}
	if o.HasDescription.IsSet() {
		toSerialize["hasDescription"] = o.HasDescription.Get()
	}
	if o.OrderHint.IsSet() {
		toSerialize["orderHint"] = o.OrderHint.Get()
	}
	if o.PercentComplete.IsSet() {
		toSerialize["percentComplete"] = o.PercentComplete.Get()
	}
	if o.PlanId.IsSet() {
		toSerialize["planId"] = o.PlanId.Get()
	}
	if o.PreviewType != nil {
		toSerialize["previewType"] = o.PreviewType
	}
	if o.ReferenceCount.IsSet() {
		toSerialize["referenceCount"] = o.ReferenceCount.Get()
	}
	if o.StartDateTime.IsSet() {
		toSerialize["startDateTime"] = o.StartDateTime.Get()
	}
	if o.Title != nil {
		toSerialize["title"] = o.Title
	}
	if o.AssignedToTaskBoardFormat != nil {
		toSerialize["assignedToTaskBoardFormat"] = o.AssignedToTaskBoardFormat
	}
	if o.BucketTaskBoardFormat != nil {
		toSerialize["bucketTaskBoardFormat"] = o.BucketTaskBoardFormat
	}
	if o.Details != nil {
		toSerialize["details"] = o.Details
	}
	if o.ProgressTaskBoardFormat != nil {
		toSerialize["progressTaskBoardFormat"] = o.ProgressTaskBoardFormat
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphPlannerTask struct {
	value *MicrosoftGraphPlannerTask
	isSet bool
}

func (v NullableMicrosoftGraphPlannerTask) Get() *MicrosoftGraphPlannerTask {
	return v.value
}

func (v *NullableMicrosoftGraphPlannerTask) Set(val *MicrosoftGraphPlannerTask) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPlannerTask) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPlannerTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPlannerTask(val *MicrosoftGraphPlannerTask) *NullableMicrosoftGraphPlannerTask {
	return &NullableMicrosoftGraphPlannerTask{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPlannerTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPlannerTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


