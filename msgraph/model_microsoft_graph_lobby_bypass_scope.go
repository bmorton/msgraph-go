/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphLobbyBypassScope the model 'MicrosoftGraphLobbyBypassScope'
type MicrosoftGraphLobbyBypassScope string

// List of microsoft.graph.lobbyBypassScope
const (
	ORGANIZER MicrosoftGraphLobbyBypassScope = "organizer"
	ORGANIZATION MicrosoftGraphLobbyBypassScope = "organization"
	ORGANIZATION_AND_FEDERATED MicrosoftGraphLobbyBypassScope = "organizationAndFederated"
	EVERYONE MicrosoftGraphLobbyBypassScope = "everyone"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphLobbyBypassScope = "unknownFutureValue"
	INVITED MicrosoftGraphLobbyBypassScope = "invited"
	ORGANIZATION_EXCLUDING_GUESTS MicrosoftGraphLobbyBypassScope = "organizationExcludingGuests"
)

// All allowed values of MicrosoftGraphLobbyBypassScope enum
var AllowedMicrosoftGraphLobbyBypassScopeEnumValues = []MicrosoftGraphLobbyBypassScope{
	"organizer",
	"organization",
	"organizationAndFederated",
	"everyone",
	"unknownFutureValue",
	"invited",
	"organizationExcludingGuests",
}

func (v *MicrosoftGraphLobbyBypassScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphLobbyBypassScope(value)
	for _, existing := range AllowedMicrosoftGraphLobbyBypassScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphLobbyBypassScope", value)
}

// NewMicrosoftGraphLobbyBypassScopeFromValue returns a pointer to a valid MicrosoftGraphLobbyBypassScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphLobbyBypassScopeFromValue(v string) (*MicrosoftGraphLobbyBypassScope, error) {
	ev := MicrosoftGraphLobbyBypassScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphLobbyBypassScope: valid values are %v", v, AllowedMicrosoftGraphLobbyBypassScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphLobbyBypassScope) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphLobbyBypassScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.lobbyBypassScope value
func (v MicrosoftGraphLobbyBypassScope) Ptr() *MicrosoftGraphLobbyBypassScope {
	return &v
}

type NullableMicrosoftGraphLobbyBypassScope struct {
	value *MicrosoftGraphLobbyBypassScope
	isSet bool
}

func (v NullableMicrosoftGraphLobbyBypassScope) Get() *MicrosoftGraphLobbyBypassScope {
	return v.value
}

func (v *NullableMicrosoftGraphLobbyBypassScope) Set(val *MicrosoftGraphLobbyBypassScope) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphLobbyBypassScope) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphLobbyBypassScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphLobbyBypassScope(val *MicrosoftGraphLobbyBypassScope) *NullableMicrosoftGraphLobbyBypassScope {
	return &NullableMicrosoftGraphLobbyBypassScope{value: val, isSet: true}
}

func (v NullableMicrosoftGraphLobbyBypassScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphLobbyBypassScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

