/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// RbacApplication struct for RbacApplication
type RbacApplication struct {
	// Resource to grant access to users or groups.
	RoleAssignments *[]MicrosoftGraphUnifiedRoleAssignment `json:"roleAssignments,omitempty"`
	// Resource representing the roles allowed by RBAC providers and the permissions assigned to the roles.
	RoleDefinitions *[]MicrosoftGraphUnifiedRoleDefinition `json:"roleDefinitions,omitempty"`
}

// NewRbacApplication instantiates a new RbacApplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRbacApplication() *RbacApplication {
	this := RbacApplication{}
	return &this
}

// NewRbacApplicationWithDefaults instantiates a new RbacApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRbacApplicationWithDefaults() *RbacApplication {
	this := RbacApplication{}
	return &this
}

// GetRoleAssignments returns the RoleAssignments field value if set, zero value otherwise.
func (o *RbacApplication) GetRoleAssignments() []MicrosoftGraphUnifiedRoleAssignment {
	if o == nil || o.RoleAssignments == nil {
		var ret []MicrosoftGraphUnifiedRoleAssignment
		return ret
	}
	return *o.RoleAssignments
}

// GetRoleAssignmentsOk returns a tuple with the RoleAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbacApplication) GetRoleAssignmentsOk() (*[]MicrosoftGraphUnifiedRoleAssignment, bool) {
	if o == nil || o.RoleAssignments == nil {
		return nil, false
	}
	return o.RoleAssignments, true
}

// HasRoleAssignments returns a boolean if a field has been set.
func (o *RbacApplication) HasRoleAssignments() bool {
	if o != nil && o.RoleAssignments != nil {
		return true
	}

	return false
}

// SetRoleAssignments gets a reference to the given []MicrosoftGraphUnifiedRoleAssignment and assigns it to the RoleAssignments field.
func (o *RbacApplication) SetRoleAssignments(v []MicrosoftGraphUnifiedRoleAssignment) {
	o.RoleAssignments = &v
}

// GetRoleDefinitions returns the RoleDefinitions field value if set, zero value otherwise.
func (o *RbacApplication) GetRoleDefinitions() []MicrosoftGraphUnifiedRoleDefinition {
	if o == nil || o.RoleDefinitions == nil {
		var ret []MicrosoftGraphUnifiedRoleDefinition
		return ret
	}
	return *o.RoleDefinitions
}

// GetRoleDefinitionsOk returns a tuple with the RoleDefinitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RbacApplication) GetRoleDefinitionsOk() (*[]MicrosoftGraphUnifiedRoleDefinition, bool) {
	if o == nil || o.RoleDefinitions == nil {
		return nil, false
	}
	return o.RoleDefinitions, true
}

// HasRoleDefinitions returns a boolean if a field has been set.
func (o *RbacApplication) HasRoleDefinitions() bool {
	if o != nil && o.RoleDefinitions != nil {
		return true
	}

	return false
}

// SetRoleDefinitions gets a reference to the given []MicrosoftGraphUnifiedRoleDefinition and assigns it to the RoleDefinitions field.
func (o *RbacApplication) SetRoleDefinitions(v []MicrosoftGraphUnifiedRoleDefinition) {
	o.RoleDefinitions = &v
}

func (o RbacApplication) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RoleAssignments != nil {
		toSerialize["roleAssignments"] = o.RoleAssignments
	}
	if o.RoleDefinitions != nil {
		toSerialize["roleDefinitions"] = o.RoleDefinitions
	}
	return json.Marshal(toSerialize)
}

type NullableRbacApplication struct {
	value *RbacApplication
	isSet bool
}

func (v NullableRbacApplication) Get() *RbacApplication {
	return v.value
}

func (v *NullableRbacApplication) Set(val *RbacApplication) {
	v.value = val
	v.isSet = true
}

func (v NullableRbacApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableRbacApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRbacApplication(val *RbacApplication) *NullableRbacApplication {
	return &NullableRbacApplication{value: val, isSet: true}
}

func (v NullableRbacApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRbacApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


