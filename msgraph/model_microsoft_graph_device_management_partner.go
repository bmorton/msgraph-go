/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"time"
)

// MicrosoftGraphDeviceManagementPartner struct for MicrosoftGraphDeviceManagementPartner
type MicrosoftGraphDeviceManagementPartner struct {
	// Read-only.
	Id *string `json:"id,omitempty"`
	// Partner display name
	DisplayName NullableString `json:"displayName,omitempty"`
	// Whether device management partner is configured or not
	IsConfigured *bool `json:"isConfigured,omitempty"`
	// Timestamp of last heartbeat after admin enabled option Connect to Device management Partner
	LastHeartbeatDateTime *time.Time `json:"lastHeartbeatDateTime,omitempty"`
	// Partner App type. Possible values are: unknown, singleTenantApp, multiTenantApp.
	PartnerAppType AnyOfmicrosoftGraphDeviceManagementPartnerAppType `json:"partnerAppType,omitempty"`
	// Partner state of this tenant. Possible values are: unknown, unavailable, enabled, terminated, rejected, unresponsive.
	PartnerState AnyOfmicrosoftGraphDeviceManagementPartnerTenantState `json:"partnerState,omitempty"`
	// Partner Single tenant App id
	SingleTenantAppId NullableString `json:"singleTenantAppId,omitempty"`
	// DateTime in UTC when PartnerDevices will be marked as NonCompliant
	WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime NullableTime `json:"whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime,omitempty"`
	// DateTime in UTC when PartnerDevices will be removed
	WhenPartnerDevicesWillBeRemovedDateTime NullableTime `json:"whenPartnerDevicesWillBeRemovedDateTime,omitempty"`
}

// NewMicrosoftGraphDeviceManagementPartner instantiates a new MicrosoftGraphDeviceManagementPartner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphDeviceManagementPartner() *MicrosoftGraphDeviceManagementPartner {
	this := MicrosoftGraphDeviceManagementPartner{}
	return &this
}

// NewMicrosoftGraphDeviceManagementPartnerWithDefaults instantiates a new MicrosoftGraphDeviceManagementPartner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphDeviceManagementPartnerWithDefaults() *MicrosoftGraphDeviceManagementPartner {
	this := MicrosoftGraphDeviceManagementPartner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MicrosoftGraphDeviceManagementPartner) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceManagementPartner) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphDeviceManagementPartner) SetId(v string) {
	o.Id = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphDeviceManagementPartner) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphDeviceManagementPartner) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *MicrosoftGraphDeviceManagementPartner) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *MicrosoftGraphDeviceManagementPartner) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *MicrosoftGraphDeviceManagementPartner) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetIsConfigured returns the IsConfigured field value if set, zero value otherwise.
func (o *MicrosoftGraphDeviceManagementPartner) GetIsConfigured() bool {
	if o == nil || o.IsConfigured == nil {
		var ret bool
		return ret
	}
	return *o.IsConfigured
}

// GetIsConfiguredOk returns a tuple with the IsConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceManagementPartner) GetIsConfiguredOk() (*bool, bool) {
	if o == nil || o.IsConfigured == nil {
		return nil, false
	}
	return o.IsConfigured, true
}

// HasIsConfigured returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasIsConfigured() bool {
	if o != nil && o.IsConfigured != nil {
		return true
	}

	return false
}

// SetIsConfigured gets a reference to the given bool and assigns it to the IsConfigured field.
func (o *MicrosoftGraphDeviceManagementPartner) SetIsConfigured(v bool) {
	o.IsConfigured = &v
}

// GetLastHeartbeatDateTime returns the LastHeartbeatDateTime field value if set, zero value otherwise.
func (o *MicrosoftGraphDeviceManagementPartner) GetLastHeartbeatDateTime() time.Time {
	if o == nil || o.LastHeartbeatDateTime == nil {
		var ret time.Time
		return ret
	}
	return *o.LastHeartbeatDateTime
}

// GetLastHeartbeatDateTimeOk returns a tuple with the LastHeartbeatDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphDeviceManagementPartner) GetLastHeartbeatDateTimeOk() (*time.Time, bool) {
	if o == nil || o.LastHeartbeatDateTime == nil {
		return nil, false
	}
	return o.LastHeartbeatDateTime, true
}

// HasLastHeartbeatDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasLastHeartbeatDateTime() bool {
	if o != nil && o.LastHeartbeatDateTime != nil {
		return true
	}

	return false
}

// SetLastHeartbeatDateTime gets a reference to the given time.Time and assigns it to the LastHeartbeatDateTime field.
func (o *MicrosoftGraphDeviceManagementPartner) SetLastHeartbeatDateTime(v time.Time) {
	o.LastHeartbeatDateTime = &v
}

// GetPartnerAppType returns the PartnerAppType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphDeviceManagementPartner) GetPartnerAppType() AnyOfmicrosoftGraphDeviceManagementPartnerAppType {
	if o == nil  {
		var ret AnyOfmicrosoftGraphDeviceManagementPartnerAppType
		return ret
	}
	return o.PartnerAppType
}

// GetPartnerAppTypeOk returns a tuple with the PartnerAppType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphDeviceManagementPartner) GetPartnerAppTypeOk() (*AnyOfmicrosoftGraphDeviceManagementPartnerAppType, bool) {
	if o == nil || o.PartnerAppType == nil {
		return nil, false
	}
	return &o.PartnerAppType, true
}

// HasPartnerAppType returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasPartnerAppType() bool {
	if o != nil && o.PartnerAppType != nil {
		return true
	}

	return false
}

// SetPartnerAppType gets a reference to the given AnyOfmicrosoftGraphDeviceManagementPartnerAppType and assigns it to the PartnerAppType field.
func (o *MicrosoftGraphDeviceManagementPartner) SetPartnerAppType(v AnyOfmicrosoftGraphDeviceManagementPartnerAppType) {
	o.PartnerAppType = v
}

// GetPartnerState returns the PartnerState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphDeviceManagementPartner) GetPartnerState() AnyOfmicrosoftGraphDeviceManagementPartnerTenantState {
	if o == nil  {
		var ret AnyOfmicrosoftGraphDeviceManagementPartnerTenantState
		return ret
	}
	return o.PartnerState
}

// GetPartnerStateOk returns a tuple with the PartnerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphDeviceManagementPartner) GetPartnerStateOk() (*AnyOfmicrosoftGraphDeviceManagementPartnerTenantState, bool) {
	if o == nil || o.PartnerState == nil {
		return nil, false
	}
	return &o.PartnerState, true
}

// HasPartnerState returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasPartnerState() bool {
	if o != nil && o.PartnerState != nil {
		return true
	}

	return false
}

// SetPartnerState gets a reference to the given AnyOfmicrosoftGraphDeviceManagementPartnerTenantState and assigns it to the PartnerState field.
func (o *MicrosoftGraphDeviceManagementPartner) SetPartnerState(v AnyOfmicrosoftGraphDeviceManagementPartnerTenantState) {
	o.PartnerState = v
}

// GetSingleTenantAppId returns the SingleTenantAppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphDeviceManagementPartner) GetSingleTenantAppId() string {
	if o == nil || o.SingleTenantAppId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SingleTenantAppId.Get()
}

// GetSingleTenantAppIdOk returns a tuple with the SingleTenantAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphDeviceManagementPartner) GetSingleTenantAppIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SingleTenantAppId.Get(), o.SingleTenantAppId.IsSet()
}

// HasSingleTenantAppId returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasSingleTenantAppId() bool {
	if o != nil && o.SingleTenantAppId.IsSet() {
		return true
	}

	return false
}

// SetSingleTenantAppId gets a reference to the given NullableString and assigns it to the SingleTenantAppId field.
func (o *MicrosoftGraphDeviceManagementPartner) SetSingleTenantAppId(v string) {
	o.SingleTenantAppId.Set(&v)
}
// SetSingleTenantAppIdNil sets the value for SingleTenantAppId to be an explicit nil
func (o *MicrosoftGraphDeviceManagementPartner) SetSingleTenantAppIdNil() {
	o.SingleTenantAppId.Set(nil)
}

// UnsetSingleTenantAppId ensures that no value is present for SingleTenantAppId, not even an explicit nil
func (o *MicrosoftGraphDeviceManagementPartner) UnsetSingleTenantAppId() {
	o.SingleTenantAppId.Unset()
}

// GetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime returns the WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphDeviceManagementPartner) GetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime() time.Time {
	if o == nil || o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.Get()
}

// GetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTimeOk returns a tuple with the WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphDeviceManagementPartner) GetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.Get(), o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.IsSet()
}

// HasWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime() bool {
	if o != nil && o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.IsSet() {
		return true
	}

	return false
}

// SetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime gets a reference to the given NullableTime and assigns it to the WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime field.
func (o *MicrosoftGraphDeviceManagementPartner) SetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime(v time.Time) {
	o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.Set(&v)
}
// SetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTimeNil sets the value for WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime to be an explicit nil
func (o *MicrosoftGraphDeviceManagementPartner) SetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTimeNil() {
	o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.Set(nil)
}

// UnsetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime ensures that no value is present for WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime, not even an explicit nil
func (o *MicrosoftGraphDeviceManagementPartner) UnsetWhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime() {
	o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.Unset()
}

// GetWhenPartnerDevicesWillBeRemovedDateTime returns the WhenPartnerDevicesWillBeRemovedDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphDeviceManagementPartner) GetWhenPartnerDevicesWillBeRemovedDateTime() time.Time {
	if o == nil || o.WhenPartnerDevicesWillBeRemovedDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.WhenPartnerDevicesWillBeRemovedDateTime.Get()
}

// GetWhenPartnerDevicesWillBeRemovedDateTimeOk returns a tuple with the WhenPartnerDevicesWillBeRemovedDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphDeviceManagementPartner) GetWhenPartnerDevicesWillBeRemovedDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WhenPartnerDevicesWillBeRemovedDateTime.Get(), o.WhenPartnerDevicesWillBeRemovedDateTime.IsSet()
}

// HasWhenPartnerDevicesWillBeRemovedDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphDeviceManagementPartner) HasWhenPartnerDevicesWillBeRemovedDateTime() bool {
	if o != nil && o.WhenPartnerDevicesWillBeRemovedDateTime.IsSet() {
		return true
	}

	return false
}

// SetWhenPartnerDevicesWillBeRemovedDateTime gets a reference to the given NullableTime and assigns it to the WhenPartnerDevicesWillBeRemovedDateTime field.
func (o *MicrosoftGraphDeviceManagementPartner) SetWhenPartnerDevicesWillBeRemovedDateTime(v time.Time) {
	o.WhenPartnerDevicesWillBeRemovedDateTime.Set(&v)
}
// SetWhenPartnerDevicesWillBeRemovedDateTimeNil sets the value for WhenPartnerDevicesWillBeRemovedDateTime to be an explicit nil
func (o *MicrosoftGraphDeviceManagementPartner) SetWhenPartnerDevicesWillBeRemovedDateTimeNil() {
	o.WhenPartnerDevicesWillBeRemovedDateTime.Set(nil)
}

// UnsetWhenPartnerDevicesWillBeRemovedDateTime ensures that no value is present for WhenPartnerDevicesWillBeRemovedDateTime, not even an explicit nil
func (o *MicrosoftGraphDeviceManagementPartner) UnsetWhenPartnerDevicesWillBeRemovedDateTime() {
	o.WhenPartnerDevicesWillBeRemovedDateTime.Unset()
}

func (o MicrosoftGraphDeviceManagementPartner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.IsConfigured != nil {
		toSerialize["isConfigured"] = o.IsConfigured
	}
	if o.LastHeartbeatDateTime != nil {
		toSerialize["lastHeartbeatDateTime"] = o.LastHeartbeatDateTime
	}
	if o.PartnerAppType != nil {
		toSerialize["partnerAppType"] = o.PartnerAppType
	}
	if o.PartnerState != nil {
		toSerialize["partnerState"] = o.PartnerState
	}
	if o.SingleTenantAppId.IsSet() {
		toSerialize["singleTenantAppId"] = o.SingleTenantAppId.Get()
	}
	if o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.IsSet() {
		toSerialize["whenPartnerDevicesWillBeMarkedAsNonCompliantDateTime"] = o.WhenPartnerDevicesWillBeMarkedAsNonCompliantDateTime.Get()
	}
	if o.WhenPartnerDevicesWillBeRemovedDateTime.IsSet() {
		toSerialize["whenPartnerDevicesWillBeRemovedDateTime"] = o.WhenPartnerDevicesWillBeRemovedDateTime.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphDeviceManagementPartner struct {
	value *MicrosoftGraphDeviceManagementPartner
	isSet bool
}

func (v NullableMicrosoftGraphDeviceManagementPartner) Get() *MicrosoftGraphDeviceManagementPartner {
	return v.value
}

func (v *NullableMicrosoftGraphDeviceManagementPartner) Set(val *MicrosoftGraphDeviceManagementPartner) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphDeviceManagementPartner) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphDeviceManagementPartner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphDeviceManagementPartner(val *MicrosoftGraphDeviceManagementPartner) *NullableMicrosoftGraphDeviceManagementPartner {
	return &NullableMicrosoftGraphDeviceManagementPartner{value: val, isSet: true}
}

func (v NullableMicrosoftGraphDeviceManagementPartner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphDeviceManagementPartner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


