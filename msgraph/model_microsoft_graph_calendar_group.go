/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// MicrosoftGraphCalendarGroup struct for MicrosoftGraphCalendarGroup
type MicrosoftGraphCalendarGroup struct {
	// Read-only.
	Id *string `json:"id,omitempty"`
	// Identifies the version of the calendar group. Every time the calendar group is changed, ChangeKey changes as well. This allows Exchange to apply changes to the correct version of the object. Read-only.
	ChangeKey NullableString `json:"changeKey,omitempty"`
	// The class identifier. Read-only.
	ClassId NullableString `json:"classId,omitempty"`
	// The group name.
	Name NullableString `json:"name,omitempty"`
	// The calendars in the calendar group. Navigation property. Read-only. Nullable.
	Calendars *[]MicrosoftGraphCalendar `json:"calendars,omitempty"`
}

// NewMicrosoftGraphCalendarGroup instantiates a new MicrosoftGraphCalendarGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphCalendarGroup() *MicrosoftGraphCalendarGroup {
	this := MicrosoftGraphCalendarGroup{}
	return &this
}

// NewMicrosoftGraphCalendarGroupWithDefaults instantiates a new MicrosoftGraphCalendarGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphCalendarGroupWithDefaults() *MicrosoftGraphCalendarGroup {
	this := MicrosoftGraphCalendarGroup{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MicrosoftGraphCalendarGroup) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphCalendarGroup) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendarGroup) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *MicrosoftGraphCalendarGroup) SetId(v string) {
	o.Id = &v
}

// GetChangeKey returns the ChangeKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphCalendarGroup) GetChangeKey() string {
	if o == nil || o.ChangeKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.ChangeKey.Get()
}

// GetChangeKeyOk returns a tuple with the ChangeKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphCalendarGroup) GetChangeKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ChangeKey.Get(), o.ChangeKey.IsSet()
}

// HasChangeKey returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendarGroup) HasChangeKey() bool {
	if o != nil && o.ChangeKey.IsSet() {
		return true
	}

	return false
}

// SetChangeKey gets a reference to the given NullableString and assigns it to the ChangeKey field.
func (o *MicrosoftGraphCalendarGroup) SetChangeKey(v string) {
	o.ChangeKey.Set(&v)
}
// SetChangeKeyNil sets the value for ChangeKey to be an explicit nil
func (o *MicrosoftGraphCalendarGroup) SetChangeKeyNil() {
	o.ChangeKey.Set(nil)
}

// UnsetChangeKey ensures that no value is present for ChangeKey, not even an explicit nil
func (o *MicrosoftGraphCalendarGroup) UnsetChangeKey() {
	o.ChangeKey.Unset()
}

// GetClassId returns the ClassId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphCalendarGroup) GetClassId() string {
	if o == nil || o.ClassId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClassId.Get()
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphCalendarGroup) GetClassIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClassId.Get(), o.ClassId.IsSet()
}

// HasClassId returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendarGroup) HasClassId() bool {
	if o != nil && o.ClassId.IsSet() {
		return true
	}

	return false
}

// SetClassId gets a reference to the given NullableString and assigns it to the ClassId field.
func (o *MicrosoftGraphCalendarGroup) SetClassId(v string) {
	o.ClassId.Set(&v)
}
// SetClassIdNil sets the value for ClassId to be an explicit nil
func (o *MicrosoftGraphCalendarGroup) SetClassIdNil() {
	o.ClassId.Set(nil)
}

// UnsetClassId ensures that no value is present for ClassId, not even an explicit nil
func (o *MicrosoftGraphCalendarGroup) UnsetClassId() {
	o.ClassId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphCalendarGroup) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphCalendarGroup) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendarGroup) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MicrosoftGraphCalendarGroup) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MicrosoftGraphCalendarGroup) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MicrosoftGraphCalendarGroup) UnsetName() {
	o.Name.Unset()
}

// GetCalendars returns the Calendars field value if set, zero value otherwise.
func (o *MicrosoftGraphCalendarGroup) GetCalendars() []MicrosoftGraphCalendar {
	if o == nil || o.Calendars == nil {
		var ret []MicrosoftGraphCalendar
		return ret
	}
	return *o.Calendars
}

// GetCalendarsOk returns a tuple with the Calendars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MicrosoftGraphCalendarGroup) GetCalendarsOk() (*[]MicrosoftGraphCalendar, bool) {
	if o == nil || o.Calendars == nil {
		return nil, false
	}
	return o.Calendars, true
}

// HasCalendars returns a boolean if a field has been set.
func (o *MicrosoftGraphCalendarGroup) HasCalendars() bool {
	if o != nil && o.Calendars != nil {
		return true
	}

	return false
}

// SetCalendars gets a reference to the given []MicrosoftGraphCalendar and assigns it to the Calendars field.
func (o *MicrosoftGraphCalendarGroup) SetCalendars(v []MicrosoftGraphCalendar) {
	o.Calendars = &v
}

func (o MicrosoftGraphCalendarGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.ChangeKey.IsSet() {
		toSerialize["changeKey"] = o.ChangeKey.Get()
	}
	if o.ClassId.IsSet() {
		toSerialize["classId"] = o.ClassId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Calendars != nil {
		toSerialize["calendars"] = o.Calendars
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphCalendarGroup struct {
	value *MicrosoftGraphCalendarGroup
	isSet bool
}

func (v NullableMicrosoftGraphCalendarGroup) Get() *MicrosoftGraphCalendarGroup {
	return v.value
}

func (v *NullableMicrosoftGraphCalendarGroup) Set(val *MicrosoftGraphCalendarGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphCalendarGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphCalendarGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphCalendarGroup(val *MicrosoftGraphCalendarGroup) *NullableMicrosoftGraphCalendarGroup {
	return &NullableMicrosoftGraphCalendarGroup{value: val, isSet: true}
}

func (v NullableMicrosoftGraphCalendarGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphCalendarGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


