/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject1213 struct for InlineObject1213
type InlineObject1213 struct {
	Cost AnyOfobject `json:"cost,omitempty"`
	DatePurchased AnyOfobject `json:"datePurchased,omitempty"`
	FirstPeriod AnyOfobject `json:"firstPeriod,omitempty"`
	Salvage AnyOfobject `json:"salvage,omitempty"`
	Period AnyOfobject `json:"period,omitempty"`
	Rate AnyOfobject `json:"rate,omitempty"`
	Basis AnyOfobject `json:"basis,omitempty"`
}

// NewInlineObject1213 instantiates a new InlineObject1213 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1213() *InlineObject1213 {
	this := InlineObject1213{}
	return &this
}

// NewInlineObject1213WithDefaults instantiates a new InlineObject1213 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1213WithDefaults() *InlineObject1213 {
	this := InlineObject1213{}
	return &this
}

// GetCost returns the Cost field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1213) GetCost() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Cost
}

// GetCostOk returns a tuple with the Cost field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1213) GetCostOk() (*AnyOfobject, bool) {
	if o == nil || o.Cost == nil {
		return nil, false
	}
	return &o.Cost, true
}

// HasCost returns a boolean if a field has been set.
func (o *InlineObject1213) HasCost() bool {
	if o != nil && o.Cost != nil {
		return true
	}

	return false
}

// SetCost gets a reference to the given AnyOfobject and assigns it to the Cost field.
func (o *InlineObject1213) SetCost(v AnyOfobject) {
	o.Cost = v
}

// GetDatePurchased returns the DatePurchased field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1213) GetDatePurchased() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.DatePurchased
}

// GetDatePurchasedOk returns a tuple with the DatePurchased field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1213) GetDatePurchasedOk() (*AnyOfobject, bool) {
	if o == nil || o.DatePurchased == nil {
		return nil, false
	}
	return &o.DatePurchased, true
}

// HasDatePurchased returns a boolean if a field has been set.
func (o *InlineObject1213) HasDatePurchased() bool {
	if o != nil && o.DatePurchased != nil {
		return true
	}

	return false
}

// SetDatePurchased gets a reference to the given AnyOfobject and assigns it to the DatePurchased field.
func (o *InlineObject1213) SetDatePurchased(v AnyOfobject) {
	o.DatePurchased = v
}

// GetFirstPeriod returns the FirstPeriod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1213) GetFirstPeriod() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.FirstPeriod
}

// GetFirstPeriodOk returns a tuple with the FirstPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1213) GetFirstPeriodOk() (*AnyOfobject, bool) {
	if o == nil || o.FirstPeriod == nil {
		return nil, false
	}
	return &o.FirstPeriod, true
}

// HasFirstPeriod returns a boolean if a field has been set.
func (o *InlineObject1213) HasFirstPeriod() bool {
	if o != nil && o.FirstPeriod != nil {
		return true
	}

	return false
}

// SetFirstPeriod gets a reference to the given AnyOfobject and assigns it to the FirstPeriod field.
func (o *InlineObject1213) SetFirstPeriod(v AnyOfobject) {
	o.FirstPeriod = v
}

// GetSalvage returns the Salvage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1213) GetSalvage() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Salvage
}

// GetSalvageOk returns a tuple with the Salvage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1213) GetSalvageOk() (*AnyOfobject, bool) {
	if o == nil || o.Salvage == nil {
		return nil, false
	}
	return &o.Salvage, true
}

// HasSalvage returns a boolean if a field has been set.
func (o *InlineObject1213) HasSalvage() bool {
	if o != nil && o.Salvage != nil {
		return true
	}

	return false
}

// SetSalvage gets a reference to the given AnyOfobject and assigns it to the Salvage field.
func (o *InlineObject1213) SetSalvage(v AnyOfobject) {
	o.Salvage = v
}

// GetPeriod returns the Period field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1213) GetPeriod() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Period
}

// GetPeriodOk returns a tuple with the Period field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1213) GetPeriodOk() (*AnyOfobject, bool) {
	if o == nil || o.Period == nil {
		return nil, false
	}
	return &o.Period, true
}

// HasPeriod returns a boolean if a field has been set.
func (o *InlineObject1213) HasPeriod() bool {
	if o != nil && o.Period != nil {
		return true
	}

	return false
}

// SetPeriod gets a reference to the given AnyOfobject and assigns it to the Period field.
func (o *InlineObject1213) SetPeriod(v AnyOfobject) {
	o.Period = v
}

// GetRate returns the Rate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1213) GetRate() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1213) GetRateOk() (*AnyOfobject, bool) {
	if o == nil || o.Rate == nil {
		return nil, false
	}
	return &o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *InlineObject1213) HasRate() bool {
	if o != nil && o.Rate != nil {
		return true
	}

	return false
}

// SetRate gets a reference to the given AnyOfobject and assigns it to the Rate field.
func (o *InlineObject1213) SetRate(v AnyOfobject) {
	o.Rate = v
}

// GetBasis returns the Basis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1213) GetBasis() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Basis
}

// GetBasisOk returns a tuple with the Basis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1213) GetBasisOk() (*AnyOfobject, bool) {
	if o == nil || o.Basis == nil {
		return nil, false
	}
	return &o.Basis, true
}

// HasBasis returns a boolean if a field has been set.
func (o *InlineObject1213) HasBasis() bool {
	if o != nil && o.Basis != nil {
		return true
	}

	return false
}

// SetBasis gets a reference to the given AnyOfobject and assigns it to the Basis field.
func (o *InlineObject1213) SetBasis(v AnyOfobject) {
	o.Basis = v
}

func (o InlineObject1213) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cost != nil {
		toSerialize["cost"] = o.Cost
	}
	if o.DatePurchased != nil {
		toSerialize["datePurchased"] = o.DatePurchased
	}
	if o.FirstPeriod != nil {
		toSerialize["firstPeriod"] = o.FirstPeriod
	}
	if o.Salvage != nil {
		toSerialize["salvage"] = o.Salvage
	}
	if o.Period != nil {
		toSerialize["period"] = o.Period
	}
	if o.Rate != nil {
		toSerialize["rate"] = o.Rate
	}
	if o.Basis != nil {
		toSerialize["basis"] = o.Basis
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1213 struct {
	value *InlineObject1213
	isSet bool
}

func (v NullableInlineObject1213) Get() *InlineObject1213 {
	return v.value
}

func (v *NullableInlineObject1213) Set(val *InlineObject1213) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1213) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1213) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1213(val *InlineObject1213) *NullableInlineObject1213 {
	return &NullableInlineObject1213{value: val, isSet: true}
}

func (v NullableInlineObject1213) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1213) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


