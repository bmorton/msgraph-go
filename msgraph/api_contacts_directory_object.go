/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// ContactsDirectoryObjectApiService ContactsDirectoryObjectApi service
type ContactsDirectoryObjectApiService service

type ApiContactsCreateRefDirectReportsRequest struct {
	ctx _context.Context
	ApiService *ContactsDirectoryObjectApiService
	orgContactId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref value
func (r ApiContactsCreateRefDirectReportsRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiContactsCreateRefDirectReportsRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiContactsCreateRefDirectReportsRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.ContactsCreateRefDirectReportsExecute(r)
}

/*
ContactsCreateRefDirectReports Create new navigation property ref to directReports for contacts

The contact's direct reports. (The users and contacts that have their manager property set to this contact.) Read-only. Nullable. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgContactId key: id of orgContact
 @return ApiContactsCreateRefDirectReportsRequest
*/
func (a *ContactsDirectoryObjectApiService) ContactsCreateRefDirectReports(ctx _context.Context, orgContactId string) ApiContactsCreateRefDirectReportsRequest {
	return ApiContactsCreateRefDirectReportsRequest{
		ApiService: a,
		ctx: ctx,
		orgContactId: orgContactId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ContactsDirectoryObjectApiService) ContactsCreateRefDirectReportsExecute(r ApiContactsCreateRefDirectReportsRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactsDirectoryObjectApiService.ContactsCreateRefDirectReports")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/contacts/{orgContact-id}/directReports/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"orgContact-id"+"}", _neturl.PathEscape(parameterToString(r.orgContactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContactsCreateRefMemberOfRequest struct {
	ctx _context.Context
	ApiService *ContactsDirectoryObjectApiService
	orgContactId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref value
func (r ApiContactsCreateRefMemberOfRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiContactsCreateRefMemberOfRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiContactsCreateRefMemberOfRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.ContactsCreateRefMemberOfExecute(r)
}

/*
ContactsCreateRefMemberOf Create new navigation property ref to memberOf for contacts

Groups that this contact is a member of. Read-only. Nullable. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgContactId key: id of orgContact
 @return ApiContactsCreateRefMemberOfRequest
*/
func (a *ContactsDirectoryObjectApiService) ContactsCreateRefMemberOf(ctx _context.Context, orgContactId string) ApiContactsCreateRefMemberOfRequest {
	return ApiContactsCreateRefMemberOfRequest{
		ApiService: a,
		ctx: ctx,
		orgContactId: orgContactId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ContactsDirectoryObjectApiService) ContactsCreateRefMemberOfExecute(r ApiContactsCreateRefMemberOfRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactsDirectoryObjectApiService.ContactsCreateRefMemberOf")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/contacts/{orgContact-id}/memberOf/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"orgContact-id"+"}", _neturl.PathEscape(parameterToString(r.orgContactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContactsCreateRefTransitiveMemberOfRequest struct {
	ctx _context.Context
	ApiService *ContactsDirectoryObjectApiService
	orgContactId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref value
func (r ApiContactsCreateRefTransitiveMemberOfRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiContactsCreateRefTransitiveMemberOfRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiContactsCreateRefTransitiveMemberOfRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.ContactsCreateRefTransitiveMemberOfExecute(r)
}

/*
ContactsCreateRefTransitiveMemberOf Create new navigation property ref to transitiveMemberOf for contacts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgContactId key: id of orgContact
 @return ApiContactsCreateRefTransitiveMemberOfRequest
*/
func (a *ContactsDirectoryObjectApiService) ContactsCreateRefTransitiveMemberOf(ctx _context.Context, orgContactId string) ApiContactsCreateRefTransitiveMemberOfRequest {
	return ApiContactsCreateRefTransitiveMemberOfRequest{
		ApiService: a,
		ctx: ctx,
		orgContactId: orgContactId,
	}
}

// Execute executes the request
//  @return map[string]interface{}
func (a *ContactsDirectoryObjectApiService) ContactsCreateRefTransitiveMemberOfExecute(r ApiContactsCreateRefTransitiveMemberOfRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactsDirectoryObjectApiService.ContactsCreateRefTransitiveMemberOf")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/contacts/{orgContact-id}/transitiveMemberOf/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"orgContact-id"+"}", _neturl.PathEscape(parameterToString(r.orgContactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return localVarReturnValue, nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContactsDeleteRefManagerRequest struct {
	ctx _context.Context
	ApiService *ContactsDirectoryObjectApiService
	orgContactId string
	ifMatch *string
}

// ETag
func (r ApiContactsDeleteRefManagerRequest) IfMatch(ifMatch string) ApiContactsDeleteRefManagerRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiContactsDeleteRefManagerRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ContactsDeleteRefManagerExecute(r)
}

/*
ContactsDeleteRefManager Delete ref of navigation property manager for contacts

The user or contact that is this contact's manager. Read-only. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgContactId key: id of orgContact
 @return ApiContactsDeleteRefManagerRequest
*/
func (a *ContactsDirectoryObjectApiService) ContactsDeleteRefManager(ctx _context.Context, orgContactId string) ApiContactsDeleteRefManagerRequest {
	return ApiContactsDeleteRefManagerRequest{
		ApiService: a,
		ctx: ctx,
		orgContactId: orgContactId,
	}
}

// Execute executes the request
func (a *ContactsDirectoryObjectApiService) ContactsDeleteRefManagerExecute(r ApiContactsDeleteRefManagerRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactsDirectoryObjectApiService.ContactsDeleteRefManager")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/contacts/{orgContact-id}/manager/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"orgContact-id"+"}", _neturl.PathEscape(parameterToString(r.orgContactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiContactsGetManagerRequest struct {
	ctx _context.Context
	ApiService *ContactsDirectoryObjectApiService
	orgContactId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiContactsGetManagerRequest) Select_(select_ []string) ApiContactsGetManagerRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiContactsGetManagerRequest) Expand(expand []string) ApiContactsGetManagerRequest {
	r.expand = &expand
	return r
}

func (r ApiContactsGetManagerRequest) Execute() (MicrosoftGraphDirectoryObject, *_nethttp.Response, error) {
	return r.ApiService.ContactsGetManagerExecute(r)
}

/*
ContactsGetManager Get manager from contacts

The user or contact that is this contact's manager. Read-only. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgContactId key: id of orgContact
 @return ApiContactsGetManagerRequest
*/
func (a *ContactsDirectoryObjectApiService) ContactsGetManager(ctx _context.Context, orgContactId string) ApiContactsGetManagerRequest {
	return ApiContactsGetManagerRequest{
		ApiService: a,
		ctx: ctx,
		orgContactId: orgContactId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphDirectoryObject
func (a *ContactsDirectoryObjectApiService) ContactsGetManagerExecute(r ApiContactsGetManagerRequest) (MicrosoftGraphDirectoryObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphDirectoryObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactsDirectoryObjectApiService.ContactsGetManager")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/contacts/{orgContact-id}/manager"
	localVarPath = strings.Replace(localVarPath, "{"+"orgContact-id"+"}", _neturl.PathEscape(parameterToString(r.orgContactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContactsGetRefManagerRequest struct {
	ctx _context.Context
	ApiService *ContactsDirectoryObjectApiService
	orgContactId string
}


func (r ApiContactsGetRefManagerRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ContactsGetRefManagerExecute(r)
}

/*
ContactsGetRefManager Get ref of manager from contacts

The user or contact that is this contact's manager. Read-only. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgContactId key: id of orgContact
 @return ApiContactsGetRefManagerRequest
*/
func (a *ContactsDirectoryObjectApiService) ContactsGetRefManager(ctx _context.Context, orgContactId string) ApiContactsGetRefManagerRequest {
	return ApiContactsGetRefManagerRequest{
		ApiService: a,
		ctx: ctx,
		orgContactId: orgContactId,
	}
}

// Execute executes the request
//  @return string
func (a *ContactsDirectoryObjectApiService) ContactsGetRefManagerExecute(r ApiContactsGetRefManagerRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactsDirectoryObjectApiService.ContactsGetRefManager")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/contacts/{orgContact-id}/manager/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"orgContact-id"+"}", _neturl.PathEscape(parameterToString(r.orgContactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContactsListDirectReportsRequest struct {
	ctx _context.Context
	ApiService *ContactsDirectoryObjectApiService
	orgContactId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiContactsListDirectReportsRequest) Top(top int32) ApiContactsListDirectReportsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiContactsListDirectReportsRequest) Skip(skip int32) ApiContactsListDirectReportsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiContactsListDirectReportsRequest) Search(search string) ApiContactsListDirectReportsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiContactsListDirectReportsRequest) Filter(filter string) ApiContactsListDirectReportsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiContactsListDirectReportsRequest) Count(count bool) ApiContactsListDirectReportsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiContactsListDirectReportsRequest) Orderby(orderby []string) ApiContactsListDirectReportsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiContactsListDirectReportsRequest) Select_(select_ []string) ApiContactsListDirectReportsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiContactsListDirectReportsRequest) Expand(expand []string) ApiContactsListDirectReportsRequest {
	r.expand = &expand
	return r
}

func (r ApiContactsListDirectReportsRequest) Execute() (CollectionOfDirectoryObject, *_nethttp.Response, error) {
	return r.ApiService.ContactsListDirectReportsExecute(r)
}

/*
ContactsListDirectReports Get directReports from contacts

The contact's direct reports. (The users and contacts that have their manager property set to this contact.) Read-only. Nullable. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgContactId key: id of orgContact
 @return ApiContactsListDirectReportsRequest
*/
func (a *ContactsDirectoryObjectApiService) ContactsListDirectReports(ctx _context.Context, orgContactId string) ApiContactsListDirectReportsRequest {
	return ApiContactsListDirectReportsRequest{
		ApiService: a,
		ctx: ctx,
		orgContactId: orgContactId,
	}
}

// Execute executes the request
//  @return CollectionOfDirectoryObject
func (a *ContactsDirectoryObjectApiService) ContactsListDirectReportsExecute(r ApiContactsListDirectReportsRequest) (CollectionOfDirectoryObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDirectoryObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactsDirectoryObjectApiService.ContactsListDirectReports")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/contacts/{orgContact-id}/directReports"
	localVarPath = strings.Replace(localVarPath, "{"+"orgContact-id"+"}", _neturl.PathEscape(parameterToString(r.orgContactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContactsListMemberOfRequest struct {
	ctx _context.Context
	ApiService *ContactsDirectoryObjectApiService
	orgContactId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiContactsListMemberOfRequest) Top(top int32) ApiContactsListMemberOfRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiContactsListMemberOfRequest) Skip(skip int32) ApiContactsListMemberOfRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiContactsListMemberOfRequest) Search(search string) ApiContactsListMemberOfRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiContactsListMemberOfRequest) Filter(filter string) ApiContactsListMemberOfRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiContactsListMemberOfRequest) Count(count bool) ApiContactsListMemberOfRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiContactsListMemberOfRequest) Orderby(orderby []string) ApiContactsListMemberOfRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiContactsListMemberOfRequest) Select_(select_ []string) ApiContactsListMemberOfRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiContactsListMemberOfRequest) Expand(expand []string) ApiContactsListMemberOfRequest {
	r.expand = &expand
	return r
}

func (r ApiContactsListMemberOfRequest) Execute() (CollectionOfDirectoryObject, *_nethttp.Response, error) {
	return r.ApiService.ContactsListMemberOfExecute(r)
}

/*
ContactsListMemberOf Get memberOf from contacts

Groups that this contact is a member of. Read-only. Nullable. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgContactId key: id of orgContact
 @return ApiContactsListMemberOfRequest
*/
func (a *ContactsDirectoryObjectApiService) ContactsListMemberOf(ctx _context.Context, orgContactId string) ApiContactsListMemberOfRequest {
	return ApiContactsListMemberOfRequest{
		ApiService: a,
		ctx: ctx,
		orgContactId: orgContactId,
	}
}

// Execute executes the request
//  @return CollectionOfDirectoryObject
func (a *ContactsDirectoryObjectApiService) ContactsListMemberOfExecute(r ApiContactsListMemberOfRequest) (CollectionOfDirectoryObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDirectoryObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactsDirectoryObjectApiService.ContactsListMemberOf")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/contacts/{orgContact-id}/memberOf"
	localVarPath = strings.Replace(localVarPath, "{"+"orgContact-id"+"}", _neturl.PathEscape(parameterToString(r.orgContactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContactsListRefDirectReportsRequest struct {
	ctx _context.Context
	ApiService *ContactsDirectoryObjectApiService
	orgContactId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
}

// Show only the first n items
func (r ApiContactsListRefDirectReportsRequest) Top(top int32) ApiContactsListRefDirectReportsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiContactsListRefDirectReportsRequest) Skip(skip int32) ApiContactsListRefDirectReportsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiContactsListRefDirectReportsRequest) Search(search string) ApiContactsListRefDirectReportsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiContactsListRefDirectReportsRequest) Filter(filter string) ApiContactsListRefDirectReportsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiContactsListRefDirectReportsRequest) Count(count bool) ApiContactsListRefDirectReportsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiContactsListRefDirectReportsRequest) Orderby(orderby []string) ApiContactsListRefDirectReportsRequest {
	r.orderby = &orderby
	return r
}

func (r ApiContactsListRefDirectReportsRequest) Execute() (CollectionOfLinksOfDirectoryObject, *_nethttp.Response, error) {
	return r.ApiService.ContactsListRefDirectReportsExecute(r)
}

/*
ContactsListRefDirectReports Get ref of directReports from contacts

The contact's direct reports. (The users and contacts that have their manager property set to this contact.) Read-only. Nullable. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgContactId key: id of orgContact
 @return ApiContactsListRefDirectReportsRequest
*/
func (a *ContactsDirectoryObjectApiService) ContactsListRefDirectReports(ctx _context.Context, orgContactId string) ApiContactsListRefDirectReportsRequest {
	return ApiContactsListRefDirectReportsRequest{
		ApiService: a,
		ctx: ctx,
		orgContactId: orgContactId,
	}
}

// Execute executes the request
//  @return CollectionOfLinksOfDirectoryObject
func (a *ContactsDirectoryObjectApiService) ContactsListRefDirectReportsExecute(r ApiContactsListRefDirectReportsRequest) (CollectionOfLinksOfDirectoryObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfLinksOfDirectoryObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactsDirectoryObjectApiService.ContactsListRefDirectReports")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/contacts/{orgContact-id}/directReports/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"orgContact-id"+"}", _neturl.PathEscape(parameterToString(r.orgContactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContactsListRefMemberOfRequest struct {
	ctx _context.Context
	ApiService *ContactsDirectoryObjectApiService
	orgContactId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
}

// Show only the first n items
func (r ApiContactsListRefMemberOfRequest) Top(top int32) ApiContactsListRefMemberOfRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiContactsListRefMemberOfRequest) Skip(skip int32) ApiContactsListRefMemberOfRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiContactsListRefMemberOfRequest) Search(search string) ApiContactsListRefMemberOfRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiContactsListRefMemberOfRequest) Filter(filter string) ApiContactsListRefMemberOfRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiContactsListRefMemberOfRequest) Count(count bool) ApiContactsListRefMemberOfRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiContactsListRefMemberOfRequest) Orderby(orderby []string) ApiContactsListRefMemberOfRequest {
	r.orderby = &orderby
	return r
}

func (r ApiContactsListRefMemberOfRequest) Execute() (CollectionOfLinksOfDirectoryObject, *_nethttp.Response, error) {
	return r.ApiService.ContactsListRefMemberOfExecute(r)
}

/*
ContactsListRefMemberOf Get ref of memberOf from contacts

Groups that this contact is a member of. Read-only. Nullable. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgContactId key: id of orgContact
 @return ApiContactsListRefMemberOfRequest
*/
func (a *ContactsDirectoryObjectApiService) ContactsListRefMemberOf(ctx _context.Context, orgContactId string) ApiContactsListRefMemberOfRequest {
	return ApiContactsListRefMemberOfRequest{
		ApiService: a,
		ctx: ctx,
		orgContactId: orgContactId,
	}
}

// Execute executes the request
//  @return CollectionOfLinksOfDirectoryObject
func (a *ContactsDirectoryObjectApiService) ContactsListRefMemberOfExecute(r ApiContactsListRefMemberOfRequest) (CollectionOfLinksOfDirectoryObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfLinksOfDirectoryObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactsDirectoryObjectApiService.ContactsListRefMemberOf")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/contacts/{orgContact-id}/memberOf/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"orgContact-id"+"}", _neturl.PathEscape(parameterToString(r.orgContactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContactsListRefTransitiveMemberOfRequest struct {
	ctx _context.Context
	ApiService *ContactsDirectoryObjectApiService
	orgContactId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
}

// Show only the first n items
func (r ApiContactsListRefTransitiveMemberOfRequest) Top(top int32) ApiContactsListRefTransitiveMemberOfRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiContactsListRefTransitiveMemberOfRequest) Skip(skip int32) ApiContactsListRefTransitiveMemberOfRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiContactsListRefTransitiveMemberOfRequest) Search(search string) ApiContactsListRefTransitiveMemberOfRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiContactsListRefTransitiveMemberOfRequest) Filter(filter string) ApiContactsListRefTransitiveMemberOfRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiContactsListRefTransitiveMemberOfRequest) Count(count bool) ApiContactsListRefTransitiveMemberOfRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiContactsListRefTransitiveMemberOfRequest) Orderby(orderby []string) ApiContactsListRefTransitiveMemberOfRequest {
	r.orderby = &orderby
	return r
}

func (r ApiContactsListRefTransitiveMemberOfRequest) Execute() (CollectionOfLinksOfDirectoryObject, *_nethttp.Response, error) {
	return r.ApiService.ContactsListRefTransitiveMemberOfExecute(r)
}

/*
ContactsListRefTransitiveMemberOf Get ref of transitiveMemberOf from contacts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgContactId key: id of orgContact
 @return ApiContactsListRefTransitiveMemberOfRequest
*/
func (a *ContactsDirectoryObjectApiService) ContactsListRefTransitiveMemberOf(ctx _context.Context, orgContactId string) ApiContactsListRefTransitiveMemberOfRequest {
	return ApiContactsListRefTransitiveMemberOfRequest{
		ApiService: a,
		ctx: ctx,
		orgContactId: orgContactId,
	}
}

// Execute executes the request
//  @return CollectionOfLinksOfDirectoryObject
func (a *ContactsDirectoryObjectApiService) ContactsListRefTransitiveMemberOfExecute(r ApiContactsListRefTransitiveMemberOfRequest) (CollectionOfLinksOfDirectoryObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfLinksOfDirectoryObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactsDirectoryObjectApiService.ContactsListRefTransitiveMemberOf")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/contacts/{orgContact-id}/transitiveMemberOf/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"orgContact-id"+"}", _neturl.PathEscape(parameterToString(r.orgContactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContactsListTransitiveMemberOfRequest struct {
	ctx _context.Context
	ApiService *ContactsDirectoryObjectApiService
	orgContactId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiContactsListTransitiveMemberOfRequest) Top(top int32) ApiContactsListTransitiveMemberOfRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiContactsListTransitiveMemberOfRequest) Skip(skip int32) ApiContactsListTransitiveMemberOfRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiContactsListTransitiveMemberOfRequest) Search(search string) ApiContactsListTransitiveMemberOfRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiContactsListTransitiveMemberOfRequest) Filter(filter string) ApiContactsListTransitiveMemberOfRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiContactsListTransitiveMemberOfRequest) Count(count bool) ApiContactsListTransitiveMemberOfRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiContactsListTransitiveMemberOfRequest) Orderby(orderby []string) ApiContactsListTransitiveMemberOfRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiContactsListTransitiveMemberOfRequest) Select_(select_ []string) ApiContactsListTransitiveMemberOfRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiContactsListTransitiveMemberOfRequest) Expand(expand []string) ApiContactsListTransitiveMemberOfRequest {
	r.expand = &expand
	return r
}

func (r ApiContactsListTransitiveMemberOfRequest) Execute() (CollectionOfDirectoryObject, *_nethttp.Response, error) {
	return r.ApiService.ContactsListTransitiveMemberOfExecute(r)
}

/*
ContactsListTransitiveMemberOf Get transitiveMemberOf from contacts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgContactId key: id of orgContact
 @return ApiContactsListTransitiveMemberOfRequest
*/
func (a *ContactsDirectoryObjectApiService) ContactsListTransitiveMemberOf(ctx _context.Context, orgContactId string) ApiContactsListTransitiveMemberOfRequest {
	return ApiContactsListTransitiveMemberOfRequest{
		ApiService: a,
		ctx: ctx,
		orgContactId: orgContactId,
	}
}

// Execute executes the request
//  @return CollectionOfDirectoryObject
func (a *ContactsDirectoryObjectApiService) ContactsListTransitiveMemberOfExecute(r ApiContactsListTransitiveMemberOfRequest) (CollectionOfDirectoryObject, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfDirectoryObject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactsDirectoryObjectApiService.ContactsListTransitiveMemberOf")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/contacts/{orgContact-id}/transitiveMemberOf"
	localVarPath = strings.Replace(localVarPath, "{"+"orgContact-id"+"}", _neturl.PathEscape(parameterToString(r.orgContactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiContactsUpdateRefManagerRequest struct {
	ctx _context.Context
	ApiService *ContactsDirectoryObjectApiService
	orgContactId string
	requestBody *map[string]map[string]interface{}
}

// New navigation property ref values
func (r ApiContactsUpdateRefManagerRequest) RequestBody(requestBody map[string]map[string]interface{}) ApiContactsUpdateRefManagerRequest {
	r.requestBody = &requestBody
	return r
}

func (r ApiContactsUpdateRefManagerRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.ContactsUpdateRefManagerExecute(r)
}

/*
ContactsUpdateRefManager Update the ref of navigation property manager in contacts

The user or contact that is this contact's manager. Read-only. Supports $expand.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param orgContactId key: id of orgContact
 @return ApiContactsUpdateRefManagerRequest
*/
func (a *ContactsDirectoryObjectApiService) ContactsUpdateRefManager(ctx _context.Context, orgContactId string) ApiContactsUpdateRefManagerRequest {
	return ApiContactsUpdateRefManagerRequest{
		ApiService: a,
		ctx: ctx,
		orgContactId: orgContactId,
	}
}

// Execute executes the request
func (a *ContactsDirectoryObjectApiService) ContactsUpdateRefManagerExecute(r ApiContactsUpdateRefManagerRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ContactsDirectoryObjectApiService.ContactsUpdateRefManager")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/contacts/{orgContact-id}/manager/$ref"
	localVarPath = strings.Replace(localVarPath, "{"+"orgContact-id"+"}", _neturl.PathEscape(parameterToString(r.orgContactId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.requestBody == nil {
		return nil, reportError("requestBody is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.requestBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
