/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// MessageRule struct for MessageRule
type MessageRule struct {
	// Actions to be taken on a message when the corresponding conditions are fulfilled.
	Actions AnyOfmicrosoftGraphMessageRuleActions `json:"actions,omitempty"`
	// Conditions that when fulfilled, will trigger the corresponding actions for that rule.
	Conditions AnyOfmicrosoftGraphMessageRulePredicates `json:"conditions,omitempty"`
	// The display name of the rule.
	DisplayName NullableString `json:"displayName,omitempty"`
	// Exception conditions for the rule.
	Exceptions AnyOfmicrosoftGraphMessageRulePredicates `json:"exceptions,omitempty"`
	// Indicates whether the rule is in an error condition. Read-only.
	HasError NullableBool `json:"hasError,omitempty"`
	// Indicates whether the rule is enabled to be applied to messages.
	IsEnabled NullableBool `json:"isEnabled,omitempty"`
	// Indicates if the rule is read-only and cannot be modified or deleted by the rules REST API.
	IsReadOnly NullableBool `json:"isReadOnly,omitempty"`
	// Indicates the order in which the rule is executed, among other rules.
	Sequence NullableInt32 `json:"sequence,omitempty"`
}

// NewMessageRule instantiates a new MessageRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMessageRule() *MessageRule {
	this := MessageRule{}
	return &this
}

// NewMessageRuleWithDefaults instantiates a new MessageRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMessageRuleWithDefaults() *MessageRule {
	this := MessageRule{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRule) GetActions() AnyOfmicrosoftGraphMessageRuleActions {
	if o == nil  {
		var ret AnyOfmicrosoftGraphMessageRuleActions
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRule) GetActionsOk() (*AnyOfmicrosoftGraphMessageRuleActions, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return &o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *MessageRule) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given AnyOfmicrosoftGraphMessageRuleActions and assigns it to the Actions field.
func (o *MessageRule) SetActions(v AnyOfmicrosoftGraphMessageRuleActions) {
	o.Actions = v
}

// GetConditions returns the Conditions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRule) GetConditions() AnyOfmicrosoftGraphMessageRulePredicates {
	if o == nil  {
		var ret AnyOfmicrosoftGraphMessageRulePredicates
		return ret
	}
	return o.Conditions
}

// GetConditionsOk returns a tuple with the Conditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRule) GetConditionsOk() (*AnyOfmicrosoftGraphMessageRulePredicates, bool) {
	if o == nil || o.Conditions == nil {
		return nil, false
	}
	return &o.Conditions, true
}

// HasConditions returns a boolean if a field has been set.
func (o *MessageRule) HasConditions() bool {
	if o != nil && o.Conditions != nil {
		return true
	}

	return false
}

// SetConditions gets a reference to the given AnyOfmicrosoftGraphMessageRulePredicates and assigns it to the Conditions field.
func (o *MessageRule) SetConditions(v AnyOfmicrosoftGraphMessageRulePredicates) {
	o.Conditions = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRule) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRule) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *MessageRule) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *MessageRule) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *MessageRule) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *MessageRule) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetExceptions returns the Exceptions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRule) GetExceptions() AnyOfmicrosoftGraphMessageRulePredicates {
	if o == nil  {
		var ret AnyOfmicrosoftGraphMessageRulePredicates
		return ret
	}
	return o.Exceptions
}

// GetExceptionsOk returns a tuple with the Exceptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRule) GetExceptionsOk() (*AnyOfmicrosoftGraphMessageRulePredicates, bool) {
	if o == nil || o.Exceptions == nil {
		return nil, false
	}
	return &o.Exceptions, true
}

// HasExceptions returns a boolean if a field has been set.
func (o *MessageRule) HasExceptions() bool {
	if o != nil && o.Exceptions != nil {
		return true
	}

	return false
}

// SetExceptions gets a reference to the given AnyOfmicrosoftGraphMessageRulePredicates and assigns it to the Exceptions field.
func (o *MessageRule) SetExceptions(v AnyOfmicrosoftGraphMessageRulePredicates) {
	o.Exceptions = v
}

// GetHasError returns the HasError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRule) GetHasError() bool {
	if o == nil || o.HasError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HasError.Get()
}

// GetHasErrorOk returns a tuple with the HasError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRule) GetHasErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HasError.Get(), o.HasError.IsSet()
}

// HasHasError returns a boolean if a field has been set.
func (o *MessageRule) HasHasError() bool {
	if o != nil && o.HasError.IsSet() {
		return true
	}

	return false
}

// SetHasError gets a reference to the given NullableBool and assigns it to the HasError field.
func (o *MessageRule) SetHasError(v bool) {
	o.HasError.Set(&v)
}
// SetHasErrorNil sets the value for HasError to be an explicit nil
func (o *MessageRule) SetHasErrorNil() {
	o.HasError.Set(nil)
}

// UnsetHasError ensures that no value is present for HasError, not even an explicit nil
func (o *MessageRule) UnsetHasError() {
	o.HasError.Unset()
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRule) GetIsEnabled() bool {
	if o == nil || o.IsEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsEnabled.Get()
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRule) GetIsEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsEnabled.Get(), o.IsEnabled.IsSet()
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *MessageRule) HasIsEnabled() bool {
	if o != nil && o.IsEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given NullableBool and assigns it to the IsEnabled field.
func (o *MessageRule) SetIsEnabled(v bool) {
	o.IsEnabled.Set(&v)
}
// SetIsEnabledNil sets the value for IsEnabled to be an explicit nil
func (o *MessageRule) SetIsEnabledNil() {
	o.IsEnabled.Set(nil)
}

// UnsetIsEnabled ensures that no value is present for IsEnabled, not even an explicit nil
func (o *MessageRule) UnsetIsEnabled() {
	o.IsEnabled.Unset()
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRule) GetIsReadOnly() bool {
	if o == nil || o.IsReadOnly.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsReadOnly.Get()
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRule) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsReadOnly.Get(), o.IsReadOnly.IsSet()
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *MessageRule) HasIsReadOnly() bool {
	if o != nil && o.IsReadOnly.IsSet() {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given NullableBool and assigns it to the IsReadOnly field.
func (o *MessageRule) SetIsReadOnly(v bool) {
	o.IsReadOnly.Set(&v)
}
// SetIsReadOnlyNil sets the value for IsReadOnly to be an explicit nil
func (o *MessageRule) SetIsReadOnlyNil() {
	o.IsReadOnly.Set(nil)
}

// UnsetIsReadOnly ensures that no value is present for IsReadOnly, not even an explicit nil
func (o *MessageRule) UnsetIsReadOnly() {
	o.IsReadOnly.Unset()
}

// GetSequence returns the Sequence field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MessageRule) GetSequence() int32 {
	if o == nil || o.Sequence.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Sequence.Get()
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MessageRule) GetSequenceOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Sequence.Get(), o.Sequence.IsSet()
}

// HasSequence returns a boolean if a field has been set.
func (o *MessageRule) HasSequence() bool {
	if o != nil && o.Sequence.IsSet() {
		return true
	}

	return false
}

// SetSequence gets a reference to the given NullableInt32 and assigns it to the Sequence field.
func (o *MessageRule) SetSequence(v int32) {
	o.Sequence.Set(&v)
}
// SetSequenceNil sets the value for Sequence to be an explicit nil
func (o *MessageRule) SetSequenceNil() {
	o.Sequence.Set(nil)
}

// UnsetSequence ensures that no value is present for Sequence, not even an explicit nil
func (o *MessageRule) UnsetSequence() {
	o.Sequence.Unset()
}

func (o MessageRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	if o.Conditions != nil {
		toSerialize["conditions"] = o.Conditions
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.Exceptions != nil {
		toSerialize["exceptions"] = o.Exceptions
	}
	if o.HasError.IsSet() {
		toSerialize["hasError"] = o.HasError.Get()
	}
	if o.IsEnabled.IsSet() {
		toSerialize["isEnabled"] = o.IsEnabled.Get()
	}
	if o.IsReadOnly.IsSet() {
		toSerialize["isReadOnly"] = o.IsReadOnly.Get()
	}
	if o.Sequence.IsSet() {
		toSerialize["sequence"] = o.Sequence.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMessageRule struct {
	value *MessageRule
	isSet bool
}

func (v NullableMessageRule) Get() *MessageRule {
	return v.value
}

func (v *NullableMessageRule) Set(val *MessageRule) {
	v.value = val
	v.isSet = true
}

func (v NullableMessageRule) IsSet() bool {
	return v.isSet
}

func (v *NullableMessageRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMessageRule(val *MessageRule) *NullableMessageRule {
	return &NullableMessageRule{value: val, isSet: true}
}

func (v NullableMessageRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMessageRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


