/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphInferenceClassificationType the model 'MicrosoftGraphInferenceClassificationType'
type MicrosoftGraphInferenceClassificationType string

// List of microsoft.graph.inferenceClassificationType
const (
	FOCUSED MicrosoftGraphInferenceClassificationType = "focused"
	OTHER MicrosoftGraphInferenceClassificationType = "other"
)

// All allowed values of MicrosoftGraphInferenceClassificationType enum
var AllowedMicrosoftGraphInferenceClassificationTypeEnumValues = []MicrosoftGraphInferenceClassificationType{
	"focused",
	"other",
}

func (v *MicrosoftGraphInferenceClassificationType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphInferenceClassificationType(value)
	for _, existing := range AllowedMicrosoftGraphInferenceClassificationTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphInferenceClassificationType", value)
}

// NewMicrosoftGraphInferenceClassificationTypeFromValue returns a pointer to a valid MicrosoftGraphInferenceClassificationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphInferenceClassificationTypeFromValue(v string) (*MicrosoftGraphInferenceClassificationType, error) {
	ev := MicrosoftGraphInferenceClassificationType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphInferenceClassificationType: valid values are %v", v, AllowedMicrosoftGraphInferenceClassificationTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphInferenceClassificationType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphInferenceClassificationTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.inferenceClassificationType value
func (v MicrosoftGraphInferenceClassificationType) Ptr() *MicrosoftGraphInferenceClassificationType {
	return &v
}

type NullableMicrosoftGraphInferenceClassificationType struct {
	value *MicrosoftGraphInferenceClassificationType
	isSet bool
}

func (v NullableMicrosoftGraphInferenceClassificationType) Get() *MicrosoftGraphInferenceClassificationType {
	return v.value
}

func (v *NullableMicrosoftGraphInferenceClassificationType) Set(val *MicrosoftGraphInferenceClassificationType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphInferenceClassificationType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphInferenceClassificationType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphInferenceClassificationType(val *MicrosoftGraphInferenceClassificationType) *NullableMicrosoftGraphInferenceClassificationType {
	return &NullableMicrosoftGraphInferenceClassificationType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphInferenceClassificationType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphInferenceClassificationType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

