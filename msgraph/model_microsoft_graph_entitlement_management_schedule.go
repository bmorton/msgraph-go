/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"time"
)

// MicrosoftGraphEntitlementManagementSchedule struct for MicrosoftGraphEntitlementManagementSchedule
type MicrosoftGraphEntitlementManagementSchedule struct {
	// When the access should expire.
	Expiration AnyOfmicrosoftGraphExpirationPattern `json:"expiration,omitempty"`
	// For recurring access. Not used at present.
	Recurrence AnyOfmicrosoftGraphPatternedRecurrence `json:"recurrence,omitempty"`
	// The Timestamp type represents date and time information using ISO 8601 format and is always in UTC time. For example, midnight UTC on Jan 1, 2014 is 2014-01-01T00:00:00Z.
	StartDateTime NullableTime `json:"startDateTime,omitempty"`
}

// NewMicrosoftGraphEntitlementManagementSchedule instantiates a new MicrosoftGraphEntitlementManagementSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMicrosoftGraphEntitlementManagementSchedule() *MicrosoftGraphEntitlementManagementSchedule {
	this := MicrosoftGraphEntitlementManagementSchedule{}
	return &this
}

// NewMicrosoftGraphEntitlementManagementScheduleWithDefaults instantiates a new MicrosoftGraphEntitlementManagementSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMicrosoftGraphEntitlementManagementScheduleWithDefaults() *MicrosoftGraphEntitlementManagementSchedule {
	this := MicrosoftGraphEntitlementManagementSchedule{}
	return &this
}

// GetExpiration returns the Expiration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphEntitlementManagementSchedule) GetExpiration() AnyOfmicrosoftGraphExpirationPattern {
	if o == nil  {
		var ret AnyOfmicrosoftGraphExpirationPattern
		return ret
	}
	return o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphEntitlementManagementSchedule) GetExpirationOk() (*AnyOfmicrosoftGraphExpirationPattern, bool) {
	if o == nil || o.Expiration == nil {
		return nil, false
	}
	return &o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *MicrosoftGraphEntitlementManagementSchedule) HasExpiration() bool {
	if o != nil && o.Expiration != nil {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given AnyOfmicrosoftGraphExpirationPattern and assigns it to the Expiration field.
func (o *MicrosoftGraphEntitlementManagementSchedule) SetExpiration(v AnyOfmicrosoftGraphExpirationPattern) {
	o.Expiration = v
}

// GetRecurrence returns the Recurrence field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphEntitlementManagementSchedule) GetRecurrence() AnyOfmicrosoftGraphPatternedRecurrence {
	if o == nil  {
		var ret AnyOfmicrosoftGraphPatternedRecurrence
		return ret
	}
	return o.Recurrence
}

// GetRecurrenceOk returns a tuple with the Recurrence field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphEntitlementManagementSchedule) GetRecurrenceOk() (*AnyOfmicrosoftGraphPatternedRecurrence, bool) {
	if o == nil || o.Recurrence == nil {
		return nil, false
	}
	return &o.Recurrence, true
}

// HasRecurrence returns a boolean if a field has been set.
func (o *MicrosoftGraphEntitlementManagementSchedule) HasRecurrence() bool {
	if o != nil && o.Recurrence != nil {
		return true
	}

	return false
}

// SetRecurrence gets a reference to the given AnyOfmicrosoftGraphPatternedRecurrence and assigns it to the Recurrence field.
func (o *MicrosoftGraphEntitlementManagementSchedule) SetRecurrence(v AnyOfmicrosoftGraphPatternedRecurrence) {
	o.Recurrence = v
}

// GetStartDateTime returns the StartDateTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MicrosoftGraphEntitlementManagementSchedule) GetStartDateTime() time.Time {
	if o == nil || o.StartDateTime.Get() == nil {
		var ret time.Time
		return ret
	}
	return *o.StartDateTime.Get()
}

// GetStartDateTimeOk returns a tuple with the StartDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MicrosoftGraphEntitlementManagementSchedule) GetStartDateTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartDateTime.Get(), o.StartDateTime.IsSet()
}

// HasStartDateTime returns a boolean if a field has been set.
func (o *MicrosoftGraphEntitlementManagementSchedule) HasStartDateTime() bool {
	if o != nil && o.StartDateTime.IsSet() {
		return true
	}

	return false
}

// SetStartDateTime gets a reference to the given NullableTime and assigns it to the StartDateTime field.
func (o *MicrosoftGraphEntitlementManagementSchedule) SetStartDateTime(v time.Time) {
	o.StartDateTime.Set(&v)
}
// SetStartDateTimeNil sets the value for StartDateTime to be an explicit nil
func (o *MicrosoftGraphEntitlementManagementSchedule) SetStartDateTimeNil() {
	o.StartDateTime.Set(nil)
}

// UnsetStartDateTime ensures that no value is present for StartDateTime, not even an explicit nil
func (o *MicrosoftGraphEntitlementManagementSchedule) UnsetStartDateTime() {
	o.StartDateTime.Unset()
}

func (o MicrosoftGraphEntitlementManagementSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Expiration != nil {
		toSerialize["expiration"] = o.Expiration
	}
	if o.Recurrence != nil {
		toSerialize["recurrence"] = o.Recurrence
	}
	if o.StartDateTime.IsSet() {
		toSerialize["startDateTime"] = o.StartDateTime.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMicrosoftGraphEntitlementManagementSchedule struct {
	value *MicrosoftGraphEntitlementManagementSchedule
	isSet bool
}

func (v NullableMicrosoftGraphEntitlementManagementSchedule) Get() *MicrosoftGraphEntitlementManagementSchedule {
	return v.value
}

func (v *NullableMicrosoftGraphEntitlementManagementSchedule) Set(val *MicrosoftGraphEntitlementManagementSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphEntitlementManagementSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphEntitlementManagementSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphEntitlementManagementSchedule(val *MicrosoftGraphEntitlementManagementSchedule) *NullableMicrosoftGraphEntitlementManagementSchedule {
	return &NullableMicrosoftGraphEntitlementManagementSchedule{value: val, isSet: true}
}

func (v NullableMicrosoftGraphEntitlementManagementSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphEntitlementManagementSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


