/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphDeviceManagementExchangeAccessState Device Exchange Access State.
type MicrosoftGraphDeviceManagementExchangeAccessState string

// List of microsoft.graph.deviceManagementExchangeAccessState
const (
	NONE MicrosoftGraphDeviceManagementExchangeAccessState = "none"
	UNKNOWN MicrosoftGraphDeviceManagementExchangeAccessState = "unknown"
	ALLOWED MicrosoftGraphDeviceManagementExchangeAccessState = "allowed"
	BLOCKED MicrosoftGraphDeviceManagementExchangeAccessState = "blocked"
	QUARANTINED MicrosoftGraphDeviceManagementExchangeAccessState = "quarantined"
)

// All allowed values of MicrosoftGraphDeviceManagementExchangeAccessState enum
var AllowedMicrosoftGraphDeviceManagementExchangeAccessStateEnumValues = []MicrosoftGraphDeviceManagementExchangeAccessState{
	"none",
	"unknown",
	"allowed",
	"blocked",
	"quarantined",
}

func (v *MicrosoftGraphDeviceManagementExchangeAccessState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphDeviceManagementExchangeAccessState(value)
	for _, existing := range AllowedMicrosoftGraphDeviceManagementExchangeAccessStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphDeviceManagementExchangeAccessState", value)
}

// NewMicrosoftGraphDeviceManagementExchangeAccessStateFromValue returns a pointer to a valid MicrosoftGraphDeviceManagementExchangeAccessState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphDeviceManagementExchangeAccessStateFromValue(v string) (*MicrosoftGraphDeviceManagementExchangeAccessState, error) {
	ev := MicrosoftGraphDeviceManagementExchangeAccessState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphDeviceManagementExchangeAccessState: valid values are %v", v, AllowedMicrosoftGraphDeviceManagementExchangeAccessStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphDeviceManagementExchangeAccessState) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphDeviceManagementExchangeAccessStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.deviceManagementExchangeAccessState value
func (v MicrosoftGraphDeviceManagementExchangeAccessState) Ptr() *MicrosoftGraphDeviceManagementExchangeAccessState {
	return &v
}

type NullableMicrosoftGraphDeviceManagementExchangeAccessState struct {
	value *MicrosoftGraphDeviceManagementExchangeAccessState
	isSet bool
}

func (v NullableMicrosoftGraphDeviceManagementExchangeAccessState) Get() *MicrosoftGraphDeviceManagementExchangeAccessState {
	return v.value
}

func (v *NullableMicrosoftGraphDeviceManagementExchangeAccessState) Set(val *MicrosoftGraphDeviceManagementExchangeAccessState) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphDeviceManagementExchangeAccessState) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphDeviceManagementExchangeAccessState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphDeviceManagementExchangeAccessState(val *MicrosoftGraphDeviceManagementExchangeAccessState) *NullableMicrosoftGraphDeviceManagementExchangeAccessState {
	return &NullableMicrosoftGraphDeviceManagementExchangeAccessState{value: val, isSet: true}
}

func (v NullableMicrosoftGraphDeviceManagementExchangeAccessState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphDeviceManagementExchangeAccessState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

