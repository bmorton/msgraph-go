/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// InlineObject1439 struct for InlineObject1439
type InlineObject1439 struct {
	EffectRate AnyOfobject `json:"effectRate,omitempty"`
	Npery AnyOfobject `json:"npery,omitempty"`
}

// NewInlineObject1439 instantiates a new InlineObject1439 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject1439() *InlineObject1439 {
	this := InlineObject1439{}
	return &this
}

// NewInlineObject1439WithDefaults instantiates a new InlineObject1439 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject1439WithDefaults() *InlineObject1439 {
	this := InlineObject1439{}
	return &this
}

// GetEffectRate returns the EffectRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1439) GetEffectRate() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.EffectRate
}

// GetEffectRateOk returns a tuple with the EffectRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1439) GetEffectRateOk() (*AnyOfobject, bool) {
	if o == nil || o.EffectRate == nil {
		return nil, false
	}
	return &o.EffectRate, true
}

// HasEffectRate returns a boolean if a field has been set.
func (o *InlineObject1439) HasEffectRate() bool {
	if o != nil && o.EffectRate != nil {
		return true
	}

	return false
}

// SetEffectRate gets a reference to the given AnyOfobject and assigns it to the EffectRate field.
func (o *InlineObject1439) SetEffectRate(v AnyOfobject) {
	o.EffectRate = v
}

// GetNpery returns the Npery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InlineObject1439) GetNpery() AnyOfobject {
	if o == nil  {
		var ret AnyOfobject
		return ret
	}
	return o.Npery
}

// GetNperyOk returns a tuple with the Npery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InlineObject1439) GetNperyOk() (*AnyOfobject, bool) {
	if o == nil || o.Npery == nil {
		return nil, false
	}
	return &o.Npery, true
}

// HasNpery returns a boolean if a field has been set.
func (o *InlineObject1439) HasNpery() bool {
	if o != nil && o.Npery != nil {
		return true
	}

	return false
}

// SetNpery gets a reference to the given AnyOfobject and assigns it to the Npery field.
func (o *InlineObject1439) SetNpery(v AnyOfobject) {
	o.Npery = v
}

func (o InlineObject1439) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EffectRate != nil {
		toSerialize["effectRate"] = o.EffectRate
	}
	if o.Npery != nil {
		toSerialize["npery"] = o.Npery
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject1439 struct {
	value *InlineObject1439
	isSet bool
}

func (v NullableInlineObject1439) Get() *InlineObject1439 {
	return v.value
}

func (v *NullableInlineObject1439) Set(val *InlineObject1439) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject1439) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject1439) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject1439(val *InlineObject1439) *NullableInlineObject1439 {
	return &NullableInlineObject1439{value: val, isSet: true}
}

func (v NullableInlineObject1439) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject1439) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


