/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphPlannerPreviewType the model 'MicrosoftGraphPlannerPreviewType'
type MicrosoftGraphPlannerPreviewType string

// List of microsoft.graph.plannerPreviewType
const (
	AUTOMATIC MicrosoftGraphPlannerPreviewType = "automatic"
	NO_PREVIEW MicrosoftGraphPlannerPreviewType = "noPreview"
	CHECKLIST MicrosoftGraphPlannerPreviewType = "checklist"
	DESCRIPTION MicrosoftGraphPlannerPreviewType = "description"
	REFERENCE MicrosoftGraphPlannerPreviewType = "reference"
)

// All allowed values of MicrosoftGraphPlannerPreviewType enum
var AllowedMicrosoftGraphPlannerPreviewTypeEnumValues = []MicrosoftGraphPlannerPreviewType{
	"automatic",
	"noPreview",
	"checklist",
	"description",
	"reference",
}

func (v *MicrosoftGraphPlannerPreviewType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphPlannerPreviewType(value)
	for _, existing := range AllowedMicrosoftGraphPlannerPreviewTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphPlannerPreviewType", value)
}

// NewMicrosoftGraphPlannerPreviewTypeFromValue returns a pointer to a valid MicrosoftGraphPlannerPreviewType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphPlannerPreviewTypeFromValue(v string) (*MicrosoftGraphPlannerPreviewType, error) {
	ev := MicrosoftGraphPlannerPreviewType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphPlannerPreviewType: valid values are %v", v, AllowedMicrosoftGraphPlannerPreviewTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphPlannerPreviewType) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphPlannerPreviewTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.plannerPreviewType value
func (v MicrosoftGraphPlannerPreviewType) Ptr() *MicrosoftGraphPlannerPreviewType {
	return &v
}

type NullableMicrosoftGraphPlannerPreviewType struct {
	value *MicrosoftGraphPlannerPreviewType
	isSet bool
}

func (v NullableMicrosoftGraphPlannerPreviewType) Get() *MicrosoftGraphPlannerPreviewType {
	return v.value
}

func (v *NullableMicrosoftGraphPlannerPreviewType) Set(val *MicrosoftGraphPlannerPreviewType) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphPlannerPreviewType) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphPlannerPreviewType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphPlannerPreviewType(val *MicrosoftGraphPlannerPreviewType) *NullableMicrosoftGraphPlannerPreviewType {
	return &NullableMicrosoftGraphPlannerPreviewType{value: val, isSet: true}
}

func (v NullableMicrosoftGraphPlannerPreviewType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphPlannerPreviewType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

