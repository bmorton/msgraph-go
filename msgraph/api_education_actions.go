/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// EducationActionsApiService EducationActionsApi service
type EducationActionsApiService service

type ApiEducationClassesEducationClassAssignmentsEducationAssignmentPublishRequest struct {
	ctx _context.Context
	ApiService *EducationActionsApiService
	educationClassId string
	educationAssignmentId string
}


func (r ApiEducationClassesEducationClassAssignmentsEducationAssignmentPublishRequest) Execute() (AnyOfmicrosoftGraphEducationAssignment, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesEducationClassAssignmentsEducationAssignmentPublishExecute(r)
}

/*
EducationClassesEducationClassAssignmentsEducationAssignmentPublish Invoke action publish

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @return ApiEducationClassesEducationClassAssignmentsEducationAssignmentPublishRequest
*/
func (a *EducationActionsApiService) EducationClassesEducationClassAssignmentsEducationAssignmentPublish(ctx _context.Context, educationClassId string, educationAssignmentId string) ApiEducationClassesEducationClassAssignmentsEducationAssignmentPublishRequest {
	return ApiEducationClassesEducationClassAssignmentsEducationAssignmentPublishRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphEducationAssignment
func (a *EducationActionsApiService) EducationClassesEducationClassAssignmentsEducationAssignmentPublishExecute(r ApiEducationClassesEducationClassAssignmentsEducationAssignmentPublishRequest) (AnyOfmicrosoftGraphEducationAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphEducationAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationActionsApiService.EducationClassesEducationClassAssignmentsEducationAssignmentPublish")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/microsoft.graph.publish"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesEducationClassAssignmentsEducationAssignmentSetUpResourcesFolderRequest struct {
	ctx _context.Context
	ApiService *EducationActionsApiService
	educationClassId string
	educationAssignmentId string
}


func (r ApiEducationClassesEducationClassAssignmentsEducationAssignmentSetUpResourcesFolderRequest) Execute() (AnyOfmicrosoftGraphEducationAssignment, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesEducationClassAssignmentsEducationAssignmentSetUpResourcesFolderExecute(r)
}

/*
EducationClassesEducationClassAssignmentsEducationAssignmentSetUpResourcesFolder Invoke action setUpResourcesFolder

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @return ApiEducationClassesEducationClassAssignmentsEducationAssignmentSetUpResourcesFolderRequest
*/
func (a *EducationActionsApiService) EducationClassesEducationClassAssignmentsEducationAssignmentSetUpResourcesFolder(ctx _context.Context, educationClassId string, educationAssignmentId string) ApiEducationClassesEducationClassAssignmentsEducationAssignmentSetUpResourcesFolderRequest {
	return ApiEducationClassesEducationClassAssignmentsEducationAssignmentSetUpResourcesFolderRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphEducationAssignment
func (a *EducationActionsApiService) EducationClassesEducationClassAssignmentsEducationAssignmentSetUpResourcesFolderExecute(r ApiEducationClassesEducationClassAssignmentsEducationAssignmentSetUpResourcesFolderRequest) (AnyOfmicrosoftGraphEducationAssignment, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphEducationAssignment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationActionsApiService.EducationClassesEducationClassAssignmentsEducationAssignmentSetUpResourcesFolder")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/microsoft.graph.setUpResourcesFolder"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionReturnRequest struct {
	ctx _context.Context
	ApiService *EducationActionsApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
}


func (r ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionReturnRequest) Execute() (AnyOfmicrosoftGraphEducationSubmission, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionReturnExecute(r)
}

/*
EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionReturn Invoke action return

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @return ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionReturnRequest
*/
func (a *EducationActionsApiService) EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionReturn(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string) ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionReturnRequest {
	return ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionReturnRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphEducationSubmission
func (a *EducationActionsApiService) EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionReturnExecute(r ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionReturnRequest) (AnyOfmicrosoftGraphEducationSubmission, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphEducationSubmission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationActionsApiService.EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionReturn")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/microsoft.graph.return"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSetUpResourcesFolderRequest struct {
	ctx _context.Context
	ApiService *EducationActionsApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
}


func (r ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSetUpResourcesFolderRequest) Execute() (AnyOfmicrosoftGraphEducationSubmission, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSetUpResourcesFolderExecute(r)
}

/*
EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSetUpResourcesFolder Invoke action setUpResourcesFolder

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @return ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSetUpResourcesFolderRequest
*/
func (a *EducationActionsApiService) EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSetUpResourcesFolder(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string) ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSetUpResourcesFolderRequest {
	return ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSetUpResourcesFolderRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphEducationSubmission
func (a *EducationActionsApiService) EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSetUpResourcesFolderExecute(r ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSetUpResourcesFolderRequest) (AnyOfmicrosoftGraphEducationSubmission, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphEducationSubmission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationActionsApiService.EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSetUpResourcesFolder")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/microsoft.graph.setUpResourcesFolder"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSubmitRequest struct {
	ctx _context.Context
	ApiService *EducationActionsApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
}


func (r ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSubmitRequest) Execute() (AnyOfmicrosoftGraphEducationSubmission, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSubmitExecute(r)
}

/*
EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSubmit Invoke action submit

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @return ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSubmitRequest
*/
func (a *EducationActionsApiService) EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSubmit(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string) ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSubmitRequest {
	return ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSubmitRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphEducationSubmission
func (a *EducationActionsApiService) EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSubmitExecute(r ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSubmitRequest) (AnyOfmicrosoftGraphEducationSubmission, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphEducationSubmission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationActionsApiService.EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionSubmit")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/microsoft.graph.submit"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionUnsubmitRequest struct {
	ctx _context.Context
	ApiService *EducationActionsApiService
	educationClassId string
	educationAssignmentId string
	educationSubmissionId string
}


func (r ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionUnsubmitRequest) Execute() (AnyOfmicrosoftGraphEducationSubmission, *_nethttp.Response, error) {
	return r.ApiService.EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionUnsubmitExecute(r)
}

/*
EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionUnsubmit Invoke action unsubmit

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param educationClassId key: id of educationClass
 @param educationAssignmentId key: id of educationAssignment
 @param educationSubmissionId key: id of educationSubmission
 @return ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionUnsubmitRequest
*/
func (a *EducationActionsApiService) EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionUnsubmit(ctx _context.Context, educationClassId string, educationAssignmentId string, educationSubmissionId string) ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionUnsubmitRequest {
	return ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionUnsubmitRequest{
		ApiService: a,
		ctx: ctx,
		educationClassId: educationClassId,
		educationAssignmentId: educationAssignmentId,
		educationSubmissionId: educationSubmissionId,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphEducationSubmission
func (a *EducationActionsApiService) EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionUnsubmitExecute(r ApiEducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionUnsubmitRequest) (AnyOfmicrosoftGraphEducationSubmission, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphEducationSubmission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "EducationActionsApiService.EducationClassesEducationClassAssignmentsEducationAssignmentSubmissionsEducationSubmissionUnsubmit")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/education/classes/{educationClass-id}/assignments/{educationAssignment-id}/submissions/{educationSubmission-id}/microsoft.graph.unsubmit"
	localVarPath = strings.Replace(localVarPath, "{"+"educationClass-id"+"}", _neturl.PathEscape(parameterToString(r.educationClassId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationAssignment-id"+"}", _neturl.PathEscape(parameterToString(r.educationAssignmentId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"educationSubmission-id"+"}", _neturl.PathEscape(parameterToString(r.educationSubmissionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
