/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphAlertSeverity the model 'MicrosoftGraphAlertSeverity'
type MicrosoftGraphAlertSeverity string

// List of microsoft.graph.alertSeverity
const (
	UNKNOWN MicrosoftGraphAlertSeverity = "unknown"
	INFORMATIONAL MicrosoftGraphAlertSeverity = "informational"
	LOW MicrosoftGraphAlertSeverity = "low"
	MEDIUM MicrosoftGraphAlertSeverity = "medium"
	HIGH MicrosoftGraphAlertSeverity = "high"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphAlertSeverity = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphAlertSeverity enum
var AllowedMicrosoftGraphAlertSeverityEnumValues = []MicrosoftGraphAlertSeverity{
	"unknown",
	"informational",
	"low",
	"medium",
	"high",
	"unknownFutureValue",
}

func (v *MicrosoftGraphAlertSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphAlertSeverity(value)
	for _, existing := range AllowedMicrosoftGraphAlertSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphAlertSeverity", value)
}

// NewMicrosoftGraphAlertSeverityFromValue returns a pointer to a valid MicrosoftGraphAlertSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphAlertSeverityFromValue(v string) (*MicrosoftGraphAlertSeverity, error) {
	ev := MicrosoftGraphAlertSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphAlertSeverity: valid values are %v", v, AllowedMicrosoftGraphAlertSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphAlertSeverity) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphAlertSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.alertSeverity value
func (v MicrosoftGraphAlertSeverity) Ptr() *MicrosoftGraphAlertSeverity {
	return &v
}

type NullableMicrosoftGraphAlertSeverity struct {
	value *MicrosoftGraphAlertSeverity
	isSet bool
}

func (v NullableMicrosoftGraphAlertSeverity) Get() *MicrosoftGraphAlertSeverity {
	return v.value
}

func (v *NullableMicrosoftGraphAlertSeverity) Set(val *MicrosoftGraphAlertSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphAlertSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphAlertSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphAlertSeverity(val *MicrosoftGraphAlertSeverity) *NullableMicrosoftGraphAlertSeverity {
	return &NullableMicrosoftGraphAlertSeverity{value: val, isSet: true}
}

func (v NullableMicrosoftGraphAlertSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphAlertSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

