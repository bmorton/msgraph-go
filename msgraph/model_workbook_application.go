/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// WorkbookApplication struct for WorkbookApplication
type WorkbookApplication struct {
	// Returns the calculation mode used in the workbook. Possible values are: Automatic, AutomaticExceptTables, Manual.
	CalculationMode *string `json:"calculationMode,omitempty"`
}

// NewWorkbookApplication instantiates a new WorkbookApplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkbookApplication() *WorkbookApplication {
	this := WorkbookApplication{}
	return &this
}

// NewWorkbookApplicationWithDefaults instantiates a new WorkbookApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkbookApplicationWithDefaults() *WorkbookApplication {
	this := WorkbookApplication{}
	return &this
}

// GetCalculationMode returns the CalculationMode field value if set, zero value otherwise.
func (o *WorkbookApplication) GetCalculationMode() string {
	if o == nil || o.CalculationMode == nil {
		var ret string
		return ret
	}
	return *o.CalculationMode
}

// GetCalculationModeOk returns a tuple with the CalculationMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkbookApplication) GetCalculationModeOk() (*string, bool) {
	if o == nil || o.CalculationMode == nil {
		return nil, false
	}
	return o.CalculationMode, true
}

// HasCalculationMode returns a boolean if a field has been set.
func (o *WorkbookApplication) HasCalculationMode() bool {
	if o != nil && o.CalculationMode != nil {
		return true
	}

	return false
}

// SetCalculationMode gets a reference to the given string and assigns it to the CalculationMode field.
func (o *WorkbookApplication) SetCalculationMode(v string) {
	o.CalculationMode = &v
}

func (o WorkbookApplication) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CalculationMode != nil {
		toSerialize["calculationMode"] = o.CalculationMode
	}
	return json.Marshal(toSerialize)
}

type NullableWorkbookApplication struct {
	value *WorkbookApplication
	isSet bool
}

func (v NullableWorkbookApplication) Get() *WorkbookApplication {
	return v.value
}

func (v *NullableWorkbookApplication) Set(val *WorkbookApplication) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkbookApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkbookApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkbookApplication(val *WorkbookApplication) *NullableWorkbookApplication {
	return &NullableWorkbookApplication{value: val, isSet: true}
}

func (v NullableWorkbookApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkbookApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


