/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject511 struct for InlineObject511
type InlineObject511 struct {
	Across *bool `json:"across,omitempty"`
}

// NewInlineObject511 instantiates a new InlineObject511 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject511() *InlineObject511 {
	this := InlineObject511{}
	var across bool = false
	this.Across = &across
	return &this
}

// NewInlineObject511WithDefaults instantiates a new InlineObject511 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject511WithDefaults() *InlineObject511 {
	this := InlineObject511{}
	var across bool = false
	this.Across = &across
	return &this
}

// GetAcross returns the Across field value if set, zero value otherwise.
func (o *InlineObject511) GetAcross() bool {
	if o == nil || o.Across == nil {
		var ret bool
		return ret
	}
	return *o.Across
}

// GetAcrossOk returns a tuple with the Across field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject511) GetAcrossOk() (*bool, bool) {
	if o == nil || o.Across == nil {
		return nil, false
	}
	return o.Across, true
}

// HasAcross returns a boolean if a field has been set.
func (o *InlineObject511) HasAcross() bool {
	if o != nil && o.Across != nil {
		return true
	}

	return false
}

// SetAcross gets a reference to the given bool and assigns it to the Across field.
func (o *InlineObject511) SetAcross(v bool) {
	o.Across = &v
}

func (o InlineObject511) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Across != nil {
		toSerialize["across"] = o.Across
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject511 struct {
	value *InlineObject511
	isSet bool
}

func (v NullableInlineObject511) Get() *InlineObject511 {
	return v.value
}

func (v *NullableInlineObject511) Set(val *InlineObject511) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject511) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject511) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject511(val *InlineObject511) *NullableInlineObject511 {
	return &NullableInlineObject511{value: val, isSet: true}
}

func (v NullableInlineObject511) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject511) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


