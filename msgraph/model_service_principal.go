/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
)

// ServicePrincipal struct for ServicePrincipal
type ServicePrincipal struct {
	// true if the service principal account is enabled; otherwise, false. Supports $filter (eq, ne, not, in).
	AccountEnabled NullableBool `json:"accountEnabled,omitempty"`
	// Defines custom behavior that a consuming service can use to call an app in specific contexts. For example, applications that can render file streams may set the addIns property for its 'FileHandler' functionality. This will let services like Microsoft 365 call the application in the context of a document the user is working on.
	AddIns *[]MicrosoftGraphAddIn `json:"addIns,omitempty"`
	// Used to retrieve service principals by subscription, identify resource group and full resource ids for managed identities. Supports $filter (eq, not, ge, le, startsWith).
	AlternativeNames *[]string `json:"alternativeNames,omitempty"`
	// The description exposed by the associated application.
	AppDescription NullableString `json:"appDescription,omitempty"`
	// The display name exposed by the associated application.
	AppDisplayName NullableString `json:"appDisplayName,omitempty"`
	// The unique identifier for the associated application (its appId property). Supports $filter (eq, ne, not, in, startsWith).
	AppId NullableString `json:"appId,omitempty"`
	// Unique identifier of the applicationTemplate that the servicePrincipal was created from. Read-only. Supports $filter (eq, ne, NOT, startsWith).
	ApplicationTemplateId NullableString `json:"applicationTemplateId,omitempty"`
	// Contains the tenant id where the application is registered. This is applicable only to service principals backed by applications. Supports $filter (eq, ne, NOT, ge, le).
	AppOwnerOrganizationId NullableString `json:"appOwnerOrganizationId,omitempty"`
	// Specifies whether users or other service principals need to be granted an app role assignment for this service principal before users can sign in or apps can get tokens. The default value is false. Not nullable. Supports $filter (eq, ne, NOT).
	AppRoleAssignmentRequired *bool `json:"appRoleAssignmentRequired,omitempty"`
	// The roles exposed by the application which this service principal represents. For more information see the appRoles property definition on the application entity. Not nullable.
	AppRoles *[]MicrosoftGraphAppRole `json:"appRoles,omitempty"`
	// Free text field to provide an internal end-user facing description of the service principal. End-user portals such MyApps will display the application description in this field. The maximum allowed size is 1024 characters. Supports $filter (eq, ne, not, ge, le, startsWith) and $search.
	Description NullableString `json:"description,omitempty"`
	// Specifies whether Microsoft has disabled the registered application. Possible values are: null (default value), NotDisabled, and DisabledDueToViolationOfServicesAgreement (reasons may include suspicious, abusive, or malicious activity, or a violation of the Microsoft Services Agreement).  Supports $filter (eq, ne, not).
	DisabledByMicrosoftStatus NullableString `json:"disabledByMicrosoftStatus,omitempty"`
	// The display name for the service principal. Supports $filter (eq, ne, not, ge, le, in, startsWith, and eq on null values), $search, and $orderBy.
	DisplayName NullableString `json:"displayName,omitempty"`
	// Home page or landing page of the application.
	Homepage NullableString `json:"homepage,omitempty"`
	// Basic profile information of the acquired application such as app's marketing, support, terms of service and privacy statement URLs. The terms of service and privacy statement are surfaced to users through the user consent experience. For more info, see How to: Add Terms of service and privacy statement for registered Azure AD apps. Supports $filter (eq, ne, not, ge, le, and eq on null values).
	Info AnyOfmicrosoftGraphInformationalUrl `json:"info,omitempty"`
	// The collection of key credentials associated with the service principal. Not nullable. Supports $filter (eq, not, ge, le).
	KeyCredentials *[]MicrosoftGraphKeyCredential `json:"keyCredentials,omitempty"`
	// Specifies the URL where the service provider redirects the user to Azure AD to authenticate. Azure AD uses the URL to launch the application from Microsoft 365 or the Azure AD My Apps. When blank, Azure AD performs IdP-initiated sign-on for applications configured with SAML-based single sign-on. The user launches the application from Microsoft 365, the Azure AD My Apps, or the Azure AD SSO URL.
	LoginUrl NullableString `json:"loginUrl,omitempty"`
	// Specifies the URL that will be used by Microsoft's authorization service to logout an user using OpenId Connect front-channel, back-channel or SAML logout protocols.
	LogoutUrl NullableString `json:"logoutUrl,omitempty"`
	// Free text field to capture information about the service principal, typically used for operational purposes. Maximum allowed size is 1024 characters.
	Notes NullableString `json:"notes,omitempty"`
	// Specifies the list of email addresses where Azure AD sends a notification when the active certificate is near the expiration date. This is only for the certificates used to sign the SAML token issued for Azure AD Gallery applications.
	NotificationEmailAddresses *[]string `json:"notificationEmailAddresses,omitempty"`
	// The delegated permissions exposed by the application. For more information see the oauth2PermissionScopes property on the application entity's api property. Not nullable.
	Oauth2PermissionScopes *[]MicrosoftGraphPermissionScope `json:"oauth2PermissionScopes,omitempty"`
	// The collection of password credentials associated with the application. Not nullable.
	PasswordCredentials *[]MicrosoftGraphPasswordCredential `json:"passwordCredentials,omitempty"`
	// Specifies the single sign-on mode configured for this application. Azure AD uses the preferred single sign-on mode to launch the application from Microsoft 365 or the Azure AD My Apps. The supported values are password, saml, notSupported, and oidc.
	PreferredSingleSignOnMode NullableString `json:"preferredSingleSignOnMode,omitempty"`
	// Reserved for internal use only. Do not write or otherwise rely on this property. May be removed in future versions.
	PreferredTokenSigningKeyThumbprint NullableString `json:"preferredTokenSigningKeyThumbprint,omitempty"`
	// The URLs that user tokens are sent to for sign in with the associated application, or the redirect URIs that OAuth 2.0 authorization codes and access tokens are sent to for the associated application. Not nullable.
	ReplyUrls *[]string `json:"replyUrls,omitempty"`
	// The collection for settings related to saml single sign-on.
	SamlSingleSignOnSettings AnyOfmicrosoftGraphSamlSingleSignOnSettings `json:"samlSingleSignOnSettings,omitempty"`
	// Contains the list of identifiersUris, copied over from the associated application. Additional values can be added to hybrid applications. These values can be used to identify the permissions exposed by this app within Azure AD. For example,Client apps can specify a resource URI which is based on the values of this property to acquire an access token, which is the URI returned in the 'aud' claim.The any operator is required for filter expressions on multi-valued properties. Not nullable.  Supports $filter (eq, not, ge, le, startsWith).
	ServicePrincipalNames *[]string `json:"servicePrincipalNames,omitempty"`
	// Identifies whether the service principal represents an application, a managed identity, or a legacy application. This is set by Azure AD internally. The servicePrincipalType property can be set to three different values: __Application - A service principal that represents an application or service. The appId property identifies the associated app registration, and matches the appId of an application, possibly from a different tenant. If the associated app registration is missing, tokens are not issued for the service principal.__ManagedIdentity - A service principal that represents a managed identity. Service principals representing managed identities can be granted access and permissions, but cannot be updated or modified directly.__Legacy - A service principal that represents an app created before app registrations, or through legacy experiences. Legacy service principal can have credentials, service principal names, reply URLs, and other properties which are editable by an authorized user, but does not have an associated app registration. The appId value does not associate the service principal with an app registration. The service principal can only be used in the tenant where it was created.__SocialIdp - For internal use.
	ServicePrincipalType NullableString `json:"servicePrincipalType,omitempty"`
	// Specifies the Microsoft accounts that are supported for the current application. Read-only. Supported values are:AzureADMyOrg: Users with a Microsoft work or school account in my organization’s Azure AD tenant (single-tenant).AzureADMultipleOrgs: Users with a Microsoft work or school account in any organization’s Azure AD tenant (multi-tenant).AzureADandPersonalMicrosoftAccount: Users with a personal Microsoft account, or a work or school account in any organization’s Azure AD tenant.PersonalMicrosoftAccount: Users with a personal Microsoft account only.
	SignInAudience NullableString `json:"signInAudience,omitempty"`
	// Custom strings that can be used to categorize and identify the service principal. Not nullable. Supports $filter (eq, not, ge, le, startsWith).
	Tags *[]string `json:"tags,omitempty"`
	// Specifies the keyId of a public key from the keyCredentials collection. When configured, Azure AD issues tokens for this application encrypted using the key specified by this property. The application code that receives the encrypted token must use the matching private key to decrypt the token before it can be used for the signed-in user.
	TokenEncryptionKeyId NullableString `json:"tokenEncryptionKeyId,omitempty"`
	// App role assignments for this app or service, granted to users, groups, and other service principals. Supports $expand.
	AppRoleAssignedTo *[]MicrosoftGraphAppRoleAssignment `json:"appRoleAssignedTo,omitempty"`
	// App role assignment for another app or service, granted to this service principal. Supports $expand.
	AppRoleAssignments *[]MicrosoftGraphAppRoleAssignment `json:"appRoleAssignments,omitempty"`
	// The claimsMappingPolicies assigned to this service principal. Supports $expand.
	ClaimsMappingPolicies *[]MicrosoftGraphClaimsMappingPolicy `json:"claimsMappingPolicies,omitempty"`
	// Directory objects created by this service principal. Read-only. Nullable.
	CreatedObjects *[]MicrosoftGraphDirectoryObject `json:"createdObjects,omitempty"`
	// The permission classifications for delegated permissions exposed by the app that this service principal represents. Supports $expand.
	DelegatedPermissionClassifications *[]MicrosoftGraphDelegatedPermissionClassification `json:"delegatedPermissionClassifications,omitempty"`
	// Endpoints available for discovery. Services like Sharepoint populate this property with a tenant specific SharePoint endpoints that other applications can discover and use in their experiences.
	Endpoints *[]MicrosoftGraphEndpoint `json:"endpoints,omitempty"`
	// The homeRealmDiscoveryPolicies assigned to this service principal. Supports $expand.
	HomeRealmDiscoveryPolicies *[]MicrosoftGraphHomeRealmDiscoveryPolicy `json:"homeRealmDiscoveryPolicies,omitempty"`
	// Roles that this service principal is a member of. HTTP Methods: GET Read-only. Nullable. Supports $expand.
	MemberOf *[]MicrosoftGraphDirectoryObject `json:"memberOf,omitempty"`
	// Delegated permission grants authorizing this service principal to access an API on behalf of a signed-in user. Read-only. Nullable.
	Oauth2PermissionGrants *[]MicrosoftGraphOAuth2PermissionGrant `json:"oauth2PermissionGrants,omitempty"`
	// Directory objects that are owned by this service principal. Read-only. Nullable. Supports $expand.
	OwnedObjects *[]MicrosoftGraphDirectoryObject `json:"ownedObjects,omitempty"`
	// Directory objects that are owners of this servicePrincipal. The owners are a set of non-admin users or servicePrincipals who are allowed to modify this object. Read-only. Nullable. Supports $expand.
	Owners *[]MicrosoftGraphDirectoryObject `json:"owners,omitempty"`
	// The tokenIssuancePolicies assigned to this service principal.
	TokenIssuancePolicies *[]MicrosoftGraphTokenIssuancePolicy `json:"tokenIssuancePolicies,omitempty"`
	// The tokenLifetimePolicies assigned to this service principal.
	TokenLifetimePolicies *[]MicrosoftGraphTokenLifetimePolicy `json:"tokenLifetimePolicies,omitempty"`
	TransitiveMemberOf *[]MicrosoftGraphDirectoryObject `json:"transitiveMemberOf,omitempty"`
}

// NewServicePrincipal instantiates a new ServicePrincipal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicePrincipal() *ServicePrincipal {
	this := ServicePrincipal{}
	return &this
}

// NewServicePrincipalWithDefaults instantiates a new ServicePrincipal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicePrincipalWithDefaults() *ServicePrincipal {
	this := ServicePrincipal{}
	return &this
}

// GetAccountEnabled returns the AccountEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetAccountEnabled() bool {
	if o == nil || o.AccountEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AccountEnabled.Get()
}

// GetAccountEnabledOk returns a tuple with the AccountEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetAccountEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccountEnabled.Get(), o.AccountEnabled.IsSet()
}

// HasAccountEnabled returns a boolean if a field has been set.
func (o *ServicePrincipal) HasAccountEnabled() bool {
	if o != nil && o.AccountEnabled.IsSet() {
		return true
	}

	return false
}

// SetAccountEnabled gets a reference to the given NullableBool and assigns it to the AccountEnabled field.
func (o *ServicePrincipal) SetAccountEnabled(v bool) {
	o.AccountEnabled.Set(&v)
}
// SetAccountEnabledNil sets the value for AccountEnabled to be an explicit nil
func (o *ServicePrincipal) SetAccountEnabledNil() {
	o.AccountEnabled.Set(nil)
}

// UnsetAccountEnabled ensures that no value is present for AccountEnabled, not even an explicit nil
func (o *ServicePrincipal) UnsetAccountEnabled() {
	o.AccountEnabled.Unset()
}

// GetAddIns returns the AddIns field value if set, zero value otherwise.
func (o *ServicePrincipal) GetAddIns() []MicrosoftGraphAddIn {
	if o == nil || o.AddIns == nil {
		var ret []MicrosoftGraphAddIn
		return ret
	}
	return *o.AddIns
}

// GetAddInsOk returns a tuple with the AddIns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetAddInsOk() (*[]MicrosoftGraphAddIn, bool) {
	if o == nil || o.AddIns == nil {
		return nil, false
	}
	return o.AddIns, true
}

// HasAddIns returns a boolean if a field has been set.
func (o *ServicePrincipal) HasAddIns() bool {
	if o != nil && o.AddIns != nil {
		return true
	}

	return false
}

// SetAddIns gets a reference to the given []MicrosoftGraphAddIn and assigns it to the AddIns field.
func (o *ServicePrincipal) SetAddIns(v []MicrosoftGraphAddIn) {
	o.AddIns = &v
}

// GetAlternativeNames returns the AlternativeNames field value if set, zero value otherwise.
func (o *ServicePrincipal) GetAlternativeNames() []string {
	if o == nil || o.AlternativeNames == nil {
		var ret []string
		return ret
	}
	return *o.AlternativeNames
}

// GetAlternativeNamesOk returns a tuple with the AlternativeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetAlternativeNamesOk() (*[]string, bool) {
	if o == nil || o.AlternativeNames == nil {
		return nil, false
	}
	return o.AlternativeNames, true
}

// HasAlternativeNames returns a boolean if a field has been set.
func (o *ServicePrincipal) HasAlternativeNames() bool {
	if o != nil && o.AlternativeNames != nil {
		return true
	}

	return false
}

// SetAlternativeNames gets a reference to the given []string and assigns it to the AlternativeNames field.
func (o *ServicePrincipal) SetAlternativeNames(v []string) {
	o.AlternativeNames = &v
}

// GetAppDescription returns the AppDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetAppDescription() string {
	if o == nil || o.AppDescription.Get() == nil {
		var ret string
		return ret
	}
	return *o.AppDescription.Get()
}

// GetAppDescriptionOk returns a tuple with the AppDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetAppDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppDescription.Get(), o.AppDescription.IsSet()
}

// HasAppDescription returns a boolean if a field has been set.
func (o *ServicePrincipal) HasAppDescription() bool {
	if o != nil && o.AppDescription.IsSet() {
		return true
	}

	return false
}

// SetAppDescription gets a reference to the given NullableString and assigns it to the AppDescription field.
func (o *ServicePrincipal) SetAppDescription(v string) {
	o.AppDescription.Set(&v)
}
// SetAppDescriptionNil sets the value for AppDescription to be an explicit nil
func (o *ServicePrincipal) SetAppDescriptionNil() {
	o.AppDescription.Set(nil)
}

// UnsetAppDescription ensures that no value is present for AppDescription, not even an explicit nil
func (o *ServicePrincipal) UnsetAppDescription() {
	o.AppDescription.Unset()
}

// GetAppDisplayName returns the AppDisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetAppDisplayName() string {
	if o == nil || o.AppDisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AppDisplayName.Get()
}

// GetAppDisplayNameOk returns a tuple with the AppDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetAppDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppDisplayName.Get(), o.AppDisplayName.IsSet()
}

// HasAppDisplayName returns a boolean if a field has been set.
func (o *ServicePrincipal) HasAppDisplayName() bool {
	if o != nil && o.AppDisplayName.IsSet() {
		return true
	}

	return false
}

// SetAppDisplayName gets a reference to the given NullableString and assigns it to the AppDisplayName field.
func (o *ServicePrincipal) SetAppDisplayName(v string) {
	o.AppDisplayName.Set(&v)
}
// SetAppDisplayNameNil sets the value for AppDisplayName to be an explicit nil
func (o *ServicePrincipal) SetAppDisplayNameNil() {
	o.AppDisplayName.Set(nil)
}

// UnsetAppDisplayName ensures that no value is present for AppDisplayName, not even an explicit nil
func (o *ServicePrincipal) UnsetAppDisplayName() {
	o.AppDisplayName.Unset()
}

// GetAppId returns the AppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetAppId() string {
	if o == nil || o.AppId.Get() == nil {
		var ret string
		return ret
	}
	return *o.AppId.Get()
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetAppIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppId.Get(), o.AppId.IsSet()
}

// HasAppId returns a boolean if a field has been set.
func (o *ServicePrincipal) HasAppId() bool {
	if o != nil && o.AppId.IsSet() {
		return true
	}

	return false
}

// SetAppId gets a reference to the given NullableString and assigns it to the AppId field.
func (o *ServicePrincipal) SetAppId(v string) {
	o.AppId.Set(&v)
}
// SetAppIdNil sets the value for AppId to be an explicit nil
func (o *ServicePrincipal) SetAppIdNil() {
	o.AppId.Set(nil)
}

// UnsetAppId ensures that no value is present for AppId, not even an explicit nil
func (o *ServicePrincipal) UnsetAppId() {
	o.AppId.Unset()
}

// GetApplicationTemplateId returns the ApplicationTemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetApplicationTemplateId() string {
	if o == nil || o.ApplicationTemplateId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApplicationTemplateId.Get()
}

// GetApplicationTemplateIdOk returns a tuple with the ApplicationTemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetApplicationTemplateIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApplicationTemplateId.Get(), o.ApplicationTemplateId.IsSet()
}

// HasApplicationTemplateId returns a boolean if a field has been set.
func (o *ServicePrincipal) HasApplicationTemplateId() bool {
	if o != nil && o.ApplicationTemplateId.IsSet() {
		return true
	}

	return false
}

// SetApplicationTemplateId gets a reference to the given NullableString and assigns it to the ApplicationTemplateId field.
func (o *ServicePrincipal) SetApplicationTemplateId(v string) {
	o.ApplicationTemplateId.Set(&v)
}
// SetApplicationTemplateIdNil sets the value for ApplicationTemplateId to be an explicit nil
func (o *ServicePrincipal) SetApplicationTemplateIdNil() {
	o.ApplicationTemplateId.Set(nil)
}

// UnsetApplicationTemplateId ensures that no value is present for ApplicationTemplateId, not even an explicit nil
func (o *ServicePrincipal) UnsetApplicationTemplateId() {
	o.ApplicationTemplateId.Unset()
}

// GetAppOwnerOrganizationId returns the AppOwnerOrganizationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetAppOwnerOrganizationId() string {
	if o == nil || o.AppOwnerOrganizationId.Get() == nil {
		var ret string
		return ret
	}
	return *o.AppOwnerOrganizationId.Get()
}

// GetAppOwnerOrganizationIdOk returns a tuple with the AppOwnerOrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetAppOwnerOrganizationIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppOwnerOrganizationId.Get(), o.AppOwnerOrganizationId.IsSet()
}

// HasAppOwnerOrganizationId returns a boolean if a field has been set.
func (o *ServicePrincipal) HasAppOwnerOrganizationId() bool {
	if o != nil && o.AppOwnerOrganizationId.IsSet() {
		return true
	}

	return false
}

// SetAppOwnerOrganizationId gets a reference to the given NullableString and assigns it to the AppOwnerOrganizationId field.
func (o *ServicePrincipal) SetAppOwnerOrganizationId(v string) {
	o.AppOwnerOrganizationId.Set(&v)
}
// SetAppOwnerOrganizationIdNil sets the value for AppOwnerOrganizationId to be an explicit nil
func (o *ServicePrincipal) SetAppOwnerOrganizationIdNil() {
	o.AppOwnerOrganizationId.Set(nil)
}

// UnsetAppOwnerOrganizationId ensures that no value is present for AppOwnerOrganizationId, not even an explicit nil
func (o *ServicePrincipal) UnsetAppOwnerOrganizationId() {
	o.AppOwnerOrganizationId.Unset()
}

// GetAppRoleAssignmentRequired returns the AppRoleAssignmentRequired field value if set, zero value otherwise.
func (o *ServicePrincipal) GetAppRoleAssignmentRequired() bool {
	if o == nil || o.AppRoleAssignmentRequired == nil {
		var ret bool
		return ret
	}
	return *o.AppRoleAssignmentRequired
}

// GetAppRoleAssignmentRequiredOk returns a tuple with the AppRoleAssignmentRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetAppRoleAssignmentRequiredOk() (*bool, bool) {
	if o == nil || o.AppRoleAssignmentRequired == nil {
		return nil, false
	}
	return o.AppRoleAssignmentRequired, true
}

// HasAppRoleAssignmentRequired returns a boolean if a field has been set.
func (o *ServicePrincipal) HasAppRoleAssignmentRequired() bool {
	if o != nil && o.AppRoleAssignmentRequired != nil {
		return true
	}

	return false
}

// SetAppRoleAssignmentRequired gets a reference to the given bool and assigns it to the AppRoleAssignmentRequired field.
func (o *ServicePrincipal) SetAppRoleAssignmentRequired(v bool) {
	o.AppRoleAssignmentRequired = &v
}

// GetAppRoles returns the AppRoles field value if set, zero value otherwise.
func (o *ServicePrincipal) GetAppRoles() []MicrosoftGraphAppRole {
	if o == nil || o.AppRoles == nil {
		var ret []MicrosoftGraphAppRole
		return ret
	}
	return *o.AppRoles
}

// GetAppRolesOk returns a tuple with the AppRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetAppRolesOk() (*[]MicrosoftGraphAppRole, bool) {
	if o == nil || o.AppRoles == nil {
		return nil, false
	}
	return o.AppRoles, true
}

// HasAppRoles returns a boolean if a field has been set.
func (o *ServicePrincipal) HasAppRoles() bool {
	if o != nil && o.AppRoles != nil {
		return true
	}

	return false
}

// SetAppRoles gets a reference to the given []MicrosoftGraphAppRole and assigns it to the AppRoles field.
func (o *ServicePrincipal) SetAppRoles(v []MicrosoftGraphAppRole) {
	o.AppRoles = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ServicePrincipal) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ServicePrincipal) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ServicePrincipal) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ServicePrincipal) UnsetDescription() {
	o.Description.Unset()
}

// GetDisabledByMicrosoftStatus returns the DisabledByMicrosoftStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetDisabledByMicrosoftStatus() string {
	if o == nil || o.DisabledByMicrosoftStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisabledByMicrosoftStatus.Get()
}

// GetDisabledByMicrosoftStatusOk returns a tuple with the DisabledByMicrosoftStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetDisabledByMicrosoftStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisabledByMicrosoftStatus.Get(), o.DisabledByMicrosoftStatus.IsSet()
}

// HasDisabledByMicrosoftStatus returns a boolean if a field has been set.
func (o *ServicePrincipal) HasDisabledByMicrosoftStatus() bool {
	if o != nil && o.DisabledByMicrosoftStatus.IsSet() {
		return true
	}

	return false
}

// SetDisabledByMicrosoftStatus gets a reference to the given NullableString and assigns it to the DisabledByMicrosoftStatus field.
func (o *ServicePrincipal) SetDisabledByMicrosoftStatus(v string) {
	o.DisabledByMicrosoftStatus.Set(&v)
}
// SetDisabledByMicrosoftStatusNil sets the value for DisabledByMicrosoftStatus to be an explicit nil
func (o *ServicePrincipal) SetDisabledByMicrosoftStatusNil() {
	o.DisabledByMicrosoftStatus.Set(nil)
}

// UnsetDisabledByMicrosoftStatus ensures that no value is present for DisabledByMicrosoftStatus, not even an explicit nil
func (o *ServicePrincipal) UnsetDisabledByMicrosoftStatus() {
	o.DisabledByMicrosoftStatus.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ServicePrincipal) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *ServicePrincipal) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *ServicePrincipal) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *ServicePrincipal) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetHomepage returns the Homepage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetHomepage() string {
	if o == nil || o.Homepage.Get() == nil {
		var ret string
		return ret
	}
	return *o.Homepage.Get()
}

// GetHomepageOk returns a tuple with the Homepage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetHomepageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Homepage.Get(), o.Homepage.IsSet()
}

// HasHomepage returns a boolean if a field has been set.
func (o *ServicePrincipal) HasHomepage() bool {
	if o != nil && o.Homepage.IsSet() {
		return true
	}

	return false
}

// SetHomepage gets a reference to the given NullableString and assigns it to the Homepage field.
func (o *ServicePrincipal) SetHomepage(v string) {
	o.Homepage.Set(&v)
}
// SetHomepageNil sets the value for Homepage to be an explicit nil
func (o *ServicePrincipal) SetHomepageNil() {
	o.Homepage.Set(nil)
}

// UnsetHomepage ensures that no value is present for Homepage, not even an explicit nil
func (o *ServicePrincipal) UnsetHomepage() {
	o.Homepage.Unset()
}

// GetInfo returns the Info field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetInfo() AnyOfmicrosoftGraphInformationalUrl {
	if o == nil  {
		var ret AnyOfmicrosoftGraphInformationalUrl
		return ret
	}
	return o.Info
}

// GetInfoOk returns a tuple with the Info field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetInfoOk() (*AnyOfmicrosoftGraphInformationalUrl, bool) {
	if o == nil || o.Info == nil {
		return nil, false
	}
	return &o.Info, true
}

// HasInfo returns a boolean if a field has been set.
func (o *ServicePrincipal) HasInfo() bool {
	if o != nil && o.Info != nil {
		return true
	}

	return false
}

// SetInfo gets a reference to the given AnyOfmicrosoftGraphInformationalUrl and assigns it to the Info field.
func (o *ServicePrincipal) SetInfo(v AnyOfmicrosoftGraphInformationalUrl) {
	o.Info = v
}

// GetKeyCredentials returns the KeyCredentials field value if set, zero value otherwise.
func (o *ServicePrincipal) GetKeyCredentials() []MicrosoftGraphKeyCredential {
	if o == nil || o.KeyCredentials == nil {
		var ret []MicrosoftGraphKeyCredential
		return ret
	}
	return *o.KeyCredentials
}

// GetKeyCredentialsOk returns a tuple with the KeyCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetKeyCredentialsOk() (*[]MicrosoftGraphKeyCredential, bool) {
	if o == nil || o.KeyCredentials == nil {
		return nil, false
	}
	return o.KeyCredentials, true
}

// HasKeyCredentials returns a boolean if a field has been set.
func (o *ServicePrincipal) HasKeyCredentials() bool {
	if o != nil && o.KeyCredentials != nil {
		return true
	}

	return false
}

// SetKeyCredentials gets a reference to the given []MicrosoftGraphKeyCredential and assigns it to the KeyCredentials field.
func (o *ServicePrincipal) SetKeyCredentials(v []MicrosoftGraphKeyCredential) {
	o.KeyCredentials = &v
}

// GetLoginUrl returns the LoginUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetLoginUrl() string {
	if o == nil || o.LoginUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.LoginUrl.Get()
}

// GetLoginUrlOk returns a tuple with the LoginUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetLoginUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LoginUrl.Get(), o.LoginUrl.IsSet()
}

// HasLoginUrl returns a boolean if a field has been set.
func (o *ServicePrincipal) HasLoginUrl() bool {
	if o != nil && o.LoginUrl.IsSet() {
		return true
	}

	return false
}

// SetLoginUrl gets a reference to the given NullableString and assigns it to the LoginUrl field.
func (o *ServicePrincipal) SetLoginUrl(v string) {
	o.LoginUrl.Set(&v)
}
// SetLoginUrlNil sets the value for LoginUrl to be an explicit nil
func (o *ServicePrincipal) SetLoginUrlNil() {
	o.LoginUrl.Set(nil)
}

// UnsetLoginUrl ensures that no value is present for LoginUrl, not even an explicit nil
func (o *ServicePrincipal) UnsetLoginUrl() {
	o.LoginUrl.Unset()
}

// GetLogoutUrl returns the LogoutUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetLogoutUrl() string {
	if o == nil || o.LogoutUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.LogoutUrl.Get()
}

// GetLogoutUrlOk returns a tuple with the LogoutUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetLogoutUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogoutUrl.Get(), o.LogoutUrl.IsSet()
}

// HasLogoutUrl returns a boolean if a field has been set.
func (o *ServicePrincipal) HasLogoutUrl() bool {
	if o != nil && o.LogoutUrl.IsSet() {
		return true
	}

	return false
}

// SetLogoutUrl gets a reference to the given NullableString and assigns it to the LogoutUrl field.
func (o *ServicePrincipal) SetLogoutUrl(v string) {
	o.LogoutUrl.Set(&v)
}
// SetLogoutUrlNil sets the value for LogoutUrl to be an explicit nil
func (o *ServicePrincipal) SetLogoutUrlNil() {
	o.LogoutUrl.Set(nil)
}

// UnsetLogoutUrl ensures that no value is present for LogoutUrl, not even an explicit nil
func (o *ServicePrincipal) UnsetLogoutUrl() {
	o.LogoutUrl.Unset()
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetNotes() string {
	if o == nil || o.Notes.Get() == nil {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetNotesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *ServicePrincipal) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *ServicePrincipal) SetNotes(v string) {
	o.Notes.Set(&v)
}
// SetNotesNil sets the value for Notes to be an explicit nil
func (o *ServicePrincipal) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *ServicePrincipal) UnsetNotes() {
	o.Notes.Unset()
}

// GetNotificationEmailAddresses returns the NotificationEmailAddresses field value if set, zero value otherwise.
func (o *ServicePrincipal) GetNotificationEmailAddresses() []string {
	if o == nil || o.NotificationEmailAddresses == nil {
		var ret []string
		return ret
	}
	return *o.NotificationEmailAddresses
}

// GetNotificationEmailAddressesOk returns a tuple with the NotificationEmailAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetNotificationEmailAddressesOk() (*[]string, bool) {
	if o == nil || o.NotificationEmailAddresses == nil {
		return nil, false
	}
	return o.NotificationEmailAddresses, true
}

// HasNotificationEmailAddresses returns a boolean if a field has been set.
func (o *ServicePrincipal) HasNotificationEmailAddresses() bool {
	if o != nil && o.NotificationEmailAddresses != nil {
		return true
	}

	return false
}

// SetNotificationEmailAddresses gets a reference to the given []string and assigns it to the NotificationEmailAddresses field.
func (o *ServicePrincipal) SetNotificationEmailAddresses(v []string) {
	o.NotificationEmailAddresses = &v
}

// GetOauth2PermissionScopes returns the Oauth2PermissionScopes field value if set, zero value otherwise.
func (o *ServicePrincipal) GetOauth2PermissionScopes() []MicrosoftGraphPermissionScope {
	if o == nil || o.Oauth2PermissionScopes == nil {
		var ret []MicrosoftGraphPermissionScope
		return ret
	}
	return *o.Oauth2PermissionScopes
}

// GetOauth2PermissionScopesOk returns a tuple with the Oauth2PermissionScopes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetOauth2PermissionScopesOk() (*[]MicrosoftGraphPermissionScope, bool) {
	if o == nil || o.Oauth2PermissionScopes == nil {
		return nil, false
	}
	return o.Oauth2PermissionScopes, true
}

// HasOauth2PermissionScopes returns a boolean if a field has been set.
func (o *ServicePrincipal) HasOauth2PermissionScopes() bool {
	if o != nil && o.Oauth2PermissionScopes != nil {
		return true
	}

	return false
}

// SetOauth2PermissionScopes gets a reference to the given []MicrosoftGraphPermissionScope and assigns it to the Oauth2PermissionScopes field.
func (o *ServicePrincipal) SetOauth2PermissionScopes(v []MicrosoftGraphPermissionScope) {
	o.Oauth2PermissionScopes = &v
}

// GetPasswordCredentials returns the PasswordCredentials field value if set, zero value otherwise.
func (o *ServicePrincipal) GetPasswordCredentials() []MicrosoftGraphPasswordCredential {
	if o == nil || o.PasswordCredentials == nil {
		var ret []MicrosoftGraphPasswordCredential
		return ret
	}
	return *o.PasswordCredentials
}

// GetPasswordCredentialsOk returns a tuple with the PasswordCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetPasswordCredentialsOk() (*[]MicrosoftGraphPasswordCredential, bool) {
	if o == nil || o.PasswordCredentials == nil {
		return nil, false
	}
	return o.PasswordCredentials, true
}

// HasPasswordCredentials returns a boolean if a field has been set.
func (o *ServicePrincipal) HasPasswordCredentials() bool {
	if o != nil && o.PasswordCredentials != nil {
		return true
	}

	return false
}

// SetPasswordCredentials gets a reference to the given []MicrosoftGraphPasswordCredential and assigns it to the PasswordCredentials field.
func (o *ServicePrincipal) SetPasswordCredentials(v []MicrosoftGraphPasswordCredential) {
	o.PasswordCredentials = &v
}

// GetPreferredSingleSignOnMode returns the PreferredSingleSignOnMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetPreferredSingleSignOnMode() string {
	if o == nil || o.PreferredSingleSignOnMode.Get() == nil {
		var ret string
		return ret
	}
	return *o.PreferredSingleSignOnMode.Get()
}

// GetPreferredSingleSignOnModeOk returns a tuple with the PreferredSingleSignOnMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetPreferredSingleSignOnModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreferredSingleSignOnMode.Get(), o.PreferredSingleSignOnMode.IsSet()
}

// HasPreferredSingleSignOnMode returns a boolean if a field has been set.
func (o *ServicePrincipal) HasPreferredSingleSignOnMode() bool {
	if o != nil && o.PreferredSingleSignOnMode.IsSet() {
		return true
	}

	return false
}

// SetPreferredSingleSignOnMode gets a reference to the given NullableString and assigns it to the PreferredSingleSignOnMode field.
func (o *ServicePrincipal) SetPreferredSingleSignOnMode(v string) {
	o.PreferredSingleSignOnMode.Set(&v)
}
// SetPreferredSingleSignOnModeNil sets the value for PreferredSingleSignOnMode to be an explicit nil
func (o *ServicePrincipal) SetPreferredSingleSignOnModeNil() {
	o.PreferredSingleSignOnMode.Set(nil)
}

// UnsetPreferredSingleSignOnMode ensures that no value is present for PreferredSingleSignOnMode, not even an explicit nil
func (o *ServicePrincipal) UnsetPreferredSingleSignOnMode() {
	o.PreferredSingleSignOnMode.Unset()
}

// GetPreferredTokenSigningKeyThumbprint returns the PreferredTokenSigningKeyThumbprint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetPreferredTokenSigningKeyThumbprint() string {
	if o == nil || o.PreferredTokenSigningKeyThumbprint.Get() == nil {
		var ret string
		return ret
	}
	return *o.PreferredTokenSigningKeyThumbprint.Get()
}

// GetPreferredTokenSigningKeyThumbprintOk returns a tuple with the PreferredTokenSigningKeyThumbprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetPreferredTokenSigningKeyThumbprintOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreferredTokenSigningKeyThumbprint.Get(), o.PreferredTokenSigningKeyThumbprint.IsSet()
}

// HasPreferredTokenSigningKeyThumbprint returns a boolean if a field has been set.
func (o *ServicePrincipal) HasPreferredTokenSigningKeyThumbprint() bool {
	if o != nil && o.PreferredTokenSigningKeyThumbprint.IsSet() {
		return true
	}

	return false
}

// SetPreferredTokenSigningKeyThumbprint gets a reference to the given NullableString and assigns it to the PreferredTokenSigningKeyThumbprint field.
func (o *ServicePrincipal) SetPreferredTokenSigningKeyThumbprint(v string) {
	o.PreferredTokenSigningKeyThumbprint.Set(&v)
}
// SetPreferredTokenSigningKeyThumbprintNil sets the value for PreferredTokenSigningKeyThumbprint to be an explicit nil
func (o *ServicePrincipal) SetPreferredTokenSigningKeyThumbprintNil() {
	o.PreferredTokenSigningKeyThumbprint.Set(nil)
}

// UnsetPreferredTokenSigningKeyThumbprint ensures that no value is present for PreferredTokenSigningKeyThumbprint, not even an explicit nil
func (o *ServicePrincipal) UnsetPreferredTokenSigningKeyThumbprint() {
	o.PreferredTokenSigningKeyThumbprint.Unset()
}

// GetReplyUrls returns the ReplyUrls field value if set, zero value otherwise.
func (o *ServicePrincipal) GetReplyUrls() []string {
	if o == nil || o.ReplyUrls == nil {
		var ret []string
		return ret
	}
	return *o.ReplyUrls
}

// GetReplyUrlsOk returns a tuple with the ReplyUrls field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetReplyUrlsOk() (*[]string, bool) {
	if o == nil || o.ReplyUrls == nil {
		return nil, false
	}
	return o.ReplyUrls, true
}

// HasReplyUrls returns a boolean if a field has been set.
func (o *ServicePrincipal) HasReplyUrls() bool {
	if o != nil && o.ReplyUrls != nil {
		return true
	}

	return false
}

// SetReplyUrls gets a reference to the given []string and assigns it to the ReplyUrls field.
func (o *ServicePrincipal) SetReplyUrls(v []string) {
	o.ReplyUrls = &v
}

// GetSamlSingleSignOnSettings returns the SamlSingleSignOnSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetSamlSingleSignOnSettings() AnyOfmicrosoftGraphSamlSingleSignOnSettings {
	if o == nil  {
		var ret AnyOfmicrosoftGraphSamlSingleSignOnSettings
		return ret
	}
	return o.SamlSingleSignOnSettings
}

// GetSamlSingleSignOnSettingsOk returns a tuple with the SamlSingleSignOnSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetSamlSingleSignOnSettingsOk() (*AnyOfmicrosoftGraphSamlSingleSignOnSettings, bool) {
	if o == nil || o.SamlSingleSignOnSettings == nil {
		return nil, false
	}
	return &o.SamlSingleSignOnSettings, true
}

// HasSamlSingleSignOnSettings returns a boolean if a field has been set.
func (o *ServicePrincipal) HasSamlSingleSignOnSettings() bool {
	if o != nil && o.SamlSingleSignOnSettings != nil {
		return true
	}

	return false
}

// SetSamlSingleSignOnSettings gets a reference to the given AnyOfmicrosoftGraphSamlSingleSignOnSettings and assigns it to the SamlSingleSignOnSettings field.
func (o *ServicePrincipal) SetSamlSingleSignOnSettings(v AnyOfmicrosoftGraphSamlSingleSignOnSettings) {
	o.SamlSingleSignOnSettings = v
}

// GetServicePrincipalNames returns the ServicePrincipalNames field value if set, zero value otherwise.
func (o *ServicePrincipal) GetServicePrincipalNames() []string {
	if o == nil || o.ServicePrincipalNames == nil {
		var ret []string
		return ret
	}
	return *o.ServicePrincipalNames
}

// GetServicePrincipalNamesOk returns a tuple with the ServicePrincipalNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetServicePrincipalNamesOk() (*[]string, bool) {
	if o == nil || o.ServicePrincipalNames == nil {
		return nil, false
	}
	return o.ServicePrincipalNames, true
}

// HasServicePrincipalNames returns a boolean if a field has been set.
func (o *ServicePrincipal) HasServicePrincipalNames() bool {
	if o != nil && o.ServicePrincipalNames != nil {
		return true
	}

	return false
}

// SetServicePrincipalNames gets a reference to the given []string and assigns it to the ServicePrincipalNames field.
func (o *ServicePrincipal) SetServicePrincipalNames(v []string) {
	o.ServicePrincipalNames = &v
}

// GetServicePrincipalType returns the ServicePrincipalType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetServicePrincipalType() string {
	if o == nil || o.ServicePrincipalType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServicePrincipalType.Get()
}

// GetServicePrincipalTypeOk returns a tuple with the ServicePrincipalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetServicePrincipalTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServicePrincipalType.Get(), o.ServicePrincipalType.IsSet()
}

// HasServicePrincipalType returns a boolean if a field has been set.
func (o *ServicePrincipal) HasServicePrincipalType() bool {
	if o != nil && o.ServicePrincipalType.IsSet() {
		return true
	}

	return false
}

// SetServicePrincipalType gets a reference to the given NullableString and assigns it to the ServicePrincipalType field.
func (o *ServicePrincipal) SetServicePrincipalType(v string) {
	o.ServicePrincipalType.Set(&v)
}
// SetServicePrincipalTypeNil sets the value for ServicePrincipalType to be an explicit nil
func (o *ServicePrincipal) SetServicePrincipalTypeNil() {
	o.ServicePrincipalType.Set(nil)
}

// UnsetServicePrincipalType ensures that no value is present for ServicePrincipalType, not even an explicit nil
func (o *ServicePrincipal) UnsetServicePrincipalType() {
	o.ServicePrincipalType.Unset()
}

// GetSignInAudience returns the SignInAudience field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetSignInAudience() string {
	if o == nil || o.SignInAudience.Get() == nil {
		var ret string
		return ret
	}
	return *o.SignInAudience.Get()
}

// GetSignInAudienceOk returns a tuple with the SignInAudience field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetSignInAudienceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SignInAudience.Get(), o.SignInAudience.IsSet()
}

// HasSignInAudience returns a boolean if a field has been set.
func (o *ServicePrincipal) HasSignInAudience() bool {
	if o != nil && o.SignInAudience.IsSet() {
		return true
	}

	return false
}

// SetSignInAudience gets a reference to the given NullableString and assigns it to the SignInAudience field.
func (o *ServicePrincipal) SetSignInAudience(v string) {
	o.SignInAudience.Set(&v)
}
// SetSignInAudienceNil sets the value for SignInAudience to be an explicit nil
func (o *ServicePrincipal) SetSignInAudienceNil() {
	o.SignInAudience.Set(nil)
}

// UnsetSignInAudience ensures that no value is present for SignInAudience, not even an explicit nil
func (o *ServicePrincipal) UnsetSignInAudience() {
	o.SignInAudience.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ServicePrincipal) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ServicePrincipal) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ServicePrincipal) SetTags(v []string) {
	o.Tags = &v
}

// GetTokenEncryptionKeyId returns the TokenEncryptionKeyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePrincipal) GetTokenEncryptionKeyId() string {
	if o == nil || o.TokenEncryptionKeyId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TokenEncryptionKeyId.Get()
}

// GetTokenEncryptionKeyIdOk returns a tuple with the TokenEncryptionKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePrincipal) GetTokenEncryptionKeyIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TokenEncryptionKeyId.Get(), o.TokenEncryptionKeyId.IsSet()
}

// HasTokenEncryptionKeyId returns a boolean if a field has been set.
func (o *ServicePrincipal) HasTokenEncryptionKeyId() bool {
	if o != nil && o.TokenEncryptionKeyId.IsSet() {
		return true
	}

	return false
}

// SetTokenEncryptionKeyId gets a reference to the given NullableString and assigns it to the TokenEncryptionKeyId field.
func (o *ServicePrincipal) SetTokenEncryptionKeyId(v string) {
	o.TokenEncryptionKeyId.Set(&v)
}
// SetTokenEncryptionKeyIdNil sets the value for TokenEncryptionKeyId to be an explicit nil
func (o *ServicePrincipal) SetTokenEncryptionKeyIdNil() {
	o.TokenEncryptionKeyId.Set(nil)
}

// UnsetTokenEncryptionKeyId ensures that no value is present for TokenEncryptionKeyId, not even an explicit nil
func (o *ServicePrincipal) UnsetTokenEncryptionKeyId() {
	o.TokenEncryptionKeyId.Unset()
}

// GetAppRoleAssignedTo returns the AppRoleAssignedTo field value if set, zero value otherwise.
func (o *ServicePrincipal) GetAppRoleAssignedTo() []MicrosoftGraphAppRoleAssignment {
	if o == nil || o.AppRoleAssignedTo == nil {
		var ret []MicrosoftGraphAppRoleAssignment
		return ret
	}
	return *o.AppRoleAssignedTo
}

// GetAppRoleAssignedToOk returns a tuple with the AppRoleAssignedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetAppRoleAssignedToOk() (*[]MicrosoftGraphAppRoleAssignment, bool) {
	if o == nil || o.AppRoleAssignedTo == nil {
		return nil, false
	}
	return o.AppRoleAssignedTo, true
}

// HasAppRoleAssignedTo returns a boolean if a field has been set.
func (o *ServicePrincipal) HasAppRoleAssignedTo() bool {
	if o != nil && o.AppRoleAssignedTo != nil {
		return true
	}

	return false
}

// SetAppRoleAssignedTo gets a reference to the given []MicrosoftGraphAppRoleAssignment and assigns it to the AppRoleAssignedTo field.
func (o *ServicePrincipal) SetAppRoleAssignedTo(v []MicrosoftGraphAppRoleAssignment) {
	o.AppRoleAssignedTo = &v
}

// GetAppRoleAssignments returns the AppRoleAssignments field value if set, zero value otherwise.
func (o *ServicePrincipal) GetAppRoleAssignments() []MicrosoftGraphAppRoleAssignment {
	if o == nil || o.AppRoleAssignments == nil {
		var ret []MicrosoftGraphAppRoleAssignment
		return ret
	}
	return *o.AppRoleAssignments
}

// GetAppRoleAssignmentsOk returns a tuple with the AppRoleAssignments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetAppRoleAssignmentsOk() (*[]MicrosoftGraphAppRoleAssignment, bool) {
	if o == nil || o.AppRoleAssignments == nil {
		return nil, false
	}
	return o.AppRoleAssignments, true
}

// HasAppRoleAssignments returns a boolean if a field has been set.
func (o *ServicePrincipal) HasAppRoleAssignments() bool {
	if o != nil && o.AppRoleAssignments != nil {
		return true
	}

	return false
}

// SetAppRoleAssignments gets a reference to the given []MicrosoftGraphAppRoleAssignment and assigns it to the AppRoleAssignments field.
func (o *ServicePrincipal) SetAppRoleAssignments(v []MicrosoftGraphAppRoleAssignment) {
	o.AppRoleAssignments = &v
}

// GetClaimsMappingPolicies returns the ClaimsMappingPolicies field value if set, zero value otherwise.
func (o *ServicePrincipal) GetClaimsMappingPolicies() []MicrosoftGraphClaimsMappingPolicy {
	if o == nil || o.ClaimsMappingPolicies == nil {
		var ret []MicrosoftGraphClaimsMappingPolicy
		return ret
	}
	return *o.ClaimsMappingPolicies
}

// GetClaimsMappingPoliciesOk returns a tuple with the ClaimsMappingPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetClaimsMappingPoliciesOk() (*[]MicrosoftGraphClaimsMappingPolicy, bool) {
	if o == nil || o.ClaimsMappingPolicies == nil {
		return nil, false
	}
	return o.ClaimsMappingPolicies, true
}

// HasClaimsMappingPolicies returns a boolean if a field has been set.
func (o *ServicePrincipal) HasClaimsMappingPolicies() bool {
	if o != nil && o.ClaimsMappingPolicies != nil {
		return true
	}

	return false
}

// SetClaimsMappingPolicies gets a reference to the given []MicrosoftGraphClaimsMappingPolicy and assigns it to the ClaimsMappingPolicies field.
func (o *ServicePrincipal) SetClaimsMappingPolicies(v []MicrosoftGraphClaimsMappingPolicy) {
	o.ClaimsMappingPolicies = &v
}

// GetCreatedObjects returns the CreatedObjects field value if set, zero value otherwise.
func (o *ServicePrincipal) GetCreatedObjects() []MicrosoftGraphDirectoryObject {
	if o == nil || o.CreatedObjects == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.CreatedObjects
}

// GetCreatedObjectsOk returns a tuple with the CreatedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetCreatedObjectsOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.CreatedObjects == nil {
		return nil, false
	}
	return o.CreatedObjects, true
}

// HasCreatedObjects returns a boolean if a field has been set.
func (o *ServicePrincipal) HasCreatedObjects() bool {
	if o != nil && o.CreatedObjects != nil {
		return true
	}

	return false
}

// SetCreatedObjects gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the CreatedObjects field.
func (o *ServicePrincipal) SetCreatedObjects(v []MicrosoftGraphDirectoryObject) {
	o.CreatedObjects = &v
}

// GetDelegatedPermissionClassifications returns the DelegatedPermissionClassifications field value if set, zero value otherwise.
func (o *ServicePrincipal) GetDelegatedPermissionClassifications() []MicrosoftGraphDelegatedPermissionClassification {
	if o == nil || o.DelegatedPermissionClassifications == nil {
		var ret []MicrosoftGraphDelegatedPermissionClassification
		return ret
	}
	return *o.DelegatedPermissionClassifications
}

// GetDelegatedPermissionClassificationsOk returns a tuple with the DelegatedPermissionClassifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetDelegatedPermissionClassificationsOk() (*[]MicrosoftGraphDelegatedPermissionClassification, bool) {
	if o == nil || o.DelegatedPermissionClassifications == nil {
		return nil, false
	}
	return o.DelegatedPermissionClassifications, true
}

// HasDelegatedPermissionClassifications returns a boolean if a field has been set.
func (o *ServicePrincipal) HasDelegatedPermissionClassifications() bool {
	if o != nil && o.DelegatedPermissionClassifications != nil {
		return true
	}

	return false
}

// SetDelegatedPermissionClassifications gets a reference to the given []MicrosoftGraphDelegatedPermissionClassification and assigns it to the DelegatedPermissionClassifications field.
func (o *ServicePrincipal) SetDelegatedPermissionClassifications(v []MicrosoftGraphDelegatedPermissionClassification) {
	o.DelegatedPermissionClassifications = &v
}

// GetEndpoints returns the Endpoints field value if set, zero value otherwise.
func (o *ServicePrincipal) GetEndpoints() []MicrosoftGraphEndpoint {
	if o == nil || o.Endpoints == nil {
		var ret []MicrosoftGraphEndpoint
		return ret
	}
	return *o.Endpoints
}

// GetEndpointsOk returns a tuple with the Endpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetEndpointsOk() (*[]MicrosoftGraphEndpoint, bool) {
	if o == nil || o.Endpoints == nil {
		return nil, false
	}
	return o.Endpoints, true
}

// HasEndpoints returns a boolean if a field has been set.
func (o *ServicePrincipal) HasEndpoints() bool {
	if o != nil && o.Endpoints != nil {
		return true
	}

	return false
}

// SetEndpoints gets a reference to the given []MicrosoftGraphEndpoint and assigns it to the Endpoints field.
func (o *ServicePrincipal) SetEndpoints(v []MicrosoftGraphEndpoint) {
	o.Endpoints = &v
}

// GetHomeRealmDiscoveryPolicies returns the HomeRealmDiscoveryPolicies field value if set, zero value otherwise.
func (o *ServicePrincipal) GetHomeRealmDiscoveryPolicies() []MicrosoftGraphHomeRealmDiscoveryPolicy {
	if o == nil || o.HomeRealmDiscoveryPolicies == nil {
		var ret []MicrosoftGraphHomeRealmDiscoveryPolicy
		return ret
	}
	return *o.HomeRealmDiscoveryPolicies
}

// GetHomeRealmDiscoveryPoliciesOk returns a tuple with the HomeRealmDiscoveryPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetHomeRealmDiscoveryPoliciesOk() (*[]MicrosoftGraphHomeRealmDiscoveryPolicy, bool) {
	if o == nil || o.HomeRealmDiscoveryPolicies == nil {
		return nil, false
	}
	return o.HomeRealmDiscoveryPolicies, true
}

// HasHomeRealmDiscoveryPolicies returns a boolean if a field has been set.
func (o *ServicePrincipal) HasHomeRealmDiscoveryPolicies() bool {
	if o != nil && o.HomeRealmDiscoveryPolicies != nil {
		return true
	}

	return false
}

// SetHomeRealmDiscoveryPolicies gets a reference to the given []MicrosoftGraphHomeRealmDiscoveryPolicy and assigns it to the HomeRealmDiscoveryPolicies field.
func (o *ServicePrincipal) SetHomeRealmDiscoveryPolicies(v []MicrosoftGraphHomeRealmDiscoveryPolicy) {
	o.HomeRealmDiscoveryPolicies = &v
}

// GetMemberOf returns the MemberOf field value if set, zero value otherwise.
func (o *ServicePrincipal) GetMemberOf() []MicrosoftGraphDirectoryObject {
	if o == nil || o.MemberOf == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.MemberOf
}

// GetMemberOfOk returns a tuple with the MemberOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetMemberOfOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.MemberOf == nil {
		return nil, false
	}
	return o.MemberOf, true
}

// HasMemberOf returns a boolean if a field has been set.
func (o *ServicePrincipal) HasMemberOf() bool {
	if o != nil && o.MemberOf != nil {
		return true
	}

	return false
}

// SetMemberOf gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the MemberOf field.
func (o *ServicePrincipal) SetMemberOf(v []MicrosoftGraphDirectoryObject) {
	o.MemberOf = &v
}

// GetOauth2PermissionGrants returns the Oauth2PermissionGrants field value if set, zero value otherwise.
func (o *ServicePrincipal) GetOauth2PermissionGrants() []MicrosoftGraphOAuth2PermissionGrant {
	if o == nil || o.Oauth2PermissionGrants == nil {
		var ret []MicrosoftGraphOAuth2PermissionGrant
		return ret
	}
	return *o.Oauth2PermissionGrants
}

// GetOauth2PermissionGrantsOk returns a tuple with the Oauth2PermissionGrants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetOauth2PermissionGrantsOk() (*[]MicrosoftGraphOAuth2PermissionGrant, bool) {
	if o == nil || o.Oauth2PermissionGrants == nil {
		return nil, false
	}
	return o.Oauth2PermissionGrants, true
}

// HasOauth2PermissionGrants returns a boolean if a field has been set.
func (o *ServicePrincipal) HasOauth2PermissionGrants() bool {
	if o != nil && o.Oauth2PermissionGrants != nil {
		return true
	}

	return false
}

// SetOauth2PermissionGrants gets a reference to the given []MicrosoftGraphOAuth2PermissionGrant and assigns it to the Oauth2PermissionGrants field.
func (o *ServicePrincipal) SetOauth2PermissionGrants(v []MicrosoftGraphOAuth2PermissionGrant) {
	o.Oauth2PermissionGrants = &v
}

// GetOwnedObjects returns the OwnedObjects field value if set, zero value otherwise.
func (o *ServicePrincipal) GetOwnedObjects() []MicrosoftGraphDirectoryObject {
	if o == nil || o.OwnedObjects == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.OwnedObjects
}

// GetOwnedObjectsOk returns a tuple with the OwnedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetOwnedObjectsOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.OwnedObjects == nil {
		return nil, false
	}
	return o.OwnedObjects, true
}

// HasOwnedObjects returns a boolean if a field has been set.
func (o *ServicePrincipal) HasOwnedObjects() bool {
	if o != nil && o.OwnedObjects != nil {
		return true
	}

	return false
}

// SetOwnedObjects gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the OwnedObjects field.
func (o *ServicePrincipal) SetOwnedObjects(v []MicrosoftGraphDirectoryObject) {
	o.OwnedObjects = &v
}

// GetOwners returns the Owners field value if set, zero value otherwise.
func (o *ServicePrincipal) GetOwners() []MicrosoftGraphDirectoryObject {
	if o == nil || o.Owners == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.Owners
}

// GetOwnersOk returns a tuple with the Owners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetOwnersOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.Owners == nil {
		return nil, false
	}
	return o.Owners, true
}

// HasOwners returns a boolean if a field has been set.
func (o *ServicePrincipal) HasOwners() bool {
	if o != nil && o.Owners != nil {
		return true
	}

	return false
}

// SetOwners gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the Owners field.
func (o *ServicePrincipal) SetOwners(v []MicrosoftGraphDirectoryObject) {
	o.Owners = &v
}

// GetTokenIssuancePolicies returns the TokenIssuancePolicies field value if set, zero value otherwise.
func (o *ServicePrincipal) GetTokenIssuancePolicies() []MicrosoftGraphTokenIssuancePolicy {
	if o == nil || o.TokenIssuancePolicies == nil {
		var ret []MicrosoftGraphTokenIssuancePolicy
		return ret
	}
	return *o.TokenIssuancePolicies
}

// GetTokenIssuancePoliciesOk returns a tuple with the TokenIssuancePolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetTokenIssuancePoliciesOk() (*[]MicrosoftGraphTokenIssuancePolicy, bool) {
	if o == nil || o.TokenIssuancePolicies == nil {
		return nil, false
	}
	return o.TokenIssuancePolicies, true
}

// HasTokenIssuancePolicies returns a boolean if a field has been set.
func (o *ServicePrincipal) HasTokenIssuancePolicies() bool {
	if o != nil && o.TokenIssuancePolicies != nil {
		return true
	}

	return false
}

// SetTokenIssuancePolicies gets a reference to the given []MicrosoftGraphTokenIssuancePolicy and assigns it to the TokenIssuancePolicies field.
func (o *ServicePrincipal) SetTokenIssuancePolicies(v []MicrosoftGraphTokenIssuancePolicy) {
	o.TokenIssuancePolicies = &v
}

// GetTokenLifetimePolicies returns the TokenLifetimePolicies field value if set, zero value otherwise.
func (o *ServicePrincipal) GetTokenLifetimePolicies() []MicrosoftGraphTokenLifetimePolicy {
	if o == nil || o.TokenLifetimePolicies == nil {
		var ret []MicrosoftGraphTokenLifetimePolicy
		return ret
	}
	return *o.TokenLifetimePolicies
}

// GetTokenLifetimePoliciesOk returns a tuple with the TokenLifetimePolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetTokenLifetimePoliciesOk() (*[]MicrosoftGraphTokenLifetimePolicy, bool) {
	if o == nil || o.TokenLifetimePolicies == nil {
		return nil, false
	}
	return o.TokenLifetimePolicies, true
}

// HasTokenLifetimePolicies returns a boolean if a field has been set.
func (o *ServicePrincipal) HasTokenLifetimePolicies() bool {
	if o != nil && o.TokenLifetimePolicies != nil {
		return true
	}

	return false
}

// SetTokenLifetimePolicies gets a reference to the given []MicrosoftGraphTokenLifetimePolicy and assigns it to the TokenLifetimePolicies field.
func (o *ServicePrincipal) SetTokenLifetimePolicies(v []MicrosoftGraphTokenLifetimePolicy) {
	o.TokenLifetimePolicies = &v
}

// GetTransitiveMemberOf returns the TransitiveMemberOf field value if set, zero value otherwise.
func (o *ServicePrincipal) GetTransitiveMemberOf() []MicrosoftGraphDirectoryObject {
	if o == nil || o.TransitiveMemberOf == nil {
		var ret []MicrosoftGraphDirectoryObject
		return ret
	}
	return *o.TransitiveMemberOf
}

// GetTransitiveMemberOfOk returns a tuple with the TransitiveMemberOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicePrincipal) GetTransitiveMemberOfOk() (*[]MicrosoftGraphDirectoryObject, bool) {
	if o == nil || o.TransitiveMemberOf == nil {
		return nil, false
	}
	return o.TransitiveMemberOf, true
}

// HasTransitiveMemberOf returns a boolean if a field has been set.
func (o *ServicePrincipal) HasTransitiveMemberOf() bool {
	if o != nil && o.TransitiveMemberOf != nil {
		return true
	}

	return false
}

// SetTransitiveMemberOf gets a reference to the given []MicrosoftGraphDirectoryObject and assigns it to the TransitiveMemberOf field.
func (o *ServicePrincipal) SetTransitiveMemberOf(v []MicrosoftGraphDirectoryObject) {
	o.TransitiveMemberOf = &v
}

func (o ServicePrincipal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountEnabled.IsSet() {
		toSerialize["accountEnabled"] = o.AccountEnabled.Get()
	}
	if o.AddIns != nil {
		toSerialize["addIns"] = o.AddIns
	}
	if o.AlternativeNames != nil {
		toSerialize["alternativeNames"] = o.AlternativeNames
	}
	if o.AppDescription.IsSet() {
		toSerialize["appDescription"] = o.AppDescription.Get()
	}
	if o.AppDisplayName.IsSet() {
		toSerialize["appDisplayName"] = o.AppDisplayName.Get()
	}
	if o.AppId.IsSet() {
		toSerialize["appId"] = o.AppId.Get()
	}
	if o.ApplicationTemplateId.IsSet() {
		toSerialize["applicationTemplateId"] = o.ApplicationTemplateId.Get()
	}
	if o.AppOwnerOrganizationId.IsSet() {
		toSerialize["appOwnerOrganizationId"] = o.AppOwnerOrganizationId.Get()
	}
	if o.AppRoleAssignmentRequired != nil {
		toSerialize["appRoleAssignmentRequired"] = o.AppRoleAssignmentRequired
	}
	if o.AppRoles != nil {
		toSerialize["appRoles"] = o.AppRoles
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.DisabledByMicrosoftStatus.IsSet() {
		toSerialize["disabledByMicrosoftStatus"] = o.DisabledByMicrosoftStatus.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.Homepage.IsSet() {
		toSerialize["homepage"] = o.Homepage.Get()
	}
	if o.Info != nil {
		toSerialize["info"] = o.Info
	}
	if o.KeyCredentials != nil {
		toSerialize["keyCredentials"] = o.KeyCredentials
	}
	if o.LoginUrl.IsSet() {
		toSerialize["loginUrl"] = o.LoginUrl.Get()
	}
	if o.LogoutUrl.IsSet() {
		toSerialize["logoutUrl"] = o.LogoutUrl.Get()
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	if o.NotificationEmailAddresses != nil {
		toSerialize["notificationEmailAddresses"] = o.NotificationEmailAddresses
	}
	if o.Oauth2PermissionScopes != nil {
		toSerialize["oauth2PermissionScopes"] = o.Oauth2PermissionScopes
	}
	if o.PasswordCredentials != nil {
		toSerialize["passwordCredentials"] = o.PasswordCredentials
	}
	if o.PreferredSingleSignOnMode.IsSet() {
		toSerialize["preferredSingleSignOnMode"] = o.PreferredSingleSignOnMode.Get()
	}
	if o.PreferredTokenSigningKeyThumbprint.IsSet() {
		toSerialize["preferredTokenSigningKeyThumbprint"] = o.PreferredTokenSigningKeyThumbprint.Get()
	}
	if o.ReplyUrls != nil {
		toSerialize["replyUrls"] = o.ReplyUrls
	}
	if o.SamlSingleSignOnSettings != nil {
		toSerialize["samlSingleSignOnSettings"] = o.SamlSingleSignOnSettings
	}
	if o.ServicePrincipalNames != nil {
		toSerialize["servicePrincipalNames"] = o.ServicePrincipalNames
	}
	if o.ServicePrincipalType.IsSet() {
		toSerialize["servicePrincipalType"] = o.ServicePrincipalType.Get()
	}
	if o.SignInAudience.IsSet() {
		toSerialize["signInAudience"] = o.SignInAudience.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.TokenEncryptionKeyId.IsSet() {
		toSerialize["tokenEncryptionKeyId"] = o.TokenEncryptionKeyId.Get()
	}
	if o.AppRoleAssignedTo != nil {
		toSerialize["appRoleAssignedTo"] = o.AppRoleAssignedTo
	}
	if o.AppRoleAssignments != nil {
		toSerialize["appRoleAssignments"] = o.AppRoleAssignments
	}
	if o.ClaimsMappingPolicies != nil {
		toSerialize["claimsMappingPolicies"] = o.ClaimsMappingPolicies
	}
	if o.CreatedObjects != nil {
		toSerialize["createdObjects"] = o.CreatedObjects
	}
	if o.DelegatedPermissionClassifications != nil {
		toSerialize["delegatedPermissionClassifications"] = o.DelegatedPermissionClassifications
	}
	if o.Endpoints != nil {
		toSerialize["endpoints"] = o.Endpoints
	}
	if o.HomeRealmDiscoveryPolicies != nil {
		toSerialize["homeRealmDiscoveryPolicies"] = o.HomeRealmDiscoveryPolicies
	}
	if o.MemberOf != nil {
		toSerialize["memberOf"] = o.MemberOf
	}
	if o.Oauth2PermissionGrants != nil {
		toSerialize["oauth2PermissionGrants"] = o.Oauth2PermissionGrants
	}
	if o.OwnedObjects != nil {
		toSerialize["ownedObjects"] = o.OwnedObjects
	}
	if o.Owners != nil {
		toSerialize["owners"] = o.Owners
	}
	if o.TokenIssuancePolicies != nil {
		toSerialize["tokenIssuancePolicies"] = o.TokenIssuancePolicies
	}
	if o.TokenLifetimePolicies != nil {
		toSerialize["tokenLifetimePolicies"] = o.TokenLifetimePolicies
	}
	if o.TransitiveMemberOf != nil {
		toSerialize["transitiveMemberOf"] = o.TransitiveMemberOf
	}
	return json.Marshal(toSerialize)
}

type NullableServicePrincipal struct {
	value *ServicePrincipal
	isSet bool
}

func (v NullableServicePrincipal) Get() *ServicePrincipal {
	return v.value
}

func (v *NullableServicePrincipal) Set(val *ServicePrincipal) {
	v.value = val
	v.isSet = true
}

func (v NullableServicePrincipal) IsSet() bool {
	return v.isSet
}

func (v *NullableServicePrincipal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicePrincipal(val *ServicePrincipal) *NullableServicePrincipal {
	return &NullableServicePrincipal{value: val, isSet: true}
}

func (v NullableServicePrincipal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicePrincipal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


