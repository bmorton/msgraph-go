/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// LocalizationsOrganizationalBrandingLocalizationApiService LocalizationsOrganizationalBrandingLocalizationApi service
type LocalizationsOrganizationalBrandingLocalizationApiService service

type ApiLocalizationsOrganizationalBrandingLocalizationCreateOrganizationalBrandingLocalizationRequest struct {
	ctx _context.Context
	ApiService *LocalizationsOrganizationalBrandingLocalizationApiService
	microsoftGraphOrganizationalBrandingLocalization *MicrosoftGraphOrganizationalBrandingLocalization
}

// New entity
func (r ApiLocalizationsOrganizationalBrandingLocalizationCreateOrganizationalBrandingLocalizationRequest) MicrosoftGraphOrganizationalBrandingLocalization(microsoftGraphOrganizationalBrandingLocalization MicrosoftGraphOrganizationalBrandingLocalization) ApiLocalizationsOrganizationalBrandingLocalizationCreateOrganizationalBrandingLocalizationRequest {
	r.microsoftGraphOrganizationalBrandingLocalization = &microsoftGraphOrganizationalBrandingLocalization
	return r
}

func (r ApiLocalizationsOrganizationalBrandingLocalizationCreateOrganizationalBrandingLocalizationRequest) Execute() (MicrosoftGraphOrganizationalBrandingLocalization, *_nethttp.Response, error) {
	return r.ApiService.LocalizationsOrganizationalBrandingLocalizationCreateOrganizationalBrandingLocalizationExecute(r)
}

/*
LocalizationsOrganizationalBrandingLocalizationCreateOrganizationalBrandingLocalization Add new entity to localizations

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLocalizationsOrganizationalBrandingLocalizationCreateOrganizationalBrandingLocalizationRequest
*/
func (a *LocalizationsOrganizationalBrandingLocalizationApiService) LocalizationsOrganizationalBrandingLocalizationCreateOrganizationalBrandingLocalization(ctx _context.Context) ApiLocalizationsOrganizationalBrandingLocalizationCreateOrganizationalBrandingLocalizationRequest {
	return ApiLocalizationsOrganizationalBrandingLocalizationCreateOrganizationalBrandingLocalizationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOrganizationalBrandingLocalization
func (a *LocalizationsOrganizationalBrandingLocalizationApiService) LocalizationsOrganizationalBrandingLocalizationCreateOrganizationalBrandingLocalizationExecute(r ApiLocalizationsOrganizationalBrandingLocalizationCreateOrganizationalBrandingLocalizationRequest) (MicrosoftGraphOrganizationalBrandingLocalization, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOrganizationalBrandingLocalization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalizationsOrganizationalBrandingLocalizationApiService.LocalizationsOrganizationalBrandingLocalizationCreateOrganizationalBrandingLocalization")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/localizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOrganizationalBrandingLocalization == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphOrganizationalBrandingLocalization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOrganizationalBrandingLocalization
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLocalizationsOrganizationalBrandingLocalizationDeleteOrganizationalBrandingLocalizationRequest struct {
	ctx _context.Context
	ApiService *LocalizationsOrganizationalBrandingLocalizationApiService
	organizationalBrandingLocalizationId string
	ifMatch *string
}

// ETag
func (r ApiLocalizationsOrganizationalBrandingLocalizationDeleteOrganizationalBrandingLocalizationRequest) IfMatch(ifMatch string) ApiLocalizationsOrganizationalBrandingLocalizationDeleteOrganizationalBrandingLocalizationRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiLocalizationsOrganizationalBrandingLocalizationDeleteOrganizationalBrandingLocalizationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.LocalizationsOrganizationalBrandingLocalizationDeleteOrganizationalBrandingLocalizationExecute(r)
}

/*
LocalizationsOrganizationalBrandingLocalizationDeleteOrganizationalBrandingLocalization Delete entity from localizations

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationalBrandingLocalizationId key: id of organizationalBrandingLocalization
 @return ApiLocalizationsOrganizationalBrandingLocalizationDeleteOrganizationalBrandingLocalizationRequest
*/
func (a *LocalizationsOrganizationalBrandingLocalizationApiService) LocalizationsOrganizationalBrandingLocalizationDeleteOrganizationalBrandingLocalization(ctx _context.Context, organizationalBrandingLocalizationId string) ApiLocalizationsOrganizationalBrandingLocalizationDeleteOrganizationalBrandingLocalizationRequest {
	return ApiLocalizationsOrganizationalBrandingLocalizationDeleteOrganizationalBrandingLocalizationRequest{
		ApiService: a,
		ctx: ctx,
		organizationalBrandingLocalizationId: organizationalBrandingLocalizationId,
	}
}

// Execute executes the request
func (a *LocalizationsOrganizationalBrandingLocalizationApiService) LocalizationsOrganizationalBrandingLocalizationDeleteOrganizationalBrandingLocalizationExecute(r ApiLocalizationsOrganizationalBrandingLocalizationDeleteOrganizationalBrandingLocalizationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalizationsOrganizationalBrandingLocalizationApiService.LocalizationsOrganizationalBrandingLocalizationDeleteOrganizationalBrandingLocalization")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/localizations/{organizationalBrandingLocalization-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationalBrandingLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.organizationalBrandingLocalizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiLocalizationsOrganizationalBrandingLocalizationGetOrganizationalBrandingLocalizationRequest struct {
	ctx _context.Context
	ApiService *LocalizationsOrganizationalBrandingLocalizationApiService
	organizationalBrandingLocalizationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiLocalizationsOrganizationalBrandingLocalizationGetOrganizationalBrandingLocalizationRequest) Select_(select_ []string) ApiLocalizationsOrganizationalBrandingLocalizationGetOrganizationalBrandingLocalizationRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiLocalizationsOrganizationalBrandingLocalizationGetOrganizationalBrandingLocalizationRequest) Expand(expand []string) ApiLocalizationsOrganizationalBrandingLocalizationGetOrganizationalBrandingLocalizationRequest {
	r.expand = &expand
	return r
}

func (r ApiLocalizationsOrganizationalBrandingLocalizationGetOrganizationalBrandingLocalizationRequest) Execute() (MicrosoftGraphOrganizationalBrandingLocalization, *_nethttp.Response, error) {
	return r.ApiService.LocalizationsOrganizationalBrandingLocalizationGetOrganizationalBrandingLocalizationExecute(r)
}

/*
LocalizationsOrganizationalBrandingLocalizationGetOrganizationalBrandingLocalization Get entity from localizations by key

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationalBrandingLocalizationId key: id of organizationalBrandingLocalization
 @return ApiLocalizationsOrganizationalBrandingLocalizationGetOrganizationalBrandingLocalizationRequest
*/
func (a *LocalizationsOrganizationalBrandingLocalizationApiService) LocalizationsOrganizationalBrandingLocalizationGetOrganizationalBrandingLocalization(ctx _context.Context, organizationalBrandingLocalizationId string) ApiLocalizationsOrganizationalBrandingLocalizationGetOrganizationalBrandingLocalizationRequest {
	return ApiLocalizationsOrganizationalBrandingLocalizationGetOrganizationalBrandingLocalizationRequest{
		ApiService: a,
		ctx: ctx,
		organizationalBrandingLocalizationId: organizationalBrandingLocalizationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphOrganizationalBrandingLocalization
func (a *LocalizationsOrganizationalBrandingLocalizationApiService) LocalizationsOrganizationalBrandingLocalizationGetOrganizationalBrandingLocalizationExecute(r ApiLocalizationsOrganizationalBrandingLocalizationGetOrganizationalBrandingLocalizationRequest) (MicrosoftGraphOrganizationalBrandingLocalization, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphOrganizationalBrandingLocalization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalizationsOrganizationalBrandingLocalizationApiService.LocalizationsOrganizationalBrandingLocalizationGetOrganizationalBrandingLocalization")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/localizations/{organizationalBrandingLocalization-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationalBrandingLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.organizationalBrandingLocalizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest struct {
	ctx _context.Context
	ApiService *LocalizationsOrganizationalBrandingLocalizationApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest) Top(top int32) ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest) Skip(skip int32) ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest) Search(search string) ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest) Filter(filter string) ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest) Count(count bool) ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest) Orderby(orderby []string) ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest) Select_(select_ []string) ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest) Expand(expand []string) ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest {
	r.expand = &expand
	return r
}

func (r ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest) Execute() (CollectionOfOrganizationalBrandingLocalization, *_nethttp.Response, error) {
	return r.ApiService.LocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationExecute(r)
}

/*
LocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalization Get entities from localizations

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest
*/
func (a *LocalizationsOrganizationalBrandingLocalizationApiService) LocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalization(ctx _context.Context) ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest {
	return ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfOrganizationalBrandingLocalization
func (a *LocalizationsOrganizationalBrandingLocalizationApiService) LocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationExecute(r ApiLocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalizationRequest) (CollectionOfOrganizationalBrandingLocalization, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfOrganizationalBrandingLocalization
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalizationsOrganizationalBrandingLocalizationApiService.LocalizationsOrganizationalBrandingLocalizationListOrganizationalBrandingLocalization")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/localizations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLocalizationsOrganizationalBrandingLocalizationUpdateOrganizationalBrandingLocalizationRequest struct {
	ctx _context.Context
	ApiService *LocalizationsOrganizationalBrandingLocalizationApiService
	organizationalBrandingLocalizationId string
	microsoftGraphOrganizationalBrandingLocalization *MicrosoftGraphOrganizationalBrandingLocalization
}

// New property values
func (r ApiLocalizationsOrganizationalBrandingLocalizationUpdateOrganizationalBrandingLocalizationRequest) MicrosoftGraphOrganizationalBrandingLocalization(microsoftGraphOrganizationalBrandingLocalization MicrosoftGraphOrganizationalBrandingLocalization) ApiLocalizationsOrganizationalBrandingLocalizationUpdateOrganizationalBrandingLocalizationRequest {
	r.microsoftGraphOrganizationalBrandingLocalization = &microsoftGraphOrganizationalBrandingLocalization
	return r
}

func (r ApiLocalizationsOrganizationalBrandingLocalizationUpdateOrganizationalBrandingLocalizationRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.LocalizationsOrganizationalBrandingLocalizationUpdateOrganizationalBrandingLocalizationExecute(r)
}

/*
LocalizationsOrganizationalBrandingLocalizationUpdateOrganizationalBrandingLocalization Update entity in localizations

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param organizationalBrandingLocalizationId key: id of organizationalBrandingLocalization
 @return ApiLocalizationsOrganizationalBrandingLocalizationUpdateOrganizationalBrandingLocalizationRequest
*/
func (a *LocalizationsOrganizationalBrandingLocalizationApiService) LocalizationsOrganizationalBrandingLocalizationUpdateOrganizationalBrandingLocalization(ctx _context.Context, organizationalBrandingLocalizationId string) ApiLocalizationsOrganizationalBrandingLocalizationUpdateOrganizationalBrandingLocalizationRequest {
	return ApiLocalizationsOrganizationalBrandingLocalizationUpdateOrganizationalBrandingLocalizationRequest{
		ApiService: a,
		ctx: ctx,
		organizationalBrandingLocalizationId: organizationalBrandingLocalizationId,
	}
}

// Execute executes the request
func (a *LocalizationsOrganizationalBrandingLocalizationApiService) LocalizationsOrganizationalBrandingLocalizationUpdateOrganizationalBrandingLocalizationExecute(r ApiLocalizationsOrganizationalBrandingLocalizationUpdateOrganizationalBrandingLocalizationRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "LocalizationsOrganizationalBrandingLocalizationApiService.LocalizationsOrganizationalBrandingLocalizationUpdateOrganizationalBrandingLocalization")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/localizations/{organizationalBrandingLocalization-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"organizationalBrandingLocalization-id"+"}", _neturl.PathEscape(parameterToString(r.organizationalBrandingLocalizationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphOrganizationalBrandingLocalization == nil {
		return nil, reportError("microsoftGraphOrganizationalBrandingLocalization is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphOrganizationalBrandingLocalization
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
