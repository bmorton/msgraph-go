/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DeviceAppManagementManagedAppRegistrationApiService DeviceAppManagementManagedAppRegistrationApi service
type DeviceAppManagementManagedAppRegistrationApiService service

type ApiDeviceAppManagementCreateManagedAppRegistrationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	microsoftGraphManagedAppRegistration *MicrosoftGraphManagedAppRegistration
}

// New navigation property
func (r ApiDeviceAppManagementCreateManagedAppRegistrationsRequest) MicrosoftGraphManagedAppRegistration(microsoftGraphManagedAppRegistration MicrosoftGraphManagedAppRegistration) ApiDeviceAppManagementCreateManagedAppRegistrationsRequest {
	r.microsoftGraphManagedAppRegistration = &microsoftGraphManagedAppRegistration
	return r
}

func (r ApiDeviceAppManagementCreateManagedAppRegistrationsRequest) Execute() (MicrosoftGraphManagedAppRegistration, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementCreateManagedAppRegistrationsExecute(r)
}

/*
DeviceAppManagementCreateManagedAppRegistrations Create new navigation property to managedAppRegistrations for deviceAppManagement

The managed app registrations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementCreateManagedAppRegistrationsRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementCreateManagedAppRegistrations(ctx _context.Context) ApiDeviceAppManagementCreateManagedAppRegistrationsRequest {
	return ApiDeviceAppManagementCreateManagedAppRegistrationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedAppRegistration
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementCreateManagedAppRegistrationsExecute(r ApiDeviceAppManagementCreateManagedAppRegistrationsRequest) (MicrosoftGraphManagedAppRegistration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedAppRegistration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementCreateManagedAppRegistrations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedAppRegistration == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedAppRegistration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedAppRegistration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementDeleteManagedAppRegistrationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementDeleteManagedAppRegistrationsRequest) IfMatch(ifMatch string) ApiDeviceAppManagementDeleteManagedAppRegistrationsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementDeleteManagedAppRegistrationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementDeleteManagedAppRegistrationsExecute(r)
}

/*
DeviceAppManagementDeleteManagedAppRegistrations Delete navigation property managedAppRegistrations for deviceAppManagement

The managed app registrations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @return ApiDeviceAppManagementDeleteManagedAppRegistrationsRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementDeleteManagedAppRegistrations(ctx _context.Context, managedAppRegistrationId string) ApiDeviceAppManagementDeleteManagedAppRegistrationsRequest {
	return ApiDeviceAppManagementDeleteManagedAppRegistrationsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementDeleteManagedAppRegistrationsExecute(r ApiDeviceAppManagementDeleteManagedAppRegistrationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementDeleteManagedAppRegistrations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementGetManagedAppRegistrationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementGetManagedAppRegistrationsRequest) Select_(select_ []string) ApiDeviceAppManagementGetManagedAppRegistrationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementGetManagedAppRegistrationsRequest) Expand(expand []string) ApiDeviceAppManagementGetManagedAppRegistrationsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementGetManagedAppRegistrationsRequest) Execute() (MicrosoftGraphManagedAppRegistration, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementGetManagedAppRegistrationsExecute(r)
}

/*
DeviceAppManagementGetManagedAppRegistrations Get managedAppRegistrations from deviceAppManagement

The managed app registrations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @return ApiDeviceAppManagementGetManagedAppRegistrationsRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementGetManagedAppRegistrations(ctx _context.Context, managedAppRegistrationId string) ApiDeviceAppManagementGetManagedAppRegistrationsRequest {
	return ApiDeviceAppManagementGetManagedAppRegistrationsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedAppRegistration
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementGetManagedAppRegistrationsExecute(r ApiDeviceAppManagementGetManagedAppRegistrationsRequest) (MicrosoftGraphManagedAppRegistration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedAppRegistration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementGetManagedAppRegistrations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementListManagedAppRegistrationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementListManagedAppRegistrationsRequest) Top(top int32) ApiDeviceAppManagementListManagedAppRegistrationsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementListManagedAppRegistrationsRequest) Skip(skip int32) ApiDeviceAppManagementListManagedAppRegistrationsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementListManagedAppRegistrationsRequest) Search(search string) ApiDeviceAppManagementListManagedAppRegistrationsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementListManagedAppRegistrationsRequest) Filter(filter string) ApiDeviceAppManagementListManagedAppRegistrationsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementListManagedAppRegistrationsRequest) Count(count bool) ApiDeviceAppManagementListManagedAppRegistrationsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementListManagedAppRegistrationsRequest) Orderby(orderby []string) ApiDeviceAppManagementListManagedAppRegistrationsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementListManagedAppRegistrationsRequest) Select_(select_ []string) ApiDeviceAppManagementListManagedAppRegistrationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementListManagedAppRegistrationsRequest) Expand(expand []string) ApiDeviceAppManagementListManagedAppRegistrationsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementListManagedAppRegistrationsRequest) Execute() (CollectionOfManagedAppRegistration, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementListManagedAppRegistrationsExecute(r)
}

/*
DeviceAppManagementListManagedAppRegistrations Get managedAppRegistrations from deviceAppManagement

The managed app registrations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDeviceAppManagementListManagedAppRegistrationsRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementListManagedAppRegistrations(ctx _context.Context) ApiDeviceAppManagementListManagedAppRegistrationsRequest {
	return ApiDeviceAppManagementListManagedAppRegistrationsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfManagedAppRegistration
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementListManagedAppRegistrationsExecute(r ApiDeviceAppManagementListManagedAppRegistrationsRequest) (CollectionOfManagedAppRegistration, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedAppRegistration
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementListManagedAppRegistrations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsCreateAppliedPoliciesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	microsoftGraphManagedAppPolicy *MicrosoftGraphManagedAppPolicy
}

// New navigation property
func (r ApiDeviceAppManagementManagedAppRegistrationsCreateAppliedPoliciesRequest) MicrosoftGraphManagedAppPolicy(microsoftGraphManagedAppPolicy MicrosoftGraphManagedAppPolicy) ApiDeviceAppManagementManagedAppRegistrationsCreateAppliedPoliciesRequest {
	r.microsoftGraphManagedAppPolicy = &microsoftGraphManagedAppPolicy
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsCreateAppliedPoliciesRequest) Execute() (MicrosoftGraphManagedAppPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsCreateAppliedPoliciesExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsCreateAppliedPolicies Create new navigation property to appliedPolicies for deviceAppManagement

Zero or more policys already applied on the registered app when it last synchronized with managment service.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @return ApiDeviceAppManagementManagedAppRegistrationsCreateAppliedPoliciesRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsCreateAppliedPolicies(ctx _context.Context, managedAppRegistrationId string) ApiDeviceAppManagementManagedAppRegistrationsCreateAppliedPoliciesRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsCreateAppliedPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedAppPolicy
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsCreateAppliedPoliciesExecute(r ApiDeviceAppManagementManagedAppRegistrationsCreateAppliedPoliciesRequest) (MicrosoftGraphManagedAppPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedAppPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementManagedAppRegistrationsCreateAppliedPolicies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/appliedPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedAppPolicy == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedAppPolicy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedAppPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsCreateIntendedPoliciesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	microsoftGraphManagedAppPolicy *MicrosoftGraphManagedAppPolicy
}

// New navigation property
func (r ApiDeviceAppManagementManagedAppRegistrationsCreateIntendedPoliciesRequest) MicrosoftGraphManagedAppPolicy(microsoftGraphManagedAppPolicy MicrosoftGraphManagedAppPolicy) ApiDeviceAppManagementManagedAppRegistrationsCreateIntendedPoliciesRequest {
	r.microsoftGraphManagedAppPolicy = &microsoftGraphManagedAppPolicy
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsCreateIntendedPoliciesRequest) Execute() (MicrosoftGraphManagedAppPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsCreateIntendedPoliciesExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsCreateIntendedPolicies Create new navigation property to intendedPolicies for deviceAppManagement

Zero or more policies admin intended for the app as of now.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @return ApiDeviceAppManagementManagedAppRegistrationsCreateIntendedPoliciesRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsCreateIntendedPolicies(ctx _context.Context, managedAppRegistrationId string) ApiDeviceAppManagementManagedAppRegistrationsCreateIntendedPoliciesRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsCreateIntendedPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedAppPolicy
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsCreateIntendedPoliciesExecute(r ApiDeviceAppManagementManagedAppRegistrationsCreateIntendedPoliciesRequest) (MicrosoftGraphManagedAppPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedAppPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementManagedAppRegistrationsCreateIntendedPolicies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/intendedPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedAppPolicy == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedAppPolicy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedAppPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsCreateOperationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	microsoftGraphManagedAppOperation *MicrosoftGraphManagedAppOperation
}

// New navigation property
func (r ApiDeviceAppManagementManagedAppRegistrationsCreateOperationsRequest) MicrosoftGraphManagedAppOperation(microsoftGraphManagedAppOperation MicrosoftGraphManagedAppOperation) ApiDeviceAppManagementManagedAppRegistrationsCreateOperationsRequest {
	r.microsoftGraphManagedAppOperation = &microsoftGraphManagedAppOperation
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsCreateOperationsRequest) Execute() (MicrosoftGraphManagedAppOperation, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsCreateOperationsExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsCreateOperations Create new navigation property to operations for deviceAppManagement

Zero or more long running operations triggered on the app registration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @return ApiDeviceAppManagementManagedAppRegistrationsCreateOperationsRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsCreateOperations(ctx _context.Context, managedAppRegistrationId string) ApiDeviceAppManagementManagedAppRegistrationsCreateOperationsRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsCreateOperationsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedAppOperation
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsCreateOperationsExecute(r ApiDeviceAppManagementManagedAppRegistrationsCreateOperationsRequest) (MicrosoftGraphManagedAppOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedAppOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementManagedAppRegistrationsCreateOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/operations"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedAppOperation == nil {
		return localVarReturnValue, nil, reportError("microsoftGraphManagedAppOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedAppOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsDeleteAppliedPoliciesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementManagedAppRegistrationsDeleteAppliedPoliciesRequest) IfMatch(ifMatch string) ApiDeviceAppManagementManagedAppRegistrationsDeleteAppliedPoliciesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsDeleteAppliedPoliciesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsDeleteAppliedPoliciesExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsDeleteAppliedPolicies Delete navigation property appliedPolicies for deviceAppManagement

Zero or more policys already applied on the registered app when it last synchronized with managment service.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsDeleteAppliedPoliciesRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsDeleteAppliedPolicies(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsDeleteAppliedPoliciesRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsDeleteAppliedPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsDeleteAppliedPoliciesExecute(r ApiDeviceAppManagementManagedAppRegistrationsDeleteAppliedPoliciesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementManagedAppRegistrationsDeleteAppliedPolicies")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/appliedPolicies/{managedAppPolicy-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsDeleteIntendedPoliciesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementManagedAppRegistrationsDeleteIntendedPoliciesRequest) IfMatch(ifMatch string) ApiDeviceAppManagementManagedAppRegistrationsDeleteIntendedPoliciesRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsDeleteIntendedPoliciesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsDeleteIntendedPoliciesExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsDeleteIntendedPolicies Delete navigation property intendedPolicies for deviceAppManagement

Zero or more policies admin intended for the app as of now.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsDeleteIntendedPoliciesRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsDeleteIntendedPolicies(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsDeleteIntendedPoliciesRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsDeleteIntendedPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsDeleteIntendedPoliciesExecute(r ApiDeviceAppManagementManagedAppRegistrationsDeleteIntendedPoliciesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementManagedAppRegistrationsDeleteIntendedPolicies")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/intendedPolicies/{managedAppPolicy-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsDeleteOperationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	managedAppOperationId string
	ifMatch *string
}

// ETag
func (r ApiDeviceAppManagementManagedAppRegistrationsDeleteOperationsRequest) IfMatch(ifMatch string) ApiDeviceAppManagementManagedAppRegistrationsDeleteOperationsRequest {
	r.ifMatch = &ifMatch
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsDeleteOperationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsDeleteOperationsExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsDeleteOperations Delete navigation property operations for deviceAppManagement

Zero or more long running operations triggered on the app registration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppOperationId key: id of managedAppOperation
 @return ApiDeviceAppManagementManagedAppRegistrationsDeleteOperationsRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsDeleteOperations(ctx _context.Context, managedAppRegistrationId string, managedAppOperationId string) ApiDeviceAppManagementManagedAppRegistrationsDeleteOperationsRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsDeleteOperationsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppOperationId: managedAppOperationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsDeleteOperationsExecute(r ApiDeviceAppManagementManagedAppRegistrationsDeleteOperationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementManagedAppRegistrationsDeleteOperations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/operations/{managedAppOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppOperation-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ifMatch != nil {
		localVarHeaderParams["If-Match"] = parameterToString(*r.ifMatch, "")
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsGetAppliedPoliciesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementManagedAppRegistrationsGetAppliedPoliciesRequest) Select_(select_ []string) ApiDeviceAppManagementManagedAppRegistrationsGetAppliedPoliciesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementManagedAppRegistrationsGetAppliedPoliciesRequest) Expand(expand []string) ApiDeviceAppManagementManagedAppRegistrationsGetAppliedPoliciesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsGetAppliedPoliciesRequest) Execute() (MicrosoftGraphManagedAppPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsGetAppliedPoliciesExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsGetAppliedPolicies Get appliedPolicies from deviceAppManagement

Zero or more policys already applied on the registered app when it last synchronized with managment service.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsGetAppliedPoliciesRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsGetAppliedPolicies(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsGetAppliedPoliciesRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsGetAppliedPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedAppPolicy
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsGetAppliedPoliciesExecute(r ApiDeviceAppManagementManagedAppRegistrationsGetAppliedPoliciesRequest) (MicrosoftGraphManagedAppPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedAppPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementManagedAppRegistrationsGetAppliedPolicies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/appliedPolicies/{managedAppPolicy-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsGetIntendedPoliciesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementManagedAppRegistrationsGetIntendedPoliciesRequest) Select_(select_ []string) ApiDeviceAppManagementManagedAppRegistrationsGetIntendedPoliciesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementManagedAppRegistrationsGetIntendedPoliciesRequest) Expand(expand []string) ApiDeviceAppManagementManagedAppRegistrationsGetIntendedPoliciesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsGetIntendedPoliciesRequest) Execute() (MicrosoftGraphManagedAppPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsGetIntendedPoliciesExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsGetIntendedPolicies Get intendedPolicies from deviceAppManagement

Zero or more policies admin intended for the app as of now.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsGetIntendedPoliciesRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsGetIntendedPolicies(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsGetIntendedPoliciesRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsGetIntendedPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedAppPolicy
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsGetIntendedPoliciesExecute(r ApiDeviceAppManagementManagedAppRegistrationsGetIntendedPoliciesRequest) (MicrosoftGraphManagedAppPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedAppPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementManagedAppRegistrationsGetIntendedPolicies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/intendedPolicies/{managedAppPolicy-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsGetOperationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	managedAppOperationId string
	select_ *[]string
	expand *[]string
}

// Select properties to be returned
func (r ApiDeviceAppManagementManagedAppRegistrationsGetOperationsRequest) Select_(select_ []string) ApiDeviceAppManagementManagedAppRegistrationsGetOperationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementManagedAppRegistrationsGetOperationsRequest) Expand(expand []string) ApiDeviceAppManagementManagedAppRegistrationsGetOperationsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsGetOperationsRequest) Execute() (MicrosoftGraphManagedAppOperation, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsGetOperationsExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsGetOperations Get operations from deviceAppManagement

Zero or more long running operations triggered on the app registration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppOperationId key: id of managedAppOperation
 @return ApiDeviceAppManagementManagedAppRegistrationsGetOperationsRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsGetOperations(ctx _context.Context, managedAppRegistrationId string, managedAppOperationId string) ApiDeviceAppManagementManagedAppRegistrationsGetOperationsRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsGetOperationsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppOperationId: managedAppOperationId,
	}
}

// Execute executes the request
//  @return MicrosoftGraphManagedAppOperation
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsGetOperationsExecute(r ApiDeviceAppManagementManagedAppRegistrationsGetOperationsRequest) (MicrosoftGraphManagedAppOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphManagedAppOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementManagedAppRegistrationsGetOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/operations/{managedAppOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppOperation-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest) Top(top int32) ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest) Skip(skip int32) ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest) Search(search string) ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest) Filter(filter string) ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest) Count(count bool) ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest) Orderby(orderby []string) ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest) Select_(select_ []string) ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest) Expand(expand []string) ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest) Execute() (CollectionOfManagedAppPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsListAppliedPoliciesExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsListAppliedPolicies Get appliedPolicies from deviceAppManagement

Zero or more policys already applied on the registered app when it last synchronized with managment service.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @return ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsListAppliedPolicies(ctx _context.Context, managedAppRegistrationId string) ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
	}
}

// Execute executes the request
//  @return CollectionOfManagedAppPolicy
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsListAppliedPoliciesExecute(r ApiDeviceAppManagementManagedAppRegistrationsListAppliedPoliciesRequest) (CollectionOfManagedAppPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedAppPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementManagedAppRegistrationsListAppliedPolicies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/appliedPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest) Top(top int32) ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest) Skip(skip int32) ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest) Search(search string) ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest) Filter(filter string) ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest) Count(count bool) ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest) Orderby(orderby []string) ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest) Select_(select_ []string) ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest) Expand(expand []string) ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest) Execute() (CollectionOfManagedAppPolicy, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsListIntendedPoliciesExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsListIntendedPolicies Get intendedPolicies from deviceAppManagement

Zero or more policies admin intended for the app as of now.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @return ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsListIntendedPolicies(ctx _context.Context, managedAppRegistrationId string) ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
	}
}

// Execute executes the request
//  @return CollectionOfManagedAppPolicy
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsListIntendedPoliciesExecute(r ApiDeviceAppManagementManagedAppRegistrationsListIntendedPoliciesRequest) (CollectionOfManagedAppPolicy, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedAppPolicy
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementManagedAppRegistrationsListIntendedPolicies")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/intendedPolicies"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	top *int32
	skip *int32
	search *string
	filter *string
	count *bool
	orderby *[]string
	select_ *[]string
	expand *[]string
}

// Show only the first n items
func (r ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest) Top(top int32) ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest {
	r.top = &top
	return r
}
// Skip the first n items
func (r ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest) Skip(skip int32) ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest {
	r.skip = &skip
	return r
}
// Search items by search phrases
func (r ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest) Search(search string) ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest {
	r.search = &search
	return r
}
// Filter items by property values
func (r ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest) Filter(filter string) ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest {
	r.filter = &filter
	return r
}
// Include count of items
func (r ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest) Count(count bool) ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest {
	r.count = &count
	return r
}
// Order items by property values
func (r ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest) Orderby(orderby []string) ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest {
	r.orderby = &orderby
	return r
}
// Select properties to be returned
func (r ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest) Select_(select_ []string) ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest {
	r.select_ = &select_
	return r
}
// Expand related entities
func (r ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest) Expand(expand []string) ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest {
	r.expand = &expand
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest) Execute() (CollectionOfManagedAppOperation, *_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsListOperationsExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsListOperations Get operations from deviceAppManagement

Zero or more long running operations triggered on the app registration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @return ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsListOperations(ctx _context.Context, managedAppRegistrationId string) ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
	}
}

// Execute executes the request
//  @return CollectionOfManagedAppOperation
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsListOperationsExecute(r ApiDeviceAppManagementManagedAppRegistrationsListOperationsRequest) (CollectionOfManagedAppOperation, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  CollectionOfManagedAppOperation
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementManagedAppRegistrationsListOperations")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/operations"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.top != nil {
		localVarQueryParams.Add("$top", parameterToString(*r.top, ""))
	}
	if r.skip != nil {
		localVarQueryParams.Add("$skip", parameterToString(*r.skip, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("$search", parameterToString(*r.search, ""))
	}
	if r.filter != nil {
		localVarQueryParams.Add("$filter", parameterToString(*r.filter, ""))
	}
	if r.count != nil {
		localVarQueryParams.Add("$count", parameterToString(*r.count, ""))
	}
	if r.orderby != nil {
		localVarQueryParams.Add("$orderby", parameterToString(*r.orderby, "csv"))
	}
	if r.select_ != nil {
		localVarQueryParams.Add("$select", parameterToString(*r.select_, "csv"))
	}
	if r.expand != nil {
		localVarQueryParams.Add("$expand", parameterToString(*r.expand, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsUpdateAppliedPoliciesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	microsoftGraphManagedAppPolicy *MicrosoftGraphManagedAppPolicy
}

// New navigation property values
func (r ApiDeviceAppManagementManagedAppRegistrationsUpdateAppliedPoliciesRequest) MicrosoftGraphManagedAppPolicy(microsoftGraphManagedAppPolicy MicrosoftGraphManagedAppPolicy) ApiDeviceAppManagementManagedAppRegistrationsUpdateAppliedPoliciesRequest {
	r.microsoftGraphManagedAppPolicy = &microsoftGraphManagedAppPolicy
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsUpdateAppliedPoliciesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsUpdateAppliedPoliciesExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsUpdateAppliedPolicies Update the navigation property appliedPolicies in deviceAppManagement

Zero or more policys already applied on the registered app when it last synchronized with managment service.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsUpdateAppliedPoliciesRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsUpdateAppliedPolicies(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsUpdateAppliedPoliciesRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsUpdateAppliedPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsUpdateAppliedPoliciesExecute(r ApiDeviceAppManagementManagedAppRegistrationsUpdateAppliedPoliciesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementManagedAppRegistrationsUpdateAppliedPolicies")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/appliedPolicies/{managedAppPolicy-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedAppPolicy == nil {
		return nil, reportError("microsoftGraphManagedAppPolicy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedAppPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsUpdateIntendedPoliciesRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	managedAppPolicyId string
	microsoftGraphManagedAppPolicy *MicrosoftGraphManagedAppPolicy
}

// New navigation property values
func (r ApiDeviceAppManagementManagedAppRegistrationsUpdateIntendedPoliciesRequest) MicrosoftGraphManagedAppPolicy(microsoftGraphManagedAppPolicy MicrosoftGraphManagedAppPolicy) ApiDeviceAppManagementManagedAppRegistrationsUpdateIntendedPoliciesRequest {
	r.microsoftGraphManagedAppPolicy = &microsoftGraphManagedAppPolicy
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsUpdateIntendedPoliciesRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsUpdateIntendedPoliciesExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsUpdateIntendedPolicies Update the navigation property intendedPolicies in deviceAppManagement

Zero or more policies admin intended for the app as of now.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppPolicyId key: id of managedAppPolicy
 @return ApiDeviceAppManagementManagedAppRegistrationsUpdateIntendedPoliciesRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsUpdateIntendedPolicies(ctx _context.Context, managedAppRegistrationId string, managedAppPolicyId string) ApiDeviceAppManagementManagedAppRegistrationsUpdateIntendedPoliciesRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsUpdateIntendedPoliciesRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppPolicyId: managedAppPolicyId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsUpdateIntendedPoliciesExecute(r ApiDeviceAppManagementManagedAppRegistrationsUpdateIntendedPoliciesRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementManagedAppRegistrationsUpdateIntendedPolicies")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/intendedPolicies/{managedAppPolicy-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppPolicy-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppPolicyId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedAppPolicy == nil {
		return nil, reportError("microsoftGraphManagedAppPolicy is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedAppPolicy
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementManagedAppRegistrationsUpdateOperationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	managedAppOperationId string
	microsoftGraphManagedAppOperation *MicrosoftGraphManagedAppOperation
}

// New navigation property values
func (r ApiDeviceAppManagementManagedAppRegistrationsUpdateOperationsRequest) MicrosoftGraphManagedAppOperation(microsoftGraphManagedAppOperation MicrosoftGraphManagedAppOperation) ApiDeviceAppManagementManagedAppRegistrationsUpdateOperationsRequest {
	r.microsoftGraphManagedAppOperation = &microsoftGraphManagedAppOperation
	return r
}

func (r ApiDeviceAppManagementManagedAppRegistrationsUpdateOperationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementManagedAppRegistrationsUpdateOperationsExecute(r)
}

/*
DeviceAppManagementManagedAppRegistrationsUpdateOperations Update the navigation property operations in deviceAppManagement

Zero or more long running operations triggered on the app registration.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @param managedAppOperationId key: id of managedAppOperation
 @return ApiDeviceAppManagementManagedAppRegistrationsUpdateOperationsRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsUpdateOperations(ctx _context.Context, managedAppRegistrationId string, managedAppOperationId string) ApiDeviceAppManagementManagedAppRegistrationsUpdateOperationsRequest {
	return ApiDeviceAppManagementManagedAppRegistrationsUpdateOperationsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
		managedAppOperationId: managedAppOperationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementManagedAppRegistrationsUpdateOperationsExecute(r ApiDeviceAppManagementManagedAppRegistrationsUpdateOperationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementManagedAppRegistrationsUpdateOperations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}/operations/{managedAppOperation-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppOperation-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppOperationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedAppOperation == nil {
		return nil, reportError("microsoftGraphManagedAppOperation is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedAppOperation
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDeviceAppManagementUpdateManagedAppRegistrationsRequest struct {
	ctx _context.Context
	ApiService *DeviceAppManagementManagedAppRegistrationApiService
	managedAppRegistrationId string
	microsoftGraphManagedAppRegistration *MicrosoftGraphManagedAppRegistration
}

// New navigation property values
func (r ApiDeviceAppManagementUpdateManagedAppRegistrationsRequest) MicrosoftGraphManagedAppRegistration(microsoftGraphManagedAppRegistration MicrosoftGraphManagedAppRegistration) ApiDeviceAppManagementUpdateManagedAppRegistrationsRequest {
	r.microsoftGraphManagedAppRegistration = &microsoftGraphManagedAppRegistration
	return r
}

func (r ApiDeviceAppManagementUpdateManagedAppRegistrationsRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeviceAppManagementUpdateManagedAppRegistrationsExecute(r)
}

/*
DeviceAppManagementUpdateManagedAppRegistrations Update the navigation property managedAppRegistrations in deviceAppManagement

The managed app registrations.

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param managedAppRegistrationId key: id of managedAppRegistration
 @return ApiDeviceAppManagementUpdateManagedAppRegistrationsRequest
*/
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementUpdateManagedAppRegistrations(ctx _context.Context, managedAppRegistrationId string) ApiDeviceAppManagementUpdateManagedAppRegistrationsRequest {
	return ApiDeviceAppManagementUpdateManagedAppRegistrationsRequest{
		ApiService: a,
		ctx: ctx,
		managedAppRegistrationId: managedAppRegistrationId,
	}
}

// Execute executes the request
func (a *DeviceAppManagementManagedAppRegistrationApiService) DeviceAppManagementUpdateManagedAppRegistrationsExecute(r ApiDeviceAppManagementUpdateManagedAppRegistrationsRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DeviceAppManagementManagedAppRegistrationApiService.DeviceAppManagementUpdateManagedAppRegistrations")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/deviceAppManagement/managedAppRegistrations/{managedAppRegistration-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"managedAppRegistration-id"+"}", _neturl.PathEscape(parameterToString(r.managedAppRegistrationId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.microsoftGraphManagedAppRegistration == nil {
		return nil, reportError("microsoftGraphManagedAppRegistration is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.microsoftGraphManagedAppRegistration
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
