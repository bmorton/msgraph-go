/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserFlowLanguageConfiguration struct for UserFlowLanguageConfiguration
type UserFlowLanguageConfiguration struct {
	// The language name to display. This property is read-only.
	DisplayName NullableString `json:"displayName,omitempty"`
	// Indicates whether the language is enabled within the user flow.
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// Collection of pages with the default content to display in a user flow for a specified language. This collection does not allow any kind of modification.
	DefaultPages *[]MicrosoftGraphUserFlowLanguagePage `json:"defaultPages,omitempty"`
	// Collection of pages with the overrides messages to display in a user flow for a specified language. This collection only allows to modify the content of the page, any other modification is not allowed (creation or deletion of pages).
	OverridesPages *[]MicrosoftGraphUserFlowLanguagePage `json:"overridesPages,omitempty"`
}

// NewUserFlowLanguageConfiguration instantiates a new UserFlowLanguageConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserFlowLanguageConfiguration() *UserFlowLanguageConfiguration {
	this := UserFlowLanguageConfiguration{}
	return &this
}

// NewUserFlowLanguageConfigurationWithDefaults instantiates a new UserFlowLanguageConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserFlowLanguageConfigurationWithDefaults() *UserFlowLanguageConfiguration {
	this := UserFlowLanguageConfiguration{}
	return &this
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserFlowLanguageConfiguration) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserFlowLanguageConfiguration) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *UserFlowLanguageConfiguration) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *UserFlowLanguageConfiguration) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *UserFlowLanguageConfiguration) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *UserFlowLanguageConfiguration) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *UserFlowLanguageConfiguration) GetIsEnabled() bool {
	if o == nil || o.IsEnabled == nil {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFlowLanguageConfiguration) GetIsEnabledOk() (*bool, bool) {
	if o == nil || o.IsEnabled == nil {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *UserFlowLanguageConfiguration) HasIsEnabled() bool {
	if o != nil && o.IsEnabled != nil {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *UserFlowLanguageConfiguration) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetDefaultPages returns the DefaultPages field value if set, zero value otherwise.
func (o *UserFlowLanguageConfiguration) GetDefaultPages() []MicrosoftGraphUserFlowLanguagePage {
	if o == nil || o.DefaultPages == nil {
		var ret []MicrosoftGraphUserFlowLanguagePage
		return ret
	}
	return *o.DefaultPages
}

// GetDefaultPagesOk returns a tuple with the DefaultPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFlowLanguageConfiguration) GetDefaultPagesOk() (*[]MicrosoftGraphUserFlowLanguagePage, bool) {
	if o == nil || o.DefaultPages == nil {
		return nil, false
	}
	return o.DefaultPages, true
}

// HasDefaultPages returns a boolean if a field has been set.
func (o *UserFlowLanguageConfiguration) HasDefaultPages() bool {
	if o != nil && o.DefaultPages != nil {
		return true
	}

	return false
}

// SetDefaultPages gets a reference to the given []MicrosoftGraphUserFlowLanguagePage and assigns it to the DefaultPages field.
func (o *UserFlowLanguageConfiguration) SetDefaultPages(v []MicrosoftGraphUserFlowLanguagePage) {
	o.DefaultPages = &v
}

// GetOverridesPages returns the OverridesPages field value if set, zero value otherwise.
func (o *UserFlowLanguageConfiguration) GetOverridesPages() []MicrosoftGraphUserFlowLanguagePage {
	if o == nil || o.OverridesPages == nil {
		var ret []MicrosoftGraphUserFlowLanguagePage
		return ret
	}
	return *o.OverridesPages
}

// GetOverridesPagesOk returns a tuple with the OverridesPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserFlowLanguageConfiguration) GetOverridesPagesOk() (*[]MicrosoftGraphUserFlowLanguagePage, bool) {
	if o == nil || o.OverridesPages == nil {
		return nil, false
	}
	return o.OverridesPages, true
}

// HasOverridesPages returns a boolean if a field has been set.
func (o *UserFlowLanguageConfiguration) HasOverridesPages() bool {
	if o != nil && o.OverridesPages != nil {
		return true
	}

	return false
}

// SetOverridesPages gets a reference to the given []MicrosoftGraphUserFlowLanguagePage and assigns it to the OverridesPages field.
func (o *UserFlowLanguageConfiguration) SetOverridesPages(v []MicrosoftGraphUserFlowLanguagePage) {
	o.OverridesPages = &v
}

func (o UserFlowLanguageConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.IsEnabled != nil {
		toSerialize["isEnabled"] = o.IsEnabled
	}
	if o.DefaultPages != nil {
		toSerialize["defaultPages"] = o.DefaultPages
	}
	if o.OverridesPages != nil {
		toSerialize["overridesPages"] = o.OverridesPages
	}
	return json.Marshal(toSerialize)
}

type NullableUserFlowLanguageConfiguration struct {
	value *UserFlowLanguageConfiguration
	isSet bool
}

func (v NullableUserFlowLanguageConfiguration) Get() *UserFlowLanguageConfiguration {
	return v.value
}

func (v *NullableUserFlowLanguageConfiguration) Set(val *UserFlowLanguageConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableUserFlowLanguageConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableUserFlowLanguageConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserFlowLanguageConfiguration(val *UserFlowLanguageConfiguration) *NullableUserFlowLanguageConfiguration {
	return &NullableUserFlowLanguageConfiguration{value: val, isSet: true}
}

func (v NullableUserFlowLanguageConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserFlowLanguageConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


