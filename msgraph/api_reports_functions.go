/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"time"
)

// Linger please
var (
	_ _context.Context
)

// ReportsFunctionsApiService ReportsFunctionsApi service
type ReportsFunctionsApiService service

type ApiReportsDeviceConfigurationDeviceActivityRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
}


func (r ApiReportsDeviceConfigurationDeviceActivityRequest) Execute() (AnyOfmicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsDeviceConfigurationDeviceActivityExecute(r)
}

/*
ReportsDeviceConfigurationDeviceActivity Invoke function deviceConfigurationDeviceActivity

Metadata for the device configuration device activity report

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsDeviceConfigurationDeviceActivityRequest
*/
func (a *ReportsFunctionsApiService) ReportsDeviceConfigurationDeviceActivity(ctx _context.Context) ApiReportsDeviceConfigurationDeviceActivityRequest {
	return ApiReportsDeviceConfigurationDeviceActivityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsDeviceConfigurationDeviceActivityExecute(r ApiReportsDeviceConfigurationDeviceActivityRequest) (AnyOfmicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsDeviceConfigurationDeviceActivity")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.deviceConfigurationDeviceActivity()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsDeviceConfigurationUserActivityRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
}


func (r ApiReportsDeviceConfigurationUserActivityRequest) Execute() (AnyOfmicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsDeviceConfigurationUserActivityExecute(r)
}

/*
ReportsDeviceConfigurationUserActivity Invoke function deviceConfigurationUserActivity

Metadata for the device configuration user activity report

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsDeviceConfigurationUserActivityRequest
*/
func (a *ReportsFunctionsApiService) ReportsDeviceConfigurationUserActivity(ctx _context.Context) ApiReportsDeviceConfigurationUserActivityRequest {
	return ApiReportsDeviceConfigurationUserActivityRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsDeviceConfigurationUserActivityExecute(r ApiReportsDeviceConfigurationUserActivityRequest) (AnyOfmicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsDeviceConfigurationUserActivity")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.deviceConfigurationUserActivity()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetEmailActivityCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetEmailActivityCountsRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetEmailActivityCountsExecute(r)
}

/*
ReportsGetEmailActivityCounts Invoke function getEmailActivityCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetEmailActivityCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetEmailActivityCounts(ctx _context.Context, period string) ApiReportsGetEmailActivityCountsRequest {
	return ApiReportsGetEmailActivityCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetEmailActivityCountsExecute(r ApiReportsGetEmailActivityCountsRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetEmailActivityCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getEmailActivityCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetEmailActivityUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetEmailActivityUserCountsRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetEmailActivityUserCountsExecute(r)
}

/*
ReportsGetEmailActivityUserCounts Invoke function getEmailActivityUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetEmailActivityUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetEmailActivityUserCounts(ctx _context.Context, period string) ApiReportsGetEmailActivityUserCountsRequest {
	return ApiReportsGetEmailActivityUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetEmailActivityUserCountsExecute(r ApiReportsGetEmailActivityUserCountsRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetEmailActivityUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getEmailActivityUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetEmailActivityUserDetailDdb2Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetEmailActivityUserDetailDdb2Request) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetEmailActivityUserDetailDdb2Execute(r)
}

/*
ReportsGetEmailActivityUserDetailDdb2 Invoke function getEmailActivityUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetEmailActivityUserDetailDdb2Request
*/
func (a *ReportsFunctionsApiService) ReportsGetEmailActivityUserDetailDdb2(ctx _context.Context, period string) ApiReportsGetEmailActivityUserDetailDdb2Request {
	return ApiReportsGetEmailActivityUserDetailDdb2Request{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetEmailActivityUserDetailDdb2Execute(r ApiReportsGetEmailActivityUserDetailDdb2Request) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetEmailActivityUserDetailDdb2")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getEmailActivityUserDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetEmailActivityUserDetailFe32Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	date string
}


func (r ApiReportsGetEmailActivityUserDetailFe32Request) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetEmailActivityUserDetailFe32Execute(r)
}

/*
ReportsGetEmailActivityUserDetailFe32 Invoke function getEmailActivityUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param date Usage: date={date}
 @return ApiReportsGetEmailActivityUserDetailFe32Request
*/
func (a *ReportsFunctionsApiService) ReportsGetEmailActivityUserDetailFe32(ctx _context.Context, date string) ApiReportsGetEmailActivityUserDetailFe32Request {
	return ApiReportsGetEmailActivityUserDetailFe32Request{
		ApiService: a,
		ctx: ctx,
		date: date,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetEmailActivityUserDetailFe32Execute(r ApiReportsGetEmailActivityUserDetailFe32Request) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetEmailActivityUserDetailFe32")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getEmailActivityUserDetail(date={date})"
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", _neturl.PathEscape(parameterToString(r.date, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetEmailAppUsageAppsUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetEmailAppUsageAppsUserCountsRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetEmailAppUsageAppsUserCountsExecute(r)
}

/*
ReportsGetEmailAppUsageAppsUserCounts Invoke function getEmailAppUsageAppsUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetEmailAppUsageAppsUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetEmailAppUsageAppsUserCounts(ctx _context.Context, period string) ApiReportsGetEmailAppUsageAppsUserCountsRequest {
	return ApiReportsGetEmailAppUsageAppsUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetEmailAppUsageAppsUserCountsExecute(r ApiReportsGetEmailAppUsageAppsUserCountsRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetEmailAppUsageAppsUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getEmailAppUsageAppsUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetEmailAppUsageUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetEmailAppUsageUserCountsRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetEmailAppUsageUserCountsExecute(r)
}

/*
ReportsGetEmailAppUsageUserCounts Invoke function getEmailAppUsageUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetEmailAppUsageUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetEmailAppUsageUserCounts(ctx _context.Context, period string) ApiReportsGetEmailAppUsageUserCountsRequest {
	return ApiReportsGetEmailAppUsageUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetEmailAppUsageUserCountsExecute(r ApiReportsGetEmailAppUsageUserCountsRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetEmailAppUsageUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getEmailAppUsageUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetEmailAppUsageUserDetail546bRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetEmailAppUsageUserDetail546bRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetEmailAppUsageUserDetail546bExecute(r)
}

/*
ReportsGetEmailAppUsageUserDetail546b Invoke function getEmailAppUsageUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetEmailAppUsageUserDetail546bRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetEmailAppUsageUserDetail546b(ctx _context.Context, period string) ApiReportsGetEmailAppUsageUserDetail546bRequest {
	return ApiReportsGetEmailAppUsageUserDetail546bRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetEmailAppUsageUserDetail546bExecute(r ApiReportsGetEmailAppUsageUserDetail546bRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetEmailAppUsageUserDetail546b")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getEmailAppUsageUserDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetEmailAppUsageUserDetail62ecRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	date string
}


func (r ApiReportsGetEmailAppUsageUserDetail62ecRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetEmailAppUsageUserDetail62ecExecute(r)
}

/*
ReportsGetEmailAppUsageUserDetail62ec Invoke function getEmailAppUsageUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param date Usage: date={date}
 @return ApiReportsGetEmailAppUsageUserDetail62ecRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetEmailAppUsageUserDetail62ec(ctx _context.Context, date string) ApiReportsGetEmailAppUsageUserDetail62ecRequest {
	return ApiReportsGetEmailAppUsageUserDetail62ecRequest{
		ApiService: a,
		ctx: ctx,
		date: date,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetEmailAppUsageUserDetail62ecExecute(r ApiReportsGetEmailAppUsageUserDetail62ecRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetEmailAppUsageUserDetail62ec")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getEmailAppUsageUserDetail(date={date})"
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", _neturl.PathEscape(parameterToString(r.date, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetEmailAppUsageVersionsUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetEmailAppUsageVersionsUserCountsRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetEmailAppUsageVersionsUserCountsExecute(r)
}

/*
ReportsGetEmailAppUsageVersionsUserCounts Invoke function getEmailAppUsageVersionsUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetEmailAppUsageVersionsUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetEmailAppUsageVersionsUserCounts(ctx _context.Context, period string) ApiReportsGetEmailAppUsageVersionsUserCountsRequest {
	return ApiReportsGetEmailAppUsageVersionsUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetEmailAppUsageVersionsUserCountsExecute(r ApiReportsGetEmailAppUsageVersionsUserCountsRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetEmailAppUsageVersionsUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getEmailAppUsageVersionsUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetGroupArchivedPrintJobsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	groupId string
	startDateTime time.Time
	endDateTime time.Time
}


func (r ApiReportsGetGroupArchivedPrintJobsRequest) Execute() ([]*AnyOfmicrosoftGraphArchivedPrintJob, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetGroupArchivedPrintJobsExecute(r)
}

/*
ReportsGetGroupArchivedPrintJobs Invoke function getGroupArchivedPrintJobs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param groupId Usage: groupId={groupId}
 @param startDateTime Usage: startDateTime={startDateTime}
 @param endDateTime Usage: endDateTime={endDateTime}
 @return ApiReportsGetGroupArchivedPrintJobsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetGroupArchivedPrintJobs(ctx _context.Context, groupId string, startDateTime time.Time, endDateTime time.Time) ApiReportsGetGroupArchivedPrintJobsRequest {
	return ApiReportsGetGroupArchivedPrintJobsRequest{
		ApiService: a,
		ctx: ctx,
		groupId: groupId,
		startDateTime: startDateTime,
		endDateTime: endDateTime,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphArchivedPrintJob
func (a *ReportsFunctionsApiService) ReportsGetGroupArchivedPrintJobsExecute(r ApiReportsGetGroupArchivedPrintJobsRequest) ([]*AnyOfmicrosoftGraphArchivedPrintJob, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphArchivedPrintJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetGroupArchivedPrintJobs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getGroupArchivedPrintJobs(groupId='{groupId}',startDateTime={startDateTime},endDateTime={endDateTime})"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", _neturl.PathEscape(parameterToString(r.groupId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"startDateTime"+"}", _neturl.PathEscape(parameterToString(r.startDateTime, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"endDateTime"+"}", _neturl.PathEscape(parameterToString(r.endDateTime, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetMailboxUsageDetailRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetMailboxUsageDetailRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetMailboxUsageDetailExecute(r)
}

/*
ReportsGetMailboxUsageDetail Invoke function getMailboxUsageDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetMailboxUsageDetailRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetMailboxUsageDetail(ctx _context.Context, period string) ApiReportsGetMailboxUsageDetailRequest {
	return ApiReportsGetMailboxUsageDetailRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetMailboxUsageDetailExecute(r ApiReportsGetMailboxUsageDetailRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetMailboxUsageDetail")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getMailboxUsageDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetMailboxUsageMailboxCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetMailboxUsageMailboxCountsRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetMailboxUsageMailboxCountsExecute(r)
}

/*
ReportsGetMailboxUsageMailboxCounts Invoke function getMailboxUsageMailboxCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetMailboxUsageMailboxCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetMailboxUsageMailboxCounts(ctx _context.Context, period string) ApiReportsGetMailboxUsageMailboxCountsRequest {
	return ApiReportsGetMailboxUsageMailboxCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetMailboxUsageMailboxCountsExecute(r ApiReportsGetMailboxUsageMailboxCountsRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetMailboxUsageMailboxCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getMailboxUsageMailboxCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetMailboxUsageQuotaStatusMailboxCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetMailboxUsageQuotaStatusMailboxCountsRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetMailboxUsageQuotaStatusMailboxCountsExecute(r)
}

/*
ReportsGetMailboxUsageQuotaStatusMailboxCounts Invoke function getMailboxUsageQuotaStatusMailboxCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetMailboxUsageQuotaStatusMailboxCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetMailboxUsageQuotaStatusMailboxCounts(ctx _context.Context, period string) ApiReportsGetMailboxUsageQuotaStatusMailboxCountsRequest {
	return ApiReportsGetMailboxUsageQuotaStatusMailboxCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetMailboxUsageQuotaStatusMailboxCountsExecute(r ApiReportsGetMailboxUsageQuotaStatusMailboxCountsRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetMailboxUsageQuotaStatusMailboxCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getMailboxUsageQuotaStatusMailboxCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetMailboxUsageStorageRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetMailboxUsageStorageRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetMailboxUsageStorageExecute(r)
}

/*
ReportsGetMailboxUsageStorage Invoke function getMailboxUsageStorage

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetMailboxUsageStorageRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetMailboxUsageStorage(ctx _context.Context, period string) ApiReportsGetMailboxUsageStorageRequest {
	return ApiReportsGetMailboxUsageStorageRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetMailboxUsageStorageExecute(r ApiReportsGetMailboxUsageStorageRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetMailboxUsageStorage")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getMailboxUsageStorage(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOffice365ActivationCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
}


func (r ApiReportsGetOffice365ActivationCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOffice365ActivationCountsExecute(r)
}

/*
ReportsGetOffice365ActivationCounts Invoke function getOffice365ActivationCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsGetOffice365ActivationCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOffice365ActivationCounts(ctx _context.Context) ApiReportsGetOffice365ActivationCountsRequest {
	return ApiReportsGetOffice365ActivationCountsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOffice365ActivationCountsExecute(r ApiReportsGetOffice365ActivationCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOffice365ActivationCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOffice365ActivationCounts()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOffice365ActivationsUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
}


func (r ApiReportsGetOffice365ActivationsUserCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOffice365ActivationsUserCountsExecute(r)
}

/*
ReportsGetOffice365ActivationsUserCounts Invoke function getOffice365ActivationsUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsGetOffice365ActivationsUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOffice365ActivationsUserCounts(ctx _context.Context) ApiReportsGetOffice365ActivationsUserCountsRequest {
	return ApiReportsGetOffice365ActivationsUserCountsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOffice365ActivationsUserCountsExecute(r ApiReportsGetOffice365ActivationsUserCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOffice365ActivationsUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOffice365ActivationsUserCounts()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOffice365ActivationsUserDetailRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
}


func (r ApiReportsGetOffice365ActivationsUserDetailRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOffice365ActivationsUserDetailExecute(r)
}

/*
ReportsGetOffice365ActivationsUserDetail Invoke function getOffice365ActivationsUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsGetOffice365ActivationsUserDetailRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOffice365ActivationsUserDetail(ctx _context.Context) ApiReportsGetOffice365ActivationsUserDetailRequest {
	return ApiReportsGetOffice365ActivationsUserDetailRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOffice365ActivationsUserDetailExecute(r ApiReportsGetOffice365ActivationsUserDetailRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOffice365ActivationsUserDetail")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOffice365ActivationsUserDetail()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOffice365ActiveUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetOffice365ActiveUserCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOffice365ActiveUserCountsExecute(r)
}

/*
ReportsGetOffice365ActiveUserCounts Invoke function getOffice365ActiveUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetOffice365ActiveUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOffice365ActiveUserCounts(ctx _context.Context, period string) ApiReportsGetOffice365ActiveUserCountsRequest {
	return ApiReportsGetOffice365ActiveUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOffice365ActiveUserCountsExecute(r ApiReportsGetOffice365ActiveUserCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOffice365ActiveUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOffice365ActiveUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOffice365ActiveUserDetail68adRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetOffice365ActiveUserDetail68adRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOffice365ActiveUserDetail68adExecute(r)
}

/*
ReportsGetOffice365ActiveUserDetail68ad Invoke function getOffice365ActiveUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetOffice365ActiveUserDetail68adRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOffice365ActiveUserDetail68ad(ctx _context.Context, period string) ApiReportsGetOffice365ActiveUserDetail68adRequest {
	return ApiReportsGetOffice365ActiveUserDetail68adRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOffice365ActiveUserDetail68adExecute(r ApiReportsGetOffice365ActiveUserDetail68adRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOffice365ActiveUserDetail68ad")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOffice365ActiveUserDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOffice365ActiveUserDetailD389Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	date string
}


func (r ApiReportsGetOffice365ActiveUserDetailD389Request) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOffice365ActiveUserDetailD389Execute(r)
}

/*
ReportsGetOffice365ActiveUserDetailD389 Invoke function getOffice365ActiveUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param date Usage: date={date}
 @return ApiReportsGetOffice365ActiveUserDetailD389Request
*/
func (a *ReportsFunctionsApiService) ReportsGetOffice365ActiveUserDetailD389(ctx _context.Context, date string) ApiReportsGetOffice365ActiveUserDetailD389Request {
	return ApiReportsGetOffice365ActiveUserDetailD389Request{
		ApiService: a,
		ctx: ctx,
		date: date,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOffice365ActiveUserDetailD389Execute(r ApiReportsGetOffice365ActiveUserDetailD389Request) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOffice365ActiveUserDetailD389")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOffice365ActiveUserDetail(date={date})"
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", _neturl.PathEscape(parameterToString(r.date, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOffice365GroupsActivityCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetOffice365GroupsActivityCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOffice365GroupsActivityCountsExecute(r)
}

/*
ReportsGetOffice365GroupsActivityCounts Invoke function getOffice365GroupsActivityCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetOffice365GroupsActivityCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOffice365GroupsActivityCounts(ctx _context.Context, period string) ApiReportsGetOffice365GroupsActivityCountsRequest {
	return ApiReportsGetOffice365GroupsActivityCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOffice365GroupsActivityCountsExecute(r ApiReportsGetOffice365GroupsActivityCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOffice365GroupsActivityCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOffice365GroupsActivityCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOffice365GroupsActivityDetail38f6Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetOffice365GroupsActivityDetail38f6Request) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOffice365GroupsActivityDetail38f6Execute(r)
}

/*
ReportsGetOffice365GroupsActivityDetail38f6 Invoke function getOffice365GroupsActivityDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetOffice365GroupsActivityDetail38f6Request
*/
func (a *ReportsFunctionsApiService) ReportsGetOffice365GroupsActivityDetail38f6(ctx _context.Context, period string) ApiReportsGetOffice365GroupsActivityDetail38f6Request {
	return ApiReportsGetOffice365GroupsActivityDetail38f6Request{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOffice365GroupsActivityDetail38f6Execute(r ApiReportsGetOffice365GroupsActivityDetail38f6Request) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOffice365GroupsActivityDetail38f6")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOffice365GroupsActivityDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOffice365GroupsActivityDetail81ccRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	date string
}


func (r ApiReportsGetOffice365GroupsActivityDetail81ccRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOffice365GroupsActivityDetail81ccExecute(r)
}

/*
ReportsGetOffice365GroupsActivityDetail81cc Invoke function getOffice365GroupsActivityDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param date Usage: date={date}
 @return ApiReportsGetOffice365GroupsActivityDetail81ccRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOffice365GroupsActivityDetail81cc(ctx _context.Context, date string) ApiReportsGetOffice365GroupsActivityDetail81ccRequest {
	return ApiReportsGetOffice365GroupsActivityDetail81ccRequest{
		ApiService: a,
		ctx: ctx,
		date: date,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOffice365GroupsActivityDetail81ccExecute(r ApiReportsGetOffice365GroupsActivityDetail81ccRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOffice365GroupsActivityDetail81cc")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOffice365GroupsActivityDetail(date={date})"
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", _neturl.PathEscape(parameterToString(r.date, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOffice365GroupsActivityFileCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetOffice365GroupsActivityFileCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOffice365GroupsActivityFileCountsExecute(r)
}

/*
ReportsGetOffice365GroupsActivityFileCounts Invoke function getOffice365GroupsActivityFileCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetOffice365GroupsActivityFileCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOffice365GroupsActivityFileCounts(ctx _context.Context, period string) ApiReportsGetOffice365GroupsActivityFileCountsRequest {
	return ApiReportsGetOffice365GroupsActivityFileCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOffice365GroupsActivityFileCountsExecute(r ApiReportsGetOffice365GroupsActivityFileCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOffice365GroupsActivityFileCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOffice365GroupsActivityFileCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOffice365GroupsActivityGroupCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetOffice365GroupsActivityGroupCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOffice365GroupsActivityGroupCountsExecute(r)
}

/*
ReportsGetOffice365GroupsActivityGroupCounts Invoke function getOffice365GroupsActivityGroupCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetOffice365GroupsActivityGroupCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOffice365GroupsActivityGroupCounts(ctx _context.Context, period string) ApiReportsGetOffice365GroupsActivityGroupCountsRequest {
	return ApiReportsGetOffice365GroupsActivityGroupCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOffice365GroupsActivityGroupCountsExecute(r ApiReportsGetOffice365GroupsActivityGroupCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOffice365GroupsActivityGroupCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOffice365GroupsActivityGroupCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOffice365GroupsActivityStorageRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetOffice365GroupsActivityStorageRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOffice365GroupsActivityStorageExecute(r)
}

/*
ReportsGetOffice365GroupsActivityStorage Invoke function getOffice365GroupsActivityStorage

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetOffice365GroupsActivityStorageRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOffice365GroupsActivityStorage(ctx _context.Context, period string) ApiReportsGetOffice365GroupsActivityStorageRequest {
	return ApiReportsGetOffice365GroupsActivityStorageRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOffice365GroupsActivityStorageExecute(r ApiReportsGetOffice365GroupsActivityStorageRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOffice365GroupsActivityStorage")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOffice365GroupsActivityStorage(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOffice365ServicesUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetOffice365ServicesUserCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOffice365ServicesUserCountsExecute(r)
}

/*
ReportsGetOffice365ServicesUserCounts Invoke function getOffice365ServicesUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetOffice365ServicesUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOffice365ServicesUserCounts(ctx _context.Context, period string) ApiReportsGetOffice365ServicesUserCountsRequest {
	return ApiReportsGetOffice365ServicesUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOffice365ServicesUserCountsExecute(r ApiReportsGetOffice365ServicesUserCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOffice365ServicesUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOffice365ServicesUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOneDriveActivityFileCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetOneDriveActivityFileCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOneDriveActivityFileCountsExecute(r)
}

/*
ReportsGetOneDriveActivityFileCounts Invoke function getOneDriveActivityFileCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetOneDriveActivityFileCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOneDriveActivityFileCounts(ctx _context.Context, period string) ApiReportsGetOneDriveActivityFileCountsRequest {
	return ApiReportsGetOneDriveActivityFileCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOneDriveActivityFileCountsExecute(r ApiReportsGetOneDriveActivityFileCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOneDriveActivityFileCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOneDriveActivityFileCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOneDriveActivityUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetOneDriveActivityUserCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOneDriveActivityUserCountsExecute(r)
}

/*
ReportsGetOneDriveActivityUserCounts Invoke function getOneDriveActivityUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetOneDriveActivityUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOneDriveActivityUserCounts(ctx _context.Context, period string) ApiReportsGetOneDriveActivityUserCountsRequest {
	return ApiReportsGetOneDriveActivityUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOneDriveActivityUserCountsExecute(r ApiReportsGetOneDriveActivityUserCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOneDriveActivityUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOneDriveActivityUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOneDriveActivityUserDetail05f1Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	date string
}


func (r ApiReportsGetOneDriveActivityUserDetail05f1Request) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOneDriveActivityUserDetail05f1Execute(r)
}

/*
ReportsGetOneDriveActivityUserDetail05f1 Invoke function getOneDriveActivityUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param date Usage: date={date}
 @return ApiReportsGetOneDriveActivityUserDetail05f1Request
*/
func (a *ReportsFunctionsApiService) ReportsGetOneDriveActivityUserDetail05f1(ctx _context.Context, date string) ApiReportsGetOneDriveActivityUserDetail05f1Request {
	return ApiReportsGetOneDriveActivityUserDetail05f1Request{
		ApiService: a,
		ctx: ctx,
		date: date,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOneDriveActivityUserDetail05f1Execute(r ApiReportsGetOneDriveActivityUserDetail05f1Request) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOneDriveActivityUserDetail05f1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOneDriveActivityUserDetail(date={date})"
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", _neturl.PathEscape(parameterToString(r.date, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOneDriveActivityUserDetailC424Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetOneDriveActivityUserDetailC424Request) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOneDriveActivityUserDetailC424Execute(r)
}

/*
ReportsGetOneDriveActivityUserDetailC424 Invoke function getOneDriveActivityUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetOneDriveActivityUserDetailC424Request
*/
func (a *ReportsFunctionsApiService) ReportsGetOneDriveActivityUserDetailC424(ctx _context.Context, period string) ApiReportsGetOneDriveActivityUserDetailC424Request {
	return ApiReportsGetOneDriveActivityUserDetailC424Request{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOneDriveActivityUserDetailC424Execute(r ApiReportsGetOneDriveActivityUserDetailC424Request) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOneDriveActivityUserDetailC424")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOneDriveActivityUserDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOneDriveUsageAccountCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetOneDriveUsageAccountCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOneDriveUsageAccountCountsExecute(r)
}

/*
ReportsGetOneDriveUsageAccountCounts Invoke function getOneDriveUsageAccountCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetOneDriveUsageAccountCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOneDriveUsageAccountCounts(ctx _context.Context, period string) ApiReportsGetOneDriveUsageAccountCountsRequest {
	return ApiReportsGetOneDriveUsageAccountCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOneDriveUsageAccountCountsExecute(r ApiReportsGetOneDriveUsageAccountCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOneDriveUsageAccountCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOneDriveUsageAccountCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOneDriveUsageAccountDetailDd7fRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetOneDriveUsageAccountDetailDd7fRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOneDriveUsageAccountDetailDd7fExecute(r)
}

/*
ReportsGetOneDriveUsageAccountDetailDd7f Invoke function getOneDriveUsageAccountDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetOneDriveUsageAccountDetailDd7fRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOneDriveUsageAccountDetailDd7f(ctx _context.Context, period string) ApiReportsGetOneDriveUsageAccountDetailDd7fRequest {
	return ApiReportsGetOneDriveUsageAccountDetailDd7fRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOneDriveUsageAccountDetailDd7fExecute(r ApiReportsGetOneDriveUsageAccountDetailDd7fRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOneDriveUsageAccountDetailDd7f")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOneDriveUsageAccountDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOneDriveUsageAccountDetailE827Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	date string
}


func (r ApiReportsGetOneDriveUsageAccountDetailE827Request) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOneDriveUsageAccountDetailE827Execute(r)
}

/*
ReportsGetOneDriveUsageAccountDetailE827 Invoke function getOneDriveUsageAccountDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param date Usage: date={date}
 @return ApiReportsGetOneDriveUsageAccountDetailE827Request
*/
func (a *ReportsFunctionsApiService) ReportsGetOneDriveUsageAccountDetailE827(ctx _context.Context, date string) ApiReportsGetOneDriveUsageAccountDetailE827Request {
	return ApiReportsGetOneDriveUsageAccountDetailE827Request{
		ApiService: a,
		ctx: ctx,
		date: date,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOneDriveUsageAccountDetailE827Execute(r ApiReportsGetOneDriveUsageAccountDetailE827Request) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOneDriveUsageAccountDetailE827")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOneDriveUsageAccountDetail(date={date})"
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", _neturl.PathEscape(parameterToString(r.date, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOneDriveUsageFileCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetOneDriveUsageFileCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOneDriveUsageFileCountsExecute(r)
}

/*
ReportsGetOneDriveUsageFileCounts Invoke function getOneDriveUsageFileCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetOneDriveUsageFileCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOneDriveUsageFileCounts(ctx _context.Context, period string) ApiReportsGetOneDriveUsageFileCountsRequest {
	return ApiReportsGetOneDriveUsageFileCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOneDriveUsageFileCountsExecute(r ApiReportsGetOneDriveUsageFileCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOneDriveUsageFileCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOneDriveUsageFileCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetOneDriveUsageStorageRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetOneDriveUsageStorageRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetOneDriveUsageStorageExecute(r)
}

/*
ReportsGetOneDriveUsageStorage Invoke function getOneDriveUsageStorage

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetOneDriveUsageStorageRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetOneDriveUsageStorage(ctx _context.Context, period string) ApiReportsGetOneDriveUsageStorageRequest {
	return ApiReportsGetOneDriveUsageStorageRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetOneDriveUsageStorageExecute(r ApiReportsGetOneDriveUsageStorageRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetOneDriveUsageStorage")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getOneDriveUsageStorage(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetPrinterArchivedPrintJobsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	printerId string
	startDateTime time.Time
	endDateTime time.Time
}


func (r ApiReportsGetPrinterArchivedPrintJobsRequest) Execute() ([]*AnyOfmicrosoftGraphArchivedPrintJob, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetPrinterArchivedPrintJobsExecute(r)
}

/*
ReportsGetPrinterArchivedPrintJobs Invoke function getPrinterArchivedPrintJobs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param printerId Usage: printerId={printerId}
 @param startDateTime Usage: startDateTime={startDateTime}
 @param endDateTime Usage: endDateTime={endDateTime}
 @return ApiReportsGetPrinterArchivedPrintJobsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetPrinterArchivedPrintJobs(ctx _context.Context, printerId string, startDateTime time.Time, endDateTime time.Time) ApiReportsGetPrinterArchivedPrintJobsRequest {
	return ApiReportsGetPrinterArchivedPrintJobsRequest{
		ApiService: a,
		ctx: ctx,
		printerId: printerId,
		startDateTime: startDateTime,
		endDateTime: endDateTime,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphArchivedPrintJob
func (a *ReportsFunctionsApiService) ReportsGetPrinterArchivedPrintJobsExecute(r ApiReportsGetPrinterArchivedPrintJobsRequest) ([]*AnyOfmicrosoftGraphArchivedPrintJob, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphArchivedPrintJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetPrinterArchivedPrintJobs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getPrinterArchivedPrintJobs(printerId='{printerId}',startDateTime={startDateTime},endDateTime={endDateTime})"
	localVarPath = strings.Replace(localVarPath, "{"+"printerId"+"}", _neturl.PathEscape(parameterToString(r.printerId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"startDateTime"+"}", _neturl.PathEscape(parameterToString(r.startDateTime, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"endDateTime"+"}", _neturl.PathEscape(parameterToString(r.endDateTime, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSharePointActivityFileCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSharePointActivityFileCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSharePointActivityFileCountsExecute(r)
}

/*
ReportsGetSharePointActivityFileCounts Invoke function getSharePointActivityFileCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSharePointActivityFileCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSharePointActivityFileCounts(ctx _context.Context, period string) ApiReportsGetSharePointActivityFileCountsRequest {
	return ApiReportsGetSharePointActivityFileCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSharePointActivityFileCountsExecute(r ApiReportsGetSharePointActivityFileCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSharePointActivityFileCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSharePointActivityFileCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSharePointActivityPagesRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSharePointActivityPagesRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSharePointActivityPagesExecute(r)
}

/*
ReportsGetSharePointActivityPages Invoke function getSharePointActivityPages

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSharePointActivityPagesRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSharePointActivityPages(ctx _context.Context, period string) ApiReportsGetSharePointActivityPagesRequest {
	return ApiReportsGetSharePointActivityPagesRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSharePointActivityPagesExecute(r ApiReportsGetSharePointActivityPagesRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSharePointActivityPages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSharePointActivityPages(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSharePointActivityUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSharePointActivityUserCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSharePointActivityUserCountsExecute(r)
}

/*
ReportsGetSharePointActivityUserCounts Invoke function getSharePointActivityUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSharePointActivityUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSharePointActivityUserCounts(ctx _context.Context, period string) ApiReportsGetSharePointActivityUserCountsRequest {
	return ApiReportsGetSharePointActivityUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSharePointActivityUserCountsExecute(r ApiReportsGetSharePointActivityUserCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSharePointActivityUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSharePointActivityUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSharePointActivityUserDetailB778Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSharePointActivityUserDetailB778Request) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSharePointActivityUserDetailB778Execute(r)
}

/*
ReportsGetSharePointActivityUserDetailB778 Invoke function getSharePointActivityUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSharePointActivityUserDetailB778Request
*/
func (a *ReportsFunctionsApiService) ReportsGetSharePointActivityUserDetailB778(ctx _context.Context, period string) ApiReportsGetSharePointActivityUserDetailB778Request {
	return ApiReportsGetSharePointActivityUserDetailB778Request{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSharePointActivityUserDetailB778Execute(r ApiReportsGetSharePointActivityUserDetailB778Request) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSharePointActivityUserDetailB778")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSharePointActivityUserDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSharePointActivityUserDetailF3beRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	date string
}


func (r ApiReportsGetSharePointActivityUserDetailF3beRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSharePointActivityUserDetailF3beExecute(r)
}

/*
ReportsGetSharePointActivityUserDetailF3be Invoke function getSharePointActivityUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param date Usage: date={date}
 @return ApiReportsGetSharePointActivityUserDetailF3beRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSharePointActivityUserDetailF3be(ctx _context.Context, date string) ApiReportsGetSharePointActivityUserDetailF3beRequest {
	return ApiReportsGetSharePointActivityUserDetailF3beRequest{
		ApiService: a,
		ctx: ctx,
		date: date,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSharePointActivityUserDetailF3beExecute(r ApiReportsGetSharePointActivityUserDetailF3beRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSharePointActivityUserDetailF3be")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSharePointActivityUserDetail(date={date})"
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", _neturl.PathEscape(parameterToString(r.date, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSharePointSiteUsageDetail204bRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSharePointSiteUsageDetail204bRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSharePointSiteUsageDetail204bExecute(r)
}

/*
ReportsGetSharePointSiteUsageDetail204b Invoke function getSharePointSiteUsageDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSharePointSiteUsageDetail204bRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSharePointSiteUsageDetail204b(ctx _context.Context, period string) ApiReportsGetSharePointSiteUsageDetail204bRequest {
	return ApiReportsGetSharePointSiteUsageDetail204bRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSharePointSiteUsageDetail204bExecute(r ApiReportsGetSharePointSiteUsageDetail204bRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSharePointSiteUsageDetail204b")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSharePointSiteUsageDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSharePointSiteUsageDetailD27aRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	date string
}


func (r ApiReportsGetSharePointSiteUsageDetailD27aRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSharePointSiteUsageDetailD27aExecute(r)
}

/*
ReportsGetSharePointSiteUsageDetailD27a Invoke function getSharePointSiteUsageDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param date Usage: date={date}
 @return ApiReportsGetSharePointSiteUsageDetailD27aRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSharePointSiteUsageDetailD27a(ctx _context.Context, date string) ApiReportsGetSharePointSiteUsageDetailD27aRequest {
	return ApiReportsGetSharePointSiteUsageDetailD27aRequest{
		ApiService: a,
		ctx: ctx,
		date: date,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSharePointSiteUsageDetailD27aExecute(r ApiReportsGetSharePointSiteUsageDetailD27aRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSharePointSiteUsageDetailD27a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSharePointSiteUsageDetail(date={date})"
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", _neturl.PathEscape(parameterToString(r.date, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSharePointSiteUsageFileCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSharePointSiteUsageFileCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSharePointSiteUsageFileCountsExecute(r)
}

/*
ReportsGetSharePointSiteUsageFileCounts Invoke function getSharePointSiteUsageFileCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSharePointSiteUsageFileCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSharePointSiteUsageFileCounts(ctx _context.Context, period string) ApiReportsGetSharePointSiteUsageFileCountsRequest {
	return ApiReportsGetSharePointSiteUsageFileCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSharePointSiteUsageFileCountsExecute(r ApiReportsGetSharePointSiteUsageFileCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSharePointSiteUsageFileCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSharePointSiteUsageFileCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSharePointSiteUsagePagesRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSharePointSiteUsagePagesRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSharePointSiteUsagePagesExecute(r)
}

/*
ReportsGetSharePointSiteUsagePages Invoke function getSharePointSiteUsagePages

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSharePointSiteUsagePagesRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSharePointSiteUsagePages(ctx _context.Context, period string) ApiReportsGetSharePointSiteUsagePagesRequest {
	return ApiReportsGetSharePointSiteUsagePagesRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSharePointSiteUsagePagesExecute(r ApiReportsGetSharePointSiteUsagePagesRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSharePointSiteUsagePages")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSharePointSiteUsagePages(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSharePointSiteUsageSiteCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSharePointSiteUsageSiteCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSharePointSiteUsageSiteCountsExecute(r)
}

/*
ReportsGetSharePointSiteUsageSiteCounts Invoke function getSharePointSiteUsageSiteCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSharePointSiteUsageSiteCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSharePointSiteUsageSiteCounts(ctx _context.Context, period string) ApiReportsGetSharePointSiteUsageSiteCountsRequest {
	return ApiReportsGetSharePointSiteUsageSiteCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSharePointSiteUsageSiteCountsExecute(r ApiReportsGetSharePointSiteUsageSiteCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSharePointSiteUsageSiteCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSharePointSiteUsageSiteCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSharePointSiteUsageStorageRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSharePointSiteUsageStorageRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSharePointSiteUsageStorageExecute(r)
}

/*
ReportsGetSharePointSiteUsageStorage Invoke function getSharePointSiteUsageStorage

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSharePointSiteUsageStorageRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSharePointSiteUsageStorage(ctx _context.Context, period string) ApiReportsGetSharePointSiteUsageStorageRequest {
	return ApiReportsGetSharePointSiteUsageStorageRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSharePointSiteUsageStorageExecute(r ApiReportsGetSharePointSiteUsageStorageRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSharePointSiteUsageStorage")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSharePointSiteUsageStorage(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessActivityCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSkypeForBusinessActivityCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessActivityCountsExecute(r)
}

/*
ReportsGetSkypeForBusinessActivityCounts Invoke function getSkypeForBusinessActivityCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSkypeForBusinessActivityCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessActivityCounts(ctx _context.Context, period string) ApiReportsGetSkypeForBusinessActivityCountsRequest {
	return ApiReportsGetSkypeForBusinessActivityCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessActivityCountsExecute(r ApiReportsGetSkypeForBusinessActivityCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessActivityCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessActivityCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessActivityUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSkypeForBusinessActivityUserCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessActivityUserCountsExecute(r)
}

/*
ReportsGetSkypeForBusinessActivityUserCounts Invoke function getSkypeForBusinessActivityUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSkypeForBusinessActivityUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessActivityUserCounts(ctx _context.Context, period string) ApiReportsGetSkypeForBusinessActivityUserCountsRequest {
	return ApiReportsGetSkypeForBusinessActivityUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessActivityUserCountsExecute(r ApiReportsGetSkypeForBusinessActivityUserCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessActivityUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessActivityUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessActivityUserDetail744eRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSkypeForBusinessActivityUserDetail744eRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessActivityUserDetail744eExecute(r)
}

/*
ReportsGetSkypeForBusinessActivityUserDetail744e Invoke function getSkypeForBusinessActivityUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSkypeForBusinessActivityUserDetail744eRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessActivityUserDetail744e(ctx _context.Context, period string) ApiReportsGetSkypeForBusinessActivityUserDetail744eRequest {
	return ApiReportsGetSkypeForBusinessActivityUserDetail744eRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessActivityUserDetail744eExecute(r ApiReportsGetSkypeForBusinessActivityUserDetail744eRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessActivityUserDetail744e")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessActivityUserDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessActivityUserDetailE4c9Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	date string
}


func (r ApiReportsGetSkypeForBusinessActivityUserDetailE4c9Request) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessActivityUserDetailE4c9Execute(r)
}

/*
ReportsGetSkypeForBusinessActivityUserDetailE4c9 Invoke function getSkypeForBusinessActivityUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param date Usage: date={date}
 @return ApiReportsGetSkypeForBusinessActivityUserDetailE4c9Request
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessActivityUserDetailE4c9(ctx _context.Context, date string) ApiReportsGetSkypeForBusinessActivityUserDetailE4c9Request {
	return ApiReportsGetSkypeForBusinessActivityUserDetailE4c9Request{
		ApiService: a,
		ctx: ctx,
		date: date,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessActivityUserDetailE4c9Execute(r ApiReportsGetSkypeForBusinessActivityUserDetailE4c9Request) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessActivityUserDetailE4c9")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessActivityUserDetail(date={date})"
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", _neturl.PathEscape(parameterToString(r.date, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessDeviceUsageDistributionUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSkypeForBusinessDeviceUsageDistributionUserCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessDeviceUsageDistributionUserCountsExecute(r)
}

/*
ReportsGetSkypeForBusinessDeviceUsageDistributionUserCounts Invoke function getSkypeForBusinessDeviceUsageDistributionUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSkypeForBusinessDeviceUsageDistributionUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessDeviceUsageDistributionUserCounts(ctx _context.Context, period string) ApiReportsGetSkypeForBusinessDeviceUsageDistributionUserCountsRequest {
	return ApiReportsGetSkypeForBusinessDeviceUsageDistributionUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessDeviceUsageDistributionUserCountsExecute(r ApiReportsGetSkypeForBusinessDeviceUsageDistributionUserCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessDeviceUsageDistributionUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessDeviceUsageDistributionUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessDeviceUsageUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSkypeForBusinessDeviceUsageUserCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessDeviceUsageUserCountsExecute(r)
}

/*
ReportsGetSkypeForBusinessDeviceUsageUserCounts Invoke function getSkypeForBusinessDeviceUsageUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSkypeForBusinessDeviceUsageUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessDeviceUsageUserCounts(ctx _context.Context, period string) ApiReportsGetSkypeForBusinessDeviceUsageUserCountsRequest {
	return ApiReportsGetSkypeForBusinessDeviceUsageUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessDeviceUsageUserCountsExecute(r ApiReportsGetSkypeForBusinessDeviceUsageUserCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessDeviceUsageUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessDeviceUsageUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessDeviceUsageUserDetailA692Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	date string
}


func (r ApiReportsGetSkypeForBusinessDeviceUsageUserDetailA692Request) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessDeviceUsageUserDetailA692Execute(r)
}

/*
ReportsGetSkypeForBusinessDeviceUsageUserDetailA692 Invoke function getSkypeForBusinessDeviceUsageUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param date Usage: date={date}
 @return ApiReportsGetSkypeForBusinessDeviceUsageUserDetailA692Request
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessDeviceUsageUserDetailA692(ctx _context.Context, date string) ApiReportsGetSkypeForBusinessDeviceUsageUserDetailA692Request {
	return ApiReportsGetSkypeForBusinessDeviceUsageUserDetailA692Request{
		ApiService: a,
		ctx: ctx,
		date: date,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessDeviceUsageUserDetailA692Execute(r ApiReportsGetSkypeForBusinessDeviceUsageUserDetailA692Request) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessDeviceUsageUserDetailA692")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessDeviceUsageUserDetail(date={date})"
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", _neturl.PathEscape(parameterToString(r.date, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessDeviceUsageUserDetailE753Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSkypeForBusinessDeviceUsageUserDetailE753Request) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessDeviceUsageUserDetailE753Execute(r)
}

/*
ReportsGetSkypeForBusinessDeviceUsageUserDetailE753 Invoke function getSkypeForBusinessDeviceUsageUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSkypeForBusinessDeviceUsageUserDetailE753Request
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessDeviceUsageUserDetailE753(ctx _context.Context, period string) ApiReportsGetSkypeForBusinessDeviceUsageUserDetailE753Request {
	return ApiReportsGetSkypeForBusinessDeviceUsageUserDetailE753Request{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessDeviceUsageUserDetailE753Execute(r ApiReportsGetSkypeForBusinessDeviceUsageUserDetailE753Request) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessDeviceUsageUserDetailE753")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessDeviceUsageUserDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessOrganizerActivityCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSkypeForBusinessOrganizerActivityCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessOrganizerActivityCountsExecute(r)
}

/*
ReportsGetSkypeForBusinessOrganizerActivityCounts Invoke function getSkypeForBusinessOrganizerActivityCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSkypeForBusinessOrganizerActivityCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessOrganizerActivityCounts(ctx _context.Context, period string) ApiReportsGetSkypeForBusinessOrganizerActivityCountsRequest {
	return ApiReportsGetSkypeForBusinessOrganizerActivityCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessOrganizerActivityCountsExecute(r ApiReportsGetSkypeForBusinessOrganizerActivityCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessOrganizerActivityCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessOrganizerActivityCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessOrganizerActivityMinuteCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSkypeForBusinessOrganizerActivityMinuteCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessOrganizerActivityMinuteCountsExecute(r)
}

/*
ReportsGetSkypeForBusinessOrganizerActivityMinuteCounts Invoke function getSkypeForBusinessOrganizerActivityMinuteCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSkypeForBusinessOrganizerActivityMinuteCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessOrganizerActivityMinuteCounts(ctx _context.Context, period string) ApiReportsGetSkypeForBusinessOrganizerActivityMinuteCountsRequest {
	return ApiReportsGetSkypeForBusinessOrganizerActivityMinuteCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessOrganizerActivityMinuteCountsExecute(r ApiReportsGetSkypeForBusinessOrganizerActivityMinuteCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessOrganizerActivityMinuteCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessOrganizerActivityMinuteCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessOrganizerActivityUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSkypeForBusinessOrganizerActivityUserCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessOrganizerActivityUserCountsExecute(r)
}

/*
ReportsGetSkypeForBusinessOrganizerActivityUserCounts Invoke function getSkypeForBusinessOrganizerActivityUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSkypeForBusinessOrganizerActivityUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessOrganizerActivityUserCounts(ctx _context.Context, period string) ApiReportsGetSkypeForBusinessOrganizerActivityUserCountsRequest {
	return ApiReportsGetSkypeForBusinessOrganizerActivityUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessOrganizerActivityUserCountsExecute(r ApiReportsGetSkypeForBusinessOrganizerActivityUserCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessOrganizerActivityUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessOrganizerActivityUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessParticipantActivityCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSkypeForBusinessParticipantActivityCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessParticipantActivityCountsExecute(r)
}

/*
ReportsGetSkypeForBusinessParticipantActivityCounts Invoke function getSkypeForBusinessParticipantActivityCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSkypeForBusinessParticipantActivityCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessParticipantActivityCounts(ctx _context.Context, period string) ApiReportsGetSkypeForBusinessParticipantActivityCountsRequest {
	return ApiReportsGetSkypeForBusinessParticipantActivityCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessParticipantActivityCountsExecute(r ApiReportsGetSkypeForBusinessParticipantActivityCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessParticipantActivityCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessParticipantActivityCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessParticipantActivityMinuteCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSkypeForBusinessParticipantActivityMinuteCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessParticipantActivityMinuteCountsExecute(r)
}

/*
ReportsGetSkypeForBusinessParticipantActivityMinuteCounts Invoke function getSkypeForBusinessParticipantActivityMinuteCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSkypeForBusinessParticipantActivityMinuteCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessParticipantActivityMinuteCounts(ctx _context.Context, period string) ApiReportsGetSkypeForBusinessParticipantActivityMinuteCountsRequest {
	return ApiReportsGetSkypeForBusinessParticipantActivityMinuteCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessParticipantActivityMinuteCountsExecute(r ApiReportsGetSkypeForBusinessParticipantActivityMinuteCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessParticipantActivityMinuteCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessParticipantActivityMinuteCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessParticipantActivityUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSkypeForBusinessParticipantActivityUserCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessParticipantActivityUserCountsExecute(r)
}

/*
ReportsGetSkypeForBusinessParticipantActivityUserCounts Invoke function getSkypeForBusinessParticipantActivityUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSkypeForBusinessParticipantActivityUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessParticipantActivityUserCounts(ctx _context.Context, period string) ApiReportsGetSkypeForBusinessParticipantActivityUserCountsRequest {
	return ApiReportsGetSkypeForBusinessParticipantActivityUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessParticipantActivityUserCountsExecute(r ApiReportsGetSkypeForBusinessParticipantActivityUserCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessParticipantActivityUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessParticipantActivityUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessPeerToPeerActivityCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSkypeForBusinessPeerToPeerActivityCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessPeerToPeerActivityCountsExecute(r)
}

/*
ReportsGetSkypeForBusinessPeerToPeerActivityCounts Invoke function getSkypeForBusinessPeerToPeerActivityCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSkypeForBusinessPeerToPeerActivityCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessPeerToPeerActivityCounts(ctx _context.Context, period string) ApiReportsGetSkypeForBusinessPeerToPeerActivityCountsRequest {
	return ApiReportsGetSkypeForBusinessPeerToPeerActivityCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessPeerToPeerActivityCountsExecute(r ApiReportsGetSkypeForBusinessPeerToPeerActivityCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessPeerToPeerActivityCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessPeerToPeerActivityCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessPeerToPeerActivityMinuteCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSkypeForBusinessPeerToPeerActivityMinuteCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessPeerToPeerActivityMinuteCountsExecute(r)
}

/*
ReportsGetSkypeForBusinessPeerToPeerActivityMinuteCounts Invoke function getSkypeForBusinessPeerToPeerActivityMinuteCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSkypeForBusinessPeerToPeerActivityMinuteCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessPeerToPeerActivityMinuteCounts(ctx _context.Context, period string) ApiReportsGetSkypeForBusinessPeerToPeerActivityMinuteCountsRequest {
	return ApiReportsGetSkypeForBusinessPeerToPeerActivityMinuteCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessPeerToPeerActivityMinuteCountsExecute(r ApiReportsGetSkypeForBusinessPeerToPeerActivityMinuteCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessPeerToPeerActivityMinuteCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessPeerToPeerActivityMinuteCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetSkypeForBusinessPeerToPeerActivityUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetSkypeForBusinessPeerToPeerActivityUserCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetSkypeForBusinessPeerToPeerActivityUserCountsExecute(r)
}

/*
ReportsGetSkypeForBusinessPeerToPeerActivityUserCounts Invoke function getSkypeForBusinessPeerToPeerActivityUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetSkypeForBusinessPeerToPeerActivityUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessPeerToPeerActivityUserCounts(ctx _context.Context, period string) ApiReportsGetSkypeForBusinessPeerToPeerActivityUserCountsRequest {
	return ApiReportsGetSkypeForBusinessPeerToPeerActivityUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetSkypeForBusinessPeerToPeerActivityUserCountsExecute(r ApiReportsGetSkypeForBusinessPeerToPeerActivityUserCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetSkypeForBusinessPeerToPeerActivityUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getSkypeForBusinessPeerToPeerActivityUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetTeamsDeviceUsageDistributionUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetTeamsDeviceUsageDistributionUserCountsRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetTeamsDeviceUsageDistributionUserCountsExecute(r)
}

/*
ReportsGetTeamsDeviceUsageDistributionUserCounts Invoke function getTeamsDeviceUsageDistributionUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetTeamsDeviceUsageDistributionUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetTeamsDeviceUsageDistributionUserCounts(ctx _context.Context, period string) ApiReportsGetTeamsDeviceUsageDistributionUserCountsRequest {
	return ApiReportsGetTeamsDeviceUsageDistributionUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetTeamsDeviceUsageDistributionUserCountsExecute(r ApiReportsGetTeamsDeviceUsageDistributionUserCountsRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetTeamsDeviceUsageDistributionUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getTeamsDeviceUsageDistributionUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetTeamsDeviceUsageUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetTeamsDeviceUsageUserCountsRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetTeamsDeviceUsageUserCountsExecute(r)
}

/*
ReportsGetTeamsDeviceUsageUserCounts Invoke function getTeamsDeviceUsageUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetTeamsDeviceUsageUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetTeamsDeviceUsageUserCounts(ctx _context.Context, period string) ApiReportsGetTeamsDeviceUsageUserCountsRequest {
	return ApiReportsGetTeamsDeviceUsageUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetTeamsDeviceUsageUserCountsExecute(r ApiReportsGetTeamsDeviceUsageUserCountsRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetTeamsDeviceUsageUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getTeamsDeviceUsageUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetTeamsDeviceUsageUserDetail7148Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	date string
}


func (r ApiReportsGetTeamsDeviceUsageUserDetail7148Request) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetTeamsDeviceUsageUserDetail7148Execute(r)
}

/*
ReportsGetTeamsDeviceUsageUserDetail7148 Invoke function getTeamsDeviceUsageUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param date Usage: date={date}
 @return ApiReportsGetTeamsDeviceUsageUserDetail7148Request
*/
func (a *ReportsFunctionsApiService) ReportsGetTeamsDeviceUsageUserDetail7148(ctx _context.Context, date string) ApiReportsGetTeamsDeviceUsageUserDetail7148Request {
	return ApiReportsGetTeamsDeviceUsageUserDetail7148Request{
		ApiService: a,
		ctx: ctx,
		date: date,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetTeamsDeviceUsageUserDetail7148Execute(r ApiReportsGetTeamsDeviceUsageUserDetail7148Request) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetTeamsDeviceUsageUserDetail7148")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getTeamsDeviceUsageUserDetail(date={date})"
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", _neturl.PathEscape(parameterToString(r.date, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetTeamsDeviceUsageUserDetail7565Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetTeamsDeviceUsageUserDetail7565Request) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetTeamsDeviceUsageUserDetail7565Execute(r)
}

/*
ReportsGetTeamsDeviceUsageUserDetail7565 Invoke function getTeamsDeviceUsageUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetTeamsDeviceUsageUserDetail7565Request
*/
func (a *ReportsFunctionsApiService) ReportsGetTeamsDeviceUsageUserDetail7565(ctx _context.Context, period string) ApiReportsGetTeamsDeviceUsageUserDetail7565Request {
	return ApiReportsGetTeamsDeviceUsageUserDetail7565Request{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetTeamsDeviceUsageUserDetail7565Execute(r ApiReportsGetTeamsDeviceUsageUserDetail7565Request) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetTeamsDeviceUsageUserDetail7565")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getTeamsDeviceUsageUserDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetTeamsUserActivityCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetTeamsUserActivityCountsRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetTeamsUserActivityCountsExecute(r)
}

/*
ReportsGetTeamsUserActivityCounts Invoke function getTeamsUserActivityCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetTeamsUserActivityCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetTeamsUserActivityCounts(ctx _context.Context, period string) ApiReportsGetTeamsUserActivityCountsRequest {
	return ApiReportsGetTeamsUserActivityCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetTeamsUserActivityCountsExecute(r ApiReportsGetTeamsUserActivityCountsRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetTeamsUserActivityCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getTeamsUserActivityCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetTeamsUserActivityUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetTeamsUserActivityUserCountsRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetTeamsUserActivityUserCountsExecute(r)
}

/*
ReportsGetTeamsUserActivityUserCounts Invoke function getTeamsUserActivityUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetTeamsUserActivityUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetTeamsUserActivityUserCounts(ctx _context.Context, period string) ApiReportsGetTeamsUserActivityUserCountsRequest {
	return ApiReportsGetTeamsUserActivityUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetTeamsUserActivityUserCountsExecute(r ApiReportsGetTeamsUserActivityUserCountsRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetTeamsUserActivityUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getTeamsUserActivityUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetTeamsUserActivityUserDetailA3f1Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	date string
}


func (r ApiReportsGetTeamsUserActivityUserDetailA3f1Request) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetTeamsUserActivityUserDetailA3f1Execute(r)
}

/*
ReportsGetTeamsUserActivityUserDetailA3f1 Invoke function getTeamsUserActivityUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param date Usage: date={date}
 @return ApiReportsGetTeamsUserActivityUserDetailA3f1Request
*/
func (a *ReportsFunctionsApiService) ReportsGetTeamsUserActivityUserDetailA3f1(ctx _context.Context, date string) ApiReportsGetTeamsUserActivityUserDetailA3f1Request {
	return ApiReportsGetTeamsUserActivityUserDetailA3f1Request{
		ApiService: a,
		ctx: ctx,
		date: date,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetTeamsUserActivityUserDetailA3f1Execute(r ApiReportsGetTeamsUserActivityUserDetailA3f1Request) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetTeamsUserActivityUserDetailA3f1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getTeamsUserActivityUserDetail(date={date})"
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", _neturl.PathEscape(parameterToString(r.date, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetTeamsUserActivityUserDetailEb13Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetTeamsUserActivityUserDetailEb13Request) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetTeamsUserActivityUserDetailEb13Execute(r)
}

/*
ReportsGetTeamsUserActivityUserDetailEb13 Invoke function getTeamsUserActivityUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetTeamsUserActivityUserDetailEb13Request
*/
func (a *ReportsFunctionsApiService) ReportsGetTeamsUserActivityUserDetailEb13(ctx _context.Context, period string) ApiReportsGetTeamsUserActivityUserDetailEb13Request {
	return ApiReportsGetTeamsUserActivityUserDetailEb13Request{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return string
func (a *ReportsFunctionsApiService) ReportsGetTeamsUserActivityUserDetailEb13Execute(r ApiReportsGetTeamsUserActivityUserDetailEb13Request) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetTeamsUserActivityUserDetailEb13")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getTeamsUserActivityUserDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetUserArchivedPrintJobsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	userId string
	startDateTime time.Time
	endDateTime time.Time
}


func (r ApiReportsGetUserArchivedPrintJobsRequest) Execute() ([]*AnyOfmicrosoftGraphArchivedPrintJob, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetUserArchivedPrintJobsExecute(r)
}

/*
ReportsGetUserArchivedPrintJobs Invoke function getUserArchivedPrintJobs

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param userId Usage: userId={userId}
 @param startDateTime Usage: startDateTime={startDateTime}
 @param endDateTime Usage: endDateTime={endDateTime}
 @return ApiReportsGetUserArchivedPrintJobsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetUserArchivedPrintJobs(ctx _context.Context, userId string, startDateTime time.Time, endDateTime time.Time) ApiReportsGetUserArchivedPrintJobsRequest {
	return ApiReportsGetUserArchivedPrintJobsRequest{
		ApiService: a,
		ctx: ctx,
		userId: userId,
		startDateTime: startDateTime,
		endDateTime: endDateTime,
	}
}

// Execute executes the request
//  @return []*AnyOfmicrosoftGraphArchivedPrintJob
func (a *ReportsFunctionsApiService) ReportsGetUserArchivedPrintJobsExecute(r ApiReportsGetUserArchivedPrintJobsRequest) ([]*AnyOfmicrosoftGraphArchivedPrintJob, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []*AnyOfmicrosoftGraphArchivedPrintJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetUserArchivedPrintJobs")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getUserArchivedPrintJobs(userId='{userId}',startDateTime={startDateTime},endDateTime={endDateTime})"
	localVarPath = strings.Replace(localVarPath, "{"+"userId"+"}", _neturl.PathEscape(parameterToString(r.userId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"startDateTime"+"}", _neturl.PathEscape(parameterToString(r.startDateTime, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"endDateTime"+"}", _neturl.PathEscape(parameterToString(r.endDateTime, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetYammerActivityCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetYammerActivityCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetYammerActivityCountsExecute(r)
}

/*
ReportsGetYammerActivityCounts Invoke function getYammerActivityCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetYammerActivityCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetYammerActivityCounts(ctx _context.Context, period string) ApiReportsGetYammerActivityCountsRequest {
	return ApiReportsGetYammerActivityCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetYammerActivityCountsExecute(r ApiReportsGetYammerActivityCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetYammerActivityCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getYammerActivityCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetYammerActivityUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetYammerActivityUserCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetYammerActivityUserCountsExecute(r)
}

/*
ReportsGetYammerActivityUserCounts Invoke function getYammerActivityUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetYammerActivityUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetYammerActivityUserCounts(ctx _context.Context, period string) ApiReportsGetYammerActivityUserCountsRequest {
	return ApiReportsGetYammerActivityUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetYammerActivityUserCountsExecute(r ApiReportsGetYammerActivityUserCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetYammerActivityUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getYammerActivityUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetYammerActivityUserDetail15a5Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetYammerActivityUserDetail15a5Request) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetYammerActivityUserDetail15a5Execute(r)
}

/*
ReportsGetYammerActivityUserDetail15a5 Invoke function getYammerActivityUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetYammerActivityUserDetail15a5Request
*/
func (a *ReportsFunctionsApiService) ReportsGetYammerActivityUserDetail15a5(ctx _context.Context, period string) ApiReportsGetYammerActivityUserDetail15a5Request {
	return ApiReportsGetYammerActivityUserDetail15a5Request{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetYammerActivityUserDetail15a5Execute(r ApiReportsGetYammerActivityUserDetail15a5Request) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetYammerActivityUserDetail15a5")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getYammerActivityUserDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetYammerActivityUserDetailAc30Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	date string
}


func (r ApiReportsGetYammerActivityUserDetailAc30Request) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetYammerActivityUserDetailAc30Execute(r)
}

/*
ReportsGetYammerActivityUserDetailAc30 Invoke function getYammerActivityUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param date Usage: date={date}
 @return ApiReportsGetYammerActivityUserDetailAc30Request
*/
func (a *ReportsFunctionsApiService) ReportsGetYammerActivityUserDetailAc30(ctx _context.Context, date string) ApiReportsGetYammerActivityUserDetailAc30Request {
	return ApiReportsGetYammerActivityUserDetailAc30Request{
		ApiService: a,
		ctx: ctx,
		date: date,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetYammerActivityUserDetailAc30Execute(r ApiReportsGetYammerActivityUserDetailAc30Request) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetYammerActivityUserDetailAc30")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getYammerActivityUserDetail(date={date})"
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", _neturl.PathEscape(parameterToString(r.date, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetYammerDeviceUsageDistributionUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetYammerDeviceUsageDistributionUserCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetYammerDeviceUsageDistributionUserCountsExecute(r)
}

/*
ReportsGetYammerDeviceUsageDistributionUserCounts Invoke function getYammerDeviceUsageDistributionUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetYammerDeviceUsageDistributionUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetYammerDeviceUsageDistributionUserCounts(ctx _context.Context, period string) ApiReportsGetYammerDeviceUsageDistributionUserCountsRequest {
	return ApiReportsGetYammerDeviceUsageDistributionUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetYammerDeviceUsageDistributionUserCountsExecute(r ApiReportsGetYammerDeviceUsageDistributionUserCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetYammerDeviceUsageDistributionUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getYammerDeviceUsageDistributionUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetYammerDeviceUsageUserCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetYammerDeviceUsageUserCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetYammerDeviceUsageUserCountsExecute(r)
}

/*
ReportsGetYammerDeviceUsageUserCounts Invoke function getYammerDeviceUsageUserCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetYammerDeviceUsageUserCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetYammerDeviceUsageUserCounts(ctx _context.Context, period string) ApiReportsGetYammerDeviceUsageUserCountsRequest {
	return ApiReportsGetYammerDeviceUsageUserCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetYammerDeviceUsageUserCountsExecute(r ApiReportsGetYammerDeviceUsageUserCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetYammerDeviceUsageUserCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getYammerDeviceUsageUserCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetYammerDeviceUsageUserDetailCfadRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetYammerDeviceUsageUserDetailCfadRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetYammerDeviceUsageUserDetailCfadExecute(r)
}

/*
ReportsGetYammerDeviceUsageUserDetailCfad Invoke function getYammerDeviceUsageUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetYammerDeviceUsageUserDetailCfadRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetYammerDeviceUsageUserDetailCfad(ctx _context.Context, period string) ApiReportsGetYammerDeviceUsageUserDetailCfadRequest {
	return ApiReportsGetYammerDeviceUsageUserDetailCfadRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetYammerDeviceUsageUserDetailCfadExecute(r ApiReportsGetYammerDeviceUsageUserDetailCfadRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetYammerDeviceUsageUserDetailCfad")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getYammerDeviceUsageUserDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetYammerDeviceUsageUserDetailD0acRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	date string
}


func (r ApiReportsGetYammerDeviceUsageUserDetailD0acRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetYammerDeviceUsageUserDetailD0acExecute(r)
}

/*
ReportsGetYammerDeviceUsageUserDetailD0ac Invoke function getYammerDeviceUsageUserDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param date Usage: date={date}
 @return ApiReportsGetYammerDeviceUsageUserDetailD0acRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetYammerDeviceUsageUserDetailD0ac(ctx _context.Context, date string) ApiReportsGetYammerDeviceUsageUserDetailD0acRequest {
	return ApiReportsGetYammerDeviceUsageUserDetailD0acRequest{
		ApiService: a,
		ctx: ctx,
		date: date,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetYammerDeviceUsageUserDetailD0acExecute(r ApiReportsGetYammerDeviceUsageUserDetailD0acRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetYammerDeviceUsageUserDetailD0ac")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getYammerDeviceUsageUserDetail(date={date})"
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", _neturl.PathEscape(parameterToString(r.date, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetYammerGroupsActivityCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetYammerGroupsActivityCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetYammerGroupsActivityCountsExecute(r)
}

/*
ReportsGetYammerGroupsActivityCounts Invoke function getYammerGroupsActivityCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetYammerGroupsActivityCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetYammerGroupsActivityCounts(ctx _context.Context, period string) ApiReportsGetYammerGroupsActivityCountsRequest {
	return ApiReportsGetYammerGroupsActivityCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetYammerGroupsActivityCountsExecute(r ApiReportsGetYammerGroupsActivityCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetYammerGroupsActivityCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getYammerGroupsActivityCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetYammerGroupsActivityDetail0d7dRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetYammerGroupsActivityDetail0d7dRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetYammerGroupsActivityDetail0d7dExecute(r)
}

/*
ReportsGetYammerGroupsActivityDetail0d7d Invoke function getYammerGroupsActivityDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetYammerGroupsActivityDetail0d7dRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetYammerGroupsActivityDetail0d7d(ctx _context.Context, period string) ApiReportsGetYammerGroupsActivityDetail0d7dRequest {
	return ApiReportsGetYammerGroupsActivityDetail0d7dRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetYammerGroupsActivityDetail0d7dExecute(r ApiReportsGetYammerGroupsActivityDetail0d7dRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetYammerGroupsActivityDetail0d7d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getYammerGroupsActivityDetail(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetYammerGroupsActivityDetailDa9aRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	date string
}


func (r ApiReportsGetYammerGroupsActivityDetailDa9aRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetYammerGroupsActivityDetailDa9aExecute(r)
}

/*
ReportsGetYammerGroupsActivityDetailDa9a Invoke function getYammerGroupsActivityDetail

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param date Usage: date={date}
 @return ApiReportsGetYammerGroupsActivityDetailDa9aRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetYammerGroupsActivityDetailDa9a(ctx _context.Context, date string) ApiReportsGetYammerGroupsActivityDetailDa9aRequest {
	return ApiReportsGetYammerGroupsActivityDetailDa9aRequest{
		ApiService: a,
		ctx: ctx,
		date: date,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetYammerGroupsActivityDetailDa9aExecute(r ApiReportsGetYammerGroupsActivityDetailDa9aRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetYammerGroupsActivityDetailDa9a")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getYammerGroupsActivityDetail(date={date})"
	localVarPath = strings.Replace(localVarPath, "{"+"date"+"}", _neturl.PathEscape(parameterToString(r.date, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsGetYammerGroupsActivityGroupCountsRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsGetYammerGroupsActivityGroupCountsRequest) Execute() (MicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsGetYammerGroupsActivityGroupCountsExecute(r)
}

/*
ReportsGetYammerGroupsActivityGroupCounts Invoke function getYammerGroupsActivityGroupCounts

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsGetYammerGroupsActivityGroupCountsRequest
*/
func (a *ReportsFunctionsApiService) ReportsGetYammerGroupsActivityGroupCounts(ctx _context.Context, period string) ApiReportsGetYammerGroupsActivityGroupCountsRequest {
	return ApiReportsGetYammerGroupsActivityGroupCountsRequest{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return MicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsGetYammerGroupsActivityGroupCountsExecute(r ApiReportsGetYammerGroupsActivityGroupCountsRequest) (MicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsGetYammerGroupsActivityGroupCounts")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.getYammerGroupsActivityGroupCounts(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsManagedDeviceEnrollmentFailureDetails027eRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
}


func (r ApiReportsManagedDeviceEnrollmentFailureDetails027eRequest) Execute() (AnyOfmicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsManagedDeviceEnrollmentFailureDetails027eExecute(r)
}

/*
ReportsManagedDeviceEnrollmentFailureDetails027e Invoke function managedDeviceEnrollmentFailureDetails

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsManagedDeviceEnrollmentFailureDetails027eRequest
*/
func (a *ReportsFunctionsApiService) ReportsManagedDeviceEnrollmentFailureDetails027e(ctx _context.Context) ApiReportsManagedDeviceEnrollmentFailureDetails027eRequest {
	return ApiReportsManagedDeviceEnrollmentFailureDetails027eRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsManagedDeviceEnrollmentFailureDetails027eExecute(r ApiReportsManagedDeviceEnrollmentFailureDetails027eRequest) (AnyOfmicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsManagedDeviceEnrollmentFailureDetails027e")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.managedDeviceEnrollmentFailureDetails()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsManagedDeviceEnrollmentFailureDetails2b3dRequest struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	skip int32
	top int32
	filter string
	skipToken string
}


func (r ApiReportsManagedDeviceEnrollmentFailureDetails2b3dRequest) Execute() (AnyOfmicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsManagedDeviceEnrollmentFailureDetails2b3dExecute(r)
}

/*
ReportsManagedDeviceEnrollmentFailureDetails2b3d Invoke function managedDeviceEnrollmentFailureDetails

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param skip Usage: skip={skip}
 @param top Usage: top={top}
 @param filter Usage: filter={filter}
 @param skipToken Usage: skipToken={skipToken}
 @return ApiReportsManagedDeviceEnrollmentFailureDetails2b3dRequest
*/
func (a *ReportsFunctionsApiService) ReportsManagedDeviceEnrollmentFailureDetails2b3d(ctx _context.Context, skip int32, top int32, filter string, skipToken string) ApiReportsManagedDeviceEnrollmentFailureDetails2b3dRequest {
	return ApiReportsManagedDeviceEnrollmentFailureDetails2b3dRequest{
		ApiService: a,
		ctx: ctx,
		skip: skip,
		top: top,
		filter: filter,
		skipToken: skipToken,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsManagedDeviceEnrollmentFailureDetails2b3dExecute(r ApiReportsManagedDeviceEnrollmentFailureDetails2b3dRequest) (AnyOfmicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsManagedDeviceEnrollmentFailureDetails2b3d")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.managedDeviceEnrollmentFailureDetails(skip={skip},top={top},filter='{filter}',skipToken='{skipToken}')"
	localVarPath = strings.Replace(localVarPath, "{"+"skip"+"}", _neturl.PathEscape(parameterToString(r.skip, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"top"+"}", _neturl.PathEscape(parameterToString(r.top, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"filter"+"}", _neturl.PathEscape(parameterToString(r.filter, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"skipToken"+"}", _neturl.PathEscape(parameterToString(r.skipToken, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.skip < -2147483648 {
		return localVarReturnValue, nil, reportError("skip must be greater than -2147483648")
	}
	if r.skip > 2147483647 {
		return localVarReturnValue, nil, reportError("skip must be less than 2147483647")
	}
	if r.top < -2147483648 {
		return localVarReturnValue, nil, reportError("top must be greater than -2147483648")
	}
	if r.top > 2147483647 {
		return localVarReturnValue, nil, reportError("top must be less than 2147483647")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsManagedDeviceEnrollmentTopFailures4669Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
}


func (r ApiReportsManagedDeviceEnrollmentTopFailures4669Request) Execute() (AnyOfmicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsManagedDeviceEnrollmentTopFailures4669Execute(r)
}

/*
ReportsManagedDeviceEnrollmentTopFailures4669 Invoke function managedDeviceEnrollmentTopFailures

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiReportsManagedDeviceEnrollmentTopFailures4669Request
*/
func (a *ReportsFunctionsApiService) ReportsManagedDeviceEnrollmentTopFailures4669(ctx _context.Context) ApiReportsManagedDeviceEnrollmentTopFailures4669Request {
	return ApiReportsManagedDeviceEnrollmentTopFailures4669Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsManagedDeviceEnrollmentTopFailures4669Execute(r ApiReportsManagedDeviceEnrollmentTopFailures4669Request) (AnyOfmicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsManagedDeviceEnrollmentTopFailures4669")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.managedDeviceEnrollmentTopFailures()"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiReportsManagedDeviceEnrollmentTopFailuresAfd1Request struct {
	ctx _context.Context
	ApiService *ReportsFunctionsApiService
	period string
}


func (r ApiReportsManagedDeviceEnrollmentTopFailuresAfd1Request) Execute() (AnyOfmicrosoftGraphReport, *_nethttp.Response, error) {
	return r.ApiService.ReportsManagedDeviceEnrollmentTopFailuresAfd1Execute(r)
}

/*
ReportsManagedDeviceEnrollmentTopFailuresAfd1 Invoke function managedDeviceEnrollmentTopFailures

 @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param period Usage: period={period}
 @return ApiReportsManagedDeviceEnrollmentTopFailuresAfd1Request
*/
func (a *ReportsFunctionsApiService) ReportsManagedDeviceEnrollmentTopFailuresAfd1(ctx _context.Context, period string) ApiReportsManagedDeviceEnrollmentTopFailuresAfd1Request {
	return ApiReportsManagedDeviceEnrollmentTopFailuresAfd1Request{
		ApiService: a,
		ctx: ctx,
		period: period,
	}
}

// Execute executes the request
//  @return AnyOfmicrosoftGraphReport
func (a *ReportsFunctionsApiService) ReportsManagedDeviceEnrollmentTopFailuresAfd1Execute(r ApiReportsManagedDeviceEnrollmentTopFailuresAfd1Request) (AnyOfmicrosoftGraphReport, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  AnyOfmicrosoftGraphReport
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReportsFunctionsApiService.ReportsManagedDeviceEnrollmentTopFailuresAfd1")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/reports/microsoft.graph.managedDeviceEnrollmentTopFailures(period='{period}')"
	localVarPath = strings.Replace(localVarPath, "{"+"period"+"}", _neturl.PathEscape(parameterToString(r.period, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v OdataError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
