/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// UserTeamwork struct for UserTeamwork
type UserTeamwork struct {
	// The apps installed in the personal scope of this user.
	InstalledApps *[]MicrosoftGraphUserScopeTeamsAppInstallation `json:"installedApps,omitempty"`
}

// NewUserTeamwork instantiates a new UserTeamwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserTeamwork() *UserTeamwork {
	this := UserTeamwork{}
	return &this
}

// NewUserTeamworkWithDefaults instantiates a new UserTeamwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserTeamworkWithDefaults() *UserTeamwork {
	this := UserTeamwork{}
	return &this
}

// GetInstalledApps returns the InstalledApps field value if set, zero value otherwise.
func (o *UserTeamwork) GetInstalledApps() []MicrosoftGraphUserScopeTeamsAppInstallation {
	if o == nil || o.InstalledApps == nil {
		var ret []MicrosoftGraphUserScopeTeamsAppInstallation
		return ret
	}
	return *o.InstalledApps
}

// GetInstalledAppsOk returns a tuple with the InstalledApps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserTeamwork) GetInstalledAppsOk() (*[]MicrosoftGraphUserScopeTeamsAppInstallation, bool) {
	if o == nil || o.InstalledApps == nil {
		return nil, false
	}
	return o.InstalledApps, true
}

// HasInstalledApps returns a boolean if a field has been set.
func (o *UserTeamwork) HasInstalledApps() bool {
	if o != nil && o.InstalledApps != nil {
		return true
	}

	return false
}

// SetInstalledApps gets a reference to the given []MicrosoftGraphUserScopeTeamsAppInstallation and assigns it to the InstalledApps field.
func (o *UserTeamwork) SetInstalledApps(v []MicrosoftGraphUserScopeTeamsAppInstallation) {
	o.InstalledApps = &v
}

func (o UserTeamwork) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InstalledApps != nil {
		toSerialize["installedApps"] = o.InstalledApps
	}
	return json.Marshal(toSerialize)
}

type NullableUserTeamwork struct {
	value *UserTeamwork
	isSet bool
}

func (v NullableUserTeamwork) Get() *UserTeamwork {
	return v.value
}

func (v *NullableUserTeamwork) Set(val *UserTeamwork) {
	v.value = val
	v.isSet = true
}

func (v NullableUserTeamwork) IsSet() bool {
	return v.isSet
}

func (v *NullableUserTeamwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserTeamwork(val *UserTeamwork) *NullableUserTeamwork {
	return &NullableUserTeamwork{value: val, isSet: true}
}

func (v NullableUserTeamwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserTeamwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


