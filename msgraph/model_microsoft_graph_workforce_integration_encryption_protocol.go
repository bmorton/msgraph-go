/*
Partial Graph API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: v1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package msgraph

import (
	"encoding/json"
	"fmt"
)

// MicrosoftGraphWorkforceIntegrationEncryptionProtocol the model 'MicrosoftGraphWorkforceIntegrationEncryptionProtocol'
type MicrosoftGraphWorkforceIntegrationEncryptionProtocol string

// List of microsoft.graph.workforceIntegrationEncryptionProtocol
const (
	SHARED_SECRET MicrosoftGraphWorkforceIntegrationEncryptionProtocol = "sharedSecret"
	UNKNOWN_FUTURE_VALUE MicrosoftGraphWorkforceIntegrationEncryptionProtocol = "unknownFutureValue"
)

// All allowed values of MicrosoftGraphWorkforceIntegrationEncryptionProtocol enum
var AllowedMicrosoftGraphWorkforceIntegrationEncryptionProtocolEnumValues = []MicrosoftGraphWorkforceIntegrationEncryptionProtocol{
	"sharedSecret",
	"unknownFutureValue",
}

func (v *MicrosoftGraphWorkforceIntegrationEncryptionProtocol) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MicrosoftGraphWorkforceIntegrationEncryptionProtocol(value)
	for _, existing := range AllowedMicrosoftGraphWorkforceIntegrationEncryptionProtocolEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MicrosoftGraphWorkforceIntegrationEncryptionProtocol", value)
}

// NewMicrosoftGraphWorkforceIntegrationEncryptionProtocolFromValue returns a pointer to a valid MicrosoftGraphWorkforceIntegrationEncryptionProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMicrosoftGraphWorkforceIntegrationEncryptionProtocolFromValue(v string) (*MicrosoftGraphWorkforceIntegrationEncryptionProtocol, error) {
	ev := MicrosoftGraphWorkforceIntegrationEncryptionProtocol(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MicrosoftGraphWorkforceIntegrationEncryptionProtocol: valid values are %v", v, AllowedMicrosoftGraphWorkforceIntegrationEncryptionProtocolEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MicrosoftGraphWorkforceIntegrationEncryptionProtocol) IsValid() bool {
	for _, existing := range AllowedMicrosoftGraphWorkforceIntegrationEncryptionProtocolEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to microsoft.graph.workforceIntegrationEncryptionProtocol value
func (v MicrosoftGraphWorkforceIntegrationEncryptionProtocol) Ptr() *MicrosoftGraphWorkforceIntegrationEncryptionProtocol {
	return &v
}

type NullableMicrosoftGraphWorkforceIntegrationEncryptionProtocol struct {
	value *MicrosoftGraphWorkforceIntegrationEncryptionProtocol
	isSet bool
}

func (v NullableMicrosoftGraphWorkforceIntegrationEncryptionProtocol) Get() *MicrosoftGraphWorkforceIntegrationEncryptionProtocol {
	return v.value
}

func (v *NullableMicrosoftGraphWorkforceIntegrationEncryptionProtocol) Set(val *MicrosoftGraphWorkforceIntegrationEncryptionProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableMicrosoftGraphWorkforceIntegrationEncryptionProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableMicrosoftGraphWorkforceIntegrationEncryptionProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMicrosoftGraphWorkforceIntegrationEncryptionProtocol(val *MicrosoftGraphWorkforceIntegrationEncryptionProtocol) *NullableMicrosoftGraphWorkforceIntegrationEncryptionProtocol {
	return &NullableMicrosoftGraphWorkforceIntegrationEncryptionProtocol{value: val, isSet: true}
}

func (v NullableMicrosoftGraphWorkforceIntegrationEncryptionProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMicrosoftGraphWorkforceIntegrationEncryptionProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

